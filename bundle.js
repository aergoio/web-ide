(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
var $ = require('jquery');
var swal = require('sweetalert2');
var herajs = require('@herajs/client');
var chainId = '';
var aergo = null;
var showbox = false;

function install_extension_click() {
  var win = window.open('https://chrome.google.com/webstore/detail/aergo-connect/iopigoikekfcpcapjlkcdlokheickhpc', '_blank');
  win.focus();
  hide_box();
}

function hide_box() {
  showbox = false;
  $('#no-extension').remove();
}

function aergoConnectCall(action, responseType, data) {

  showbox = true;
  setTimeout(function() {
    if (!showbox) return;

    const box = '<div id="no-extension" class="no-extension swal2-container swal2-center">' +
    '<div class="swal2-content swal2-html-container" style="display: block;"><br>Nothing happened?</div>' +
    '<button id="install-extension" type="button" class="swal2-confirm swal2-styled" aria-label="" ' +
    'style="display: inline-block; background-color: rgb(229, 0, 125); border-left-color: rgb(229, 0, 125);' +
    'border-right-color: rgb(229, 0, 125);">Install Aergo Connect</button></div>';

    $('body').append(box);
    $("#install-extension").click(install_extension_click);

  }, 3000);

  return new Promise((resolve, reject) => {
    window.addEventListener(responseType, function(event) {
      hide_box();
      if ('error' in event.detail) {
        reject(event.detail.error);
      } else {
        resolve(event.detail);
      }
    }, { once: true });
    window.postMessage({
      type: 'AERGO_REQUEST',
      action: action,
      data: data,
    }, '*');
  });

}

async function getActiveAccount() {
  const result = await aergoConnectCall('ACTIVE_ACCOUNT', 'AERGO_ACTIVE_ACCOUNT', {});
  chainId = result.account.chainId;
  return result.account.address;
}

async function startTxSendRequest(txdata) {
  const result = await aergoConnectCall('SEND_TX', 'AERGO_SEND_TX_RESULT', txdata);
  console.log('AERGO_SEND_TX_RESULT', result);

  swal.fire({
    title: 'Transaction sent!',
    text: 'Waiting inclusion on blockchain...',
    allowEscapeKey: false,
    allowOutsideClick: false,
    onOpen: () => {
      swal.showLoading();
    }
  })

  // wait until the transaction is executed and included in a block, then get the receipt
  const receipt = await aergo.waitForTransactionReceipt(result.hash);
  console.log("receipt", receipt);

  if (receipt.status != "SUCCESS") {
    swal.fire({
      icon: 'error',
      title: 'Failed!',
      text: receipt.result
    })
    return false
  }

  var site = chainId.replace('aergo','aergoscan');
  if (site == 'aergoscan.io') site = 'mainnet.aergoscan.io';
  var url = 'https://' + site + '/transaction/' + result.hash;

  swal.fire({
    icon: 'success',
    title: 'Congratulations!',
    html: '<br>Your smart contract was deployed!<br>&nbsp;',
    confirmButtonText: 'View on Aergoscan',
    cancelButtonText: 'Close',
    showCancelButton: true,
    width: 600,
    padding: '3em',
    confirmButtonColor: '#e5007d',
    background: '#fff',
    backdrop: `
      rgba(0,0,123,0.4)
      url("nyan-cat.gif")
      left top
      no-repeat
    `,
    preConfirm: function() {
      var win = window.open(url, '_blank');
      win.focus();
    }
  })

}


function uint8ToBase64(buffer) {
  var binary = '';
  var len = buffer.byteLength;
  for (var i = 0; i < len; i++) {
    binary += String.fromCharCode(buffer[i]);
  }
  return window.btoa( binary );
}

function encode_utf8(s) {
  return unescape(encodeURIComponent(s));
}

async function deploy_contract(contract_address, sourceCode, encodedByteCode) {

  // get the account information, including the chain to use
  const account_address = await getActiveAccount();

  // connect to the chain, if not done yet
  if (!aergo) {
    var url
    if (chainId == "aergo.io") {
      url = "mainnet-api-http.aergo.io"
    } else if (chainId == "testnet.aergo.io") {
      url = "testnet-api-http.aergo.io"
    } else if (chainId == "alpha.aergo.io") {
      url = "alpha-api-http.aergo.io"
    }
    url = 'http://' + url + ':7845'
    aergo = new herajs.AergoClient({}, new herajs.GrpcWebProvider({url: url}))
  }

  // retrieve the blockchain info from the node
  const info = await aergo.getChainInfo()
  console.log('hardfork version:', info.chainid.version);

  // check the current hardfork version
  if (info.chainid.version >= 4) {
    // deploy the source code
    const contract = herajs.Contract.fromSourceCode(sourceCode);
    const payload = contract.asPayload([]);
  } else {
    // deploy the compiled byte code
    const contract = herajs.Contract.fromCode(encodedByteCode);
    const payload = uint8ToBase64(contract.asPayload([]));
  }

  var txdata = {
    type: (contract_address == null) ? 6 : 2,
    from: account_address,
    to: contract_address,
    amount: 0,
    payload: payload
  }
  console.log(txdata)

  startTxSendRequest(txdata);
}

function check_contract_code(contract_address){

  var sourceCode = editor.getValue();
  //sourceCode = btoa(encode_utf8(sourceCode));

  $.ajax({
    type: 'POST',
    url: 'https://luac.aergo.io/compile',
    crossDomain: true,
    data: btoa(encode_utf8(sourceCode)),
    dataType: 'text',
    success: async function(responseData, textStatus, jqXHR) {
        var value = responseData;
        if (value.substring(0,8) != 'result: '){
          swal.fire({
            icon: 'error',
            title: 'Compilation failed!',
            text: value
          })
          return;
        }
        const encodedByteCode = value.substring(8).trim();
        deploy_contract(contract_address, sourceCode, encodedByteCode)
    },
    error: function (responseData, textStatus, errorThrown) {
        swal.fire({
          icon: 'error',
          title: 'Compilation failed!',
          text: 'Failed to contact the compiler webservice: ' + textStatus
        })
    }
  });

}

function process_deploy(contract_address){
  check_contract_code(contract_address)
}

function deploy(){
  process_deploy(null);
  return false;
}

function redeploy() {

  swal.fire({
    title: 'Redeploy',
    html: '<br>Address of existing contract:',
    input: 'text',
    inputAttributes: {
      autocapitalize: 'off'
    },
    confirmButtonColor: '#e5007d',
    showCancelButton: true
  }).then((result) => {
    if (result.isConfirmed && result.value!='') {
      process_deploy(result.value);
    }
  })

  return false;
}


function fileopen() {

  $('<input type="file" accept=".lua">').on('change', function() {
    var file = this.files[0];
    if (!file) return;
    var reader = new FileReader();
    reader.onload = function(e) {
      var contents = e.target.result;
      editor.setValue(contents,true);
    };
    reader.readAsText(file);
  }).click();

  return false;
}

function filesave() {
  var content = editor.getValue();
  var pom = document.createElement('a');
  pom.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(content));
  pom.setAttribute('download', 'smart-contract.lua');
  if (document.createEvent) {
    var event = document.createEvent('MouseEvents');
    event.initEvent('click', true, true);
    pom.dispatchEvent(event);
  } else {
    pom.click();
  }
  return false;
}

document.body.onload = function() {

  var content = localStorage.getItem('code')
  if (content) {
    editor.setValue(content,true);
  }

  setInterval(function(){
    localStorage.setItem('code', editor.getValue())
  }, 60000)

}

document.getElementById("deploy").onclick = deploy;
document.getElementById("redeploy").onclick = redeploy;
document.getElementById("fileopen").onclick = fileopen;
document.getElementById("filesave").onclick = filesave;

function hide_menu() {
  var menu = document.getElementById("menu")
  menu.style.display = "none";
  setTimeout(function() {
    menu.style.removeProperty("display");
  }, 30);
}

document.getElementById("find").onclick = function() {
  editor.execCommand("find");
  hide_menu();
  return false;
}
document.getElementById("replace").onclick = function() {
  editor.execCommand("replace");
  hide_menu();
  return false;
}
document.getElementById("settings").onclick = function() {
  editor.execCommand("showSettingsMenu");
  hide_menu();
  return false;
}

},{"@herajs/client":2,"jquery":6,"sweetalert2":7}],2:[function(require,module,exports){
(function (global,Buffer){
/*!
 * herajs v0.20.3
 * (c) 2020 AERGO
 * Released under MIT license.
 */
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = global || self, factory(global.herajs = {}));
}(this, (function (exports) { 'use strict';

  function _typeof(obj) {
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function (obj) {
        return typeof obj;
      };
    } else {
      _typeof = function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
      var info = gen[key](arg);
      var value = info.value;
    } catch (error) {
      reject(error);
      return;
    }

    if (info.done) {
      resolve(value);
    } else {
      Promise.resolve(value).then(_next, _throw);
    }
  }

  function _asyncToGenerator(fn) {
    return function () {
      var self = this,
          args = arguments;
      return new Promise(function (resolve, reject) {
        var gen = fn.apply(self, args);

        function _next(value) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
        }

        function _throw(err) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
        }

        _next(undefined);
      });
    };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly) symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
      keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};

      if (i % 2) {
        ownKeys(Object(source), true).forEach(function (key) {
          _defineProperty(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys(Object(source)).forEach(function (key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }

    return target;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
  }

  function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
      return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
  }

  function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    };

    return _setPrototypeOf(o, p);
  }

  function isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;

    try {
      Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
      return true;
    } catch (e) {
      return false;
    }
  }

  function _construct(Parent, args, Class) {
    if (isNativeReflectConstruct()) {
      _construct = Reflect.construct;
    } else {
      _construct = function _construct(Parent, args, Class) {
        var a = [null];
        a.push.apply(a, args);
        var Constructor = Function.bind.apply(Parent, a);
        var instance = new Constructor();
        if (Class) _setPrototypeOf(instance, Class.prototype);
        return instance;
      };
    }

    return _construct.apply(null, arguments);
  }

  function _isNativeFunction(fn) {
    return Function.toString.call(fn).indexOf("[native code]") !== -1;
  }

  function _wrapNativeSuper(Class) {
    var _cache = typeof Map === "function" ? new Map() : undefined;

    _wrapNativeSuper = function _wrapNativeSuper(Class) {
      if (Class === null || !_isNativeFunction(Class)) return Class;

      if (typeof Class !== "function") {
        throw new TypeError("Super expression must either be null or a function");
      }

      if (typeof _cache !== "undefined") {
        if (_cache.has(Class)) return _cache.get(Class);

        _cache.set(Class, Wrapper);
      }

      function Wrapper() {
        return _construct(Class, arguments, _getPrototypeOf(this).constructor);
      }

      Wrapper.prototype = Object.create(Class.prototype, {
        constructor: {
          value: Wrapper,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
      return _setPrototypeOf(Wrapper, Class);
    };

    return _wrapNativeSuper(Class);
  }

  function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return self;
  }

  function _possibleConstructorReturn(self, call) {
    if (call && (typeof call === "object" || typeof call === "function")) {
      return call;
    }

    return _assertThisInitialized(self);
  }

  function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
  }

  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
  }

  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

      return arr2;
    }
  }

  function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }

  function _iterableToArray(iter) {
    if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
  }

  function _iterableToArrayLimit(arr, i) {
    if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) {
      return;
    }

    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance");
  }

  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance");
  }

  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  function unwrapExports (x) {
  	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
  }

  function createCommonjsModule(fn, module) {
  	return module = { exports: {} }, fn(module, module.exports), module.exports;
  }

  var runtime_1 = createCommonjsModule(function (module) {
    /**
     * Copyright (c) 2014-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    var runtime = function (exports) {

      var Op = Object.prototype;
      var hasOwn = Op.hasOwnProperty;
      var undefined$1; // More compressible than void 0.

      var $Symbol = typeof Symbol === "function" ? Symbol : {};
      var iteratorSymbol = $Symbol.iterator || "@@iterator";
      var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
      var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

      function wrap(innerFn, outerFn, self, tryLocsList) {
        // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
        var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
        var generator = Object.create(protoGenerator.prototype);
        var context = new Context(tryLocsList || []); // The ._invoke method unifies the implementations of the .next,
        // .throw, and .return methods.

        generator._invoke = makeInvokeMethod(innerFn, self, context);
        return generator;
      }

      exports.wrap = wrap; // Try/catch helper to minimize deoptimizations. Returns a completion
      // record like context.tryEntries[i].completion. This interface could
      // have been (and was previously) designed to take a closure to be
      // invoked without arguments, but in all the cases we care about we
      // already have an existing method we want to call, so there's no need
      // to create a new function object. We can even get away with assuming
      // the method takes exactly one argument, since that happens to be true
      // in every case, so we don't have to touch the arguments object. The
      // only additional allocation required is the completion record, which
      // has a stable shape and so hopefully should be cheap to allocate.

      function tryCatch(fn, obj, arg) {
        try {
          return {
            type: "normal",
            arg: fn.call(obj, arg)
          };
        } catch (err) {
          return {
            type: "throw",
            arg: err
          };
        }
      }

      var GenStateSuspendedStart = "suspendedStart";
      var GenStateSuspendedYield = "suspendedYield";
      var GenStateExecuting = "executing";
      var GenStateCompleted = "completed"; // Returning this object from the innerFn has the same effect as
      // breaking out of the dispatch switch statement.

      var ContinueSentinel = {}; // Dummy constructor functions that we use as the .constructor and
      // .constructor.prototype properties for functions that return Generator
      // objects. For full spec compliance, you may wish to configure your
      // minifier not to mangle the names of these two functions.

      function Generator() {}

      function GeneratorFunction() {}

      function GeneratorFunctionPrototype() {} // This is a polyfill for %IteratorPrototype% for environments that
      // don't natively support it.


      var IteratorPrototype = {};

      IteratorPrototype[iteratorSymbol] = function () {
        return this;
      };

      var getProto = Object.getPrototypeOf;
      var NativeIteratorPrototype = getProto && getProto(getProto(values([])));

      if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
        // This environment has a native %IteratorPrototype%; use it instead
        // of the polyfill.
        IteratorPrototype = NativeIteratorPrototype;
      }

      var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
      GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
      GeneratorFunctionPrototype.constructor = GeneratorFunction;
      GeneratorFunctionPrototype[toStringTagSymbol] = GeneratorFunction.displayName = "GeneratorFunction"; // Helper for defining the .next, .throw, and .return methods of the
      // Iterator interface in terms of a single ._invoke method.

      function defineIteratorMethods(prototype) {
        ["next", "throw", "return"].forEach(function (method) {
          prototype[method] = function (arg) {
            return this._invoke(method, arg);
          };
        });
      }

      exports.isGeneratorFunction = function (genFun) {
        var ctor = typeof genFun === "function" && genFun.constructor;
        return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
      };

      exports.mark = function (genFun) {
        if (Object.setPrototypeOf) {
          Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
        } else {
          genFun.__proto__ = GeneratorFunctionPrototype;

          if (!(toStringTagSymbol in genFun)) {
            genFun[toStringTagSymbol] = "GeneratorFunction";
          }
        }

        genFun.prototype = Object.create(Gp);
        return genFun;
      }; // Within the body of any async function, `await x` is transformed to
      // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
      // `hasOwn.call(value, "__await")` to determine if the yielded value is
      // meant to be awaited.


      exports.awrap = function (arg) {
        return {
          __await: arg
        };
      };

      function AsyncIterator(generator) {
        function invoke(method, arg, resolve, reject) {
          var record = tryCatch(generator[method], generator, arg);

          if (record.type === "throw") {
            reject(record.arg);
          } else {
            var result = record.arg;
            var value = result.value;

            if (value && _typeof(value) === "object" && hasOwn.call(value, "__await")) {
              return Promise.resolve(value.__await).then(function (value) {
                invoke("next", value, resolve, reject);
              }, function (err) {
                invoke("throw", err, resolve, reject);
              });
            }

            return Promise.resolve(value).then(function (unwrapped) {
              // When a yielded Promise is resolved, its final value becomes
              // the .value of the Promise<{value,done}> result for the
              // current iteration.
              result.value = unwrapped;
              resolve(result);
            }, function (error) {
              // If a rejected Promise was yielded, throw the rejection back
              // into the async generator function so it can be handled there.
              return invoke("throw", error, resolve, reject);
            });
          }
        }

        var previousPromise;

        function enqueue(method, arg) {
          function callInvokeWithMethodAndArg() {
            return new Promise(function (resolve, reject) {
              invoke(method, arg, resolve, reject);
            });
          }

          return previousPromise = // If enqueue has been called before, then we want to wait until
          // all previous Promises have been resolved before calling invoke,
          // so that results are always delivered in the correct order. If
          // enqueue has not been called before, then it is important to
          // call invoke immediately, without waiting on a callback to fire,
          // so that the async generator function has the opportunity to do
          // any necessary setup in a predictable way. This predictability
          // is why the Promise constructor synchronously invokes its
          // executor callback, and why async functions synchronously
          // execute code before the first await. Since we implement simple
          // async functions in terms of async generators, it is especially
          // important to get this right, even though it requires care.
          previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
        } // Define the unified helper method that is used to implement .next,
        // .throw, and .return (see defineIteratorMethods).


        this._invoke = enqueue;
      }

      defineIteratorMethods(AsyncIterator.prototype);

      AsyncIterator.prototype[asyncIteratorSymbol] = function () {
        return this;
      };

      exports.AsyncIterator = AsyncIterator; // Note that simple async functions are implemented on top of
      // AsyncIterator objects; they just return a Promise for the value of
      // the final result produced by the iterator.

      exports.async = function (innerFn, outerFn, self, tryLocsList) {
        var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList));
        return exports.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.
        : iter.next().then(function (result) {
          return result.done ? result.value : iter.next();
        });
      };

      function makeInvokeMethod(innerFn, self, context) {
        var state = GenStateSuspendedStart;
        return function invoke(method, arg) {
          if (state === GenStateExecuting) {
            throw new Error("Generator is already running");
          }

          if (state === GenStateCompleted) {
            if (method === "throw") {
              throw arg;
            } // Be forgiving, per 25.3.3.3.3 of the spec:
            // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume


            return doneResult();
          }

          context.method = method;
          context.arg = arg;

          while (true) {
            var delegate = context.delegate;

            if (delegate) {
              var delegateResult = maybeInvokeDelegate(delegate, context);

              if (delegateResult) {
                if (delegateResult === ContinueSentinel) continue;
                return delegateResult;
              }
            }

            if (context.method === "next") {
              // Setting context._sent for legacy support of Babel's
              // function.sent implementation.
              context.sent = context._sent = context.arg;
            } else if (context.method === "throw") {
              if (state === GenStateSuspendedStart) {
                state = GenStateCompleted;
                throw context.arg;
              }

              context.dispatchException(context.arg);
            } else if (context.method === "return") {
              context.abrupt("return", context.arg);
            }

            state = GenStateExecuting;
            var record = tryCatch(innerFn, self, context);

            if (record.type === "normal") {
              // If an exception is thrown from innerFn, we leave state ===
              // GenStateExecuting and loop back for another invocation.
              state = context.done ? GenStateCompleted : GenStateSuspendedYield;

              if (record.arg === ContinueSentinel) {
                continue;
              }

              return {
                value: record.arg,
                done: context.done
              };
            } else if (record.type === "throw") {
              state = GenStateCompleted; // Dispatch the exception by looping back around to the
              // context.dispatchException(context.arg) call above.

              context.method = "throw";
              context.arg = record.arg;
            }
          }
        };
      } // Call delegate.iterator[context.method](context.arg) and handle the
      // result, either by returning a { value, done } result from the
      // delegate iterator, or by modifying context.method and context.arg,
      // setting context.delegate to null, and returning the ContinueSentinel.


      function maybeInvokeDelegate(delegate, context) {
        var method = delegate.iterator[context.method];

        if (method === undefined$1) {
          // A .throw or .return when the delegate iterator has no .throw
          // method always terminates the yield* loop.
          context.delegate = null;

          if (context.method === "throw") {
            // Note: ["return"] must be used for ES3 parsing compatibility.
            if (delegate.iterator["return"]) {
              // If the delegate iterator has a return method, give it a
              // chance to clean up.
              context.method = "return";
              context.arg = undefined$1;
              maybeInvokeDelegate(delegate, context);

              if (context.method === "throw") {
                // If maybeInvokeDelegate(context) changed context.method from
                // "return" to "throw", let that override the TypeError below.
                return ContinueSentinel;
              }
            }

            context.method = "throw";
            context.arg = new TypeError("The iterator does not provide a 'throw' method");
          }

          return ContinueSentinel;
        }

        var record = tryCatch(method, delegate.iterator, context.arg);

        if (record.type === "throw") {
          context.method = "throw";
          context.arg = record.arg;
          context.delegate = null;
          return ContinueSentinel;
        }

        var info = record.arg;

        if (!info) {
          context.method = "throw";
          context.arg = new TypeError("iterator result is not an object");
          context.delegate = null;
          return ContinueSentinel;
        }

        if (info.done) {
          // Assign the result of the finished delegate to the temporary
          // variable specified by delegate.resultName (see delegateYield).
          context[delegate.resultName] = info.value; // Resume execution at the desired location (see delegateYield).

          context.next = delegate.nextLoc; // If context.method was "throw" but the delegate handled the
          // exception, let the outer generator proceed normally. If
          // context.method was "next", forget context.arg since it has been
          // "consumed" by the delegate iterator. If context.method was
          // "return", allow the original .return call to continue in the
          // outer generator.

          if (context.method !== "return") {
            context.method = "next";
            context.arg = undefined$1;
          }
        } else {
          // Re-yield the result returned by the delegate method.
          return info;
        } // The delegate iterator is finished, so forget it and continue with
        // the outer generator.


        context.delegate = null;
        return ContinueSentinel;
      } // Define Generator.prototype.{next,throw,return} in terms of the
      // unified ._invoke helper method.


      defineIteratorMethods(Gp);
      Gp[toStringTagSymbol] = "Generator"; // A Generator should always return itself as the iterator object when the
      // @@iterator function is called on it. Some browsers' implementations of the
      // iterator prototype chain incorrectly implement this, causing the Generator
      // object to not be returned from this call. This ensures that doesn't happen.
      // See https://github.com/facebook/regenerator/issues/274 for more details.

      Gp[iteratorSymbol] = function () {
        return this;
      };

      Gp.toString = function () {
        return "[object Generator]";
      };

      function pushTryEntry(locs) {
        var entry = {
          tryLoc: locs[0]
        };

        if (1 in locs) {
          entry.catchLoc = locs[1];
        }

        if (2 in locs) {
          entry.finallyLoc = locs[2];
          entry.afterLoc = locs[3];
        }

        this.tryEntries.push(entry);
      }

      function resetTryEntry(entry) {
        var record = entry.completion || {};
        record.type = "normal";
        delete record.arg;
        entry.completion = record;
      }

      function Context(tryLocsList) {
        // The root entry object (effectively a try statement without a catch
        // or a finally block) gives us a place to store values thrown from
        // locations where there is no enclosing try statement.
        this.tryEntries = [{
          tryLoc: "root"
        }];
        tryLocsList.forEach(pushTryEntry, this);
        this.reset(true);
      }

      exports.keys = function (object) {
        var keys = [];

        for (var key in object) {
          keys.push(key);
        }

        keys.reverse(); // Rather than returning an object with a next method, we keep
        // things simple and return the next function itself.

        return function next() {
          while (keys.length) {
            var key = keys.pop();

            if (key in object) {
              next.value = key;
              next.done = false;
              return next;
            }
          } // To avoid creating an additional object, we just hang the .value
          // and .done properties off the next function object itself. This
          // also ensures that the minifier will not anonymize the function.


          next.done = true;
          return next;
        };
      };

      function values(iterable) {
        if (iterable) {
          var iteratorMethod = iterable[iteratorSymbol];

          if (iteratorMethod) {
            return iteratorMethod.call(iterable);
          }

          if (typeof iterable.next === "function") {
            return iterable;
          }

          if (!isNaN(iterable.length)) {
            var i = -1,
                next = function next() {
              while (++i < iterable.length) {
                if (hasOwn.call(iterable, i)) {
                  next.value = iterable[i];
                  next.done = false;
                  return next;
                }
              }

              next.value = undefined$1;
              next.done = true;
              return next;
            };

            return next.next = next;
          }
        } // Return an iterator with no values.


        return {
          next: doneResult
        };
      }

      exports.values = values;

      function doneResult() {
        return {
          value: undefined$1,
          done: true
        };
      }

      Context.prototype = {
        constructor: Context,
        reset: function reset(skipTempReset) {
          this.prev = 0;
          this.next = 0; // Resetting context._sent for legacy support of Babel's
          // function.sent implementation.

          this.sent = this._sent = undefined$1;
          this.done = false;
          this.delegate = null;
          this.method = "next";
          this.arg = undefined$1;
          this.tryEntries.forEach(resetTryEntry);

          if (!skipTempReset) {
            for (var name in this) {
              // Not sure about the optimal order of these conditions:
              if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
                this[name] = undefined$1;
              }
            }
          }
        },
        stop: function stop() {
          this.done = true;
          var rootEntry = this.tryEntries[0];
          var rootRecord = rootEntry.completion;

          if (rootRecord.type === "throw") {
            throw rootRecord.arg;
          }

          return this.rval;
        },
        dispatchException: function dispatchException(exception) {
          if (this.done) {
            throw exception;
          }

          var context = this;

          function handle(loc, caught) {
            record.type = "throw";
            record.arg = exception;
            context.next = loc;

            if (caught) {
              // If the dispatched exception was caught by a catch block,
              // then let that catch block handle the exception normally.
              context.method = "next";
              context.arg = undefined$1;
            }

            return !!caught;
          }

          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            var record = entry.completion;

            if (entry.tryLoc === "root") {
              // Exception thrown outside of any try block that could handle
              // it, so set the completion value of the entire function to
              // throw the exception.
              return handle("end");
            }

            if (entry.tryLoc <= this.prev) {
              var hasCatch = hasOwn.call(entry, "catchLoc");
              var hasFinally = hasOwn.call(entry, "finallyLoc");

              if (hasCatch && hasFinally) {
                if (this.prev < entry.catchLoc) {
                  return handle(entry.catchLoc, true);
                } else if (this.prev < entry.finallyLoc) {
                  return handle(entry.finallyLoc);
                }
              } else if (hasCatch) {
                if (this.prev < entry.catchLoc) {
                  return handle(entry.catchLoc, true);
                }
              } else if (hasFinally) {
                if (this.prev < entry.finallyLoc) {
                  return handle(entry.finallyLoc);
                }
              } else {
                throw new Error("try statement without catch or finally");
              }
            }
          }
        },
        abrupt: function abrupt(type, arg) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
              var finallyEntry = entry;
              break;
            }
          }

          if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
            // Ignore the finally entry if control is not jumping to a
            // location outside the try/catch block.
            finallyEntry = null;
          }

          var record = finallyEntry ? finallyEntry.completion : {};
          record.type = type;
          record.arg = arg;

          if (finallyEntry) {
            this.method = "next";
            this.next = finallyEntry.finallyLoc;
            return ContinueSentinel;
          }

          return this.complete(record);
        },
        complete: function complete(record, afterLoc) {
          if (record.type === "throw") {
            throw record.arg;
          }

          if (record.type === "break" || record.type === "continue") {
            this.next = record.arg;
          } else if (record.type === "return") {
            this.rval = this.arg = record.arg;
            this.method = "return";
            this.next = "end";
          } else if (record.type === "normal" && afterLoc) {
            this.next = afterLoc;
          }

          return ContinueSentinel;
        },
        finish: function finish(finallyLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.finallyLoc === finallyLoc) {
              this.complete(entry.completion, entry.afterLoc);
              resetTryEntry(entry);
              return ContinueSentinel;
            }
          }
        },
        "catch": function _catch(tryLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc === tryLoc) {
              var record = entry.completion;

              if (record.type === "throw") {
                var thrown = record.arg;
                resetTryEntry(entry);
              }

              return thrown;
            }
          } // The context.catch method must only be called with a location
          // argument that corresponds to a known catch block.


          throw new Error("illegal catch attempt");
        },
        delegateYield: function delegateYield(iterable, resultName, nextLoc) {
          this.delegate = {
            iterator: values(iterable),
            resultName: resultName,
            nextLoc: nextLoc
          };

          if (this.method === "next") {
            // Deliberately forget the last sent value so that we don't
            // accidentally pass it on to the delegate.
            this.arg = undefined$1;
          }

          return ContinueSentinel;
        }
      }; // Regardless of whether this script is executing as a CommonJS module
      // or not, return the runtime object so that we can declare the variable
      // regeneratorRuntime in the outer scope, which allows this module to be
      // injected easily by `bin/regenerator --include-runtime script.js`.

      return exports;
    }( // If this script is executing as a CommonJS module, use module.exports
    // as the regeneratorRuntime namespace. Otherwise create a new empty
    // object. Either way, the resulting object will be used to initialize
    // the regeneratorRuntime variable at the top of this file.
     module.exports );

    try {
      regeneratorRuntime = runtime;
    } catch (accidentalStrictMode) {
      // This module should not be running in strict mode, so the above
      // assignment should always work unless something is misconfigured. Just
      // in case runtime.js accidentally runs in strict mode, we can escape
      // strict mode using a global Function call. This could conceivably fail
      // if a Content Security Policy forbids using Function, but in that case
      // the proper solution is to fix the accidental strict mode problem. If
      // you've misconfigured your bundler to force strict mode and applied a
      // CSP to forbid Function, and you're not willing to fix either of those
      // problems, please detail your unique predicament in a GitHub issue.
      Function("r", "regeneratorRuntime = r")(runtime);
    }
  });

  var global$1 = typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {};

  var lookup = [];
  var revLookup = [];
  var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
  var inited = false;

  function init() {
    inited = true;
    var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

    for (var i = 0, len = code.length; i < len; ++i) {
      lookup[i] = code[i];
      revLookup[code.charCodeAt(i)] = i;
    }

    revLookup['-'.charCodeAt(0)] = 62;
    revLookup['_'.charCodeAt(0)] = 63;
  }

  function toByteArray(b64) {
    if (!inited) {
      init();
    }

    var i, j, l, tmp, placeHolders, arr;
    var len = b64.length;

    if (len % 4 > 0) {
      throw new Error('Invalid string. Length must be a multiple of 4');
    } // the number of equal signs (place holders)
    // if there are two placeholders, than the two characters before it
    // represent one byte
    // if there is only one, then the three characters before it represent 2 bytes
    // this is just a cheap hack to not do indexOf twice


    placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0; // base64 is 4/3 + up to two characters of the original data

    arr = new Arr(len * 3 / 4 - placeHolders); // if there are placeholders, only get up to the last complete 4 chars

    l = placeHolders > 0 ? len - 4 : len;
    var L = 0;

    for (i = 0, j = 0; i < l; i += 4, j += 3) {
      tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
      arr[L++] = tmp >> 16 & 0xFF;
      arr[L++] = tmp >> 8 & 0xFF;
      arr[L++] = tmp & 0xFF;
    }

    if (placeHolders === 2) {
      tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
      arr[L++] = tmp & 0xFF;
    } else if (placeHolders === 1) {
      tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
      arr[L++] = tmp >> 8 & 0xFF;
      arr[L++] = tmp & 0xFF;
    }

    return arr;
  }

  function tripletToBase64(num) {
    return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
  }

  function encodeChunk(uint8, start, end) {
    var tmp;
    var output = [];

    for (var i = start; i < end; i += 3) {
      tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + uint8[i + 2];
      output.push(tripletToBase64(tmp));
    }

    return output.join('');
  }

  function fromByteArray(uint8) {
    if (!inited) {
      init();
    }

    var tmp;
    var len = uint8.length;
    var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes

    var output = '';
    var parts = [];
    var maxChunkLength = 16383; // must be multiple of 3
    // go through the array every three bytes, we'll deal with trailing stuff later

    for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
      parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
    } // pad the end with zeros, but make sure to not forget the extra bytes


    if (extraBytes === 1) {
      tmp = uint8[len - 1];
      output += lookup[tmp >> 2];
      output += lookup[tmp << 4 & 0x3F];
      output += '==';
    } else if (extraBytes === 2) {
      tmp = (uint8[len - 2] << 8) + uint8[len - 1];
      output += lookup[tmp >> 10];
      output += lookup[tmp >> 4 & 0x3F];
      output += lookup[tmp << 2 & 0x3F];
      output += '=';
    }

    parts.push(output);
    return parts.join('');
  }

  function read(buffer, offset, isLE, mLen, nBytes) {
    var e, m;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var nBits = -7;
    var i = isLE ? nBytes - 1 : 0;
    var d = isLE ? -1 : 1;
    var s = buffer[offset + i];
    i += d;
    e = s & (1 << -nBits) - 1;
    s >>= -nBits;
    nBits += eLen;

    for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

    m = e & (1 << -nBits) - 1;
    e >>= -nBits;
    nBits += mLen;

    for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

    if (e === 0) {
      e = 1 - eBias;
    } else if (e === eMax) {
      return m ? NaN : (s ? -1 : 1) * Infinity;
    } else {
      m = m + Math.pow(2, mLen);
      e = e - eBias;
    }

    return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
  }
  function write(buffer, value, offset, isLE, mLen, nBytes) {
    var e, m, c;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
    var i = isLE ? 0 : nBytes - 1;
    var d = isLE ? 1 : -1;
    var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
    value = Math.abs(value);

    if (isNaN(value) || value === Infinity) {
      m = isNaN(value) ? 1 : 0;
      e = eMax;
    } else {
      e = Math.floor(Math.log(value) / Math.LN2);

      if (value * (c = Math.pow(2, -e)) < 1) {
        e--;
        c *= 2;
      }

      if (e + eBias >= 1) {
        value += rt / c;
      } else {
        value += rt * Math.pow(2, 1 - eBias);
      }

      if (value * c >= 2) {
        e++;
        c /= 2;
      }

      if (e + eBias >= eMax) {
        m = 0;
        e = eMax;
      } else if (e + eBias >= 1) {
        m = (value * c - 1) * Math.pow(2, mLen);
        e = e + eBias;
      } else {
        m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
        e = 0;
      }
    }

    for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

    e = e << mLen | m;
    eLen += mLen;

    for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

    buffer[offset + i - d] |= s * 128;
  }

  var toString = {}.toString;
  var isArray = Array.isArray || function (arr) {
    return toString.call(arr) == '[object Array]';
  };

  var INSPECT_MAX_BYTES = 50;
  /**
   * If `Buffer.TYPED_ARRAY_SUPPORT`:
   *   === true    Use Uint8Array implementation (fastest)
   *   === false   Use Object implementation (most compatible, even IE6)
   *
   * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
   * Opera 11.6+, iOS 4.2+.
   *
   * Due to various browser bugs, sometimes the Object implementation will be used even
   * when the browser supports typed arrays.
   *
   * Note:
   *
   *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
   *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
   *
   *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
   *
   *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
   *     incorrect length in some situations.

   * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
   * get the Object implementation, which is slower but behaves correctly.
   */

  Buffer$1.TYPED_ARRAY_SUPPORT = global$1.TYPED_ARRAY_SUPPORT !== undefined ? global$1.TYPED_ARRAY_SUPPORT : true;
  /*
   * Export kMaxLength after typed array support is determined.
   */

  var _kMaxLength = kMaxLength();

  function kMaxLength() {
    return Buffer$1.TYPED_ARRAY_SUPPORT ? 0x7fffffff : 0x3fffffff;
  }

  function createBuffer(that, length) {
    if (kMaxLength() < length) {
      throw new RangeError('Invalid typed array length');
    }

    if (Buffer$1.TYPED_ARRAY_SUPPORT) {
      // Return an augmented `Uint8Array` instance, for best performance
      that = new Uint8Array(length);
      that.__proto__ = Buffer$1.prototype;
    } else {
      // Fallback: Return an object instance of the Buffer class
      if (that === null) {
        that = new Buffer$1(length);
      }

      that.length = length;
    }

    return that;
  }
  /**
   * The Buffer constructor returns instances of `Uint8Array` that have their
   * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
   * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
   * and the `Uint8Array` methods. Square bracket notation works as expected -- it
   * returns a single octet.
   *
   * The `Uint8Array` prototype remains unmodified.
   */


  function Buffer$1(arg, encodingOrOffset, length) {
    if (!Buffer$1.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer$1)) {
      return new Buffer$1(arg, encodingOrOffset, length);
    } // Common case.


    if (typeof arg === 'number') {
      if (typeof encodingOrOffset === 'string') {
        throw new Error('If encoding is specified then the first argument must be a string');
      }

      return allocUnsafe(this, arg);
    }

    return from(this, arg, encodingOrOffset, length);
  }
  Buffer$1.poolSize = 8192; // not used by this implementation
  // TODO: Legacy, not needed anymore. Remove in next major version.

  Buffer$1._augment = function (arr) {
    arr.__proto__ = Buffer$1.prototype;
    return arr;
  };

  function from(that, value, encodingOrOffset, length) {
    if (typeof value === 'number') {
      throw new TypeError('"value" argument must not be a number');
    }

    if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
      return fromArrayBuffer(that, value, encodingOrOffset, length);
    }

    if (typeof value === 'string') {
      return fromString(that, value, encodingOrOffset);
    }

    return fromObject(that, value);
  }
  /**
   * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
   * if value is a number.
   * Buffer.from(str[, encoding])
   * Buffer.from(array)
   * Buffer.from(buffer)
   * Buffer.from(arrayBuffer[, byteOffset[, length]])
   **/


  Buffer$1.from = function (value, encodingOrOffset, length) {
    return from(null, value, encodingOrOffset, length);
  };

  if (Buffer$1.TYPED_ARRAY_SUPPORT) {
    Buffer$1.prototype.__proto__ = Uint8Array.prototype;
    Buffer$1.__proto__ = Uint8Array;
  }

  function assertSize(size) {
    if (typeof size !== 'number') {
      throw new TypeError('"size" argument must be a number');
    } else if (size < 0) {
      throw new RangeError('"size" argument must not be negative');
    }
  }

  function alloc(that, size, fill, encoding) {
    assertSize(size);

    if (size <= 0) {
      return createBuffer(that, size);
    }

    if (fill !== undefined) {
      // Only pay attention to encoding if it's a string. This
      // prevents accidentally sending in a number that would
      // be interpretted as a start offset.
      return typeof encoding === 'string' ? createBuffer(that, size).fill(fill, encoding) : createBuffer(that, size).fill(fill);
    }

    return createBuffer(that, size);
  }
  /**
   * Creates a new filled Buffer instance.
   * alloc(size[, fill[, encoding]])
   **/


  Buffer$1.alloc = function (size, fill, encoding) {
    return alloc(null, size, fill, encoding);
  };

  function allocUnsafe(that, size) {
    assertSize(size);
    that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);

    if (!Buffer$1.TYPED_ARRAY_SUPPORT) {
      for (var i = 0; i < size; ++i) {
        that[i] = 0;
      }
    }

    return that;
  }
  /**
   * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
   * */


  Buffer$1.allocUnsafe = function (size) {
    return allocUnsafe(null, size);
  };
  /**
   * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
   */


  Buffer$1.allocUnsafeSlow = function (size) {
    return allocUnsafe(null, size);
  };

  function fromString(that, string, encoding) {
    if (typeof encoding !== 'string' || encoding === '') {
      encoding = 'utf8';
    }

    if (!Buffer$1.isEncoding(encoding)) {
      throw new TypeError('"encoding" must be a valid string encoding');
    }

    var length = byteLength(string, encoding) | 0;
    that = createBuffer(that, length);
    var actual = that.write(string, encoding);

    if (actual !== length) {
      // Writing a hex string, for example, that contains invalid characters will
      // cause everything after the first invalid character to be ignored. (e.g.
      // 'abxxcd' will be treated as 'ab')
      that = that.slice(0, actual);
    }

    return that;
  }

  function fromArrayLike(that, array) {
    var length = array.length < 0 ? 0 : checked(array.length) | 0;
    that = createBuffer(that, length);

    for (var i = 0; i < length; i += 1) {
      that[i] = array[i] & 255;
    }

    return that;
  }

  function fromArrayBuffer(that, array, byteOffset, length) {
    array.byteLength; // this throws if `array` is not a valid ArrayBuffer

    if (byteOffset < 0 || array.byteLength < byteOffset) {
      throw new RangeError('\'offset\' is out of bounds');
    }

    if (array.byteLength < byteOffset + (length || 0)) {
      throw new RangeError('\'length\' is out of bounds');
    }

    if (byteOffset === undefined && length === undefined) {
      array = new Uint8Array(array);
    } else if (length === undefined) {
      array = new Uint8Array(array, byteOffset);
    } else {
      array = new Uint8Array(array, byteOffset, length);
    }

    if (Buffer$1.TYPED_ARRAY_SUPPORT) {
      // Return an augmented `Uint8Array` instance, for best performance
      that = array;
      that.__proto__ = Buffer$1.prototype;
    } else {
      // Fallback: Return an object instance of the Buffer class
      that = fromArrayLike(that, array);
    }

    return that;
  }

  function fromObject(that, obj) {
    if (internalIsBuffer(obj)) {
      var len = checked(obj.length) | 0;
      that = createBuffer(that, len);

      if (that.length === 0) {
        return that;
      }

      obj.copy(that, 0, 0, len);
      return that;
    }

    if (obj) {
      if (typeof ArrayBuffer !== 'undefined' && obj.buffer instanceof ArrayBuffer || 'length' in obj) {
        if (typeof obj.length !== 'number' || isnan(obj.length)) {
          return createBuffer(that, 0);
        }

        return fromArrayLike(that, obj);
      }

      if (obj.type === 'Buffer' && isArray(obj.data)) {
        return fromArrayLike(that, obj.data);
      }
    }

    throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.');
  }

  function checked(length) {
    // Note: cannot use `length < kMaxLength()` here because that fails when
    // length is NaN (which is otherwise coerced to zero.)
    if (length >= kMaxLength()) {
      throw new RangeError('Attempt to allocate Buffer larger than maximum ' + 'size: 0x' + kMaxLength().toString(16) + ' bytes');
    }

    return length | 0;
  }

  function SlowBuffer(length) {
    if (+length != length) {
      // eslint-disable-line eqeqeq
      length = 0;
    }

    return Buffer$1.alloc(+length);
  }
  Buffer$1.isBuffer = isBuffer;

  function internalIsBuffer(b) {
    return !!(b != null && b._isBuffer);
  }

  Buffer$1.compare = function compare(a, b) {
    if (!internalIsBuffer(a) || !internalIsBuffer(b)) {
      throw new TypeError('Arguments must be Buffers');
    }

    if (a === b) return 0;
    var x = a.length;
    var y = b.length;

    for (var i = 0, len = Math.min(x, y); i < len; ++i) {
      if (a[i] !== b[i]) {
        x = a[i];
        y = b[i];
        break;
      }
    }

    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
  };

  Buffer$1.isEncoding = function isEncoding(encoding) {
    switch (String(encoding).toLowerCase()) {
      case 'hex':
      case 'utf8':
      case 'utf-8':
      case 'ascii':
      case 'latin1':
      case 'binary':
      case 'base64':
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return true;

      default:
        return false;
    }
  };

  Buffer$1.concat = function concat(list, length) {
    if (!isArray(list)) {
      throw new TypeError('"list" argument must be an Array of Buffers');
    }

    if (list.length === 0) {
      return Buffer$1.alloc(0);
    }

    var i;

    if (length === undefined) {
      length = 0;

      for (i = 0; i < list.length; ++i) {
        length += list[i].length;
      }
    }

    var buffer = Buffer$1.allocUnsafe(length);
    var pos = 0;

    for (i = 0; i < list.length; ++i) {
      var buf = list[i];

      if (!internalIsBuffer(buf)) {
        throw new TypeError('"list" argument must be an Array of Buffers');
      }

      buf.copy(buffer, pos);
      pos += buf.length;
    }

    return buffer;
  };

  function byteLength(string, encoding) {
    if (internalIsBuffer(string)) {
      return string.length;
    }

    if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' && (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
      return string.byteLength;
    }

    if (typeof string !== 'string') {
      string = '' + string;
    }

    var len = string.length;
    if (len === 0) return 0; // Use a for loop to avoid recursion

    var loweredCase = false;

    for (;;) {
      switch (encoding) {
        case 'ascii':
        case 'latin1':
        case 'binary':
          return len;

        case 'utf8':
        case 'utf-8':
        case undefined:
          return utf8ToBytes(string).length;

        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return len * 2;

        case 'hex':
          return len >>> 1;

        case 'base64':
          return base64ToBytes(string).length;

        default:
          if (loweredCase) return utf8ToBytes(string).length; // assume utf8

          encoding = ('' + encoding).toLowerCase();
          loweredCase = true;
      }
    }
  }

  Buffer$1.byteLength = byteLength;

  function slowToString(encoding, start, end) {
    var loweredCase = false; // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
    // property of a typed array.
    // This behaves neither like String nor Uint8Array in that we set start/end
    // to their upper/lower bounds if the value passed is out of range.
    // undefined is handled specially as per ECMA-262 6th Edition,
    // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.

    if (start === undefined || start < 0) {
      start = 0;
    } // Return early if start > this.length. Done here to prevent potential uint32
    // coercion fail below.


    if (start > this.length) {
      return '';
    }

    if (end === undefined || end > this.length) {
      end = this.length;
    }

    if (end <= 0) {
      return '';
    } // Force coersion to uint32. This will also coerce falsey/NaN values to 0.


    end >>>= 0;
    start >>>= 0;

    if (end <= start) {
      return '';
    }

    if (!encoding) encoding = 'utf8';

    while (true) {
      switch (encoding) {
        case 'hex':
          return hexSlice(this, start, end);

        case 'utf8':
        case 'utf-8':
          return utf8Slice(this, start, end);

        case 'ascii':
          return asciiSlice(this, start, end);

        case 'latin1':
        case 'binary':
          return latin1Slice(this, start, end);

        case 'base64':
          return base64Slice(this, start, end);

        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return utf16leSlice(this, start, end);

        default:
          if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
          encoding = (encoding + '').toLowerCase();
          loweredCase = true;
      }
    }
  } // The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
  // Buffer instances.


  Buffer$1.prototype._isBuffer = true;

  function swap(b, n, m) {
    var i = b[n];
    b[n] = b[m];
    b[m] = i;
  }

  Buffer$1.prototype.swap16 = function swap16() {
    var len = this.length;

    if (len % 2 !== 0) {
      throw new RangeError('Buffer size must be a multiple of 16-bits');
    }

    for (var i = 0; i < len; i += 2) {
      swap(this, i, i + 1);
    }

    return this;
  };

  Buffer$1.prototype.swap32 = function swap32() {
    var len = this.length;

    if (len % 4 !== 0) {
      throw new RangeError('Buffer size must be a multiple of 32-bits');
    }

    for (var i = 0; i < len; i += 4) {
      swap(this, i, i + 3);
      swap(this, i + 1, i + 2);
    }

    return this;
  };

  Buffer$1.prototype.swap64 = function swap64() {
    var len = this.length;

    if (len % 8 !== 0) {
      throw new RangeError('Buffer size must be a multiple of 64-bits');
    }

    for (var i = 0; i < len; i += 8) {
      swap(this, i, i + 7);
      swap(this, i + 1, i + 6);
      swap(this, i + 2, i + 5);
      swap(this, i + 3, i + 4);
    }

    return this;
  };

  Buffer$1.prototype.toString = function toString() {
    var length = this.length | 0;
    if (length === 0) return '';
    if (arguments.length === 0) return utf8Slice(this, 0, length);
    return slowToString.apply(this, arguments);
  };

  Buffer$1.prototype.equals = function equals(b) {
    if (!internalIsBuffer(b)) throw new TypeError('Argument must be a Buffer');
    if (this === b) return true;
    return Buffer$1.compare(this, b) === 0;
  };

  Buffer$1.prototype.inspect = function inspect() {
    var str = '';
    var max = INSPECT_MAX_BYTES;

    if (this.length > 0) {
      str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
      if (this.length > max) str += ' ... ';
    }

    return '<Buffer ' + str + '>';
  };

  Buffer$1.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
    if (!internalIsBuffer(target)) {
      throw new TypeError('Argument must be a Buffer');
    }

    if (start === undefined) {
      start = 0;
    }

    if (end === undefined) {
      end = target ? target.length : 0;
    }

    if (thisStart === undefined) {
      thisStart = 0;
    }

    if (thisEnd === undefined) {
      thisEnd = this.length;
    }

    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
      throw new RangeError('out of range index');
    }

    if (thisStart >= thisEnd && start >= end) {
      return 0;
    }

    if (thisStart >= thisEnd) {
      return -1;
    }

    if (start >= end) {
      return 1;
    }

    start >>>= 0;
    end >>>= 0;
    thisStart >>>= 0;
    thisEnd >>>= 0;
    if (this === target) return 0;
    var x = thisEnd - thisStart;
    var y = end - start;
    var len = Math.min(x, y);
    var thisCopy = this.slice(thisStart, thisEnd);
    var targetCopy = target.slice(start, end);

    for (var i = 0; i < len; ++i) {
      if (thisCopy[i] !== targetCopy[i]) {
        x = thisCopy[i];
        y = targetCopy[i];
        break;
      }
    }

    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
  }; // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
  // OR the last index of `val` in `buffer` at offset <= `byteOffset`.
  //
  // Arguments:
  // - buffer - a Buffer to search
  // - val - a string, Buffer, or number
  // - byteOffset - an index into `buffer`; will be clamped to an int32
  // - encoding - an optional encoding, relevant is val is a string
  // - dir - true for indexOf, false for lastIndexOf


  function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
    // Empty buffer means no match
    if (buffer.length === 0) return -1; // Normalize byteOffset

    if (typeof byteOffset === 'string') {
      encoding = byteOffset;
      byteOffset = 0;
    } else if (byteOffset > 0x7fffffff) {
      byteOffset = 0x7fffffff;
    } else if (byteOffset < -0x80000000) {
      byteOffset = -0x80000000;
    }

    byteOffset = +byteOffset; // Coerce to Number.

    if (isNaN(byteOffset)) {
      // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
      byteOffset = dir ? 0 : buffer.length - 1;
    } // Normalize byteOffset: negative offsets start from the end of the buffer


    if (byteOffset < 0) byteOffset = buffer.length + byteOffset;

    if (byteOffset >= buffer.length) {
      if (dir) return -1;else byteOffset = buffer.length - 1;
    } else if (byteOffset < 0) {
      if (dir) byteOffset = 0;else return -1;
    } // Normalize val


    if (typeof val === 'string') {
      val = Buffer$1.from(val, encoding);
    } // Finally, search either indexOf (if dir is true) or lastIndexOf


    if (internalIsBuffer(val)) {
      // Special case: looking for empty string/buffer always fails
      if (val.length === 0) {
        return -1;
      }

      return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
    } else if (typeof val === 'number') {
      val = val & 0xFF; // Search for a byte value [0-255]

      if (Buffer$1.TYPED_ARRAY_SUPPORT && typeof Uint8Array.prototype.indexOf === 'function') {
        if (dir) {
          return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
        } else {
          return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
        }
      }

      return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
    }

    throw new TypeError('val must be string, number or Buffer');
  }

  function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
    var indexSize = 1;
    var arrLength = arr.length;
    var valLength = val.length;

    if (encoding !== undefined) {
      encoding = String(encoding).toLowerCase();

      if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {
        if (arr.length < 2 || val.length < 2) {
          return -1;
        }

        indexSize = 2;
        arrLength /= 2;
        valLength /= 2;
        byteOffset /= 2;
      }
    }

    function read(buf, i) {
      if (indexSize === 1) {
        return buf[i];
      } else {
        return buf.readUInt16BE(i * indexSize);
      }
    }

    var i;

    if (dir) {
      var foundIndex = -1;

      for (i = byteOffset; i < arrLength; i++) {
        if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
          if (foundIndex === -1) foundIndex = i;
          if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
        } else {
          if (foundIndex !== -1) i -= i - foundIndex;
          foundIndex = -1;
        }
      }
    } else {
      if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;

      for (i = byteOffset; i >= 0; i--) {
        var found = true;

        for (var j = 0; j < valLength; j++) {
          if (read(arr, i + j) !== read(val, j)) {
            found = false;
            break;
          }
        }

        if (found) return i;
      }
    }

    return -1;
  }

  Buffer$1.prototype.includes = function includes(val, byteOffset, encoding) {
    return this.indexOf(val, byteOffset, encoding) !== -1;
  };

  Buffer$1.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
  };

  Buffer$1.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
  };

  function hexWrite(buf, string, offset, length) {
    offset = Number(offset) || 0;
    var remaining = buf.length - offset;

    if (!length) {
      length = remaining;
    } else {
      length = Number(length);

      if (length > remaining) {
        length = remaining;
      }
    } // must be an even number of digits


    var strLen = string.length;
    if (strLen % 2 !== 0) throw new TypeError('Invalid hex string');

    if (length > strLen / 2) {
      length = strLen / 2;
    }

    for (var i = 0; i < length; ++i) {
      var parsed = parseInt(string.substr(i * 2, 2), 16);
      if (isNaN(parsed)) return i;
      buf[offset + i] = parsed;
    }

    return i;
  }

  function utf8Write(buf, string, offset, length) {
    return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
  }

  function asciiWrite(buf, string, offset, length) {
    return blitBuffer(asciiToBytes(string), buf, offset, length);
  }

  function latin1Write(buf, string, offset, length) {
    return asciiWrite(buf, string, offset, length);
  }

  function base64Write(buf, string, offset, length) {
    return blitBuffer(base64ToBytes(string), buf, offset, length);
  }

  function ucs2Write(buf, string, offset, length) {
    return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
  }

  Buffer$1.prototype.write = function write(string, offset, length, encoding) {
    // Buffer#write(string)
    if (offset === undefined) {
      encoding = 'utf8';
      length = this.length;
      offset = 0; // Buffer#write(string, encoding)
    } else if (length === undefined && typeof offset === 'string') {
      encoding = offset;
      length = this.length;
      offset = 0; // Buffer#write(string, offset[, length][, encoding])
    } else if (isFinite(offset)) {
      offset = offset | 0;

      if (isFinite(length)) {
        length = length | 0;
        if (encoding === undefined) encoding = 'utf8';
      } else {
        encoding = length;
        length = undefined;
      } // legacy write(string, encoding, offset, length) - remove in v0.13

    } else {
      throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');
    }

    var remaining = this.length - offset;
    if (length === undefined || length > remaining) length = remaining;

    if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
      throw new RangeError('Attempt to write outside buffer bounds');
    }

    if (!encoding) encoding = 'utf8';
    var loweredCase = false;

    for (;;) {
      switch (encoding) {
        case 'hex':
          return hexWrite(this, string, offset, length);

        case 'utf8':
        case 'utf-8':
          return utf8Write(this, string, offset, length);

        case 'ascii':
          return asciiWrite(this, string, offset, length);

        case 'latin1':
        case 'binary':
          return latin1Write(this, string, offset, length);

        case 'base64':
          // Warning: maxLength not taken into account in base64Write
          return base64Write(this, string, offset, length);

        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return ucs2Write(this, string, offset, length);

        default:
          if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
          encoding = ('' + encoding).toLowerCase();
          loweredCase = true;
      }
    }
  };

  Buffer$1.prototype.toJSON = function toJSON() {
    return {
      type: 'Buffer',
      data: Array.prototype.slice.call(this._arr || this, 0)
    };
  };

  function base64Slice(buf, start, end) {
    if (start === 0 && end === buf.length) {
      return fromByteArray(buf);
    } else {
      return fromByteArray(buf.slice(start, end));
    }
  }

  function utf8Slice(buf, start, end) {
    end = Math.min(buf.length, end);
    var res = [];
    var i = start;

    while (i < end) {
      var firstByte = buf[i];
      var codePoint = null;
      var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;

      if (i + bytesPerSequence <= end) {
        var secondByte, thirdByte, fourthByte, tempCodePoint;

        switch (bytesPerSequence) {
          case 1:
            if (firstByte < 0x80) {
              codePoint = firstByte;
            }

            break;

          case 2:
            secondByte = buf[i + 1];

            if ((secondByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;

              if (tempCodePoint > 0x7F) {
                codePoint = tempCodePoint;
              }
            }

            break;

          case 3:
            secondByte = buf[i + 1];
            thirdByte = buf[i + 2];

            if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;

              if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
                codePoint = tempCodePoint;
              }
            }

            break;

          case 4:
            secondByte = buf[i + 1];
            thirdByte = buf[i + 2];
            fourthByte = buf[i + 3];

            if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;

              if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
                codePoint = tempCodePoint;
              }
            }

        }
      }

      if (codePoint === null) {
        // we did not generate a valid codePoint so insert a
        // replacement char (U+FFFD) and advance only 1 byte
        codePoint = 0xFFFD;
        bytesPerSequence = 1;
      } else if (codePoint > 0xFFFF) {
        // encode to utf16 (surrogate pair dance)
        codePoint -= 0x10000;
        res.push(codePoint >>> 10 & 0x3FF | 0xD800);
        codePoint = 0xDC00 | codePoint & 0x3FF;
      }

      res.push(codePoint);
      i += bytesPerSequence;
    }

    return decodeCodePointsArray(res);
  } // Based on http://stackoverflow.com/a/22747272/680742, the browser with
  // the lowest limit is Chrome, with 0x10000 args.
  // We go 1 magnitude less, for safety


  var MAX_ARGUMENTS_LENGTH = 0x1000;

  function decodeCodePointsArray(codePoints) {
    var len = codePoints.length;

    if (len <= MAX_ARGUMENTS_LENGTH) {
      return String.fromCharCode.apply(String, codePoints); // avoid extra slice()
    } // Decode in chunks to avoid "call stack size exceeded".


    var res = '';
    var i = 0;

    while (i < len) {
      res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
    }

    return res;
  }

  function asciiSlice(buf, start, end) {
    var ret = '';
    end = Math.min(buf.length, end);

    for (var i = start; i < end; ++i) {
      ret += String.fromCharCode(buf[i] & 0x7F);
    }

    return ret;
  }

  function latin1Slice(buf, start, end) {
    var ret = '';
    end = Math.min(buf.length, end);

    for (var i = start; i < end; ++i) {
      ret += String.fromCharCode(buf[i]);
    }

    return ret;
  }

  function hexSlice(buf, start, end) {
    var len = buf.length;
    if (!start || start < 0) start = 0;
    if (!end || end < 0 || end > len) end = len;
    var out = '';

    for (var i = start; i < end; ++i) {
      out += toHex(buf[i]);
    }

    return out;
  }

  function utf16leSlice(buf, start, end) {
    var bytes = buf.slice(start, end);
    var res = '';

    for (var i = 0; i < bytes.length; i += 2) {
      res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
    }

    return res;
  }

  Buffer$1.prototype.slice = function slice(start, end) {
    var len = this.length;
    start = ~~start;
    end = end === undefined ? len : ~~end;

    if (start < 0) {
      start += len;
      if (start < 0) start = 0;
    } else if (start > len) {
      start = len;
    }

    if (end < 0) {
      end += len;
      if (end < 0) end = 0;
    } else if (end > len) {
      end = len;
    }

    if (end < start) end = start;
    var newBuf;

    if (Buffer$1.TYPED_ARRAY_SUPPORT) {
      newBuf = this.subarray(start, end);
      newBuf.__proto__ = Buffer$1.prototype;
    } else {
      var sliceLen = end - start;
      newBuf = new Buffer$1(sliceLen, undefined);

      for (var i = 0; i < sliceLen; ++i) {
        newBuf[i] = this[i + start];
      }
    }

    return newBuf;
  };
  /*
   * Need to make sure that buffer isn't trying to write out of bounds.
   */


  function checkOffset(offset, ext, length) {
    if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');
    if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');
  }

  Buffer$1.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    var val = this[offset];
    var mul = 1;
    var i = 0;

    while (++i < byteLength && (mul *= 0x100)) {
      val += this[offset + i] * mul;
    }

    return val;
  };

  Buffer$1.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
    offset = offset | 0;
    byteLength = byteLength | 0;

    if (!noAssert) {
      checkOffset(offset, byteLength, this.length);
    }

    var val = this[offset + --byteLength];
    var mul = 1;

    while (byteLength > 0 && (mul *= 0x100)) {
      val += this[offset + --byteLength] * mul;
    }

    return val;
  };

  Buffer$1.prototype.readUInt8 = function readUInt8(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 1, this.length);
    return this[offset];
  };

  Buffer$1.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] | this[offset + 1] << 8;
  };

  Buffer$1.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] << 8 | this[offset + 1];
  };

  Buffer$1.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);
    return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
  };

  Buffer$1.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
  };

  Buffer$1.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    var val = this[offset];
    var mul = 1;
    var i = 0;

    while (++i < byteLength && (mul *= 0x100)) {
      val += this[offset + i] * mul;
    }

    mul *= 0x80;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength);
    return val;
  };

  Buffer$1.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    var i = byteLength;
    var mul = 1;
    var val = this[offset + --i];

    while (i > 0 && (mul *= 0x100)) {
      val += this[offset + --i] * mul;
    }

    mul *= 0x80;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength);
    return val;
  };

  Buffer$1.prototype.readInt8 = function readInt8(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 1, this.length);
    if (!(this[offset] & 0x80)) return this[offset];
    return (0xff - this[offset] + 1) * -1;
  };

  Buffer$1.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length);
    var val = this[offset] | this[offset + 1] << 8;
    return val & 0x8000 ? val | 0xFFFF0000 : val;
  };

  Buffer$1.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length);
    var val = this[offset + 1] | this[offset] << 8;
    return val & 0x8000 ? val | 0xFFFF0000 : val;
  };

  Buffer$1.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
  };

  Buffer$1.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
  };

  Buffer$1.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);
    return read(this, offset, true, 23, 4);
  };

  Buffer$1.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);
    return read(this, offset, false, 23, 4);
  };

  Buffer$1.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 8, this.length);
    return read(this, offset, true, 52, 8);
  };

  Buffer$1.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 8, this.length);
    return read(this, offset, false, 52, 8);
  };

  function checkInt(buf, value, offset, ext, max, min) {
    if (!internalIsBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
    if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
    if (offset + ext > buf.length) throw new RangeError('Index out of range');
  }

  Buffer$1.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset | 0;
    byteLength = byteLength | 0;

    if (!noAssert) {
      var maxBytes = Math.pow(2, 8 * byteLength) - 1;
      checkInt(this, value, offset, byteLength, maxBytes, 0);
    }

    var mul = 1;
    var i = 0;
    this[offset] = value & 0xFF;

    while (++i < byteLength && (mul *= 0x100)) {
      this[offset + i] = value / mul & 0xFF;
    }

    return offset + byteLength;
  };

  Buffer$1.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset | 0;
    byteLength = byteLength | 0;

    if (!noAssert) {
      var maxBytes = Math.pow(2, 8 * byteLength) - 1;
      checkInt(this, value, offset, byteLength, maxBytes, 0);
    }

    var i = byteLength - 1;
    var mul = 1;
    this[offset + i] = value & 0xFF;

    while (--i >= 0 && (mul *= 0x100)) {
      this[offset + i] = value / mul & 0xFF;
    }

    return offset + byteLength;
  };

  Buffer$1.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
    if (!Buffer$1.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
    this[offset] = value & 0xff;
    return offset + 1;
  };

  function objectWriteUInt16(buf, value, offset, littleEndian) {
    if (value < 0) value = 0xffff + value + 1;

    for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
      buf[offset + i] = (value & 0xff << 8 * (littleEndian ? i : 1 - i)) >>> (littleEndian ? i : 1 - i) * 8;
    }
  }

  Buffer$1.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);

    if (Buffer$1.TYPED_ARRAY_SUPPORT) {
      this[offset] = value & 0xff;
      this[offset + 1] = value >>> 8;
    } else {
      objectWriteUInt16(this, value, offset, true);
    }

    return offset + 2;
  };

  Buffer$1.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);

    if (Buffer$1.TYPED_ARRAY_SUPPORT) {
      this[offset] = value >>> 8;
      this[offset + 1] = value & 0xff;
    } else {
      objectWriteUInt16(this, value, offset, false);
    }

    return offset + 2;
  };

  function objectWriteUInt32(buf, value, offset, littleEndian) {
    if (value < 0) value = 0xffffffff + value + 1;

    for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
      buf[offset + i] = value >>> (littleEndian ? i : 3 - i) * 8 & 0xff;
    }
  }

  Buffer$1.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);

    if (Buffer$1.TYPED_ARRAY_SUPPORT) {
      this[offset + 3] = value >>> 24;
      this[offset + 2] = value >>> 16;
      this[offset + 1] = value >>> 8;
      this[offset] = value & 0xff;
    } else {
      objectWriteUInt32(this, value, offset, true);
    }

    return offset + 4;
  };

  Buffer$1.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);

    if (Buffer$1.TYPED_ARRAY_SUPPORT) {
      this[offset] = value >>> 24;
      this[offset + 1] = value >>> 16;
      this[offset + 2] = value >>> 8;
      this[offset + 3] = value & 0xff;
    } else {
      objectWriteUInt32(this, value, offset, false);
    }

    return offset + 4;
  };

  Buffer$1.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset | 0;

    if (!noAssert) {
      var limit = Math.pow(2, 8 * byteLength - 1);
      checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }

    var i = 0;
    var mul = 1;
    var sub = 0;
    this[offset] = value & 0xFF;

    while (++i < byteLength && (mul *= 0x100)) {
      if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
        sub = 1;
      }

      this[offset + i] = (value / mul >> 0) - sub & 0xFF;
    }

    return offset + byteLength;
  };

  Buffer$1.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset | 0;

    if (!noAssert) {
      var limit = Math.pow(2, 8 * byteLength - 1);
      checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }

    var i = byteLength - 1;
    var mul = 1;
    var sub = 0;
    this[offset + i] = value & 0xFF;

    while (--i >= 0 && (mul *= 0x100)) {
      if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
        sub = 1;
      }

      this[offset + i] = (value / mul >> 0) - sub & 0xFF;
    }

    return offset + byteLength;
  };

  Buffer$1.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
    if (!Buffer$1.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
    if (value < 0) value = 0xff + value + 1;
    this[offset] = value & 0xff;
    return offset + 1;
  };

  Buffer$1.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);

    if (Buffer$1.TYPED_ARRAY_SUPPORT) {
      this[offset] = value & 0xff;
      this[offset + 1] = value >>> 8;
    } else {
      objectWriteUInt16(this, value, offset, true);
    }

    return offset + 2;
  };

  Buffer$1.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);

    if (Buffer$1.TYPED_ARRAY_SUPPORT) {
      this[offset] = value >>> 8;
      this[offset + 1] = value & 0xff;
    } else {
      objectWriteUInt16(this, value, offset, false);
    }

    return offset + 2;
  };

  Buffer$1.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);

    if (Buffer$1.TYPED_ARRAY_SUPPORT) {
      this[offset] = value & 0xff;
      this[offset + 1] = value >>> 8;
      this[offset + 2] = value >>> 16;
      this[offset + 3] = value >>> 24;
    } else {
      objectWriteUInt32(this, value, offset, true);
    }

    return offset + 4;
  };

  Buffer$1.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
    if (value < 0) value = 0xffffffff + value + 1;

    if (Buffer$1.TYPED_ARRAY_SUPPORT) {
      this[offset] = value >>> 24;
      this[offset + 1] = value >>> 16;
      this[offset + 2] = value >>> 8;
      this[offset + 3] = value & 0xff;
    } else {
      objectWriteUInt32(this, value, offset, false);
    }

    return offset + 4;
  };

  function checkIEEE754(buf, value, offset, ext, max, min) {
    if (offset + ext > buf.length) throw new RangeError('Index out of range');
    if (offset < 0) throw new RangeError('Index out of range');
  }

  function writeFloat(buf, value, offset, littleEndian, noAssert) {
    if (!noAssert) {
      checkIEEE754(buf, value, offset, 4);
    }

    write(buf, value, offset, littleEndian, 23, 4);
    return offset + 4;
  }

  Buffer$1.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
    return writeFloat(this, value, offset, true, noAssert);
  };

  Buffer$1.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
    return writeFloat(this, value, offset, false, noAssert);
  };

  function writeDouble(buf, value, offset, littleEndian, noAssert) {
    if (!noAssert) {
      checkIEEE754(buf, value, offset, 8);
    }

    write(buf, value, offset, littleEndian, 52, 8);
    return offset + 8;
  }

  Buffer$1.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
    return writeDouble(this, value, offset, true, noAssert);
  };

  Buffer$1.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
    return writeDouble(this, value, offset, false, noAssert);
  }; // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)


  Buffer$1.prototype.copy = function copy(target, targetStart, start, end) {
    if (!start) start = 0;
    if (!end && end !== 0) end = this.length;
    if (targetStart >= target.length) targetStart = target.length;
    if (!targetStart) targetStart = 0;
    if (end > 0 && end < start) end = start; // Copy 0 bytes; we're done

    if (end === start) return 0;
    if (target.length === 0 || this.length === 0) return 0; // Fatal error conditions

    if (targetStart < 0) {
      throw new RangeError('targetStart out of bounds');
    }

    if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds');
    if (end < 0) throw new RangeError('sourceEnd out of bounds'); // Are we oob?

    if (end > this.length) end = this.length;

    if (target.length - targetStart < end - start) {
      end = target.length - targetStart + start;
    }

    var len = end - start;
    var i;

    if (this === target && start < targetStart && targetStart < end) {
      // descending copy from end
      for (i = len - 1; i >= 0; --i) {
        target[i + targetStart] = this[i + start];
      }
    } else if (len < 1000 || !Buffer$1.TYPED_ARRAY_SUPPORT) {
      // ascending copy from start
      for (i = 0; i < len; ++i) {
        target[i + targetStart] = this[i + start];
      }
    } else {
      Uint8Array.prototype.set.call(target, this.subarray(start, start + len), targetStart);
    }

    return len;
  }; // Usage:
  //    buffer.fill(number[, offset[, end]])
  //    buffer.fill(buffer[, offset[, end]])
  //    buffer.fill(string[, offset[, end]][, encoding])


  Buffer$1.prototype.fill = function fill(val, start, end, encoding) {
    // Handle string cases:
    if (typeof val === 'string') {
      if (typeof start === 'string') {
        encoding = start;
        start = 0;
        end = this.length;
      } else if (typeof end === 'string') {
        encoding = end;
        end = this.length;
      }

      if (val.length === 1) {
        var code = val.charCodeAt(0);

        if (code < 256) {
          val = code;
        }
      }

      if (encoding !== undefined && typeof encoding !== 'string') {
        throw new TypeError('encoding must be a string');
      }

      if (typeof encoding === 'string' && !Buffer$1.isEncoding(encoding)) {
        throw new TypeError('Unknown encoding: ' + encoding);
      }
    } else if (typeof val === 'number') {
      val = val & 255;
    } // Invalid ranges are not set to a default, so can range check early.


    if (start < 0 || this.length < start || this.length < end) {
      throw new RangeError('Out of range index');
    }

    if (end <= start) {
      return this;
    }

    start = start >>> 0;
    end = end === undefined ? this.length : end >>> 0;
    if (!val) val = 0;
    var i;

    if (typeof val === 'number') {
      for (i = start; i < end; ++i) {
        this[i] = val;
      }
    } else {
      var bytes = internalIsBuffer(val) ? val : utf8ToBytes(new Buffer$1(val, encoding).toString());
      var len = bytes.length;

      for (i = 0; i < end - start; ++i) {
        this[i + start] = bytes[i % len];
      }
    }

    return this;
  }; // HELPER FUNCTIONS
  // ================


  var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;

  function base64clean(str) {
    // Node strips out invalid characters like \n and \t from the string, base64-js does not
    str = stringtrim(str).replace(INVALID_BASE64_RE, ''); // Node converts strings with length < 2 to ''

    if (str.length < 2) return ''; // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not

    while (str.length % 4 !== 0) {
      str = str + '=';
    }

    return str;
  }

  function stringtrim(str) {
    if (str.trim) return str.trim();
    return str.replace(/^\s+|\s+$/g, '');
  }

  function toHex(n) {
    if (n < 16) return '0' + n.toString(16);
    return n.toString(16);
  }

  function utf8ToBytes(string, units) {
    units = units || Infinity;
    var codePoint;
    var length = string.length;
    var leadSurrogate = null;
    var bytes = [];

    for (var i = 0; i < length; ++i) {
      codePoint = string.charCodeAt(i); // is surrogate component

      if (codePoint > 0xD7FF && codePoint < 0xE000) {
        // last char was a lead
        if (!leadSurrogate) {
          // no lead yet
          if (codePoint > 0xDBFF) {
            // unexpected trail
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
            continue;
          } else if (i + 1 === length) {
            // unpaired lead
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
            continue;
          } // valid lead


          leadSurrogate = codePoint;
          continue;
        } // 2 leads in a row


        if (codePoint < 0xDC00) {
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          leadSurrogate = codePoint;
          continue;
        } // valid surrogate pair


        codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
      } else if (leadSurrogate) {
        // valid bmp char, but last char was a lead
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
      }

      leadSurrogate = null; // encode utf8

      if (codePoint < 0x80) {
        if ((units -= 1) < 0) break;
        bytes.push(codePoint);
      } else if (codePoint < 0x800) {
        if ((units -= 2) < 0) break;
        bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
      } else if (codePoint < 0x10000) {
        if ((units -= 3) < 0) break;
        bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
      } else if (codePoint < 0x110000) {
        if ((units -= 4) < 0) break;
        bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
      } else {
        throw new Error('Invalid code point');
      }
    }

    return bytes;
  }

  function asciiToBytes(str) {
    var byteArray = [];

    for (var i = 0; i < str.length; ++i) {
      // Node's code seems to be doing this and not & 0x7F..
      byteArray.push(str.charCodeAt(i) & 0xFF);
    }

    return byteArray;
  }

  function utf16leToBytes(str, units) {
    var c, hi, lo;
    var byteArray = [];

    for (var i = 0; i < str.length; ++i) {
      if ((units -= 2) < 0) break;
      c = str.charCodeAt(i);
      hi = c >> 8;
      lo = c % 256;
      byteArray.push(lo);
      byteArray.push(hi);
    }

    return byteArray;
  }

  function base64ToBytes(str) {
    return toByteArray(base64clean(str));
  }

  function blitBuffer(src, dst, offset, length) {
    for (var i = 0; i < length; ++i) {
      if (i + offset >= dst.length || i >= src.length) break;
      dst[i + offset] = src[i];
    }

    return i;
  }

  function isnan(val) {
    return val !== val; // eslint-disable-line no-self-compare
  } // the following is from is-buffer, also by Feross Aboukhadijeh and with same lisence
  // The _isBuffer check is for Safari 5-7 support, because it's missing
  // Object.prototype.constructor. Remove this eventually


  function isBuffer(obj) {
    return obj != null && (!!obj._isBuffer || isFastBuffer(obj) || isSlowBuffer(obj));
  }

  function isFastBuffer(obj) {
    return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj);
  } // For Node v0.10 support. Remove this eventually.


  function isSlowBuffer(obj) {
    return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isFastBuffer(obj.slice(0, 0));
  }

  var bufferEs6 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    INSPECT_MAX_BYTES: INSPECT_MAX_BYTES,
    kMaxLength: _kMaxLength,
    Buffer: Buffer$1,
    SlowBuffer: SlowBuffer,
    isBuffer: isBuffer
  });

  var getOwnPropertyDescriptors = function getOwnPropertyDescriptors(originalObject) {
    return Object.getOwnPropertyNames(originalObject).reduce(function (descriptors, name) {
      descriptors[name] = Object.getOwnPropertyDescriptor(originalObject, name);
      return descriptors;
    }, {});
  };

  var kCustomPromisifiedSymbol = Symbol('util.promisify.custom');
  function promisify(original, context) {
    if (typeof context === 'undefined') {
      context = this;
    }

    if (typeof original !== 'function') {
      throw new Error('original is not a function', 'Function', original);
    }

    function fn() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return new Promise(function (resolve, reject) {
        original.call.apply(original, [context].concat(args, [function (err, value) {
          if (err) {
            return reject(err);
          }

          resolve(value);
        }]));
      });
    }

    Object.setPrototypeOf(fn, Object.getPrototypeOf(original));
    Object.defineProperty(fn, kCustomPromisifiedSymbol, {
      value: fn,
      enumerable: false,
      writable: false,
      configurable: true
    });
    return Object.defineProperties(fn, getOwnPropertyDescriptors(original));
  }

  var $jscomp = $jscomp || {};
  $jscomp.scope = {};

  $jscomp.findInternal = function (a, b, c) {
    a instanceof String && (a = String(a));

    for (var d = a.length, e = 0; e < d; e++) {
      var f = a[e];
      if (b.call(c, f, e, a)) return {
        i: e,
        v: f
      };
    }

    return {
      i: -1,
      v: void 0
    };
  };

  $jscomp.ASSUME_ES5 = !1;
  $jscomp.ASSUME_NO_NATIVE_MAP = !1;
  $jscomp.ASSUME_NO_NATIVE_SET = !1;
  $jscomp.SIMPLE_FROUND_POLYFILL = !1;
  $jscomp.defineProperty = $jscomp.ASSUME_ES5 || "function" == typeof Object.defineProperties ? Object.defineProperty : function (a, b, c) {
    a != Array.prototype && a != Object.prototype && (a[b] = c.value);
  };

  $jscomp.getGlobal = function (a) {
    return "undefined" != typeof window && window === a ? a : "undefined" != typeof commonjsGlobal && null != commonjsGlobal ? commonjsGlobal : a;
  };

  $jscomp.global = $jscomp.getGlobal(commonjsGlobal);

  $jscomp.polyfill = function (a, b, c, d) {
    if (b) {
      c = $jscomp.global;
      a = a.split(".");

      for (d = 0; d < a.length - 1; d++) {
        var e = a[d];
        e in c || (c[e] = {});
        c = c[e];
      }

      a = a[a.length - 1];
      d = c[a];
      b = b(d);
      b != d && null != b && $jscomp.defineProperty(c, a, {
        configurable: !0,
        writable: !0,
        value: b
      });
    }
  };

  $jscomp.polyfill("Array.prototype.findIndex", function (a) {
    return a ? a : function (a, c) {
      return $jscomp.findInternal(this, a, c).i;
    };
  }, "es6", "es3");

  $jscomp.checkStringArgs = function (a, b, c) {
    if (null == a) throw new TypeError("The 'this' value for String.prototype." + c + " must not be null or undefined");
    if (b instanceof RegExp) throw new TypeError("First argument to String.prototype." + c + " must not be a regular expression");
    return a + "";
  };

  $jscomp.polyfill("String.prototype.startsWith", function (a) {
    return a ? a : function (a, c) {
      var b = $jscomp.checkStringArgs(this, a, "startsWith");
      a += "";
      var e = b.length,
          f = a.length;
      c = Math.max(0, Math.min(c | 0, b.length));

      for (var g = 0; g < f && c < e;) {
        if (b[c++] != a[g++]) return !1;
      }

      return g >= f;
    };
  }, "es6", "es3");
  $jscomp.polyfill("String.prototype.endsWith", function (a) {
    return a ? a : function (a, c) {
      var b = $jscomp.checkStringArgs(this, a, "endsWith");
      a += "";
      void 0 === c && (c = b.length);
      c = Math.max(0, Math.min(c | 0, b.length));

      for (var e = a.length; 0 < e && 0 < c;) {
        if (b[--c] != a[--e]) return !1;
      }

      return 0 >= e;
    };
  }, "es6", "es3");
  $jscomp.polyfill("String.prototype.repeat", function (a) {
    return a ? a : function (a) {
      var b = $jscomp.checkStringArgs(this, null, "repeat");
      if (0 > a || 1342177279 < a) throw new RangeError("Invalid count value");
      a |= 0;

      for (var d = ""; a;) {
        if (a & 1 && (d += b), a >>>= 1) b += b;
      }

      return d;
    };
  }, "es6", "es3");
  $jscomp.polyfill("Array.prototype.find", function (a) {
    return a ? a : function (a, c) {
      return $jscomp.findInternal(this, a, c).v;
    };
  }, "es6", "es3");
  var COMPILED$1 = !0,
      goog = goog || {};
  goog.global = commonjsGlobal;

  goog.isDef = function (a) {
    return void 0 !== a;
  };

  goog.isString = function (a) {
    return "string" == typeof a;
  };

  goog.isBoolean = function (a) {
    return "boolean" == typeof a;
  };

  goog.isNumber = function (a) {
    return "number" == typeof a;
  };

  goog.exportPath_ = function (a, b, c) {
    a = a.split(".");
    c = c || goog.global;
    a[0] in c || "undefined" == typeof c.execScript || c.execScript("var " + a[0]);

    for (var d; a.length && (d = a.shift());) {
      !a.length && goog.isDef(b) ? c[d] = b : c = c[d] && c[d] !== Object.prototype[d] ? c[d] : c[d] = {};
    }
  };

  goog.define = function (a, b) {

    goog.exportPath_(a, b);
    return b;
  };

  goog.DEBUG = !0;
  goog.LOCALE = "en";
  goog.TRUSTED_SITE = !0;
  goog.STRICT_MODE_COMPATIBLE = !1;
  goog.DISALLOW_TEST_ONLY_CODE =  !goog.DEBUG;
  goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING = !1;

  goog.provide = function (a) {
    if (goog.isInModuleLoader_()) throw Error("goog.provide cannot be used within a module.");
    goog.constructNamespace_(a);
  };

  goog.constructNamespace_ = function (a, b) {

    goog.exportPath_(a, b);
  };

  goog.getScriptNonce = function (a) {
    if (a && a != goog.global) return goog.getScriptNonce_(a.document);
    null === goog.cspNonce_ && (goog.cspNonce_ = goog.getScriptNonce_(goog.global.document));
    return goog.cspNonce_;
  };

  goog.NONCE_PATTERN_ = /^[\w+/_-]+[=]{0,2}$/;
  goog.cspNonce_ = null;

  goog.getScriptNonce_ = function (a) {
    return (a = a.querySelector && a.querySelector("script[nonce]")) && (a = a.nonce || a.getAttribute("nonce")) && goog.NONCE_PATTERN_.test(a) ? a : "";
  };

  goog.VALID_MODULE_RE_ = /^[a-zA-Z_$][a-zA-Z0-9._$]*$/;

  goog.module = function (a) {
    if (!goog.isString(a) || !a || -1 == a.search(goog.VALID_MODULE_RE_)) throw Error("Invalid module identifier");
    if (!goog.isInGoogModuleLoader_()) throw Error("Module " + a + " has been loaded incorrectly. Note, modules cannot be loaded as normal scripts. They require some kind of pre-processing step. You're likely trying to load a module via a script tag or as a part of a concatenated bundle without rewriting the module. For more info see: https://github.com/google/closure-library/wiki/goog.module:-an-ES6-module-like-alternative-to-goog.provide.");
    if (goog.moduleLoaderState_.moduleName) throw Error("goog.module may only be called once per module.");
    goog.moduleLoaderState_.moduleName = a;
  };

  goog.module.get = function (a) {
    return goog.module.getInternal_(a);
  };

  goog.module.getInternal_ = function (a) {

    return null;
  };

  goog.ModuleType = {
    ES6: "es6",
    GOOG: "goog"
  };
  goog.moduleLoaderState_ = null;

  goog.isInModuleLoader_ = function () {
    return goog.isInGoogModuleLoader_() || goog.isInEs6ModuleLoader_();
  };

  goog.isInGoogModuleLoader_ = function () {
    return !!goog.moduleLoaderState_ && goog.moduleLoaderState_.type == goog.ModuleType.GOOG;
  };

  goog.isInEs6ModuleLoader_ = function () {
    if (goog.moduleLoaderState_ && goog.moduleLoaderState_.type == goog.ModuleType.ES6) return !0;
    var a = goog.global.$jscomp;
    return a ? "function" != typeof a.getCurrentModulePath ? !1 : !!a.getCurrentModulePath() : !1;
  };

  goog.module.declareLegacyNamespace = function () {
    goog.moduleLoaderState_.declareLegacyNamespace = !0;
  };

  goog.declareModuleId = function (a) {

    if (goog.moduleLoaderState_) goog.moduleLoaderState_.moduleName = a;else {
      var b = goog.global.$jscomp;
      if (!b || "function" != typeof b.getCurrentModulePath) throw Error('Module with namespace "' + a + '" has been loaded incorrectly.');
      b = b.require(b.getCurrentModulePath());
      goog.loadedModules_[a] = {
        exports: b,
        type: goog.ModuleType.ES6,
        moduleId: a
      };
    }
  };

  goog.module.declareNamespace = goog.declareModuleId;

  goog.setTestOnly = function (a) {
    if (goog.DISALLOW_TEST_ONLY_CODE) throw a = a || "", Error("Importing test-only code into non-debug environment" + (a ? ": " + a : "."));
  };

  goog.forwardDeclare = function (a) {};

  goog.getObjectByName = function (a, b) {
    a = a.split(".");
    b = b || goog.global;

    for (var c = 0; c < a.length; c++) {
      if (b = b[a[c]], !goog.isDefAndNotNull(b)) return null;
    }

    return b;
  };

  goog.globalize = function (a, b) {
    b = b || goog.global;

    for (var c in a) {
      b[c] = a[c];
    }
  };

  goog.addDependency = function (a, b, c, d) {
  };

  goog.ENABLE_DEBUG_LOADER = !0;

  goog.logToConsole_ = function (a) {
    goog.global.console && goog.global.console.error(a);
  };

  goog.require = function (a) {
  };

  goog.requireType = function (a) {
    return {};
  };

  goog.basePath = "";

  goog.nullFunction = function () {};

  goog.abstractMethod = function () {
    throw Error("unimplemented abstract method");
  };

  goog.addSingletonGetter = function (a) {
    a.instance_ = void 0;

    a.getInstance = function () {
      if (a.instance_) return a.instance_;
      goog.DEBUG && (goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = a);
      return a.instance_ = new a();
    };
  };

  goog.instantiatedSingletons_ = [];
  goog.LOAD_MODULE_USING_EVAL = !0;
  goog.SEAL_MODULE_EXPORTS = goog.DEBUG;
  goog.loadedModules_ = {};
  goog.DEPENDENCIES_ENABLED = !COMPILED$1 ;
  goog.TRANSPILE = "detect";
  goog.ASSUME_ES_MODULES_TRANSPILED = !1;
  goog.TRANSPILE_TO_LANGUAGE = "";
  goog.TRANSPILER = "transpile.js";
  goog.hasBadLetScoping = null;

  goog.useSafari10Workaround = function () {
    if (null == goog.hasBadLetScoping) {
      try {
        var a = !eval('"use strict";let x = 1; function f() { return typeof x; };f() == "number";');
      } catch (b) {
        a = !1;
      }

      goog.hasBadLetScoping = a;
    }

    return goog.hasBadLetScoping;
  };

  goog.workaroundSafari10EvalBug = function (a) {
    return "(function(){" + a + "\n;})();\n";
  };

  goog.loadModule = function (a) {
    var b = goog.moduleLoaderState_;

    try {
      goog.moduleLoaderState_ = {
        moduleName: "",
        declareLegacyNamespace: !1,
        type: goog.ModuleType.GOOG
      };
      if (goog.isFunction(a)) var c = a.call(void 0, {});else if (goog.isString(a)) goog.useSafari10Workaround() && (a = goog.workaroundSafari10EvalBug(a)), c = goog.loadModuleFromSource_.call(void 0, a);else throw Error("Invalid module definition");
      var d = goog.moduleLoaderState_.moduleName;
      if (goog.isString(d) && d) goog.moduleLoaderState_.declareLegacyNamespace ? goog.constructNamespace_(d, c) : goog.SEAL_MODULE_EXPORTS && Object.seal && "object" == _typeof(c) && null != c && Object.seal(c), goog.loadedModules_[d] = {
        exports: c,
        type: goog.ModuleType.GOOG,
        moduleId: goog.moduleLoaderState_.moduleName
      };else throw Error('Invalid module name "' + d + '"');
    } finally {
      goog.moduleLoaderState_ = b;
    }
  };

  goog.loadModuleFromSource_ = function (a) {
    eval(a);
    return {};
  };

  goog.normalizePath_ = function (a) {
    a = a.split("/");

    for (var b = 0; b < a.length;) {
      "." == a[b] ? a.splice(b, 1) : b && ".." == a[b] && a[b - 1] && ".." != a[b - 1] ? a.splice(--b, 2) : b++;
    }

    return a.join("/");
  };

  goog.loadFileSync_ = function (a) {
    if (goog.global.CLOSURE_LOAD_FILE_SYNC) return goog.global.CLOSURE_LOAD_FILE_SYNC(a);

    try {
      var b = new goog.global.XMLHttpRequest();
      b.open("get", a, !1);
      b.send();
      return 0 == b.status || 200 == b.status ? b.responseText : null;
    } catch (c) {
      return null;
    }
  };

  goog.transpile_ = function (a, b, c) {
    var d = goog.global.$jscomp;
    d || (goog.global.$jscomp = d = {});
    var e = d.transpile;

    if (!e) {
      var f = goog.basePath + goog.TRANSPILER,
          g = goog.loadFileSync_(f);

      if (g) {
        (function () {
          eval(g + "\n//# sourceURL=" + f);
        }).call(goog.global);
        if (goog.global.$gwtExport && goog.global.$gwtExport.$jscomp && !goog.global.$gwtExport.$jscomp.transpile) throw Error('The transpiler did not properly export the "transpile" method. $gwtExport: ' + JSON.stringify(goog.global.$gwtExport));
        goog.global.$jscomp.transpile = goog.global.$gwtExport.$jscomp.transpile;
        d = goog.global.$jscomp;
        e = d.transpile;
      }
    }

    e || (e = d.transpile = function (a, b) {
      goog.logToConsole_(b + " requires transpilation but no transpiler was found.");
      return a;
    });
    return e(a, b, c);
  };

  goog.typeOf = function (a) {
    var b = _typeof(a);

    if ("object" == b) {
      if (a) {
        if (a instanceof Array) return "array";
        if (a instanceof Object) return b;
        var c = Object.prototype.toString.call(a);
        if ("[object Window]" == c) return "object";
        if ("[object Array]" == c || "number" == typeof a.length && "undefined" != typeof a.splice && "undefined" != typeof a.propertyIsEnumerable && !a.propertyIsEnumerable("splice")) return "array";
        if ("[object Function]" == c || "undefined" != typeof a.call && "undefined" != typeof a.propertyIsEnumerable && !a.propertyIsEnumerable("call")) return "function";
      } else return "null";
    } else if ("function" == b && "undefined" == typeof a.call) return "object";
    return b;
  };

  goog.isNull = function (a) {
    return null === a;
  };

  goog.isDefAndNotNull = function (a) {
    return null != a;
  };

  goog.isArray = function (a) {
    return "array" == goog.typeOf(a);
  };

  goog.isArrayLike = function (a) {
    var b = goog.typeOf(a);
    return "array" == b || "object" == b && "number" == typeof a.length;
  };

  goog.isDateLike = function (a) {
    return goog.isObject(a) && "function" == typeof a.getFullYear;
  };

  goog.isFunction = function (a) {
    return "function" == goog.typeOf(a);
  };

  goog.isObject = function (a) {
    var b = _typeof(a);

    return "object" == b && null != a || "function" == b;
  };

  goog.getUid = function (a) {
    return a[goog.UID_PROPERTY_] || (a[goog.UID_PROPERTY_] = ++goog.uidCounter_);
  };

  goog.hasUid = function (a) {
    return !!a[goog.UID_PROPERTY_];
  };

  goog.removeUid = function (a) {
    null !== a && "removeAttribute" in a && a.removeAttribute(goog.UID_PROPERTY_);

    try {
      delete a[goog.UID_PROPERTY_];
    } catch (b) {}
  };

  goog.UID_PROPERTY_ = "closure_uid_" + (1E9 * Math.random() >>> 0);
  goog.uidCounter_ = 0;
  goog.getHashCode = goog.getUid;
  goog.removeHashCode = goog.removeUid;

  goog.cloneObject = function (a) {
    var b = goog.typeOf(a);

    if ("object" == b || "array" == b) {
      if ("function" === typeof a.clone) return a.clone();
      b = "array" == b ? [] : {};

      for (var c in a) {
        b[c] = goog.cloneObject(a[c]);
      }

      return b;
    }

    return a;
  };

  goog.bindNative_ = function (a, b, c) {
    return a.call.apply(a.bind, arguments);
  };

  goog.bindJs_ = function (a, b, c) {
    if (!a) throw Error();

    if (2 < arguments.length) {
      var d = Array.prototype.slice.call(arguments, 2);
      return function () {
        var c = Array.prototype.slice.call(arguments);
        Array.prototype.unshift.apply(c, d);
        return a.apply(b, c);
      };
    }

    return function () {
      return a.apply(b, arguments);
    };
  };

  goog.bind = function (a, b, c) {
    Function.prototype.bind && -1 != Function.prototype.bind.toString().indexOf("native code") ? goog.bind = goog.bindNative_ : goog.bind = goog.bindJs_;
    return goog.bind.apply(null, arguments);
  };

  goog.partial = function (a, b) {
    var c = Array.prototype.slice.call(arguments, 1);
    return function () {
      var b = c.slice();
      b.push.apply(b, arguments);
      return a.apply(this, b);
    };
  };

  goog.mixin = function (a, b) {
    for (var c in b) {
      a[c] = b[c];
    }
  };

  goog.now = goog.TRUSTED_SITE && Date.now || function () {
    return +new Date();
  };

  goog.globalEval = function (a) {
    if (goog.global.execScript) goog.global.execScript(a, "JavaScript");else if (goog.global.eval) {
      if (null == goog.evalWorksForGlobals_) {
        try {
          goog.global.eval("var _evalTest_ = 1;");
        } catch (d) {}

        if ("undefined" != typeof goog.global._evalTest_) {
          try {
            delete goog.global._evalTest_;
          } catch (d) {}

          goog.evalWorksForGlobals_ = !0;
        } else goog.evalWorksForGlobals_ = !1;
      }

      if (goog.evalWorksForGlobals_) goog.global.eval(a);else {
        var b = goog.global.document,
            c = b.createElement("SCRIPT");
        c.type = "text/javascript";
        c.defer = !1;
        c.appendChild(b.createTextNode(a));
        b.head.appendChild(c);
        b.head.removeChild(c);
      }
    } else throw Error("goog.globalEval not available");
  };

  goog.evalWorksForGlobals_ = null;

  goog.getCssName = function (a, b) {
    if ("." == String(a).charAt(0)) throw Error('className passed in goog.getCssName must not start with ".". You passed: ' + a);

    var c = function c(a) {
      return goog.cssNameMapping_[a] || a;
    },
        d = function d(a) {
      a = a.split("-");

      for (var b = [], d = 0; d < a.length; d++) {
        b.push(c(a[d]));
      }

      return b.join("-");
    };

    d = goog.cssNameMapping_ ? "BY_WHOLE" == goog.cssNameMappingStyle_ ? c : d : function (a) {
      return a;
    };
    a = b ? a + "-" + d(b) : d(a);
    return goog.global.CLOSURE_CSS_NAME_MAP_FN ? goog.global.CLOSURE_CSS_NAME_MAP_FN(a) : a;
  };

  goog.setCssNameMapping = function (a, b) {
    goog.cssNameMapping_ = a;
    goog.cssNameMappingStyle_ = b;
  };

  goog.getMsg = function (a, b) {
    b && (a = a.replace(/\{\$([^}]+)}/g, function (a, d) {
      return null != b && d in b ? b[d] : a;
    }));
    return a;
  };

  goog.getMsgWithFallback = function (a, b) {
    return a;
  };

  goog.exportSymbol = function (a, b, c) {
    goog.exportPath_(a, b, c);
  };

  goog.exportProperty = function (a, b, c) {
    a[b] = c;
  };

  goog.inherits = function (a, b) {
    function c() {}

    c.prototype = b.prototype;
    a.superClass_ = b.prototype;
    a.prototype = new c();
    a.prototype.constructor = a;

    a.base = function (a, c, f) {
      for (var d = Array(arguments.length - 2), e = 2; e < arguments.length; e++) {
        d[e - 2] = arguments[e];
      }

      return b.prototype[c].apply(a, d);
    };
  };

  goog.base = function (a, b, c) {
    var d = arguments.callee.caller;
    if (goog.STRICT_MODE_COMPATIBLE || goog.DEBUG && !d) throw Error("arguments.caller not defined.  goog.base() cannot be used with strict mode code. See http://www.ecma-international.org/ecma-262/5.1/#sec-C");

    if ("undefined" !== typeof d.superClass_) {
      for (var e = Array(arguments.length - 1), f = 1; f < arguments.length; f++) {
        e[f - 1] = arguments[f];
      }

      return d.superClass_.constructor.apply(a, e);
    }

    if ("string" != typeof b && "symbol" != _typeof(b)) throw Error("method names provided to goog.base must be a string or a symbol");
    e = Array(arguments.length - 2);

    for (f = 2; f < arguments.length; f++) {
      e[f - 2] = arguments[f];
    }

    f = !1;

    for (var g = a.constructor; g; g = g.superClass_ && g.superClass_.constructor) {
      if (g.prototype[b] === d) f = !0;else if (f) return g.prototype[b].apply(a, e);
    }

    if (a[b] === d) return a.constructor.prototype[b].apply(a, e);
    throw Error("goog.base called from a method of one name to a method of a different name");
  };

  goog.scope = function (a) {
    if (goog.isInModuleLoader_()) throw Error("goog.scope is not supported within a module.");
    a.call(goog.global);
  };

  goog.defineClass = function (a, b) {
    var c = b.constructor,
        d = b.statics;
    c && c != Object.prototype.constructor || (c = function c() {
      throw Error("cannot instantiate an interface (no constructor defined).");
    });
    c = goog.defineClass.createSealingConstructor_(c, a);
    a && goog.inherits(c, a);
    delete b.constructor;
    delete b.statics;
    goog.defineClass.applyProperties_(c.prototype, b);
    null != d && (d instanceof Function ? d(c) : goog.defineClass.applyProperties_(c, d));
    return c;
  };

  goog.defineClass.SEAL_CLASS_INSTANCES = goog.DEBUG;

  goog.defineClass.createSealingConstructor_ = function (a, b) {
    if (!goog.defineClass.SEAL_CLASS_INSTANCES) return a;

    var c = !goog.defineClass.isUnsealable_(b),
        d = function d() {
      var b = a.apply(this, arguments) || this;
      b[goog.UID_PROPERTY_] = b[goog.UID_PROPERTY_];
      this.constructor === d && c && Object.seal instanceof Function && Object.seal(b);
      return b;
    };

    return d;
  };

  goog.defineClass.isUnsealable_ = function (a) {
    return a && a.prototype && a.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_];
  };

  goog.defineClass.OBJECT_PROTOTYPE_FIELDS_ = "constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");

  goog.defineClass.applyProperties_ = function (a, b) {
    for (var c in b) {
      Object.prototype.hasOwnProperty.call(b, c) && (a[c] = b[c]);
    }

    for (var d = 0; d < goog.defineClass.OBJECT_PROTOTYPE_FIELDS_.length; d++) {
      c = goog.defineClass.OBJECT_PROTOTYPE_FIELDS_[d], Object.prototype.hasOwnProperty.call(b, c) && (a[c] = b[c]);
    }
  };

  goog.tagUnsealableClass = function (a) {
  };

  goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_ = "goog_defineClass_legacy_unsealable";
  var jspb = {
    BinaryConstants: {},
    ConstBinaryMessage: function ConstBinaryMessage() {},
    BinaryMessage: function BinaryMessage() {}
  };
  jspb.BinaryConstants.FieldType = {
    INVALID: -1,
    DOUBLE: 1,
    FLOAT: 2,
    INT64: 3,
    UINT64: 4,
    INT32: 5,
    FIXED64: 6,
    FIXED32: 7,
    BOOL: 8,
    STRING: 9,
    GROUP: 10,
    MESSAGE: 11,
    BYTES: 12,
    UINT32: 13,
    ENUM: 14,
    SFIXED32: 15,
    SFIXED64: 16,
    SINT32: 17,
    SINT64: 18,
    FHASH64: 30,
    VHASH64: 31
  };
  jspb.BinaryConstants.WireType = {
    INVALID: -1,
    VARINT: 0,
    FIXED64: 1,
    DELIMITED: 2,
    START_GROUP: 3,
    END_GROUP: 4,
    FIXED32: 5
  };

  jspb.BinaryConstants.FieldTypeToWireType = function (a) {
    var b = jspb.BinaryConstants.FieldType,
        c = jspb.BinaryConstants.WireType;

    switch (a) {
      case b.INT32:
      case b.INT64:
      case b.UINT32:
      case b.UINT64:
      case b.SINT32:
      case b.SINT64:
      case b.BOOL:
      case b.ENUM:
      case b.VHASH64:
        return c.VARINT;

      case b.DOUBLE:
      case b.FIXED64:
      case b.SFIXED64:
      case b.FHASH64:
        return c.FIXED64;

      case b.STRING:
      case b.MESSAGE:
      case b.BYTES:
        return c.DELIMITED;

      case b.FLOAT:
      case b.FIXED32:
      case b.SFIXED32:
        return c.FIXED32;

      default:
        return c.INVALID;
    }
  };

  jspb.BinaryConstants.INVALID_FIELD_NUMBER = -1;
  jspb.BinaryConstants.FLOAT32_EPS = 1.401298464324817E-45;
  jspb.BinaryConstants.FLOAT32_MIN = 1.1754943508222875E-38;
  jspb.BinaryConstants.FLOAT32_MAX = 3.4028234663852886E38;
  jspb.BinaryConstants.FLOAT64_EPS = 4.9E-324;
  jspb.BinaryConstants.FLOAT64_MIN = 2.2250738585072014E-308;
  jspb.BinaryConstants.FLOAT64_MAX = 1.7976931348623157E308;
  jspb.BinaryConstants.TWO_TO_20 = 1048576;
  jspb.BinaryConstants.TWO_TO_23 = 8388608;
  jspb.BinaryConstants.TWO_TO_31 = 2147483648;
  jspb.BinaryConstants.TWO_TO_32 = 4294967296;
  jspb.BinaryConstants.TWO_TO_52 = 4503599627370496;
  jspb.BinaryConstants.TWO_TO_63 = 0x7fffffffffffffff;
  jspb.BinaryConstants.TWO_TO_64 = 1.8446744073709552E19;
  jspb.BinaryConstants.ZERO_HASH = "\x00\x00\x00\x00\x00\x00\x00\x00";
  goog.dom = {};
  goog.dom.NodeType = {
    ELEMENT: 1,
    ATTRIBUTE: 2,
    TEXT: 3,
    CDATA_SECTION: 4,
    ENTITY_REFERENCE: 5,
    ENTITY: 6,
    PROCESSING_INSTRUCTION: 7,
    COMMENT: 8,
    DOCUMENT: 9,
    DOCUMENT_TYPE: 10,
    DOCUMENT_FRAGMENT: 11,
    NOTATION: 12
  };
  goog.debug = {};

  goog.debug.Error = function (a) {
    if (Error.captureStackTrace) Error.captureStackTrace(this, goog.debug.Error);else {
      var b = Error().stack;
      b && (this.stack = b);
    }
    a && (this.message = String(a));
    this.reportErrorToServer = !0;
  };

  goog.inherits(goog.debug.Error, Error);
  goog.debug.Error.prototype.name = "CustomError";
  goog.asserts = {};
  goog.asserts.ENABLE_ASSERTS = goog.DEBUG;

  goog.asserts.AssertionError = function (a, b) {
    goog.debug.Error.call(this, goog.asserts.subs_(a, b));
    this.messagePattern = a;
  };

  goog.inherits(goog.asserts.AssertionError, goog.debug.Error);
  goog.asserts.AssertionError.prototype.name = "AssertionError";

  goog.asserts.DEFAULT_ERROR_HANDLER = function (a) {
    throw a;
  };

  goog.asserts.errorHandler_ = goog.asserts.DEFAULT_ERROR_HANDLER;

  goog.asserts.subs_ = function (a, b) {
    a = a.split("%s");

    for (var c = "", d = a.length - 1, e = 0; e < d; e++) {
      c += a[e] + (e < b.length ? b[e] : "%s");
    }

    return c + a[d];
  };

  goog.asserts.doAssertFailure_ = function (a, b, c, d) {
    var e = "Assertion failed";

    if (c) {
      e += ": " + c;
      var f = d;
    } else a && (e += ": " + a, f = b);

    a = new goog.asserts.AssertionError("" + e, f || []);
    goog.asserts.errorHandler_(a);
  };

  goog.asserts.setErrorHandler = function (a) {
    goog.asserts.ENABLE_ASSERTS && (goog.asserts.errorHandler_ = a);
  };

  goog.asserts.assert = function (a, b, c) {
    goog.asserts.ENABLE_ASSERTS && !a && goog.asserts.doAssertFailure_("", null, b, Array.prototype.slice.call(arguments, 2));
    return a;
  };

  goog.asserts.fail = function (a, b) {
    goog.asserts.ENABLE_ASSERTS && goog.asserts.errorHandler_(new goog.asserts.AssertionError("Failure" + (a ? ": " + a : ""), Array.prototype.slice.call(arguments, 1)));
  };

  goog.asserts.assertNumber = function (a, b, c) {
    goog.asserts.ENABLE_ASSERTS && !goog.isNumber(a) && goog.asserts.doAssertFailure_("Expected number but got %s: %s.", [goog.typeOf(a), a], b, Array.prototype.slice.call(arguments, 2));
    return a;
  };

  goog.asserts.assertString = function (a, b, c) {
    goog.asserts.ENABLE_ASSERTS && !goog.isString(a) && goog.asserts.doAssertFailure_("Expected string but got %s: %s.", [goog.typeOf(a), a], b, Array.prototype.slice.call(arguments, 2));
    return a;
  };

  goog.asserts.assertFunction = function (a, b, c) {
    goog.asserts.ENABLE_ASSERTS && !goog.isFunction(a) && goog.asserts.doAssertFailure_("Expected function but got %s: %s.", [goog.typeOf(a), a], b, Array.prototype.slice.call(arguments, 2));
    return a;
  };

  goog.asserts.assertObject = function (a, b, c) {
    goog.asserts.ENABLE_ASSERTS && !goog.isObject(a) && goog.asserts.doAssertFailure_("Expected object but got %s: %s.", [goog.typeOf(a), a], b, Array.prototype.slice.call(arguments, 2));
    return a;
  };

  goog.asserts.assertArray = function (a, b, c) {
    goog.asserts.ENABLE_ASSERTS && !goog.isArray(a) && goog.asserts.doAssertFailure_("Expected array but got %s: %s.", [goog.typeOf(a), a], b, Array.prototype.slice.call(arguments, 2));
    return a;
  };

  goog.asserts.assertBoolean = function (a, b, c) {
    goog.asserts.ENABLE_ASSERTS && !goog.isBoolean(a) && goog.asserts.doAssertFailure_("Expected boolean but got %s: %s.", [goog.typeOf(a), a], b, Array.prototype.slice.call(arguments, 2));
    return a;
  };

  goog.asserts.assertElement = function (a, b, c) {
    !goog.asserts.ENABLE_ASSERTS || goog.isObject(a) && a.nodeType == goog.dom.NodeType.ELEMENT || goog.asserts.doAssertFailure_("Expected Element but got %s: %s.", [goog.typeOf(a), a], b, Array.prototype.slice.call(arguments, 2));
    return a;
  };

  goog.asserts.assertInstanceof = function (a, b, c, d) {
    !goog.asserts.ENABLE_ASSERTS || a instanceof b || goog.asserts.doAssertFailure_("Expected instanceof %s but got %s.", [goog.asserts.getType_(b), goog.asserts.getType_(a)], c, Array.prototype.slice.call(arguments, 3));
    return a;
  };

  goog.asserts.assertFinite = function (a, b, c) {
    !goog.asserts.ENABLE_ASSERTS || "number" == typeof a && isFinite(a) || goog.asserts.doAssertFailure_("Expected %s to be a finite number but it is not.", [a], b, Array.prototype.slice.call(arguments, 2));
    return a;
  };

  goog.asserts.assertObjectPrototypeIsIntact = function () {
    for (var a in Object.prototype) {
      goog.asserts.fail(a + " should not be enumerable in Object.prototype.");
    }
  };

  goog.asserts.getType_ = function (a) {
    return a instanceof Function ? a.displayName || a.name || "unknown type name" : a instanceof Object ? a.constructor.displayName || a.constructor.name || Object.prototype.toString.call(a) : null === a ? "null" : _typeof(a);
  };

  goog.array = {};
  goog.NATIVE_ARRAY_PROTOTYPES = goog.TRUSTED_SITE;
  goog.array.ASSUME_NATIVE_FUNCTIONS = !1;

  goog.array.peek = function (a) {
    return a[a.length - 1];
  };

  goog.array.last = goog.array.peek;
  goog.array.indexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.indexOf) ? function (a, b, c) {
    goog.asserts.assert(null != a.length);
    return Array.prototype.indexOf.call(a, b, c);
  } : function (a, b, c) {
    c = null == c ? 0 : 0 > c ? Math.max(0, a.length + c) : c;
    if (goog.isString(a)) return goog.isString(b) && 1 == b.length ? a.indexOf(b, c) : -1;

    for (; c < a.length; c++) {
      if (c in a && a[c] === b) return c;
    }

    return -1;
  };
  goog.array.lastIndexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.lastIndexOf) ? function (a, b, c) {
    goog.asserts.assert(null != a.length);
    return Array.prototype.lastIndexOf.call(a, b, null == c ? a.length - 1 : c);
  } : function (a, b, c) {
    c = null == c ? a.length - 1 : c;
    0 > c && (c = Math.max(0, a.length + c));
    if (goog.isString(a)) return goog.isString(b) && 1 == b.length ? a.lastIndexOf(b, c) : -1;

    for (; 0 <= c; c--) {
      if (c in a && a[c] === b) return c;
    }

    return -1;
  };
  goog.array.forEach = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.forEach) ? function (a, b, c) {
    goog.asserts.assert(null != a.length);
    Array.prototype.forEach.call(a, b, c);
  } : function (a, b, c) {
    for (var d = a.length, e = goog.isString(a) ? a.split("") : a, f = 0; f < d; f++) {
      f in e && b.call(c, e[f], f, a);
    }
  };

  goog.array.forEachRight = function (a, b, c) {
    var d = a.length,
        e = goog.isString(a) ? a.split("") : a;

    for (--d; 0 <= d; --d) {
      d in e && b.call(c, e[d], d, a);
    }
  };

  goog.array.filter = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.filter) ? function (a, b, c) {
    goog.asserts.assert(null != a.length);
    return Array.prototype.filter.call(a, b, c);
  } : function (a, b, c) {
    for (var d = a.length, e = [], f = 0, g = goog.isString(a) ? a.split("") : a, h = 0; h < d; h++) {
      if (h in g) {
        var k = g[h];
        b.call(c, k, h, a) && (e[f++] = k);
      }
    }

    return e;
  };
  goog.array.map = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.map) ? function (a, b, c) {
    goog.asserts.assert(null != a.length);
    return Array.prototype.map.call(a, b, c);
  } : function (a, b, c) {
    for (var d = a.length, e = Array(d), f = goog.isString(a) ? a.split("") : a, g = 0; g < d; g++) {
      g in f && (e[g] = b.call(c, f[g], g, a));
    }

    return e;
  };
  goog.array.reduce = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.reduce) ? function (a, b, c, d) {
    goog.asserts.assert(null != a.length);
    d && (b = goog.bind(b, d));
    return Array.prototype.reduce.call(a, b, c);
  } : function (a, b, c, d) {
    var e = c;
    goog.array.forEach(a, function (c, g) {
      e = b.call(d, e, c, g, a);
    });
    return e;
  };
  goog.array.reduceRight = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.reduceRight) ? function (a, b, c, d) {
    goog.asserts.assert(null != a.length);
    goog.asserts.assert(null != b);
    d && (b = goog.bind(b, d));
    return Array.prototype.reduceRight.call(a, b, c);
  } : function (a, b, c, d) {
    var e = c;
    goog.array.forEachRight(a, function (c, g) {
      e = b.call(d, e, c, g, a);
    });
    return e;
  };
  goog.array.some = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.some) ? function (a, b, c) {
    goog.asserts.assert(null != a.length);
    return Array.prototype.some.call(a, b, c);
  } : function (a, b, c) {
    for (var d = a.length, e = goog.isString(a) ? a.split("") : a, f = 0; f < d; f++) {
      if (f in e && b.call(c, e[f], f, a)) return !0;
    }

    return !1;
  };
  goog.array.every = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.every) ? function (a, b, c) {
    goog.asserts.assert(null != a.length);
    return Array.prototype.every.call(a, b, c);
  } : function (a, b, c) {
    for (var d = a.length, e = goog.isString(a) ? a.split("") : a, f = 0; f < d; f++) {
      if (f in e && !b.call(c, e[f], f, a)) return !1;
    }

    return !0;
  };

  goog.array.count = function (a, b, c) {
    var d = 0;
    goog.array.forEach(a, function (a, f, g) {
      b.call(c, a, f, g) && ++d;
    }, c);
    return d;
  };

  goog.array.find = function (a, b, c) {
    b = goog.array.findIndex(a, b, c);
    return 0 > b ? null : goog.isString(a) ? a.charAt(b) : a[b];
  };

  goog.array.findIndex = function (a, b, c) {
    for (var d = a.length, e = goog.isString(a) ? a.split("") : a, f = 0; f < d; f++) {
      if (f in e && b.call(c, e[f], f, a)) return f;
    }

    return -1;
  };

  goog.array.findRight = function (a, b, c) {
    b = goog.array.findIndexRight(a, b, c);
    return 0 > b ? null : goog.isString(a) ? a.charAt(b) : a[b];
  };

  goog.array.findIndexRight = function (a, b, c) {
    var d = a.length,
        e = goog.isString(a) ? a.split("") : a;

    for (--d; 0 <= d; d--) {
      if (d in e && b.call(c, e[d], d, a)) return d;
    }

    return -1;
  };

  goog.array.contains = function (a, b) {
    return 0 <= goog.array.indexOf(a, b);
  };

  goog.array.isEmpty = function (a) {
    return 0 == a.length;
  };

  goog.array.clear = function (a) {
    if (!goog.isArray(a)) for (var b = a.length - 1; 0 <= b; b--) {
      delete a[b];
    }
    a.length = 0;
  };

  goog.array.insert = function (a, b) {
    goog.array.contains(a, b) || a.push(b);
  };

  goog.array.insertAt = function (a, b, c) {
    goog.array.splice(a, c, 0, b);
  };

  goog.array.insertArrayAt = function (a, b, c) {
    goog.partial(goog.array.splice, a, c, 0).apply(null, b);
  };

  goog.array.insertBefore = function (a, b, c) {
    var d;
    2 == arguments.length || 0 > (d = goog.array.indexOf(a, c)) ? a.push(b) : goog.array.insertAt(a, b, d);
  };

  goog.array.remove = function (a, b) {
    b = goog.array.indexOf(a, b);
    var c;
    (c = 0 <= b) && goog.array.removeAt(a, b);
    return c;
  };

  goog.array.removeLast = function (a, b) {
    b = goog.array.lastIndexOf(a, b);
    return 0 <= b ? (goog.array.removeAt(a, b), !0) : !1;
  };

  goog.array.removeAt = function (a, b) {
    goog.asserts.assert(null != a.length);
    return 1 == Array.prototype.splice.call(a, b, 1).length;
  };

  goog.array.removeIf = function (a, b, c) {
    b = goog.array.findIndex(a, b, c);
    return 0 <= b ? (goog.array.removeAt(a, b), !0) : !1;
  };

  goog.array.removeAllIf = function (a, b, c) {
    var d = 0;
    goog.array.forEachRight(a, function (e, f) {
      b.call(c, e, f, a) && goog.array.removeAt(a, f) && d++;
    });
    return d;
  };

  goog.array.concat = function (a) {
    return Array.prototype.concat.apply([], arguments);
  };

  goog.array.join = function (a) {
    return Array.prototype.concat.apply([], arguments);
  };

  goog.array.toArray = function (a) {
    var b = a.length;

    if (0 < b) {
      for (var c = Array(b), d = 0; d < b; d++) {
        c[d] = a[d];
      }

      return c;
    }

    return [];
  };

  goog.array.clone = goog.array.toArray;

  goog.array.extend = function (a, b) {
    for (var c = 1; c < arguments.length; c++) {
      var d = arguments[c];

      if (goog.isArrayLike(d)) {
        var e = a.length || 0,
            f = d.length || 0;
        a.length = e + f;

        for (var g = 0; g < f; g++) {
          a[e + g] = d[g];
        }
      } else a.push(d);
    }
  };

  goog.array.splice = function (a, b, c, d) {
    goog.asserts.assert(null != a.length);
    return Array.prototype.splice.apply(a, goog.array.slice(arguments, 1));
  };

  goog.array.slice = function (a, b, c) {
    goog.asserts.assert(null != a.length);
    return 2 >= arguments.length ? Array.prototype.slice.call(a, b) : Array.prototype.slice.call(a, b, c);
  };

  goog.array.removeDuplicates = function (a, b, c) {
    b = b || a;

    var d = function d(a) {
      return goog.isObject(a) ? "o" + goog.getUid(a) : _typeof(a).charAt(0) + a;
    };

    c = c || d;
    d = {};

    for (var e = 0, f = 0; f < a.length;) {
      var g = a[f++],
          h = c(g);
      Object.prototype.hasOwnProperty.call(d, h) || (d[h] = !0, b[e++] = g);
    }

    b.length = e;
  };

  goog.array.binarySearch = function (a, b, c) {
    return goog.array.binarySearch_(a, c || goog.array.defaultCompare, !1, b);
  };

  goog.array.binarySelect = function (a, b, c) {
    return goog.array.binarySearch_(a, b, !0, void 0, c);
  };

  goog.array.binarySearch_ = function (a, b, c, d, e) {
    for (var f = 0, g = a.length, h; f < g;) {
      var k = f + g >> 1;
      var l = c ? b.call(e, a[k], k, a) : b(d, a[k]);
      0 < l ? f = k + 1 : (g = k, h = !l);
    }

    return h ? f : ~f;
  };

  goog.array.sort = function (a, b) {
    a.sort(b || goog.array.defaultCompare);
  };

  goog.array.stableSort = function (a, b) {
    for (var c = Array(a.length), d = 0; d < a.length; d++) {
      c[d] = {
        index: d,
        value: a[d]
      };
    }

    var e = b || goog.array.defaultCompare;
    goog.array.sort(c, function (a, b) {
      return e(a.value, b.value) || a.index - b.index;
    });

    for (d = 0; d < a.length; d++) {
      a[d] = c[d].value;
    }
  };

  goog.array.sortByKey = function (a, b, c) {
    var d = c || goog.array.defaultCompare;
    goog.array.sort(a, function (a, c) {
      return d(b(a), b(c));
    });
  };

  goog.array.sortObjectsByKey = function (a, b, c) {
    goog.array.sortByKey(a, function (a) {
      return a[b];
    }, c);
  };

  goog.array.isSorted = function (a, b, c) {
    b = b || goog.array.defaultCompare;

    for (var d = 1; d < a.length; d++) {
      var e = b(a[d - 1], a[d]);
      if (0 < e || 0 == e && c) return !1;
    }

    return !0;
  };

  goog.array.equals = function (a, b, c) {
    if (!goog.isArrayLike(a) || !goog.isArrayLike(b) || a.length != b.length) return !1;
    var d = a.length;
    c = c || goog.array.defaultCompareEquality;

    for (var e = 0; e < d; e++) {
      if (!c(a[e], b[e])) return !1;
    }

    return !0;
  };

  goog.array.compare3 = function (a, b, c) {
    c = c || goog.array.defaultCompare;

    for (var d = Math.min(a.length, b.length), e = 0; e < d; e++) {
      var f = c(a[e], b[e]);
      if (0 != f) return f;
    }

    return goog.array.defaultCompare(a.length, b.length);
  };

  goog.array.defaultCompare = function (a, b) {
    return a > b ? 1 : a < b ? -1 : 0;
  };

  goog.array.inverseDefaultCompare = function (a, b) {
    return -goog.array.defaultCompare(a, b);
  };

  goog.array.defaultCompareEquality = function (a, b) {
    return a === b;
  };

  goog.array.binaryInsert = function (a, b, c) {
    c = goog.array.binarySearch(a, b, c);
    return 0 > c ? (goog.array.insertAt(a, b, -(c + 1)), !0) : !1;
  };

  goog.array.binaryRemove = function (a, b, c) {
    b = goog.array.binarySearch(a, b, c);
    return 0 <= b ? goog.array.removeAt(a, b) : !1;
  };

  goog.array.bucket = function (a, b, c) {
    for (var d = {}, e = 0; e < a.length; e++) {
      var f = a[e],
          g = b.call(c, f, e, a);
      goog.isDef(g) && (d[g] || (d[g] = [])).push(f);
    }

    return d;
  };

  goog.array.toObject = function (a, b, c) {
    var d = {};
    goog.array.forEach(a, function (e, f) {
      d[b.call(c, e, f, a)] = e;
    });
    return d;
  };

  goog.array.range = function (a, b, c) {
    var d = [],
        e = 0,
        f = a;
    c = c || 1;
    void 0 !== b && (e = a, f = b);
    if (0 > c * (f - e)) return [];
    if (0 < c) for (a = e; a < f; a += c) {
      d.push(a);
    } else for (a = e; a > f; a += c) {
      d.push(a);
    }
    return d;
  };

  goog.array.repeat = function (a, b) {
    for (var c = [], d = 0; d < b; d++) {
      c[d] = a;
    }

    return c;
  };

  goog.array.flatten = function (a) {
    for (var b = [], c = 0; c < arguments.length; c++) {
      var d = arguments[c];
      if (goog.isArray(d)) for (var e = 0; e < d.length; e += 8192) {
        var f = goog.array.slice(d, e, e + 8192);
        f = goog.array.flatten.apply(null, f);

        for (var g = 0; g < f.length; g++) {
          b.push(f[g]);
        }
      } else b.push(d);
    }

    return b;
  };

  goog.array.rotate = function (a, b) {
    goog.asserts.assert(null != a.length);
    a.length && (b %= a.length, 0 < b ? Array.prototype.unshift.apply(a, a.splice(-b, b)) : 0 > b && Array.prototype.push.apply(a, a.splice(0, -b)));
    return a;
  };

  goog.array.moveItem = function (a, b, c) {
    goog.asserts.assert(0 <= b && b < a.length);
    goog.asserts.assert(0 <= c && c < a.length);
    b = Array.prototype.splice.call(a, b, 1);
    Array.prototype.splice.call(a, c, 0, b[0]);
  };

  goog.array.zip = function (a) {
    if (!arguments.length) return [];

    for (var b = [], c = arguments[0].length, d = 1; d < arguments.length; d++) {
      arguments[d].length < c && (c = arguments[d].length);
    }

    for (d = 0; d < c; d++) {
      for (var e = [], f = 0; f < arguments.length; f++) {
        e.push(arguments[f][d]);
      }

      b.push(e);
    }

    return b;
  };

  goog.array.shuffle = function (a, b) {
    b = b || Math.random;

    for (var c = a.length - 1; 0 < c; c--) {
      var d = Math.floor(b() * (c + 1)),
          e = a[c];
      a[c] = a[d];
      a[d] = e;
    }
  };

  goog.array.copyByIndex = function (a, b) {
    var c = [];
    goog.array.forEach(b, function (b) {
      c.push(a[b]);
    });
    return c;
  };

  goog.array.concatMap = function (a, b, c) {
    return goog.array.concat.apply([], goog.array.map(a, b, c));
  };

  goog.crypt = {};

  goog.crypt.stringToByteArray = function (a) {
    for (var b = [], c = 0, d = 0; d < a.length; d++) {
      var e = a.charCodeAt(d);
      255 < e && (b[c++] = e & 255, e >>= 8);
      b[c++] = e;
    }

    return b;
  };

  goog.crypt.byteArrayToString = function (a) {
    if (8192 >= a.length) return String.fromCharCode.apply(null, a);

    for (var b = "", c = 0; c < a.length; c += 8192) {
      var d = goog.array.slice(a, c, c + 8192);
      b += String.fromCharCode.apply(null, d);
    }

    return b;
  };

  goog.crypt.byteArrayToHex = function (a, b) {
    return goog.array.map(a, function (a) {
      a = a.toString(16);
      return 1 < a.length ? a : "0" + a;
    }).join(b || "");
  };

  goog.crypt.hexToByteArray = function (a) {
    goog.asserts.assert(0 == a.length % 2, "Key string length must be multiple of 2");

    for (var b = [], c = 0; c < a.length; c += 2) {
      b.push(parseInt(a.substring(c, c + 2), 16));
    }

    return b;
  };

  goog.crypt.stringToUtf8ByteArray = function (a) {
    for (var b = [], c = 0, d = 0; d < a.length; d++) {
      var e = a.charCodeAt(d);
      128 > e ? b[c++] = e : (2048 > e ? b[c++] = e >> 6 | 192 : (55296 == (e & 64512) && d + 1 < a.length && 56320 == (a.charCodeAt(d + 1) & 64512) ? (e = 65536 + ((e & 1023) << 10) + (a.charCodeAt(++d) & 1023), b[c++] = e >> 18 | 240, b[c++] = e >> 12 & 63 | 128) : b[c++] = e >> 12 | 224, b[c++] = e >> 6 & 63 | 128), b[c++] = e & 63 | 128);
    }

    return b;
  };

  goog.crypt.utf8ByteArrayToString = function (a) {
    for (var b = [], c = 0, d = 0; c < a.length;) {
      var e = a[c++];
      if (128 > e) b[d++] = String.fromCharCode(e);else if (191 < e && 224 > e) {
        var f = a[c++];
        b[d++] = String.fromCharCode((e & 31) << 6 | f & 63);
      } else if (239 < e && 365 > e) {
        f = a[c++];
        var g = a[c++],
            h = a[c++];
        e = ((e & 7) << 18 | (f & 63) << 12 | (g & 63) << 6 | h & 63) - 65536;
        b[d++] = String.fromCharCode(55296 + (e >> 10));
        b[d++] = String.fromCharCode(56320 + (e & 1023));
      } else f = a[c++], g = a[c++], b[d++] = String.fromCharCode((e & 15) << 12 | (f & 63) << 6 | g & 63);
    }

    return b.join("");
  };

  goog.crypt.xorByteArray = function (a, b) {
    goog.asserts.assert(a.length == b.length, "XOR array lengths must match");

    for (var c = [], d = 0; d < a.length; d++) {
      c.push(a[d] ^ b[d]);
    }

    return c;
  };

  goog.string = {};
  goog.string.internal = {};

  goog.string.internal.startsWith = function (a, b) {
    return 0 == a.lastIndexOf(b, 0);
  };

  goog.string.internal.endsWith = function (a, b) {
    var c = a.length - b.length;
    return 0 <= c && a.indexOf(b, c) == c;
  };

  goog.string.internal.caseInsensitiveStartsWith = function (a, b) {
    return 0 == goog.string.internal.caseInsensitiveCompare(b, a.substr(0, b.length));
  };

  goog.string.internal.caseInsensitiveEndsWith = function (a, b) {
    return 0 == goog.string.internal.caseInsensitiveCompare(b, a.substr(a.length - b.length, b.length));
  };

  goog.string.internal.caseInsensitiveEquals = function (a, b) {
    return a.toLowerCase() == b.toLowerCase();
  };

  goog.string.internal.isEmptyOrWhitespace = function (a) {
    return /^[\s\xa0]*$/.test(a);
  };

  goog.string.internal.trim = goog.TRUSTED_SITE && String.prototype.trim ? function (a) {
    return a.trim();
  } : function (a) {
    return /^[\s\xa0]*([\s\S]*?)[\s\xa0]*$/.exec(a)[1];
  };

  goog.string.internal.caseInsensitiveCompare = function (a, b) {
    a = String(a).toLowerCase();
    b = String(b).toLowerCase();
    return a < b ? -1 : a == b ? 0 : 1;
  };

  goog.string.internal.newLineToBr = function (a, b) {
    return a.replace(/(\r\n|\r|\n)/g, b ? "<br />" : "<br>");
  };

  goog.string.internal.htmlEscape = function (a, b) {
    if (b) a = a.replace(goog.string.internal.AMP_RE_, "&amp;").replace(goog.string.internal.LT_RE_, "&lt;").replace(goog.string.internal.GT_RE_, "&gt;").replace(goog.string.internal.QUOT_RE_, "&quot;").replace(goog.string.internal.SINGLE_QUOTE_RE_, "&#39;").replace(goog.string.internal.NULL_RE_, "&#0;");else {
      if (!goog.string.internal.ALL_RE_.test(a)) return a;
      -1 != a.indexOf("&") && (a = a.replace(goog.string.internal.AMP_RE_, "&amp;"));
      -1 != a.indexOf("<") && (a = a.replace(goog.string.internal.LT_RE_, "&lt;"));
      -1 != a.indexOf(">") && (a = a.replace(goog.string.internal.GT_RE_, "&gt;"));
      -1 != a.indexOf('"') && (a = a.replace(goog.string.internal.QUOT_RE_, "&quot;"));
      -1 != a.indexOf("'") && (a = a.replace(goog.string.internal.SINGLE_QUOTE_RE_, "&#39;"));
      -1 != a.indexOf("\x00") && (a = a.replace(goog.string.internal.NULL_RE_, "&#0;"));
    }
    return a;
  };

  goog.string.internal.AMP_RE_ = /&/g;
  goog.string.internal.LT_RE_ = /</g;
  goog.string.internal.GT_RE_ = />/g;
  goog.string.internal.QUOT_RE_ = /"/g;
  goog.string.internal.SINGLE_QUOTE_RE_ = /'/g;
  goog.string.internal.NULL_RE_ = /\x00/g;
  goog.string.internal.ALL_RE_ = /[\x00&<>"']/;

  goog.string.internal.whitespaceEscape = function (a, b) {
    return goog.string.internal.newLineToBr(a.replace(/  /g, " &#160;"), b);
  };

  goog.string.internal.contains = function (a, b) {
    return -1 != a.indexOf(b);
  };

  goog.string.internal.caseInsensitiveContains = function (a, b) {
    return goog.string.internal.contains(a.toLowerCase(), b.toLowerCase());
  };

  goog.string.internal.compareVersions = function (a, b) {
    var c = 0;
    a = goog.string.internal.trim(String(a)).split(".");
    b = goog.string.internal.trim(String(b)).split(".");

    for (var d = Math.max(a.length, b.length), e = 0; 0 == c && e < d; e++) {
      var f = a[e] || "",
          g = b[e] || "";

      do {
        f = /(\d*)(\D*)(.*)/.exec(f) || ["", "", "", ""];
        g = /(\d*)(\D*)(.*)/.exec(g) || ["", "", "", ""];
        if (0 == f[0].length && 0 == g[0].length) break;
        c = 0 == f[1].length ? 0 : parseInt(f[1], 10);
        var h = 0 == g[1].length ? 0 : parseInt(g[1], 10);
        c = goog.string.internal.compareElements_(c, h) || goog.string.internal.compareElements_(0 == f[2].length, 0 == g[2].length) || goog.string.internal.compareElements_(f[2], g[2]);
        f = f[3];
        g = g[3];
      } while (0 == c);
    }

    return c;
  };

  goog.string.internal.compareElements_ = function (a, b) {
    return a < b ? -1 : a > b ? 1 : 0;
  };

  goog.string.DETECT_DOUBLE_ESCAPING = !1;
  goog.string.FORCE_NON_DOM_HTML_UNESCAPING = !1;
  goog.string.Unicode = {
    NBSP: "\xA0"
  };
  goog.string.startsWith = goog.string.internal.startsWith;
  goog.string.endsWith = goog.string.internal.endsWith;
  goog.string.caseInsensitiveStartsWith = goog.string.internal.caseInsensitiveStartsWith;
  goog.string.caseInsensitiveEndsWith = goog.string.internal.caseInsensitiveEndsWith;
  goog.string.caseInsensitiveEquals = goog.string.internal.caseInsensitiveEquals;

  goog.string.subs = function (a, b) {
    for (var c = a.split("%s"), d = "", e = Array.prototype.slice.call(arguments, 1); e.length && 1 < c.length;) {
      d += c.shift() + e.shift();
    }

    return d + c.join("%s");
  };

  goog.string.collapseWhitespace = function (a) {
    return a.replace(/[\s\xa0]+/g, " ").replace(/^\s+|\s+$/g, "");
  };

  goog.string.isEmptyOrWhitespace = goog.string.internal.isEmptyOrWhitespace;

  goog.string.isEmptyString = function (a) {
    return 0 == a.length;
  };

  goog.string.isEmpty = goog.string.isEmptyOrWhitespace;

  goog.string.isEmptyOrWhitespaceSafe = function (a) {
    return goog.string.isEmptyOrWhitespace(goog.string.makeSafe(a));
  };

  goog.string.isEmptySafe = goog.string.isEmptyOrWhitespaceSafe;

  goog.string.isBreakingWhitespace = function (a) {
    return !/[^\t\n\r ]/.test(a);
  };

  goog.string.isAlpha = function (a) {
    return !/[^a-zA-Z]/.test(a);
  };

  goog.string.isNumeric = function (a) {
    return !/[^0-9]/.test(a);
  };

  goog.string.isAlphaNumeric = function (a) {
    return !/[^a-zA-Z0-9]/.test(a);
  };

  goog.string.isSpace = function (a) {
    return " " == a;
  };

  goog.string.isUnicodeChar = function (a) {
    return 1 == a.length && " " <= a && "~" >= a || "\x80" <= a && "\uFFFD" >= a;
  };

  goog.string.stripNewlines = function (a) {
    return a.replace(/(\r\n|\r|\n)+/g, " ");
  };

  goog.string.canonicalizeNewlines = function (a) {
    return a.replace(/(\r\n|\r|\n)/g, "\n");
  };

  goog.string.normalizeWhitespace = function (a) {
    return a.replace(/\xa0|\s/g, " ");
  };

  goog.string.normalizeSpaces = function (a) {
    return a.replace(/\xa0|[ \t]+/g, " ");
  };

  goog.string.collapseBreakingSpaces = function (a) {
    return a.replace(/[\t\r\n ]+/g, " ").replace(/^[\t\r\n ]+|[\t\r\n ]+$/g, "");
  };

  goog.string.trim = goog.string.internal.trim;

  goog.string.trimLeft = function (a) {
    return a.replace(/^[\s\xa0]+/, "");
  };

  goog.string.trimRight = function (a) {
    return a.replace(/[\s\xa0]+$/, "");
  };

  goog.string.caseInsensitiveCompare = goog.string.internal.caseInsensitiveCompare;

  goog.string.numberAwareCompare_ = function (a, b, c) {
    if (a == b) return 0;
    if (!a) return -1;
    if (!b) return 1;

    for (var d = a.toLowerCase().match(c), e = b.toLowerCase().match(c), f = Math.min(d.length, e.length), g = 0; g < f; g++) {
      c = d[g];
      var h = e[g];
      if (c != h) return a = parseInt(c, 10), !isNaN(a) && (b = parseInt(h, 10), !isNaN(b) && a - b) ? a - b : c < h ? -1 : 1;
    }

    return d.length != e.length ? d.length - e.length : a < b ? -1 : 1;
  };

  goog.string.intAwareCompare = function (a, b) {
    return goog.string.numberAwareCompare_(a, b, /\d+|\D+/g);
  };

  goog.string.floatAwareCompare = function (a, b) {
    return goog.string.numberAwareCompare_(a, b, /\d+|\.\d+|\D+/g);
  };

  goog.string.numerateCompare = goog.string.floatAwareCompare;

  goog.string.urlEncode = function (a) {
    return encodeURIComponent(String(a));
  };

  goog.string.urlDecode = function (a) {
    return decodeURIComponent(a.replace(/\+/g, " "));
  };

  goog.string.newLineToBr = goog.string.internal.newLineToBr;

  goog.string.htmlEscape = function (a, b) {
    a = goog.string.internal.htmlEscape(a, b);
    goog.string.DETECT_DOUBLE_ESCAPING && (a = a.replace(goog.string.E_RE_, "&#101;"));
    return a;
  };

  goog.string.E_RE_ = /e/g;

  goog.string.unescapeEntities = function (a) {
    return goog.string.contains(a, "&") ? !goog.string.FORCE_NON_DOM_HTML_UNESCAPING && "document" in goog.global ? goog.string.unescapeEntitiesUsingDom_(a) : goog.string.unescapePureXmlEntities_(a) : a;
  };

  goog.string.unescapeEntitiesWithDocument = function (a, b) {
    return goog.string.contains(a, "&") ? goog.string.unescapeEntitiesUsingDom_(a, b) : a;
  };

  goog.string.unescapeEntitiesUsingDom_ = function (a, b) {
    var c = {
      "&amp;": "&",
      "&lt;": "<",
      "&gt;": ">",
      "&quot;": '"'
    };
    var d = b ? b.createElement("div") : goog.global.document.createElement("div");
    return a.replace(goog.string.HTML_ENTITY_PATTERN_, function (a, b) {
      var e = c[a];
      if (e) return e;
      "#" == b.charAt(0) && (b = Number("0" + b.substr(1)), isNaN(b) || (e = String.fromCharCode(b)));
      e || (d.innerHTML = a + " ", e = d.firstChild.nodeValue.slice(0, -1));
      return c[a] = e;
    });
  };

  goog.string.unescapePureXmlEntities_ = function (a) {
    return a.replace(/&([^;]+);/g, function (a, c) {
      switch (c) {
        case "amp":
          return "&";

        case "lt":
          return "<";

        case "gt":
          return ">";

        case "quot":
          return '"';

        default:
          return "#" != c.charAt(0) || (c = Number("0" + c.substr(1)), isNaN(c)) ? a : String.fromCharCode(c);
      }
    });
  };

  goog.string.HTML_ENTITY_PATTERN_ = /&([^;\s<&]+);?/g;

  goog.string.whitespaceEscape = function (a, b) {
    return goog.string.newLineToBr(a.replace(/  /g, " &#160;"), b);
  };

  goog.string.preserveSpaces = function (a) {
    return a.replace(/(^|[\n ]) /g, "$1" + goog.string.Unicode.NBSP);
  };

  goog.string.stripQuotes = function (a, b) {
    for (var c = b.length, d = 0; d < c; d++) {
      var e = 1 == c ? b : b.charAt(d);
      if (a.charAt(0) == e && a.charAt(a.length - 1) == e) return a.substring(1, a.length - 1);
    }

    return a;
  };

  goog.string.truncate = function (a, b, c) {
    c && (a = goog.string.unescapeEntities(a));
    a.length > b && (a = a.substring(0, b - 3) + "...");
    c && (a = goog.string.htmlEscape(a));
    return a;
  };

  goog.string.truncateMiddle = function (a, b, c, d) {
    c && (a = goog.string.unescapeEntities(a));

    if (d && a.length > b) {
      d > b && (d = b);
      var e = a.length - d;
      a = a.substring(0, b - d) + "..." + a.substring(e);
    } else a.length > b && (d = Math.floor(b / 2), e = a.length - d, a = a.substring(0, d + b % 2) + "..." + a.substring(e));

    c && (a = goog.string.htmlEscape(a));
    return a;
  };

  goog.string.specialEscapeChars_ = {
    "\x00": "\\0",
    "\b": "\\b",
    "\f": "\\f",
    "\n": "\\n",
    "\r": "\\r",
    "\t": "\\t",
    "\x0B": "\\x0B",
    '"': '\\"',
    "\\": "\\\\",
    "<": "<"
  };
  goog.string.jsEscapeCache_ = {
    "'": "\\'"
  };

  goog.string.quote = function (a) {
    a = String(a);

    for (var b = ['"'], c = 0; c < a.length; c++) {
      var d = a.charAt(c),
          e = d.charCodeAt(0);
      b[c + 1] = goog.string.specialEscapeChars_[d] || (31 < e && 127 > e ? d : goog.string.escapeChar(d));
    }

    b.push('"');
    return b.join("");
  };

  goog.string.escapeString = function (a) {
    for (var b = [], c = 0; c < a.length; c++) {
      b[c] = goog.string.escapeChar(a.charAt(c));
    }

    return b.join("");
  };

  goog.string.escapeChar = function (a) {
    if (a in goog.string.jsEscapeCache_) return goog.string.jsEscapeCache_[a];
    if (a in goog.string.specialEscapeChars_) return goog.string.jsEscapeCache_[a] = goog.string.specialEscapeChars_[a];
    var b = a.charCodeAt(0);
    if (31 < b && 127 > b) var c = a;else {
      if (256 > b) {
        if (c = "\\x", 16 > b || 256 < b) c += "0";
      } else c = "\\u", 4096 > b && (c += "0");

      c += b.toString(16).toUpperCase();
    }
    return goog.string.jsEscapeCache_[a] = c;
  };

  goog.string.contains = goog.string.internal.contains;
  goog.string.caseInsensitiveContains = goog.string.internal.caseInsensitiveContains;

  goog.string.countOf = function (a, b) {
    return a && b ? a.split(b).length - 1 : 0;
  };

  goog.string.removeAt = function (a, b, c) {
    var d = a;
    0 <= b && b < a.length && 0 < c && (d = a.substr(0, b) + a.substr(b + c, a.length - b - c));
    return d;
  };

  goog.string.remove = function (a, b) {
    return a.replace(b, "");
  };

  goog.string.removeAll = function (a, b) {
    b = new RegExp(goog.string.regExpEscape(b), "g");
    return a.replace(b, "");
  };

  goog.string.replaceAll = function (a, b, c) {
    b = new RegExp(goog.string.regExpEscape(b), "g");
    return a.replace(b, c.replace(/\$/g, "$$$$"));
  };

  goog.string.regExpEscape = function (a) {
    return String(a).replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, "\\$1").replace(/\x08/g, "\\x08");
  };

  goog.string.repeat = String.prototype.repeat ? function (a, b) {
    return a.repeat(b);
  } : function (a, b) {
    return Array(b + 1).join(a);
  };

  goog.string.padNumber = function (a, b, c) {
    a = goog.isDef(c) ? a.toFixed(c) : String(a);
    c = a.indexOf(".");
    -1 == c && (c = a.length);
    return goog.string.repeat("0", Math.max(0, b - c)) + a;
  };

  goog.string.makeSafe = function (a) {
    return null == a ? "" : String(a);
  };

  goog.string.buildString = function (a) {
    return Array.prototype.join.call(arguments, "");
  };

  goog.string.getRandomString = function () {
    return Math.floor(2147483648 * Math.random()).toString(36) + Math.abs(Math.floor(2147483648 * Math.random()) ^ goog.now()).toString(36);
  };

  goog.string.compareVersions = goog.string.internal.compareVersions;

  goog.string.hashCode = function (a) {
    for (var b = 0, c = 0; c < a.length; ++c) {
      b = 31 * b + a.charCodeAt(c) >>> 0;
    }

    return b;
  };

  goog.string.uniqueStringCounter_ = 2147483648 * Math.random() | 0;

  goog.string.createUniqueString = function () {
    return "goog_" + goog.string.uniqueStringCounter_++;
  };

  goog.string.toNumber = function (a) {
    var b = Number(a);
    return 0 == b && goog.string.isEmptyOrWhitespace(a) ? NaN : b;
  };

  goog.string.isLowerCamelCase = function (a) {
    return /^[a-z]+([A-Z][a-z]*)*$/.test(a);
  };

  goog.string.isUpperCamelCase = function (a) {
    return /^([A-Z][a-z]*)+$/.test(a);
  };

  goog.string.toCamelCase = function (a) {
    return String(a).replace(/\-([a-z])/g, function (a, c) {
      return c.toUpperCase();
    });
  };

  goog.string.toSelectorCase = function (a) {
    return String(a).replace(/([A-Z])/g, "-$1").toLowerCase();
  };

  goog.string.toTitleCase = function (a, b) {
    b = goog.isString(b) ? goog.string.regExpEscape(b) : "\\s";
    return a.replace(new RegExp("(^" + (b ? "|[" + b + "]+" : "") + ")([a-z])", "g"), function (a, b, e) {
      return b + e.toUpperCase();
    });
  };

  goog.string.capitalize = function (a) {
    return String(a.charAt(0)).toUpperCase() + String(a.substr(1)).toLowerCase();
  };

  goog.string.parseInt = function (a) {
    isFinite(a) && (a = String(a));
    return goog.isString(a) ? /^\s*-?0x/i.test(a) ? parseInt(a, 16) : parseInt(a, 10) : NaN;
  };

  goog.string.splitLimit = function (a, b, c) {
    a = a.split(b);

    for (var d = []; 0 < c && a.length;) {
      d.push(a.shift()), c--;
    }

    a.length && d.push(a.join(b));
    return d;
  };

  goog.string.lastComponent = function (a, b) {
    if (b) "string" == typeof b && (b = [b]);else return a;

    for (var c = -1, d = 0; d < b.length; d++) {
      if ("" != b[d]) {
        var e = a.lastIndexOf(b[d]);
        e > c && (c = e);
      }
    }

    return -1 == c ? a : a.slice(c + 1);
  };

  goog.string.editDistance = function (a, b) {
    var c = [],
        d = [];
    if (a == b) return 0;
    if (!a.length || !b.length) return Math.max(a.length, b.length);

    for (var e = 0; e < b.length + 1; e++) {
      c[e] = e;
    }

    for (e = 0; e < a.length; e++) {
      d[0] = e + 1;

      for (var f = 0; f < b.length; f++) {
        d[f + 1] = Math.min(d[f] + 1, c[f + 1] + 1, c[f] + Number(a[e] != b[f]));
      }

      for (f = 0; f < c.length; f++) {
        c[f] = d[f];
      }
    }

    return d[b.length];
  };

  goog.labs = {};
  goog.labs.userAgent = {};
  goog.labs.userAgent.util = {};

  goog.labs.userAgent.util.getNativeUserAgentString_ = function () {
    var a = goog.labs.userAgent.util.getNavigator_();
    return a && (a = a.userAgent) ? a : "";
  };

  goog.labs.userAgent.util.getNavigator_ = function () {
    return goog.global.navigator;
  };

  goog.labs.userAgent.util.userAgent_ = goog.labs.userAgent.util.getNativeUserAgentString_();

  goog.labs.userAgent.util.setUserAgent = function (a) {
    goog.labs.userAgent.util.userAgent_ = a || goog.labs.userAgent.util.getNativeUserAgentString_();
  };

  goog.labs.userAgent.util.getUserAgent = function () {
    return goog.labs.userAgent.util.userAgent_;
  };

  goog.labs.userAgent.util.matchUserAgent = function (a) {
    var b = goog.labs.userAgent.util.getUserAgent();
    return goog.string.internal.contains(b, a);
  };

  goog.labs.userAgent.util.matchUserAgentIgnoreCase = function (a) {
    var b = goog.labs.userAgent.util.getUserAgent();
    return goog.string.internal.caseInsensitiveContains(b, a);
  };

  goog.labs.userAgent.util.extractVersionTuples = function (a) {
    for (var b = /(\w[\w ]+)\/([^\s]+)\s*(?:\((.*?)\))?/g, c = [], d; d = b.exec(a);) {
      c.push([d[1], d[2], d[3] || void 0]);
    }

    return c;
  };

  goog.labs.userAgent.platform = {};

  goog.labs.userAgent.platform.isAndroid = function () {
    return goog.labs.userAgent.util.matchUserAgent("Android");
  };

  goog.labs.userAgent.platform.isIpod = function () {
    return goog.labs.userAgent.util.matchUserAgent("iPod");
  };

  goog.labs.userAgent.platform.isIphone = function () {
    return goog.labs.userAgent.util.matchUserAgent("iPhone") && !goog.labs.userAgent.util.matchUserAgent("iPod") && !goog.labs.userAgent.util.matchUserAgent("iPad");
  };

  goog.labs.userAgent.platform.isIpad = function () {
    return goog.labs.userAgent.util.matchUserAgent("iPad");
  };

  goog.labs.userAgent.platform.isIos = function () {
    return goog.labs.userAgent.platform.isIphone() || goog.labs.userAgent.platform.isIpad() || goog.labs.userAgent.platform.isIpod();
  };

  goog.labs.userAgent.platform.isMacintosh = function () {
    return goog.labs.userAgent.util.matchUserAgent("Macintosh");
  };

  goog.labs.userAgent.platform.isLinux = function () {
    return goog.labs.userAgent.util.matchUserAgent("Linux");
  };

  goog.labs.userAgent.platform.isWindows = function () {
    return goog.labs.userAgent.util.matchUserAgent("Windows");
  };

  goog.labs.userAgent.platform.isChromeOS = function () {
    return goog.labs.userAgent.util.matchUserAgent("CrOS");
  };

  goog.labs.userAgent.platform.isChromecast = function () {
    return goog.labs.userAgent.util.matchUserAgent("CrKey");
  };

  goog.labs.userAgent.platform.isKaiOS = function () {
    return goog.labs.userAgent.util.matchUserAgentIgnoreCase("KaiOS");
  };

  goog.labs.userAgent.platform.isGo2Phone = function () {
    return goog.labs.userAgent.util.matchUserAgentIgnoreCase("GAFP");
  };

  goog.labs.userAgent.platform.getVersion = function () {
    var a = goog.labs.userAgent.util.getUserAgent(),
        b = "";
    goog.labs.userAgent.platform.isWindows() ? (b = /Windows (?:NT|Phone) ([0-9.]+)/, b = (a = b.exec(a)) ? a[1] : "0.0") : goog.labs.userAgent.platform.isIos() ? (b = /(?:iPhone|iPod|iPad|CPU)\s+OS\s+(\S+)/, b = (a = b.exec(a)) && a[1].replace(/_/g, ".")) : goog.labs.userAgent.platform.isMacintosh() ? (b = /Mac OS X ([0-9_.]+)/, b = (a = b.exec(a)) ? a[1].replace(/_/g, ".") : "10") : goog.labs.userAgent.platform.isAndroid() ? (b = /Android\s+([^\);]+)(\)|;)/, b = (a = b.exec(a)) && a[1]) : goog.labs.userAgent.platform.isChromeOS() && (b = /(?:CrOS\s+(?:i686|x86_64)\s+([0-9.]+))/, b = (a = b.exec(a)) && a[1]);
    return b || "";
  };

  goog.labs.userAgent.platform.isVersionOrHigher = function (a) {
    return 0 <= goog.string.compareVersions(goog.labs.userAgent.platform.getVersion(), a);
  };

  goog.object = {};

  goog.object.is = function (a, b) {
    return a === b ? 0 !== a || 1 / a === 1 / b : a !== a && b !== b;
  };

  goog.object.forEach = function (a, b, c) {
    for (var d in a) {
      b.call(c, a[d], d, a);
    }
  };

  goog.object.filter = function (a, b, c) {
    var d = {},
        e;

    for (e in a) {
      b.call(c, a[e], e, a) && (d[e] = a[e]);
    }

    return d;
  };

  goog.object.map = function (a, b, c) {
    var d = {},
        e;

    for (e in a) {
      d[e] = b.call(c, a[e], e, a);
    }

    return d;
  };

  goog.object.some = function (a, b, c) {
    for (var d in a) {
      if (b.call(c, a[d], d, a)) return !0;
    }

    return !1;
  };

  goog.object.every = function (a, b, c) {
    for (var d in a) {
      if (!b.call(c, a[d], d, a)) return !1;
    }

    return !0;
  };

  goog.object.getCount = function (a) {
    var b = 0,
        c;

    for (c in a) {
      b++;
    }

    return b;
  };

  goog.object.getAnyKey = function (a) {
    for (var b in a) {
      return b;
    }
  };

  goog.object.getAnyValue = function (a) {
    for (var b in a) {
      return a[b];
    }
  };

  goog.object.contains = function (a, b) {
    return goog.object.containsValue(a, b);
  };

  goog.object.getValues = function (a) {
    var b = [],
        c = 0,
        d;

    for (d in a) {
      b[c++] = a[d];
    }

    return b;
  };

  goog.object.getKeys = function (a) {
    var b = [],
        c = 0,
        d;

    for (d in a) {
      b[c++] = d;
    }

    return b;
  };

  goog.object.getValueByKeys = function (a, b) {
    var c = goog.isArrayLike(b),
        d = c ? b : arguments;

    for (c = c ? 0 : 1; c < d.length; c++) {
      if (null == a) return;
      a = a[d[c]];
    }

    return a;
  };

  goog.object.containsKey = function (a, b) {
    return null !== a && b in a;
  };

  goog.object.containsValue = function (a, b) {
    for (var c in a) {
      if (a[c] == b) return !0;
    }

    return !1;
  };

  goog.object.findKey = function (a, b, c) {
    for (var d in a) {
      if (b.call(c, a[d], d, a)) return d;
    }
  };

  goog.object.findValue = function (a, b, c) {
    return (b = goog.object.findKey(a, b, c)) && a[b];
  };

  goog.object.isEmpty = function (a) {
    for (var b in a) {
      return !1;
    }

    return !0;
  };

  goog.object.clear = function (a) {
    for (var b in a) {
      delete a[b];
    }
  };

  goog.object.remove = function (a, b) {
    var c;
    (c = b in a) && delete a[b];
    return c;
  };

  goog.object.add = function (a, b, c) {
    if (null !== a && b in a) throw Error('The object already contains the key "' + b + '"');
    goog.object.set(a, b, c);
  };

  goog.object.get = function (a, b, c) {
    return null !== a && b in a ? a[b] : c;
  };

  goog.object.set = function (a, b, c) {
    a[b] = c;
  };

  goog.object.setIfUndefined = function (a, b, c) {
    return b in a ? a[b] : a[b] = c;
  };

  goog.object.setWithReturnValueIfNotSet = function (a, b, c) {
    if (b in a) return a[b];
    c = c();
    return a[b] = c;
  };

  goog.object.equals = function (a, b) {
    for (var c in a) {
      if (!(c in b) || a[c] !== b[c]) return !1;
    }

    for (c in b) {
      if (!(c in a)) return !1;
    }

    return !0;
  };

  goog.object.clone = function (a) {
    var b = {},
        c;

    for (c in a) {
      b[c] = a[c];
    }

    return b;
  };

  goog.object.unsafeClone = function (a) {
    var b = goog.typeOf(a);

    if ("object" == b || "array" == b) {
      if (goog.isFunction(a.clone)) return a.clone();
      b = "array" == b ? [] : {};

      for (var c in a) {
        b[c] = goog.object.unsafeClone(a[c]);
      }

      return b;
    }

    return a;
  };

  goog.object.transpose = function (a) {
    var b = {},
        c;

    for (c in a) {
      b[a[c]] = c;
    }

    return b;
  };

  goog.object.PROTOTYPE_FIELDS_ = "constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");

  goog.object.extend = function (a, b) {
    for (var c, d, e = 1; e < arguments.length; e++) {
      d = arguments[e];

      for (c in d) {
        a[c] = d[c];
      }

      for (var f = 0; f < goog.object.PROTOTYPE_FIELDS_.length; f++) {
        c = goog.object.PROTOTYPE_FIELDS_[f], Object.prototype.hasOwnProperty.call(d, c) && (a[c] = d[c]);
      }
    }
  };

  goog.object.create = function (a) {
    var b = arguments.length;
    if (1 == b && goog.isArray(arguments[0])) return goog.object.create.apply(null, arguments[0]);
    if (b % 2) throw Error("Uneven number of arguments");

    for (var c = {}, d = 0; d < b; d += 2) {
      c[arguments[d]] = arguments[d + 1];
    }

    return c;
  };

  goog.object.createSet = function (a) {
    var b = arguments.length;
    if (1 == b && goog.isArray(arguments[0])) return goog.object.createSet.apply(null, arguments[0]);

    for (var c = {}, d = 0; d < b; d++) {
      c[arguments[d]] = !0;
    }

    return c;
  };

  goog.object.createImmutableView = function (a) {
    var b = a;
    Object.isFrozen && !Object.isFrozen(a) && (b = Object.create(a), Object.freeze(b));
    return b;
  };

  goog.object.isImmutableView = function (a) {
    return !!Object.isFrozen && Object.isFrozen(a);
  };

  goog.object.getAllPropertyNames = function (a, b, c) {
    if (!a) return [];
    if (!Object.getOwnPropertyNames || !Object.getPrototypeOf) return goog.object.getKeys(a);

    for (var d = {}; a && (a !== Object.prototype || b) && (a !== Function.prototype || c);) {
      for (var e = Object.getOwnPropertyNames(a), f = 0; f < e.length; f++) {
        d[e[f]] = !0;
      }

      a = Object.getPrototypeOf(a);
    }

    return goog.object.getKeys(d);
  };

  goog.labs.userAgent.browser = {};

  goog.labs.userAgent.browser.matchOpera_ = function () {
    return goog.labs.userAgent.util.matchUserAgent("Opera");
  };

  goog.labs.userAgent.browser.matchIE_ = function () {
    return goog.labs.userAgent.util.matchUserAgent("Trident") || goog.labs.userAgent.util.matchUserAgent("MSIE");
  };

  goog.labs.userAgent.browser.matchEdge_ = function () {
    return goog.labs.userAgent.util.matchUserAgent("Edge");
  };

  goog.labs.userAgent.browser.matchFirefox_ = function () {
    return goog.labs.userAgent.util.matchUserAgent("Firefox") || goog.labs.userAgent.util.matchUserAgent("FxiOS");
  };

  goog.labs.userAgent.browser.matchSafari_ = function () {
    return goog.labs.userAgent.util.matchUserAgent("Safari") && !(goog.labs.userAgent.browser.matchChrome_() || goog.labs.userAgent.browser.matchCoast_() || goog.labs.userAgent.browser.matchOpera_() || goog.labs.userAgent.browser.matchEdge_() || goog.labs.userAgent.browser.matchFirefox_() || goog.labs.userAgent.browser.isSilk() || goog.labs.userAgent.util.matchUserAgent("Android"));
  };

  goog.labs.userAgent.browser.matchCoast_ = function () {
    return goog.labs.userAgent.util.matchUserAgent("Coast");
  };

  goog.labs.userAgent.browser.matchIosWebview_ = function () {
    return (goog.labs.userAgent.util.matchUserAgent("iPad") || goog.labs.userAgent.util.matchUserAgent("iPhone")) && !goog.labs.userAgent.browser.matchSafari_() && !goog.labs.userAgent.browser.matchChrome_() && !goog.labs.userAgent.browser.matchCoast_() && !goog.labs.userAgent.browser.matchFirefox_() && goog.labs.userAgent.util.matchUserAgent("AppleWebKit");
  };

  goog.labs.userAgent.browser.matchChrome_ = function () {
    return (goog.labs.userAgent.util.matchUserAgent("Chrome") || goog.labs.userAgent.util.matchUserAgent("CriOS")) && !goog.labs.userAgent.browser.matchEdge_();
  };

  goog.labs.userAgent.browser.matchAndroidBrowser_ = function () {
    return goog.labs.userAgent.util.matchUserAgent("Android") && !(goog.labs.userAgent.browser.isChrome() || goog.labs.userAgent.browser.isFirefox() || goog.labs.userAgent.browser.isOpera() || goog.labs.userAgent.browser.isSilk());
  };

  goog.labs.userAgent.browser.isOpera = goog.labs.userAgent.browser.matchOpera_;
  goog.labs.userAgent.browser.isIE = goog.labs.userAgent.browser.matchIE_;
  goog.labs.userAgent.browser.isEdge = goog.labs.userAgent.browser.matchEdge_;
  goog.labs.userAgent.browser.isFirefox = goog.labs.userAgent.browser.matchFirefox_;
  goog.labs.userAgent.browser.isSafari = goog.labs.userAgent.browser.matchSafari_;
  goog.labs.userAgent.browser.isCoast = goog.labs.userAgent.browser.matchCoast_;
  goog.labs.userAgent.browser.isIosWebview = goog.labs.userAgent.browser.matchIosWebview_;
  goog.labs.userAgent.browser.isChrome = goog.labs.userAgent.browser.matchChrome_;
  goog.labs.userAgent.browser.isAndroidBrowser = goog.labs.userAgent.browser.matchAndroidBrowser_;

  goog.labs.userAgent.browser.isSilk = function () {
    return goog.labs.userAgent.util.matchUserAgent("Silk");
  };

  goog.labs.userAgent.browser.getVersion = function () {
    function a(a) {
      a = goog.array.find(a, d);
      return c[a] || "";
    }

    var b = goog.labs.userAgent.util.getUserAgent();
    if (goog.labs.userAgent.browser.isIE()) return goog.labs.userAgent.browser.getIEVersion_(b);
    b = goog.labs.userAgent.util.extractVersionTuples(b);
    var c = {};
    goog.array.forEach(b, function (a) {
      c[a[0]] = a[1];
    });
    var d = goog.partial(goog.object.containsKey, c);
    return goog.labs.userAgent.browser.isOpera() ? a(["Version", "Opera"]) : goog.labs.userAgent.browser.isEdge() ? a(["Edge"]) : goog.labs.userAgent.browser.isChrome() ? a(["Chrome", "CriOS"]) : (b = b[2]) && b[1] || "";
  };

  goog.labs.userAgent.browser.isVersionOrHigher = function (a) {
    return 0 <= goog.string.internal.compareVersions(goog.labs.userAgent.browser.getVersion(), a);
  };

  goog.labs.userAgent.browser.getIEVersion_ = function (a) {
    var b = /rv: *([\d\.]*)/.exec(a);
    if (b && b[1]) return b[1];
    b = "";
    var c = /MSIE +([\d\.]+)/.exec(a);
    if (c && c[1]) if (a = /Trident\/(\d.\d)/.exec(a), "7.0" == c[1]) {
      if (a && a[1]) switch (a[1]) {
        case "4.0":
          b = "8.0";
          break;

        case "5.0":
          b = "9.0";
          break;

        case "6.0":
          b = "10.0";
          break;

        case "7.0":
          b = "11.0";
      } else b = "7.0";
    } else b = c[1];
    return b;
  };

  goog.reflect = {};

  goog.reflect.object = function (a, b) {
    return b;
  };

  goog.reflect.objectProperty = function (a, b) {
    return a;
  };

  goog.reflect.sinkValue = function (a) {
    goog.reflect.sinkValue[" "](a);
    return a;
  };

  goog.reflect.sinkValue[" "] = goog.nullFunction;

  goog.reflect.canAccessProperty = function (a, b) {
    try {
      return goog.reflect.sinkValue(a[b]), !0;
    } catch (c) {}

    return !1;
  };

  goog.reflect.cache = function (a, b, c, d) {
    d = d ? d(b) : b;
    return Object.prototype.hasOwnProperty.call(a, d) ? a[d] : a[d] = c(b);
  };

  goog.labs.userAgent.engine = {};

  goog.labs.userAgent.engine.isPresto = function () {
    return goog.labs.userAgent.util.matchUserAgent("Presto");
  };

  goog.labs.userAgent.engine.isTrident = function () {
    return goog.labs.userAgent.util.matchUserAgent("Trident") || goog.labs.userAgent.util.matchUserAgent("MSIE");
  };

  goog.labs.userAgent.engine.isEdge = function () {
    return goog.labs.userAgent.util.matchUserAgent("Edge");
  };

  goog.labs.userAgent.engine.isWebKit = function () {
    return goog.labs.userAgent.util.matchUserAgentIgnoreCase("WebKit") && !goog.labs.userAgent.engine.isEdge();
  };

  goog.labs.userAgent.engine.isGecko = function () {
    return goog.labs.userAgent.util.matchUserAgent("Gecko") && !goog.labs.userAgent.engine.isWebKit() && !goog.labs.userAgent.engine.isTrident() && !goog.labs.userAgent.engine.isEdge();
  };

  goog.labs.userAgent.engine.getVersion = function () {
    var a = goog.labs.userAgent.util.getUserAgent();

    if (a) {
      a = goog.labs.userAgent.util.extractVersionTuples(a);
      var b = goog.labs.userAgent.engine.getEngineTuple_(a);
      if (b) return "Gecko" == b[0] ? goog.labs.userAgent.engine.getVersionForKey_(a, "Firefox") : b[1];
      a = a[0];
      var c;
      if (a && (c = a[2]) && (c = /Trident\/([^\s;]+)/.exec(c))) return c[1];
    }

    return "";
  };

  goog.labs.userAgent.engine.getEngineTuple_ = function (a) {
    if (!goog.labs.userAgent.engine.isEdge()) return a[1];

    for (var b = 0; b < a.length; b++) {
      var c = a[b];
      if ("Edge" == c[0]) return c;
    }
  };

  goog.labs.userAgent.engine.isVersionOrHigher = function (a) {
    return 0 <= goog.string.compareVersions(goog.labs.userAgent.engine.getVersion(), a);
  };

  goog.labs.userAgent.engine.getVersionForKey_ = function (a, b) {
    return (a = goog.array.find(a, function (a) {
      return b == a[0];
    })) && a[1] || "";
  };

  goog.userAgent = {};
  goog.userAgent.ASSUME_IE = !1;
  goog.userAgent.ASSUME_EDGE = !1;
  goog.userAgent.ASSUME_GECKO = !1;
  goog.userAgent.ASSUME_WEBKIT = !1;
  goog.userAgent.ASSUME_MOBILE_WEBKIT = !1;
  goog.userAgent.ASSUME_OPERA = !1;
  goog.userAgent.ASSUME_ANY_VERSION = !1;
  goog.userAgent.BROWSER_KNOWN_ = goog.userAgent.ASSUME_IE || goog.userAgent.ASSUME_EDGE || goog.userAgent.ASSUME_GECKO || goog.userAgent.ASSUME_MOBILE_WEBKIT || goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_OPERA;

  goog.userAgent.getUserAgentString = function () {
    return goog.labs.userAgent.util.getUserAgent();
  };

  goog.userAgent.getNavigatorTyped = function () {
    return goog.global.navigator || null;
  };

  goog.userAgent.getNavigator = function () {
    return goog.userAgent.getNavigatorTyped();
  };

  goog.userAgent.OPERA = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_OPERA : goog.labs.userAgent.browser.isOpera();
  goog.userAgent.IE = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_IE : goog.labs.userAgent.browser.isIE();
  goog.userAgent.EDGE = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_EDGE : goog.labs.userAgent.engine.isEdge();
  goog.userAgent.EDGE_OR_IE = goog.userAgent.EDGE || goog.userAgent.IE;
  goog.userAgent.GECKO = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_GECKO : goog.labs.userAgent.engine.isGecko();
  goog.userAgent.WEBKIT = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_MOBILE_WEBKIT : goog.labs.userAgent.engine.isWebKit();

  goog.userAgent.isMobile_ = function () {
    return goog.userAgent.WEBKIT && goog.labs.userAgent.util.matchUserAgent("Mobile");
  };

  goog.userAgent.MOBILE = goog.userAgent.ASSUME_MOBILE_WEBKIT || goog.userAgent.isMobile_();
  goog.userAgent.SAFARI = goog.userAgent.WEBKIT;

  goog.userAgent.determinePlatform_ = function () {
    var a = goog.userAgent.getNavigatorTyped();
    return a && a.platform || "";
  };

  goog.userAgent.PLATFORM = goog.userAgent.determinePlatform_();
  goog.userAgent.ASSUME_MAC = !1;
  goog.userAgent.ASSUME_WINDOWS = !1;
  goog.userAgent.ASSUME_LINUX = !1;
  goog.userAgent.ASSUME_X11 = !1;
  goog.userAgent.ASSUME_ANDROID = !1;
  goog.userAgent.ASSUME_IPHONE = !1;
  goog.userAgent.ASSUME_IPAD = !1;
  goog.userAgent.ASSUME_IPOD = !1;
  goog.userAgent.ASSUME_KAIOS = !1;
  goog.userAgent.ASSUME_GO2PHONE = !1;
  goog.userAgent.PLATFORM_KNOWN_ = goog.userAgent.ASSUME_MAC || goog.userAgent.ASSUME_WINDOWS || goog.userAgent.ASSUME_LINUX || goog.userAgent.ASSUME_X11 || goog.userAgent.ASSUME_ANDROID || goog.userAgent.ASSUME_IPHONE || goog.userAgent.ASSUME_IPAD || goog.userAgent.ASSUME_IPOD;
  goog.userAgent.MAC = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_MAC : goog.labs.userAgent.platform.isMacintosh();
  goog.userAgent.WINDOWS = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_WINDOWS : goog.labs.userAgent.platform.isWindows();

  goog.userAgent.isLegacyLinux_ = function () {
    return goog.labs.userAgent.platform.isLinux() || goog.labs.userAgent.platform.isChromeOS();
  };

  goog.userAgent.LINUX = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_LINUX : goog.userAgent.isLegacyLinux_();

  goog.userAgent.isX11_ = function () {
    var a = goog.userAgent.getNavigatorTyped();
    return !!a && goog.string.contains(a.appVersion || "", "X11");
  };

  goog.userAgent.X11 = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_X11 : goog.userAgent.isX11_();
  goog.userAgent.ANDROID = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_ANDROID : goog.labs.userAgent.platform.isAndroid();
  goog.userAgent.IPHONE = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPHONE : goog.labs.userAgent.platform.isIphone();
  goog.userAgent.IPAD = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPAD : goog.labs.userAgent.platform.isIpad();
  goog.userAgent.IPOD = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPOD : goog.labs.userAgent.platform.isIpod();
  goog.userAgent.IOS = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPHONE || goog.userAgent.ASSUME_IPAD || goog.userAgent.ASSUME_IPOD : goog.labs.userAgent.platform.isIos();
  goog.userAgent.KAIOS = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_KAIOS : goog.labs.userAgent.platform.isKaiOS();
  goog.userAgent.GO2PHONE = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_GO2PHONE : goog.labs.userAgent.platform.isGo2Phone();

  goog.userAgent.determineVersion_ = function () {
    var a = "",
        b = goog.userAgent.getVersionRegexResult_();
    b && (a = b ? b[1] : "");
    return goog.userAgent.IE && (b = goog.userAgent.getDocumentMode_(), null != b && b > parseFloat(a)) ? String(b) : a;
  };

  goog.userAgent.getVersionRegexResult_ = function () {
    var a = goog.userAgent.getUserAgentString();
    if (goog.userAgent.GECKO) return /rv:([^\);]+)(\)|;)/.exec(a);
    if (goog.userAgent.EDGE) return /Edge\/([\d\.]+)/.exec(a);
    if (goog.userAgent.IE) return /\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(a);
    if (goog.userAgent.WEBKIT) return /WebKit\/(\S+)/.exec(a);
    if (goog.userAgent.OPERA) return /(?:Version)[ \/]?(\S+)/.exec(a);
  };

  goog.userAgent.getDocumentMode_ = function () {
    var a = goog.global.document;
    return a ? a.documentMode : void 0;
  };

  goog.userAgent.VERSION = goog.userAgent.determineVersion_();

  goog.userAgent.compare = function (a, b) {
    return goog.string.compareVersions(a, b);
  };

  goog.userAgent.isVersionOrHigherCache_ = {};

  goog.userAgent.isVersionOrHigher = function (a) {
    return goog.userAgent.ASSUME_ANY_VERSION || goog.reflect.cache(goog.userAgent.isVersionOrHigherCache_, a, function () {
      return 0 <= goog.string.compareVersions(goog.userAgent.VERSION, a);
    });
  };

  goog.userAgent.isVersion = goog.userAgent.isVersionOrHigher;

  goog.userAgent.isDocumentModeOrHigher = function (a) {
    return Number(goog.userAgent.DOCUMENT_MODE) >= a;
  };

  goog.userAgent.isDocumentMode = goog.userAgent.isDocumentModeOrHigher;

  goog.userAgent.DOCUMENT_MODE = function () {
    var a = goog.global.document,
        b = goog.userAgent.getDocumentMode_();
    if (a && goog.userAgent.IE) return b || ("CSS1Compat" == a.compatMode ? parseInt(goog.userAgent.VERSION, 10) : 5);
  }();

  goog.userAgent.product = {};
  goog.userAgent.product.ASSUME_FIREFOX = !1;
  goog.userAgent.product.ASSUME_IPHONE = !1;
  goog.userAgent.product.ASSUME_IPAD = !1;
  goog.userAgent.product.ASSUME_ANDROID = !1;
  goog.userAgent.product.ASSUME_CHROME = !1;
  goog.userAgent.product.ASSUME_SAFARI = !1;
  goog.userAgent.product.PRODUCT_KNOWN_ = goog.userAgent.ASSUME_IE || goog.userAgent.ASSUME_EDGE || goog.userAgent.ASSUME_OPERA || goog.userAgent.product.ASSUME_FIREFOX || goog.userAgent.product.ASSUME_IPHONE || goog.userAgent.product.ASSUME_IPAD || goog.userAgent.product.ASSUME_ANDROID || goog.userAgent.product.ASSUME_CHROME || goog.userAgent.product.ASSUME_SAFARI;
  goog.userAgent.product.OPERA = goog.userAgent.OPERA;
  goog.userAgent.product.IE = goog.userAgent.IE;
  goog.userAgent.product.EDGE = goog.userAgent.EDGE;
  goog.userAgent.product.FIREFOX = goog.userAgent.product.PRODUCT_KNOWN_ ? goog.userAgent.product.ASSUME_FIREFOX : goog.labs.userAgent.browser.isFirefox();

  goog.userAgent.product.isIphoneOrIpod_ = function () {
    return goog.labs.userAgent.platform.isIphone() || goog.labs.userAgent.platform.isIpod();
  };

  goog.userAgent.product.IPHONE = goog.userAgent.product.PRODUCT_KNOWN_ ? goog.userAgent.product.ASSUME_IPHONE : goog.userAgent.product.isIphoneOrIpod_();
  goog.userAgent.product.IPAD = goog.userAgent.product.PRODUCT_KNOWN_ ? goog.userAgent.product.ASSUME_IPAD : goog.labs.userAgent.platform.isIpad();
  goog.userAgent.product.ANDROID = goog.userAgent.product.PRODUCT_KNOWN_ ? goog.userAgent.product.ASSUME_ANDROID : goog.labs.userAgent.browser.isAndroidBrowser();
  goog.userAgent.product.CHROME = goog.userAgent.product.PRODUCT_KNOWN_ ? goog.userAgent.product.ASSUME_CHROME : goog.labs.userAgent.browser.isChrome();

  goog.userAgent.product.isSafariDesktop_ = function () {
    return goog.labs.userAgent.browser.isSafari() && !goog.labs.userAgent.platform.isIos();
  };

  goog.userAgent.product.SAFARI = goog.userAgent.product.PRODUCT_KNOWN_ ? goog.userAgent.product.ASSUME_SAFARI : goog.userAgent.product.isSafariDesktop_();
  goog.crypt.base64 = {};
  goog.crypt.base64.byteToCharMap_ = null;
  goog.crypt.base64.charToByteMap_ = null;
  goog.crypt.base64.byteToCharMapWebSafe_ = null;
  goog.crypt.base64.ENCODED_VALS_BASE = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
  goog.crypt.base64.ENCODED_VALS = goog.crypt.base64.ENCODED_VALS_BASE + "+/=";
  goog.crypt.base64.ENCODED_VALS_WEBSAFE = goog.crypt.base64.ENCODED_VALS_BASE + "-_.";
  goog.crypt.base64.ASSUME_NATIVE_SUPPORT_ = goog.userAgent.GECKO || goog.userAgent.WEBKIT && !goog.userAgent.product.SAFARI || goog.userAgent.OPERA;
  goog.crypt.base64.HAS_NATIVE_ENCODE_ = goog.crypt.base64.ASSUME_NATIVE_SUPPORT_ || "function" == typeof goog.global.btoa;
  goog.crypt.base64.HAS_NATIVE_DECODE_ = goog.crypt.base64.ASSUME_NATIVE_SUPPORT_ || !goog.userAgent.product.SAFARI && !goog.userAgent.IE && "function" == typeof goog.global.atob;

  goog.crypt.base64.encodeByteArray = function (a, b) {
    goog.asserts.assert(goog.isArrayLike(a), "encodeByteArray takes an array as a parameter");
    goog.crypt.base64.init_();
    b = b ? goog.crypt.base64.byteToCharMapWebSafe_ : goog.crypt.base64.byteToCharMap_;

    for (var c = [], d = 0; d < a.length; d += 3) {
      var e = a[d],
          f = d + 1 < a.length,
          g = f ? a[d + 1] : 0,
          h = d + 2 < a.length,
          k = h ? a[d + 2] : 0,
          l = e >> 2;
      e = (e & 3) << 4 | g >> 4;
      g = (g & 15) << 2 | k >> 6;
      k &= 63;
      h || (k = 64, f || (g = 64));
      c.push(b[l], b[e], b[g], b[k]);
    }

    return c.join("");
  };

  goog.crypt.base64.encodeString = function (a, b) {
    return goog.crypt.base64.HAS_NATIVE_ENCODE_ && !b ? goog.global.btoa(a) : goog.crypt.base64.encodeByteArray(goog.crypt.stringToByteArray(a), b);
  };

  goog.crypt.base64.decodeString = function (a, b) {
    if (goog.crypt.base64.HAS_NATIVE_DECODE_ && !b) return goog.global.atob(a);
    var c = "";
    goog.crypt.base64.decodeStringInternal_(a, function (a) {
      c += String.fromCharCode(a);
    });
    return c;
  };

  goog.crypt.base64.decodeStringToByteArray = function (a, b) {
    var c = [];
    goog.crypt.base64.decodeStringInternal_(a, function (a) {
      c.push(a);
    });
    return c;
  };

  goog.crypt.base64.decodeStringToUint8Array = function (a) {
    goog.asserts.assert(!goog.userAgent.IE || goog.userAgent.isVersionOrHigher("10"), "Browser does not support typed arrays");
    var b = a.length,
        c = 0;
    "=" === a[b - 2] ? c = 2 : "=" === a[b - 1] && (c = 1);
    var d = new Uint8Array(Math.ceil(3 * b / 4) - c),
        e = 0;
    goog.crypt.base64.decodeStringInternal_(a, function (a) {
      d[e++] = a;
    });
    return d.subarray(0, e);
  };

  goog.crypt.base64.decodeStringInternal_ = function (a, b) {
    function c(b) {
      for (; d < a.length;) {
        var c = a.charAt(d++),
            e = goog.crypt.base64.charToByteMap_[c];
        if (null != e) return e;
        if (!goog.string.isEmptyOrWhitespace(c)) throw Error("Unknown base64 encoding at char: " + c);
      }

      return b;
    }

    goog.crypt.base64.init_();

    for (var d = 0;;) {
      var e = c(-1),
          f = c(0),
          g = c(64),
          h = c(64);
      if (64 === h && -1 === e) break;
      b(e << 2 | f >> 4);
      64 != g && (b(f << 4 & 240 | g >> 2), 64 != h && b(g << 6 & 192 | h));
    }
  };

  goog.crypt.base64.init_ = function () {
    if (!goog.crypt.base64.byteToCharMap_) {
      goog.crypt.base64.byteToCharMap_ = {};
      goog.crypt.base64.charToByteMap_ = {};
      goog.crypt.base64.byteToCharMapWebSafe_ = {};

      for (var a = 0; a < goog.crypt.base64.ENCODED_VALS.length; a++) {
        goog.crypt.base64.byteToCharMap_[a] = goog.crypt.base64.ENCODED_VALS.charAt(a), goog.crypt.base64.charToByteMap_[goog.crypt.base64.byteToCharMap_[a]] = a, goog.crypt.base64.byteToCharMapWebSafe_[a] = goog.crypt.base64.ENCODED_VALS_WEBSAFE.charAt(a), a >= goog.crypt.base64.ENCODED_VALS_BASE.length && (goog.crypt.base64.charToByteMap_[goog.crypt.base64.ENCODED_VALS_WEBSAFE.charAt(a)] = a);
      }
    }
  };

  jspb.utils = {};
  jspb.utils.split64Low = 0;
  jspb.utils.split64High = 0;

  jspb.utils.splitUint64 = function (a) {
    var b = a >>> 0;
    a = Math.floor((a - b) / jspb.BinaryConstants.TWO_TO_32) >>> 0;
    jspb.utils.split64Low = b;
    jspb.utils.split64High = a;
  };

  jspb.utils.splitInt64 = function (a) {
    var b = 0 > a;
    a = Math.abs(a);
    var c = a >>> 0;
    a = Math.floor((a - c) / jspb.BinaryConstants.TWO_TO_32);
    a >>>= 0;
    b && (a = ~a >>> 0, c = (~c >>> 0) + 1, 4294967295 < c && (c = 0, a++, 4294967295 < a && (a = 0)));
    jspb.utils.split64Low = c;
    jspb.utils.split64High = a;
  };

  jspb.utils.splitZigzag64 = function (a) {
    var b = 0 > a;
    a = 2 * Math.abs(a);
    jspb.utils.splitUint64(a);
    a = jspb.utils.split64Low;
    var c = jspb.utils.split64High;
    b && (0 == a ? 0 == c ? c = a = 4294967295 : (c--, a = 4294967295) : a--);
    jspb.utils.split64Low = a;
    jspb.utils.split64High = c;
  };

  jspb.utils.splitFloat32 = function (a) {
    var b = 0 > a ? 1 : 0;
    a = b ? -a : a;
    if (0 === a) 0 < 1 / a ? (jspb.utils.split64High = 0, jspb.utils.split64Low = 0) : (jspb.utils.split64High = 0, jspb.utils.split64Low = 2147483648);else if (isNaN(a)) jspb.utils.split64High = 0, jspb.utils.split64Low = 2147483647;else if (a > jspb.BinaryConstants.FLOAT32_MAX) jspb.utils.split64High = 0, jspb.utils.split64Low = (b << 31 | 2139095040) >>> 0;else if (a < jspb.BinaryConstants.FLOAT32_MIN) a = Math.round(a / Math.pow(2, -149)), jspb.utils.split64High = 0, jspb.utils.split64Low = (b << 31 | a) >>> 0;else {
      var c = Math.floor(Math.log(a) / Math.LN2);
      a *= Math.pow(2, -c);
      a = Math.round(a * jspb.BinaryConstants.TWO_TO_23) & 8388607;
      jspb.utils.split64High = 0;
      jspb.utils.split64Low = (b << 31 | c + 127 << 23 | a) >>> 0;
    }
  };

  jspb.utils.splitFloat64 = function (a) {
    var b = 0 > a ? 1 : 0;
    a = b ? -a : a;
    if (0 === a) jspb.utils.split64High = 0 < 1 / a ? 0 : 2147483648, jspb.utils.split64Low = 0;else if (isNaN(a)) jspb.utils.split64High = 2147483647, jspb.utils.split64Low = 4294967295;else if (a > jspb.BinaryConstants.FLOAT64_MAX) jspb.utils.split64High = (b << 31 | 2146435072) >>> 0, jspb.utils.split64Low = 0;else if (a < jspb.BinaryConstants.FLOAT64_MIN) {
      var c = a / Math.pow(2, -1074);
      a = c / jspb.BinaryConstants.TWO_TO_32;
      jspb.utils.split64High = (b << 31 | a) >>> 0;
      jspb.utils.split64Low = c >>> 0;
    } else {
      var d = Math.floor(Math.log(a) / Math.LN2);
      1024 == d && (d = 1023);
      c = a * Math.pow(2, -d);
      a = c * jspb.BinaryConstants.TWO_TO_20 & 1048575;
      c = c * jspb.BinaryConstants.TWO_TO_52 >>> 0;
      jspb.utils.split64High = (b << 31 | d + 1023 << 20 | a) >>> 0;
      jspb.utils.split64Low = c;
    }
  };

  jspb.utils.splitHash64 = function (a) {
    var b = a.charCodeAt(0),
        c = a.charCodeAt(1),
        d = a.charCodeAt(2),
        e = a.charCodeAt(3),
        f = a.charCodeAt(4),
        g = a.charCodeAt(5),
        h = a.charCodeAt(6);
    a = a.charCodeAt(7);
    jspb.utils.split64Low = b + (c << 8) + (d << 16) + (e << 24) >>> 0;
    jspb.utils.split64High = f + (g << 8) + (h << 16) + (a << 24) >>> 0;
  };

  jspb.utils.joinUint64 = function (a, b) {
    return b * jspb.BinaryConstants.TWO_TO_32 + a;
  };

  jspb.utils.joinInt64 = function (a, b) {
    var c = b & 2147483648;
    c && (a = ~a + 1 >>> 0, b = ~b >>> 0, 0 == a && (b = b + 1 >>> 0));
    a = jspb.utils.joinUint64(a, b);
    return c ? -a : a;
  };

  jspb.utils.joinZigzag64 = function (a, b) {
    var c = a & 1;
    a = (a >>> 1 | b << 31) >>> 0;
    b >>>= 1;
    c && (a = a + 1 >>> 0, 0 == a && (b = b + 1 >>> 0));
    a = jspb.utils.joinUint64(a, b);
    return c ? -a : a;
  };

  jspb.utils.joinFloat32 = function (a, b) {
    b = 2 * (a >> 31) + 1;
    var c = a >>> 23 & 255;
    a &= 8388607;
    return 255 == c ? a ? NaN : Infinity * b : 0 == c ? b * Math.pow(2, -149) * a : b * Math.pow(2, c - 150) * (a + Math.pow(2, 23));
  };

  jspb.utils.joinFloat64 = function (a, b) {
    var c = 2 * (b >> 31) + 1,
        d = b >>> 20 & 2047;
    a = jspb.BinaryConstants.TWO_TO_32 * (b & 1048575) + a;
    return 2047 == d ? a ? NaN : Infinity * c : 0 == d ? c * Math.pow(2, -1074) * a : c * Math.pow(2, d - 1075) * (a + jspb.BinaryConstants.TWO_TO_52);
  };

  jspb.utils.joinHash64 = function (a, b) {
    return String.fromCharCode(a >>> 0 & 255, a >>> 8 & 255, a >>> 16 & 255, a >>> 24 & 255, b >>> 0 & 255, b >>> 8 & 255, b >>> 16 & 255, b >>> 24 & 255);
  };

  jspb.utils.DIGITS = "0123456789abcdef".split("");

  jspb.utils.joinUnsignedDecimalString = function (a, b) {
    function c(a) {
      for (var b = 1E7, c = 0; 7 > c; c++) {
        b /= 10;
        var d = a / b % 10 >>> 0;
        if (0 != d || f) f = !0, g += e[d];
      }
    }

    if (2097151 >= b) return "" + (jspb.BinaryConstants.TWO_TO_32 * b + a);
    var d = (a >>> 24 | b << 8) >>> 0 & 16777215;
    b = b >> 16 & 65535;
    a = (a & 16777215) + 6777216 * d + 6710656 * b;
    d += 8147497 * b;
    b *= 2;
    1E7 <= a && (d += Math.floor(a / 1E7), a %= 1E7);
    1E7 <= d && (b += Math.floor(d / 1E7), d %= 1E7);
    var e = jspb.utils.DIGITS,
        f = !1,
        g = "";
    (b || f) && c(b);
    (d || f) && c(d);
    (a || f) && c(a);
    return g;
  };

  jspb.utils.joinSignedDecimalString = function (a, b) {
    var c = b & 2147483648;
    c && (a = ~a + 1 >>> 0, b = ~b + (0 == a ? 1 : 0) >>> 0);
    a = jspb.utils.joinUnsignedDecimalString(a, b);
    return c ? "-" + a : a;
  };

  jspb.utils.hash64ToDecimalString = function (a, b) {
    jspb.utils.splitHash64(a);
    a = jspb.utils.split64Low;
    var c = jspb.utils.split64High;
    return b ? jspb.utils.joinSignedDecimalString(a, c) : jspb.utils.joinUnsignedDecimalString(a, c);
  };

  jspb.utils.hash64ArrayToDecimalStrings = function (a, b) {
    for (var c = Array(a.length), d = 0; d < a.length; d++) {
      c[d] = jspb.utils.hash64ToDecimalString(a[d], b);
    }

    return c;
  };

  jspb.utils.decimalStringToHash64 = function (a) {
    function b(a, b) {
      for (var c = 0; 8 > c && (1 !== a || 0 < b); c++) {
        b = a * e[c] + b, e[c] = b & 255, b >>>= 8;
      }
    }

    function c() {
      for (var a = 0; 8 > a; a++) {
        e[a] = ~e[a] & 255;
      }
    }

    goog.asserts.assert(0 < a.length);
    var d = !1;
    "-" === a[0] && (d = !0, a = a.slice(1));

    for (var e = [0, 0, 0, 0, 0, 0, 0, 0], f = 0; f < a.length; f++) {
      b(10, jspb.utils.DIGITS.indexOf(a[f]));
    }

    d && (c(), b(1, 1));
    return goog.crypt.byteArrayToString(e);
  };

  jspb.utils.splitDecimalString = function (a) {
    jspb.utils.splitHash64(jspb.utils.decimalStringToHash64(a));
  };

  jspb.utils.hash64ToHexString = function (a) {
    var b = Array(18);
    b[0] = "0";
    b[1] = "x";

    for (var c = 0; 8 > c; c++) {
      var d = a.charCodeAt(7 - c);
      b[2 * c + 2] = jspb.utils.DIGITS[d >> 4];
      b[2 * c + 3] = jspb.utils.DIGITS[d & 15];
    }

    return b.join("");
  };

  jspb.utils.hexStringToHash64 = function (a) {
    a = a.toLowerCase();
    goog.asserts.assert(18 == a.length);
    goog.asserts.assert("0" == a[0]);
    goog.asserts.assert("x" == a[1]);

    for (var b = "", c = 0; 8 > c; c++) {
      var d = jspb.utils.DIGITS.indexOf(a[2 * c + 2]),
          e = jspb.utils.DIGITS.indexOf(a[2 * c + 3]);
      b = String.fromCharCode(16 * d + e) + b;
    }

    return b;
  };

  jspb.utils.hash64ToNumber = function (a, b) {
    jspb.utils.splitHash64(a);
    a = jspb.utils.split64Low;
    var c = jspb.utils.split64High;
    return b ? jspb.utils.joinInt64(a, c) : jspb.utils.joinUint64(a, c);
  };

  jspb.utils.numberToHash64 = function (a) {
    jspb.utils.splitInt64(a);
    return jspb.utils.joinHash64(jspb.utils.split64Low, jspb.utils.split64High);
  };

  jspb.utils.countVarints = function (a, b, c) {
    for (var d = 0, e = b; e < c; e++) {
      d += a[e] >> 7;
    }

    return c - b - d;
  };

  jspb.utils.countVarintFields = function (a, b, c, d) {
    var e = 0;
    d = 8 * d + jspb.BinaryConstants.WireType.VARINT;
    if (128 > d) for (; b < c && a[b++] == d;) {
      for (e++;;) {
        var f = a[b++];
        if (0 == (f & 128)) break;
      }
    } else for (; b < c;) {
      for (f = d; 128 < f;) {
        if (a[b] != (f & 127 | 128)) return e;
        b++;
        f >>= 7;
      }

      if (a[b++] != f) break;

      for (e++; f = a[b++], 0 != (f & 128);) {
      }
    }
    return e;
  };

  jspb.utils.countFixedFields_ = function (a, b, c, d, e) {
    var f = 0;
    if (128 > d) for (; b < c && a[b++] == d;) {
      f++, b += e;
    } else for (; b < c;) {
      for (var g = d; 128 < g;) {
        if (a[b++] != (g & 127 | 128)) return f;
        g >>= 7;
      }

      if (a[b++] != g) break;
      f++;
      b += e;
    }
    return f;
  };

  jspb.utils.countFixed32Fields = function (a, b, c, d) {
    return jspb.utils.countFixedFields_(a, b, c, 8 * d + jspb.BinaryConstants.WireType.FIXED32, 4);
  };

  jspb.utils.countFixed64Fields = function (a, b, c, d) {
    return jspb.utils.countFixedFields_(a, b, c, 8 * d + jspb.BinaryConstants.WireType.FIXED64, 8);
  };

  jspb.utils.countDelimitedFields = function (a, b, c, d) {
    var e = 0;

    for (d = 8 * d + jspb.BinaryConstants.WireType.DELIMITED; b < c;) {
      for (var f = d; 128 < f;) {
        if (a[b++] != (f & 127 | 128)) return e;
        f >>= 7;
      }

      if (a[b++] != f) break;
      e++;

      for (var g = 0, h = 1; f = a[b++], g += (f & 127) * h, h *= 128, 0 != (f & 128);) {
      }

      b += g;
    }

    return e;
  };

  jspb.utils.debugBytesToTextFormat = function (a) {
    var b = '"';

    if (a) {
      a = jspb.utils.byteSourceToUint8Array(a);

      for (var c = 0; c < a.length; c++) {
        b += "\\x", 16 > a[c] && (b += "0"), b += a[c].toString(16);
      }
    }

    return b + '"';
  };

  jspb.utils.debugScalarToTextFormat = function (a) {
    return goog.isString(a) ? goog.string.quote(a) : a.toString();
  };

  jspb.utils.stringToByteArray = function (a) {
    for (var b = new Uint8Array(a.length), c = 0; c < a.length; c++) {
      var d = a.charCodeAt(c);
      if (255 < d) throw Error("Conversion error: string contains codepoint outside of byte range");
      b[c] = d;
    }

    return b;
  };

  jspb.utils.byteSourceToUint8Array = function (a) {
    if (a.constructor === Uint8Array) return a;
    if (a.constructor === ArrayBuffer || "undefined" != typeof Buffer$1 && a.constructor === Buffer$1 || a.constructor === Array) return new Uint8Array(a);
    if (a.constructor === String) return goog.crypt.base64.decodeStringToUint8Array(a);
    goog.asserts.fail("Type not convertible to Uint8Array.");
    return new Uint8Array(0);
  };

  jspb.BinaryIterator = function (a, b, c) {
    this.elements_ = this.nextMethod_ = this.decoder_ = null;
    this.cursor_ = 0;
    this.nextValue_ = null;
    this.atEnd_ = !0;
    this.init_(a, b, c);
  };

  jspb.BinaryIterator.prototype.init_ = function (a, b, c) {
    a && b && (this.decoder_ = a, this.nextMethod_ = b);
    this.elements_ = c || null;
    this.cursor_ = 0;
    this.nextValue_ = null;
    this.atEnd_ = !this.decoder_ && !this.elements_;
    this.next();
  };

  jspb.BinaryIterator.instanceCache_ = [];

  jspb.BinaryIterator.alloc = function (a, b, c) {
    if (jspb.BinaryIterator.instanceCache_.length) {
      var d = jspb.BinaryIterator.instanceCache_.pop();
      d.init_(a, b, c);
      return d;
    }

    return new jspb.BinaryIterator(a, b, c);
  };

  jspb.BinaryIterator.prototype.free = function () {
    this.clear();
    100 > jspb.BinaryIterator.instanceCache_.length && jspb.BinaryIterator.instanceCache_.push(this);
  };

  jspb.BinaryIterator.prototype.clear = function () {
    this.decoder_ && this.decoder_.free();
    this.elements_ = this.nextMethod_ = this.decoder_ = null;
    this.cursor_ = 0;
    this.nextValue_ = null;
    this.atEnd_ = !0;
  };

  jspb.BinaryIterator.prototype.get = function () {
    return this.nextValue_;
  };

  jspb.BinaryIterator.prototype.atEnd = function () {
    return this.atEnd_;
  };

  jspb.BinaryIterator.prototype.next = function () {
    var a = this.nextValue_;
    this.decoder_ ? this.decoder_.atEnd() ? (this.nextValue_ = null, this.atEnd_ = !0) : this.nextValue_ = this.nextMethod_.call(this.decoder_) : this.elements_ && (this.cursor_ == this.elements_.length ? (this.nextValue_ = null, this.atEnd_ = !0) : this.nextValue_ = this.elements_[this.cursor_++]);
    return a;
  };

  jspb.BinaryDecoder = function (a, b, c) {
    this.bytes_ = null;
    this.tempHigh_ = this.tempLow_ = this.cursor_ = this.end_ = this.start_ = 0;
    this.error_ = !1;
    a && this.setBlock(a, b, c);
  };

  jspb.BinaryDecoder.instanceCache_ = [];

  jspb.BinaryDecoder.alloc = function (a, b, c) {
    if (jspb.BinaryDecoder.instanceCache_.length) {
      var d = jspb.BinaryDecoder.instanceCache_.pop();
      a && d.setBlock(a, b, c);
      return d;
    }

    return new jspb.BinaryDecoder(a, b, c);
  };

  jspb.BinaryDecoder.prototype.free = function () {
    this.clear();
    100 > jspb.BinaryDecoder.instanceCache_.length && jspb.BinaryDecoder.instanceCache_.push(this);
  };

  jspb.BinaryDecoder.prototype.clone = function () {
    return jspb.BinaryDecoder.alloc(this.bytes_, this.start_, this.end_ - this.start_);
  };

  jspb.BinaryDecoder.prototype.clear = function () {
    this.bytes_ = null;
    this.cursor_ = this.end_ = this.start_ = 0;
    this.error_ = !1;
  };

  jspb.BinaryDecoder.prototype.getBuffer = function () {
    return this.bytes_;
  };

  jspb.BinaryDecoder.prototype.setBlock = function (a, b, c) {
    this.bytes_ = jspb.utils.byteSourceToUint8Array(a);
    this.start_ = goog.isDef(b) ? b : 0;
    this.end_ = goog.isDef(c) ? this.start_ + c : this.bytes_.length;
    this.cursor_ = this.start_;
  };

  jspb.BinaryDecoder.prototype.getEnd = function () {
    return this.end_;
  };

  jspb.BinaryDecoder.prototype.setEnd = function (a) {
    this.end_ = a;
  };

  jspb.BinaryDecoder.prototype.reset = function () {
    this.cursor_ = this.start_;
  };

  jspb.BinaryDecoder.prototype.getCursor = function () {
    return this.cursor_;
  };

  jspb.BinaryDecoder.prototype.setCursor = function (a) {
    this.cursor_ = a;
  };

  jspb.BinaryDecoder.prototype.advance = function (a) {
    this.cursor_ += a;
    goog.asserts.assert(this.cursor_ <= this.end_);
  };

  jspb.BinaryDecoder.prototype.atEnd = function () {
    return this.cursor_ == this.end_;
  };

  jspb.BinaryDecoder.prototype.pastEnd = function () {
    return this.cursor_ > this.end_;
  };

  jspb.BinaryDecoder.prototype.getError = function () {
    return this.error_ || 0 > this.cursor_ || this.cursor_ > this.end_;
  };

  jspb.BinaryDecoder.prototype.readSplitVarint64_ = function () {
    for (var a, b = 0, c, d = 0; 4 > d; d++) {
      if (a = this.bytes_[this.cursor_++], b |= (a & 127) << 7 * d, 128 > a) {
        this.tempLow_ = b >>> 0;
        this.tempHigh_ = 0;
        return;
      }
    }

    a = this.bytes_[this.cursor_++];
    b |= (a & 127) << 28;
    c = 0 | (a & 127) >> 4;
    if (128 > a) this.tempLow_ = b >>> 0, this.tempHigh_ = c >>> 0;else {
      for (d = 0; 5 > d; d++) {
        if (a = this.bytes_[this.cursor_++], c |= (a & 127) << 7 * d + 3, 128 > a) {
          this.tempLow_ = b >>> 0;
          this.tempHigh_ = c >>> 0;
          return;
        }
      }

      goog.asserts.fail("Failed to read varint, encoding is invalid.");
      this.error_ = !0;
    }
  };

  jspb.BinaryDecoder.prototype.skipVarint = function () {
    for (; this.bytes_[this.cursor_] & 128;) {
      this.cursor_++;
    }

    this.cursor_++;
  };

  jspb.BinaryDecoder.prototype.unskipVarint = function (a) {
    for (; 128 < a;) {
      this.cursor_--, a >>>= 7;
    }

    this.cursor_--;
  };

  jspb.BinaryDecoder.prototype.readUnsignedVarint32 = function () {
    var a = this.bytes_;
    var b = a[this.cursor_ + 0];
    var c = b & 127;
    if (128 > b) return this.cursor_ += 1, goog.asserts.assert(this.cursor_ <= this.end_), c;
    b = a[this.cursor_ + 1];
    c |= (b & 127) << 7;
    if (128 > b) return this.cursor_ += 2, goog.asserts.assert(this.cursor_ <= this.end_), c;
    b = a[this.cursor_ + 2];
    c |= (b & 127) << 14;
    if (128 > b) return this.cursor_ += 3, goog.asserts.assert(this.cursor_ <= this.end_), c;
    b = a[this.cursor_ + 3];
    c |= (b & 127) << 21;
    if (128 > b) return this.cursor_ += 4, goog.asserts.assert(this.cursor_ <= this.end_), c;
    b = a[this.cursor_ + 4];
    c |= (b & 15) << 28;
    if (128 > b) return this.cursor_ += 5, goog.asserts.assert(this.cursor_ <= this.end_), c >>> 0;
    this.cursor_ += 5;
    128 <= a[this.cursor_++] && 128 <= a[this.cursor_++] && 128 <= a[this.cursor_++] && 128 <= a[this.cursor_++] && 128 <= a[this.cursor_++] && goog.asserts.assert(!1);
    goog.asserts.assert(this.cursor_ <= this.end_);
    return c;
  };

  jspb.BinaryDecoder.prototype.readSignedVarint32 = jspb.BinaryDecoder.prototype.readUnsignedVarint32;

  jspb.BinaryDecoder.prototype.readUnsignedVarint32String = function () {
    return this.readUnsignedVarint32().toString();
  };

  jspb.BinaryDecoder.prototype.readSignedVarint32String = function () {
    return this.readSignedVarint32().toString();
  };

  jspb.BinaryDecoder.prototype.readZigzagVarint32 = function () {
    var a = this.readUnsignedVarint32();
    return a >>> 1 ^ -(a & 1);
  };

  jspb.BinaryDecoder.prototype.readUnsignedVarint64 = function () {
    this.readSplitVarint64_();
    return jspb.utils.joinUint64(this.tempLow_, this.tempHigh_);
  };

  jspb.BinaryDecoder.prototype.readUnsignedVarint64String = function () {
    this.readSplitVarint64_();
    return jspb.utils.joinUnsignedDecimalString(this.tempLow_, this.tempHigh_);
  };

  jspb.BinaryDecoder.prototype.readSignedVarint64 = function () {
    this.readSplitVarint64_();
    return jspb.utils.joinInt64(this.tempLow_, this.tempHigh_);
  };

  jspb.BinaryDecoder.prototype.readSignedVarint64String = function () {
    this.readSplitVarint64_();
    return jspb.utils.joinSignedDecimalString(this.tempLow_, this.tempHigh_);
  };

  jspb.BinaryDecoder.prototype.readZigzagVarint64 = function () {
    this.readSplitVarint64_();
    return jspb.utils.joinZigzag64(this.tempLow_, this.tempHigh_);
  };

  jspb.BinaryDecoder.prototype.readZigzagVarint64String = function () {
    return this.readZigzagVarint64().toString();
  };

  jspb.BinaryDecoder.prototype.readUint8 = function () {
    var a = this.bytes_[this.cursor_ + 0];
    this.cursor_ += 1;
    goog.asserts.assert(this.cursor_ <= this.end_);
    return a;
  };

  jspb.BinaryDecoder.prototype.readUint16 = function () {
    var a = this.bytes_[this.cursor_ + 0],
        b = this.bytes_[this.cursor_ + 1];
    this.cursor_ += 2;
    goog.asserts.assert(this.cursor_ <= this.end_);
    return a << 0 | b << 8;
  };

  jspb.BinaryDecoder.prototype.readUint32 = function () {
    var a = this.bytes_[this.cursor_ + 0],
        b = this.bytes_[this.cursor_ + 1],
        c = this.bytes_[this.cursor_ + 2],
        d = this.bytes_[this.cursor_ + 3];
    this.cursor_ += 4;
    goog.asserts.assert(this.cursor_ <= this.end_);
    return (a << 0 | b << 8 | c << 16 | d << 24) >>> 0;
  };

  jspb.BinaryDecoder.prototype.readUint64 = function () {
    var a = this.readUint32(),
        b = this.readUint32();
    return jspb.utils.joinUint64(a, b);
  };

  jspb.BinaryDecoder.prototype.readUint64String = function () {
    var a = this.readUint32(),
        b = this.readUint32();
    return jspb.utils.joinUnsignedDecimalString(a, b);
  };

  jspb.BinaryDecoder.prototype.readInt8 = function () {
    var a = this.bytes_[this.cursor_ + 0];
    this.cursor_ += 1;
    goog.asserts.assert(this.cursor_ <= this.end_);
    return a << 24 >> 24;
  };

  jspb.BinaryDecoder.prototype.readInt16 = function () {
    var a = this.bytes_[this.cursor_ + 0],
        b = this.bytes_[this.cursor_ + 1];
    this.cursor_ += 2;
    goog.asserts.assert(this.cursor_ <= this.end_);
    return (a << 0 | b << 8) << 16 >> 16;
  };

  jspb.BinaryDecoder.prototype.readInt32 = function () {
    var a = this.bytes_[this.cursor_ + 0],
        b = this.bytes_[this.cursor_ + 1],
        c = this.bytes_[this.cursor_ + 2],
        d = this.bytes_[this.cursor_ + 3];
    this.cursor_ += 4;
    goog.asserts.assert(this.cursor_ <= this.end_);
    return a << 0 | b << 8 | c << 16 | d << 24;
  };

  jspb.BinaryDecoder.prototype.readInt64 = function () {
    var a = this.readUint32(),
        b = this.readUint32();
    return jspb.utils.joinInt64(a, b);
  };

  jspb.BinaryDecoder.prototype.readInt64String = function () {
    var a = this.readUint32(),
        b = this.readUint32();
    return jspb.utils.joinSignedDecimalString(a, b);
  };

  jspb.BinaryDecoder.prototype.readFloat = function () {
    var a = this.readUint32();
    return jspb.utils.joinFloat32(a, 0);
  };

  jspb.BinaryDecoder.prototype.readDouble = function () {
    var a = this.readUint32(),
        b = this.readUint32();
    return jspb.utils.joinFloat64(a, b);
  };

  jspb.BinaryDecoder.prototype.readBool = function () {
    return !!this.bytes_[this.cursor_++];
  };

  jspb.BinaryDecoder.prototype.readEnum = function () {
    return this.readSignedVarint32();
  };

  jspb.BinaryDecoder.prototype.readString = function (a) {
    var b = this.bytes_,
        c = this.cursor_;
    a = c + a;

    for (var d = [], e = ""; c < a;) {
      var f = b[c++];
      if (128 > f) d.push(f);else if (192 > f) continue;else if (224 > f) {
        var g = b[c++];
        d.push((f & 31) << 6 | g & 63);
      } else if (240 > f) {
        g = b[c++];
        var h = b[c++];
        d.push((f & 15) << 12 | (g & 63) << 6 | h & 63);
      } else if (248 > f) {
        g = b[c++];
        h = b[c++];
        var k = b[c++];
        f = (f & 7) << 18 | (g & 63) << 12 | (h & 63) << 6 | k & 63;
        f -= 65536;
        d.push((f >> 10 & 1023) + 55296, (f & 1023) + 56320);
      }
      8192 <= d.length && (e += String.fromCharCode.apply(null, d), d.length = 0);
    }

    e += goog.crypt.byteArrayToString(d);
    this.cursor_ = c;
    return e;
  };

  jspb.BinaryDecoder.prototype.readStringWithLength = function () {
    var a = this.readUnsignedVarint32();
    return this.readString(a);
  };

  jspb.BinaryDecoder.prototype.readBytes = function (a) {
    if (0 > a || this.cursor_ + a > this.bytes_.length) return this.error_ = !0, goog.asserts.fail("Invalid byte length!"), new Uint8Array(0);
    var b = this.bytes_.subarray(this.cursor_, this.cursor_ + a);
    this.cursor_ += a;
    goog.asserts.assert(this.cursor_ <= this.end_);
    return b;
  };

  jspb.BinaryDecoder.prototype.readVarintHash64 = function () {
    this.readSplitVarint64_();
    return jspb.utils.joinHash64(this.tempLow_, this.tempHigh_);
  };

  jspb.BinaryDecoder.prototype.readFixedHash64 = function () {
    var a = this.bytes_,
        b = this.cursor_,
        c = a[b + 0],
        d = a[b + 1],
        e = a[b + 2],
        f = a[b + 3],
        g = a[b + 4],
        h = a[b + 5],
        k = a[b + 6];
    a = a[b + 7];
    this.cursor_ += 8;
    return String.fromCharCode(c, d, e, f, g, h, k, a);
  };

  jspb.BinaryReader = function (a, b, c) {
    this.decoder_ = jspb.BinaryDecoder.alloc(a, b, c);
    this.fieldCursor_ = this.decoder_.getCursor();
    this.nextField_ = jspb.BinaryConstants.INVALID_FIELD_NUMBER;
    this.nextWireType_ = jspb.BinaryConstants.WireType.INVALID;
    this.error_ = !1;
    this.readCallbacks_ = null;
  };

  jspb.BinaryReader.instanceCache_ = [];

  jspb.BinaryReader.alloc = function (a, b, c) {
    if (jspb.BinaryReader.instanceCache_.length) {
      var d = jspb.BinaryReader.instanceCache_.pop();
      a && d.decoder_.setBlock(a, b, c);
      return d;
    }

    return new jspb.BinaryReader(a, b, c);
  };

  jspb.BinaryReader.prototype.alloc = jspb.BinaryReader.alloc;

  jspb.BinaryReader.prototype.free = function () {
    this.decoder_.clear();
    this.nextField_ = jspb.BinaryConstants.INVALID_FIELD_NUMBER;
    this.nextWireType_ = jspb.BinaryConstants.WireType.INVALID;
    this.error_ = !1;
    this.readCallbacks_ = null;
    100 > jspb.BinaryReader.instanceCache_.length && jspb.BinaryReader.instanceCache_.push(this);
  };

  jspb.BinaryReader.prototype.getFieldCursor = function () {
    return this.fieldCursor_;
  };

  jspb.BinaryReader.prototype.getCursor = function () {
    return this.decoder_.getCursor();
  };

  jspb.BinaryReader.prototype.getBuffer = function () {
    return this.decoder_.getBuffer();
  };

  jspb.BinaryReader.prototype.getFieldNumber = function () {
    return this.nextField_;
  };

  jspb.BinaryReader.prototype.getWireType = function () {
    return this.nextWireType_;
  };

  jspb.BinaryReader.prototype.isEndGroup = function () {
    return this.nextWireType_ == jspb.BinaryConstants.WireType.END_GROUP;
  };

  jspb.BinaryReader.prototype.getError = function () {
    return this.error_ || this.decoder_.getError();
  };

  jspb.BinaryReader.prototype.setBlock = function (a, b, c) {
    this.decoder_.setBlock(a, b, c);
    this.nextField_ = jspb.BinaryConstants.INVALID_FIELD_NUMBER;
    this.nextWireType_ = jspb.BinaryConstants.WireType.INVALID;
  };

  jspb.BinaryReader.prototype.reset = function () {
    this.decoder_.reset();
    this.nextField_ = jspb.BinaryConstants.INVALID_FIELD_NUMBER;
    this.nextWireType_ = jspb.BinaryConstants.WireType.INVALID;
  };

  jspb.BinaryReader.prototype.advance = function (a) {
    this.decoder_.advance(a);
  };

  jspb.BinaryReader.prototype.nextField = function () {
    if (this.decoder_.atEnd()) return !1;
    if (this.getError()) return goog.asserts.fail("Decoder hit an error"), !1;
    this.fieldCursor_ = this.decoder_.getCursor();
    var a = this.decoder_.readUnsignedVarint32(),
        b = a >>> 3;
    a &= 7;
    if (a != jspb.BinaryConstants.WireType.VARINT && a != jspb.BinaryConstants.WireType.FIXED32 && a != jspb.BinaryConstants.WireType.FIXED64 && a != jspb.BinaryConstants.WireType.DELIMITED && a != jspb.BinaryConstants.WireType.START_GROUP && a != jspb.BinaryConstants.WireType.END_GROUP) return goog.asserts.fail("Invalid wire type: %s (at position %s)", a, this.fieldCursor_), this.error_ = !0, !1;
    this.nextField_ = b;
    this.nextWireType_ = a;
    return !0;
  };

  jspb.BinaryReader.prototype.unskipHeader = function () {
    this.decoder_.unskipVarint(this.nextField_ << 3 | this.nextWireType_);
  };

  jspb.BinaryReader.prototype.skipMatchingFields = function () {
    var a = this.nextField_;

    for (this.unskipHeader(); this.nextField() && this.getFieldNumber() == a;) {
      this.skipField();
    }

    this.decoder_.atEnd() || this.unskipHeader();
  };

  jspb.BinaryReader.prototype.skipVarintField = function () {
    this.nextWireType_ != jspb.BinaryConstants.WireType.VARINT ? (goog.asserts.fail("Invalid wire type for skipVarintField"), this.skipField()) : this.decoder_.skipVarint();
  };

  jspb.BinaryReader.prototype.skipDelimitedField = function () {
    if (this.nextWireType_ != jspb.BinaryConstants.WireType.DELIMITED) goog.asserts.fail("Invalid wire type for skipDelimitedField"), this.skipField();else {
      var a = this.decoder_.readUnsignedVarint32();
      this.decoder_.advance(a);
    }
  };

  jspb.BinaryReader.prototype.skipFixed32Field = function () {
    this.nextWireType_ != jspb.BinaryConstants.WireType.FIXED32 ? (goog.asserts.fail("Invalid wire type for skipFixed32Field"), this.skipField()) : this.decoder_.advance(4);
  };

  jspb.BinaryReader.prototype.skipFixed64Field = function () {
    this.nextWireType_ != jspb.BinaryConstants.WireType.FIXED64 ? (goog.asserts.fail("Invalid wire type for skipFixed64Field"), this.skipField()) : this.decoder_.advance(8);
  };

  jspb.BinaryReader.prototype.skipGroup = function () {
    var a = this.nextField_;

    do {
      if (!this.nextField()) {
        goog.asserts.fail("Unmatched start-group tag: stream EOF");
        this.error_ = !0;
        break;
      }

      if (this.nextWireType_ == jspb.BinaryConstants.WireType.END_GROUP) {
        this.nextField_ != a && (goog.asserts.fail("Unmatched end-group tag"), this.error_ = !0);
        break;
      }

      this.skipField();
    } while (1);
  };

  jspb.BinaryReader.prototype.skipField = function () {
    switch (this.nextWireType_) {
      case jspb.BinaryConstants.WireType.VARINT:
        this.skipVarintField();
        break;

      case jspb.BinaryConstants.WireType.FIXED64:
        this.skipFixed64Field();
        break;

      case jspb.BinaryConstants.WireType.DELIMITED:
        this.skipDelimitedField();
        break;

      case jspb.BinaryConstants.WireType.FIXED32:
        this.skipFixed32Field();
        break;

      case jspb.BinaryConstants.WireType.START_GROUP:
        this.skipGroup();
        break;

      default:
        goog.asserts.fail("Invalid wire encoding for field.");
    }
  };

  jspb.BinaryReader.prototype.registerReadCallback = function (a, b) {
    goog.isNull(this.readCallbacks_) && (this.readCallbacks_ = {});
    goog.asserts.assert(!this.readCallbacks_[a]);
    this.readCallbacks_[a] = b;
  };

  jspb.BinaryReader.prototype.runReadCallback = function (a) {
    goog.asserts.assert(!goog.isNull(this.readCallbacks_));
    a = this.readCallbacks_[a];
    goog.asserts.assert(a);
    return a(this);
  };

  jspb.BinaryReader.prototype.readAny = function (a) {
    this.nextWireType_ = jspb.BinaryConstants.FieldTypeToWireType(a);
    var b = jspb.BinaryConstants.FieldType;

    switch (a) {
      case b.DOUBLE:
        return this.readDouble();

      case b.FLOAT:
        return this.readFloat();

      case b.INT64:
        return this.readInt64();

      case b.UINT64:
        return this.readUint64();

      case b.INT32:
        return this.readInt32();

      case b.FIXED64:
        return this.readFixed64();

      case b.FIXED32:
        return this.readFixed32();

      case b.BOOL:
        return this.readBool();

      case b.STRING:
        return this.readString();

      case b.GROUP:
        goog.asserts.fail("Group field type not supported in readAny()");

      case b.MESSAGE:
        goog.asserts.fail("Message field type not supported in readAny()");

      case b.BYTES:
        return this.readBytes();

      case b.UINT32:
        return this.readUint32();

      case b.ENUM:
        return this.readEnum();

      case b.SFIXED32:
        return this.readSfixed32();

      case b.SFIXED64:
        return this.readSfixed64();

      case b.SINT32:
        return this.readSint32();

      case b.SINT64:
        return this.readSint64();

      case b.FHASH64:
        return this.readFixedHash64();

      case b.VHASH64:
        return this.readVarintHash64();

      default:
        goog.asserts.fail("Invalid field type in readAny()");
    }

    return 0;
  };

  jspb.BinaryReader.prototype.readMessage = function (a, b) {
    goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.DELIMITED);
    var c = this.decoder_.getEnd(),
        d = this.decoder_.readUnsignedVarint32();
    d = this.decoder_.getCursor() + d;
    this.decoder_.setEnd(d);
    b(a, this);
    this.decoder_.setCursor(d);
    this.decoder_.setEnd(c);
  };

  jspb.BinaryReader.prototype.readGroup = function (a, b, c) {
    goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.START_GROUP);
    goog.asserts.assert(this.nextField_ == a);
    c(b, this);
    this.error_ || this.nextWireType_ == jspb.BinaryConstants.WireType.END_GROUP || (goog.asserts.fail("Group submessage did not end with an END_GROUP tag"), this.error_ = !0);
  };

  jspb.BinaryReader.prototype.getFieldDecoder = function () {
    goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.DELIMITED);
    var a = this.decoder_.readUnsignedVarint32(),
        b = this.decoder_.getCursor(),
        c = b + a;
    a = jspb.BinaryDecoder.alloc(this.decoder_.getBuffer(), b, a);
    this.decoder_.setCursor(c);
    return a;
  };

  jspb.BinaryReader.prototype.readInt32 = function () {
    goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.VARINT);
    return this.decoder_.readSignedVarint32();
  };

  jspb.BinaryReader.prototype.readInt32String = function () {
    goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.VARINT);
    return this.decoder_.readSignedVarint32String();
  };

  jspb.BinaryReader.prototype.readInt64 = function () {
    goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.VARINT);
    return this.decoder_.readSignedVarint64();
  };

  jspb.BinaryReader.prototype.readInt64String = function () {
    goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.VARINT);
    return this.decoder_.readSignedVarint64String();
  };

  jspb.BinaryReader.prototype.readUint32 = function () {
    goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.VARINT);
    return this.decoder_.readUnsignedVarint32();
  };

  jspb.BinaryReader.prototype.readUint32String = function () {
    goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.VARINT);
    return this.decoder_.readUnsignedVarint32String();
  };

  jspb.BinaryReader.prototype.readUint64 = function () {
    goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.VARINT);
    return this.decoder_.readUnsignedVarint64();
  };

  jspb.BinaryReader.prototype.readUint64String = function () {
    goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.VARINT);
    return this.decoder_.readUnsignedVarint64String();
  };

  jspb.BinaryReader.prototype.readSint32 = function () {
    goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.VARINT);
    return this.decoder_.readZigzagVarint32();
  };

  jspb.BinaryReader.prototype.readSint64 = function () {
    goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.VARINT);
    return this.decoder_.readZigzagVarint64();
  };

  jspb.BinaryReader.prototype.readSint64String = function () {
    goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.VARINT);
    return this.decoder_.readZigzagVarint64String();
  };

  jspb.BinaryReader.prototype.readFixed32 = function () {
    goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.FIXED32);
    return this.decoder_.readUint32();
  };

  jspb.BinaryReader.prototype.readFixed64 = function () {
    goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.FIXED64);
    return this.decoder_.readUint64();
  };

  jspb.BinaryReader.prototype.readFixed64String = function () {
    goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.FIXED64);
    return this.decoder_.readUint64String();
  };

  jspb.BinaryReader.prototype.readSfixed32 = function () {
    goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.FIXED32);
    return this.decoder_.readInt32();
  };

  jspb.BinaryReader.prototype.readSfixed32String = function () {
    goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.FIXED32);
    return this.decoder_.readInt32().toString();
  };

  jspb.BinaryReader.prototype.readSfixed64 = function () {
    goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.FIXED64);
    return this.decoder_.readInt64();
  };

  jspb.BinaryReader.prototype.readSfixed64String = function () {
    goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.FIXED64);
    return this.decoder_.readInt64String();
  };

  jspb.BinaryReader.prototype.readFloat = function () {
    goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.FIXED32);
    return this.decoder_.readFloat();
  };

  jspb.BinaryReader.prototype.readDouble = function () {
    goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.FIXED64);
    return this.decoder_.readDouble();
  };

  jspb.BinaryReader.prototype.readBool = function () {
    goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.VARINT);
    return !!this.decoder_.readUnsignedVarint32();
  };

  jspb.BinaryReader.prototype.readEnum = function () {
    goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.VARINT);
    return this.decoder_.readSignedVarint64();
  };

  jspb.BinaryReader.prototype.readString = function () {
    goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.DELIMITED);
    var a = this.decoder_.readUnsignedVarint32();
    return this.decoder_.readString(a);
  };

  jspb.BinaryReader.prototype.readBytes = function () {
    goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.DELIMITED);
    var a = this.decoder_.readUnsignedVarint32();
    return this.decoder_.readBytes(a);
  };

  jspb.BinaryReader.prototype.readVarintHash64 = function () {
    goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.VARINT);
    return this.decoder_.readVarintHash64();
  };

  jspb.BinaryReader.prototype.readFixedHash64 = function () {
    goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.FIXED64);
    return this.decoder_.readFixedHash64();
  };

  jspb.BinaryReader.prototype.readPackedField_ = function (a) {
    goog.asserts.assert(this.nextWireType_ == jspb.BinaryConstants.WireType.DELIMITED);
    var b = this.decoder_.readUnsignedVarint32();
    b = this.decoder_.getCursor() + b;

    for (var c = []; this.decoder_.getCursor() < b;) {
      c.push(a.call(this.decoder_));
    }

    return c;
  };

  jspb.BinaryReader.prototype.readPackedInt32 = function () {
    return this.readPackedField_(this.decoder_.readSignedVarint32);
  };

  jspb.BinaryReader.prototype.readPackedInt32String = function () {
    return this.readPackedField_(this.decoder_.readSignedVarint32String);
  };

  jspb.BinaryReader.prototype.readPackedInt64 = function () {
    return this.readPackedField_(this.decoder_.readSignedVarint64);
  };

  jspb.BinaryReader.prototype.readPackedInt64String = function () {
    return this.readPackedField_(this.decoder_.readSignedVarint64String);
  };

  jspb.BinaryReader.prototype.readPackedUint32 = function () {
    return this.readPackedField_(this.decoder_.readUnsignedVarint32);
  };

  jspb.BinaryReader.prototype.readPackedUint32String = function () {
    return this.readPackedField_(this.decoder_.readUnsignedVarint32String);
  };

  jspb.BinaryReader.prototype.readPackedUint64 = function () {
    return this.readPackedField_(this.decoder_.readUnsignedVarint64);
  };

  jspb.BinaryReader.prototype.readPackedUint64String = function () {
    return this.readPackedField_(this.decoder_.readUnsignedVarint64String);
  };

  jspb.BinaryReader.prototype.readPackedSint32 = function () {
    return this.readPackedField_(this.decoder_.readZigzagVarint32);
  };

  jspb.BinaryReader.prototype.readPackedSint64 = function () {
    return this.readPackedField_(this.decoder_.readZigzagVarint64);
  };

  jspb.BinaryReader.prototype.readPackedSint64String = function () {
    return this.readPackedField_(this.decoder_.readZigzagVarint64String);
  };

  jspb.BinaryReader.prototype.readPackedFixed32 = function () {
    return this.readPackedField_(this.decoder_.readUint32);
  };

  jspb.BinaryReader.prototype.readPackedFixed64 = function () {
    return this.readPackedField_(this.decoder_.readUint64);
  };

  jspb.BinaryReader.prototype.readPackedFixed64String = function () {
    return this.readPackedField_(this.decoder_.readUint64String);
  };

  jspb.BinaryReader.prototype.readPackedSfixed32 = function () {
    return this.readPackedField_(this.decoder_.readInt32);
  };

  jspb.BinaryReader.prototype.readPackedSfixed64 = function () {
    return this.readPackedField_(this.decoder_.readInt64);
  };

  jspb.BinaryReader.prototype.readPackedSfixed64String = function () {
    return this.readPackedField_(this.decoder_.readInt64String);
  };

  jspb.BinaryReader.prototype.readPackedFloat = function () {
    return this.readPackedField_(this.decoder_.readFloat);
  };

  jspb.BinaryReader.prototype.readPackedDouble = function () {
    return this.readPackedField_(this.decoder_.readDouble);
  };

  jspb.BinaryReader.prototype.readPackedBool = function () {
    return this.readPackedField_(this.decoder_.readBool);
  };

  jspb.BinaryReader.prototype.readPackedEnum = function () {
    return this.readPackedField_(this.decoder_.readEnum);
  };

  jspb.BinaryReader.prototype.readPackedVarintHash64 = function () {
    return this.readPackedField_(this.decoder_.readVarintHash64);
  };

  jspb.BinaryReader.prototype.readPackedFixedHash64 = function () {
    return this.readPackedField_(this.decoder_.readFixedHash64);
  };

  jspb.Map = function (a, b) {
    this.arr_ = a;
    this.valueCtor_ = b;
    this.map_ = {};
    this.arrClean = !0;
    0 < this.arr_.length && this.loadFromArray_();
  };

  jspb.Map.prototype.loadFromArray_ = function () {
    for (var a = 0; a < this.arr_.length; a++) {
      var b = this.arr_[a],
          c = b[0];
      this.map_[c.toString()] = new jspb.Map.Entry_(c, b[1]);
    }

    this.arrClean = !0;
  };

  jspb.Map.prototype.toArray = function () {
    if (this.arrClean) {
      if (this.valueCtor_) {
        var a = this.map_,
            b;

        for (b in a) {
          if (Object.prototype.hasOwnProperty.call(a, b)) {
            var c = a[b].valueWrapper;
            c && c.toArray();
          }
        }
      }
    } else {
      this.arr_.length = 0;
      a = this.stringKeys_();
      a.sort();

      for (b = 0; b < a.length; b++) {
        var d = this.map_[a[b]];
        (c = d.valueWrapper) && c.toArray();
        this.arr_.push([d.key, d.value]);
      }

      this.arrClean = !0;
    }

    return this.arr_;
  };

  jspb.Map.prototype.toObject = function (a, b) {
    for (var c = this.toArray(), d = [], e = 0; e < c.length; e++) {
      var f = this.map_[c[e][0].toString()];
      this.wrapEntry_(f);
      var g = f.valueWrapper;
      g ? (goog.asserts.assert(b), d.push([f.key, b(a, g)])) : d.push([f.key, f.value]);
    }

    return d;
  };

  jspb.Map.fromObject = function (a, b, c) {
    b = new jspb.Map([], b);

    for (var d = 0; d < a.length; d++) {
      var e = a[d][0],
          f = c(a[d][1]);
      b.set(e, f);
    }

    return b;
  };

  jspb.Map.ArrayIteratorIterable_ = function (a) {
    this.idx_ = 0;
    this.arr_ = a;
  };

  jspb.Map.ArrayIteratorIterable_.prototype.next = function () {
    return this.idx_ < this.arr_.length ? {
      done: !1,
      value: this.arr_[this.idx_++]
    } : {
      done: !0,
      value: void 0
    };
  };

  "undefined" != typeof Symbol && (jspb.Map.ArrayIteratorIterable_.prototype[Symbol.iterator] = function () {
    return this;
  });

  jspb.Map.prototype.getLength = function () {
    return this.stringKeys_().length;
  };

  jspb.Map.prototype.clear = function () {
    this.map_ = {};
    this.arrClean = !1;
  };

  jspb.Map.prototype.del = function (a) {
    a = a.toString();
    var b = this.map_.hasOwnProperty(a);
    delete this.map_[a];
    this.arrClean = !1;
    return b;
  };

  jspb.Map.prototype.getEntryList = function () {
    var a = [],
        b = this.stringKeys_();
    b.sort();

    for (var c = 0; c < b.length; c++) {
      var d = this.map_[b[c]];
      a.push([d.key, d.value]);
    }

    return a;
  };

  jspb.Map.prototype.entries = function () {
    var a = [],
        b = this.stringKeys_();
    b.sort();

    for (var c = 0; c < b.length; c++) {
      var d = this.map_[b[c]];
      a.push([d.key, this.wrapEntry_(d)]);
    }

    return new jspb.Map.ArrayIteratorIterable_(a);
  };

  jspb.Map.prototype.keys = function () {
    var a = [],
        b = this.stringKeys_();
    b.sort();

    for (var c = 0; c < b.length; c++) {
      a.push(this.map_[b[c]].key);
    }

    return new jspb.Map.ArrayIteratorIterable_(a);
  };

  jspb.Map.prototype.values = function () {
    var a = [],
        b = this.stringKeys_();
    b.sort();

    for (var c = 0; c < b.length; c++) {
      a.push(this.wrapEntry_(this.map_[b[c]]));
    }

    return new jspb.Map.ArrayIteratorIterable_(a);
  };

  jspb.Map.prototype.forEach = function (a, b) {
    var c = this.stringKeys_();
    c.sort();

    for (var d = 0; d < c.length; d++) {
      var e = this.map_[c[d]];
      a.call(b, this.wrapEntry_(e), e.key, this);
    }
  };

  jspb.Map.prototype.set = function (a, b) {
    var c = new jspb.Map.Entry_(a);
    this.valueCtor_ ? (c.valueWrapper = b, c.value = b.toArray()) : c.value = b;
    this.map_[a.toString()] = c;
    this.arrClean = !1;
    return this;
  };

  jspb.Map.prototype.wrapEntry_ = function (a) {
    return this.valueCtor_ ? (a.valueWrapper || (a.valueWrapper = new this.valueCtor_(a.value)), a.valueWrapper) : a.value;
  };

  jspb.Map.prototype.get = function (a) {
    if (a = this.map_[a.toString()]) return this.wrapEntry_(a);
  };

  jspb.Map.prototype.has = function (a) {
    return a.toString() in this.map_;
  };

  jspb.Map.prototype.serializeBinary = function (a, b, c, d, e) {
    var f = this.stringKeys_();
    f.sort();

    for (var g = 0; g < f.length; g++) {
      var h = this.map_[f[g]];
      b.beginSubMessage(a);
      c.call(b, 1, h.key);
      this.valueCtor_ ? d.call(b, 2, this.wrapEntry_(h), e) : d.call(b, 2, h.value);
      b.endSubMessage();
    }
  };

  jspb.Map.deserializeBinary = function (a, b, c, d, e, f) {
    for (var g = void 0; b.nextField() && !b.isEndGroup();) {
      var h = b.getFieldNumber();
      1 == h ? f = c.call(b) : 2 == h && (a.valueCtor_ ? (goog.asserts.assert(e), g = new a.valueCtor_(), d.call(b, g, e)) : g = d.call(b));
    }

    goog.asserts.assert(void 0 != f);
    goog.asserts.assert(void 0 != g);
    a.set(f, g);
  };

  jspb.Map.prototype.stringKeys_ = function () {
    var a = this.map_,
        b = [],
        c;

    for (c in a) {
      Object.prototype.hasOwnProperty.call(a, c) && b.push(c);
    }

    return b;
  };

  jspb.Map.Entry_ = function (a, b) {
    this.key = a;
    this.value = b;
    this.valueWrapper = void 0;
  };

  jspb.ExtensionFieldInfo = function (a, b, c, d, e) {
    this.fieldIndex = a;
    this.fieldName = b;
    this.ctor = c;
    this.toObjectFn = d;
    this.isRepeated = e;
  };

  jspb.ExtensionFieldBinaryInfo = function (a, b, c, d, e, f) {
    this.fieldInfo = a;
    this.binaryReaderFn = b;
    this.binaryWriterFn = c;
    this.binaryMessageSerializeFn = d;
    this.binaryMessageDeserializeFn = e;
    this.isPacked = f;
  };

  jspb.ExtensionFieldInfo.prototype.isMessageType = function () {
    return !!this.ctor;
  };

  jspb.Message = function () {};

  jspb.Message.GENERATE_TO_OBJECT = !0;
  jspb.Message.GENERATE_FROM_OBJECT = !goog.DISALLOW_TEST_ONLY_CODE;
  jspb.Message.GENERATE_TO_STRING = !0;
  jspb.Message.ASSUME_LOCAL_ARRAYS = !1;
  jspb.Message.SERIALIZE_EMPTY_TRAILING_FIELDS = !0;
  jspb.Message.SUPPORTS_UINT8ARRAY_ = "function" == typeof Uint8Array;

  jspb.Message.prototype.getJsPbMessageId = function () {
    return this.messageId_;
  };

  jspb.Message.getIndex_ = function (a, b) {
    return b + a.arrayIndexOffset_;
  };

  jspb.Message.hiddenES6Property_ = function () {};

  jspb.Message.getFieldNumber_ = function (a, b) {
    return b - a.arrayIndexOffset_;
  };

  jspb.Message.initialize = function (a, b, c, d, e, f) {
    a.wrappers_ = null;
    b || (b = c ? [c] : []);
    a.messageId_ = c ? String(c) : void 0;
    a.arrayIndexOffset_ = 0 === c ? -1 : 0;
    a.array = b;
    jspb.Message.initPivotAndExtensionObject_(a, d);
    a.convertedPrimitiveFields_ = {};
    jspb.Message.SERIALIZE_EMPTY_TRAILING_FIELDS || (a.repeatedFields = e);
    if (e) for (b = 0; b < e.length; b++) {
      c = e[b], c < a.pivot_ ? (c = jspb.Message.getIndex_(a, c), a.array[c] = a.array[c] || jspb.Message.EMPTY_LIST_SENTINEL_) : (jspb.Message.maybeInitEmptyExtensionObject_(a), a.extensionObject_[c] = a.extensionObject_[c] || jspb.Message.EMPTY_LIST_SENTINEL_);
    }
    if (f && f.length) for (b = 0; b < f.length; b++) {
      jspb.Message.computeOneofCase(a, f[b]);
    }
  };

  jspb.Message.EMPTY_LIST_SENTINEL_ = goog.DEBUG && Object.freeze ? Object.freeze([]) : [];

  jspb.Message.isArray_ = function (a) {
    return jspb.Message.ASSUME_LOCAL_ARRAYS ? a instanceof Array : goog.isArray(a);
  };

  jspb.Message.isExtensionObject_ = function (a) {
    return null !== a && "object" == _typeof(a) && !jspb.Message.isArray_(a) && !(jspb.Message.SUPPORTS_UINT8ARRAY_ && a instanceof Uint8Array);
  };

  jspb.Message.initPivotAndExtensionObject_ = function (a, b) {
    var c = a.array.length,
        d = -1;

    if (c && (d = c - 1, c = a.array[d], jspb.Message.isExtensionObject_(c))) {
      a.pivot_ = jspb.Message.getFieldNumber_(a, d);
      a.extensionObject_ = c;
      return;
    }

    -1 < b ? (a.pivot_ = Math.max(b, jspb.Message.getFieldNumber_(a, d + 1)), a.extensionObject_ = null) : a.pivot_ = Number.MAX_VALUE;
  };

  jspb.Message.maybeInitEmptyExtensionObject_ = function (a) {
    var b = jspb.Message.getIndex_(a, a.pivot_);
    a.array[b] || (a.extensionObject_ = a.array[b] = {});
  };

  jspb.Message.toObjectList = function (a, b, c) {
    for (var d = [], e = 0; e < a.length; e++) {
      d[e] = b.call(a[e], c, a[e]);
    }

    return d;
  };

  jspb.Message.toObjectExtension = function (a, b, c, d, e) {
    for (var f in c) {
      var g = c[f],
          h = d.call(a, g);

      if (null != h) {
        for (var k in g.fieldName) {
          if (g.fieldName.hasOwnProperty(k)) break;
        }

        b[k] = g.toObjectFn ? g.isRepeated ? jspb.Message.toObjectList(h, g.toObjectFn, e) : g.toObjectFn(e, h) : h;
      }
    }
  };

  jspb.Message.serializeBinaryExtensions = function (a, b, c, d) {
    for (var e in c) {
      var f = c[e],
          g = f.fieldInfo;
      if (!f.binaryWriterFn) throw Error("Message extension present that was generated without binary serialization support");
      var h = d.call(a, g);
      if (null != h) if (g.isMessageType()) {
        if (f.binaryMessageSerializeFn) f.binaryWriterFn.call(b, g.fieldIndex, h, f.binaryMessageSerializeFn);else throw Error("Message extension present holding submessage without binary support enabled, and message is being serialized to binary format");
      } else f.binaryWriterFn.call(b, g.fieldIndex, h);
    }
  };

  jspb.Message.readBinaryExtension = function (a, b, c, d, e) {
    var f = c[b.getFieldNumber()];

    if (f) {
      c = f.fieldInfo;
      if (!f.binaryReaderFn) throw Error("Deserializing extension whose generated code does not support binary format");

      if (c.isMessageType()) {
        var g = new c.ctor();
        f.binaryReaderFn.call(b, g, f.binaryMessageDeserializeFn);
      } else g = f.binaryReaderFn.call(b);

      c.isRepeated && !f.isPacked ? (b = d.call(a, c)) ? b.push(g) : e.call(a, c, [g]) : e.call(a, c, g);
    } else b.skipField();
  };

  jspb.Message.getField = function (a, b) {
    if (b < a.pivot_) {
      b = jspb.Message.getIndex_(a, b);
      var c = a.array[b];
      return c === jspb.Message.EMPTY_LIST_SENTINEL_ ? a.array[b] = [] : c;
    }

    if (a.extensionObject_) return c = a.extensionObject_[b], c === jspb.Message.EMPTY_LIST_SENTINEL_ ? a.extensionObject_[b] = [] : c;
  };

  jspb.Message.getRepeatedField = function (a, b) {
    return jspb.Message.getField(a, b);
  };

  jspb.Message.getOptionalFloatingPointField = function (a, b) {
    a = jspb.Message.getField(a, b);
    return null == a ? a : +a;
  };

  jspb.Message.getBooleanField = function (a, b) {
    a = jspb.Message.getField(a, b);
    return null == a ? a : !!a;
  };

  jspb.Message.getRepeatedFloatingPointField = function (a, b) {
    var c = jspb.Message.getRepeatedField(a, b);
    a.convertedPrimitiveFields_ || (a.convertedPrimitiveFields_ = {});

    if (!a.convertedPrimitiveFields_[b]) {
      for (var d = 0; d < c.length; d++) {
        c[d] = +c[d];
      }

      a.convertedPrimitiveFields_[b] = !0;
    }

    return c;
  };

  jspb.Message.getRepeatedBooleanField = function (a, b) {
    var c = jspb.Message.getRepeatedField(a, b);
    a.convertedPrimitiveFields_ || (a.convertedPrimitiveFields_ = {});

    if (!a.convertedPrimitiveFields_[b]) {
      for (var d = 0; d < c.length; d++) {
        c[d] = !!c[d];
      }

      a.convertedPrimitiveFields_[b] = !0;
    }

    return c;
  };

  jspb.Message.bytesAsB64 = function (a) {
    if (null == a || goog.isString(a)) return a;
    if (jspb.Message.SUPPORTS_UINT8ARRAY_ && a instanceof Uint8Array) return goog.crypt.base64.encodeByteArray(a);
    goog.asserts.fail("Cannot coerce to b64 string: " + goog.typeOf(a));
    return null;
  };

  jspb.Message.bytesAsU8 = function (a) {
    if (null == a || a instanceof Uint8Array) return a;
    if (goog.isString(a)) return goog.crypt.base64.decodeStringToUint8Array(a);
    goog.asserts.fail("Cannot coerce to Uint8Array: " + goog.typeOf(a));
    return null;
  };

  jspb.Message.bytesListAsB64 = function (a) {
    jspb.Message.assertConsistentTypes_(a);
    return !a.length || goog.isString(a[0]) ? a : goog.array.map(a, jspb.Message.bytesAsB64);
  };

  jspb.Message.bytesListAsU8 = function (a) {
    jspb.Message.assertConsistentTypes_(a);
    return !a.length || a[0] instanceof Uint8Array ? a : goog.array.map(a, jspb.Message.bytesAsU8);
  };

  jspb.Message.assertConsistentTypes_ = function (a) {
    if (goog.DEBUG && a && 1 < a.length) {
      var b = goog.typeOf(a[0]);
      goog.array.forEach(a, function (a) {
        goog.typeOf(a) != b && goog.asserts.fail("Inconsistent type in JSPB repeated field array. Got " + goog.typeOf(a) + " expected " + b);
      });
    }
  };

  jspb.Message.getFieldWithDefault = function (a, b, c) {
    a = jspb.Message.getField(a, b);
    return null == a ? c : a;
  };

  jspb.Message.getBooleanFieldWithDefault = function (a, b, c) {
    a = jspb.Message.getBooleanField(a, b);
    return null == a ? c : a;
  };

  jspb.Message.getFloatingPointFieldWithDefault = function (a, b, c) {
    a = jspb.Message.getOptionalFloatingPointField(a, b);
    return null == a ? c : a;
  };

  jspb.Message.getFieldProto3 = jspb.Message.getFieldWithDefault;

  jspb.Message.getMapField = function (a, b, c, d) {
    a.wrappers_ || (a.wrappers_ = {});
    if (b in a.wrappers_) return a.wrappers_[b];
    if (!c) return c = jspb.Message.getField(a, b), c || (c = [], jspb.Message.setField(a, b, c)), a.wrappers_[b] = new jspb.Map(c, d);
  };

  jspb.Message.setField = function (a, b, c) {
    b < a.pivot_ ? a.array[jspb.Message.getIndex_(a, b)] = c : (jspb.Message.maybeInitEmptyExtensionObject_(a), a.extensionObject_[b] = c);
  };

  jspb.Message.setProto3IntField = function (a, b, c) {
    jspb.Message.setFieldIgnoringDefault_(a, b, c, 0);
  };

  jspb.Message.setProto3FloatField = function (a, b, c) {
    jspb.Message.setFieldIgnoringDefault_(a, b, c, 0);
  };

  jspb.Message.setProto3BooleanField = function (a, b, c) {
    jspb.Message.setFieldIgnoringDefault_(a, b, c, !1);
  };

  jspb.Message.setProto3StringField = function (a, b, c) {
    jspb.Message.setFieldIgnoringDefault_(a, b, c, "");
  };

  jspb.Message.setProto3BytesField = function (a, b, c) {
    jspb.Message.setFieldIgnoringDefault_(a, b, c, "");
  };

  jspb.Message.setProto3EnumField = function (a, b, c) {
    jspb.Message.setFieldIgnoringDefault_(a, b, c, 0);
  };

  jspb.Message.setProto3StringIntField = function (a, b, c) {
    jspb.Message.setFieldIgnoringDefault_(a, b, c, "0");
  };

  jspb.Message.setFieldIgnoringDefault_ = function (a, b, c, d) {
    c !== d ? jspb.Message.setField(a, b, c) : a.array[jspb.Message.getIndex_(a, b)] = null;
  };

  jspb.Message.addToRepeatedField = function (a, b, c, d) {
    a = jspb.Message.getRepeatedField(a, b);
    void 0 != d ? a.splice(d, 0, c) : a.push(c);
  };

  jspb.Message.setOneofField = function (a, b, c, d) {
    (c = jspb.Message.computeOneofCase(a, c)) && c !== b && void 0 !== d && (a.wrappers_ && c in a.wrappers_ && (a.wrappers_[c] = void 0), jspb.Message.setField(a, c, void 0));
    jspb.Message.setField(a, b, d);
  };

  jspb.Message.computeOneofCase = function (a, b) {
    for (var c, d, e = 0; e < b.length; e++) {
      var f = b[e],
          g = jspb.Message.getField(a, f);
      null != g && (c = f, d = g, jspb.Message.setField(a, f, void 0));
    }

    return c ? (jspb.Message.setField(a, c, d), c) : 0;
  };

  jspb.Message.getWrapperField = function (a, b, c, d) {
    a.wrappers_ || (a.wrappers_ = {});

    if (!a.wrappers_[c]) {
      var e = jspb.Message.getField(a, c);
      if (d || e) a.wrappers_[c] = new b(e);
    }

    return a.wrappers_[c];
  };

  jspb.Message.getRepeatedWrapperField = function (a, b, c) {
    jspb.Message.wrapRepeatedField_(a, b, c);
    b = a.wrappers_[c];
    b == jspb.Message.EMPTY_LIST_SENTINEL_ && (b = a.wrappers_[c] = []);
    return b;
  };

  jspb.Message.wrapRepeatedField_ = function (a, b, c) {
    a.wrappers_ || (a.wrappers_ = {});

    if (!a.wrappers_[c]) {
      for (var d = jspb.Message.getRepeatedField(a, c), e = [], f = 0; f < d.length; f++) {
        e[f] = new b(d[f]);
      }

      a.wrappers_[c] = e;
    }
  };

  jspb.Message.setWrapperField = function (a, b, c) {
    a.wrappers_ || (a.wrappers_ = {});
    var d = c ? c.toArray() : c;
    a.wrappers_[b] = c;
    jspb.Message.setField(a, b, d);
  };

  jspb.Message.setOneofWrapperField = function (a, b, c, d) {
    a.wrappers_ || (a.wrappers_ = {});
    var e = d ? d.toArray() : d;
    a.wrappers_[b] = d;
    jspb.Message.setOneofField(a, b, c, e);
  };

  jspb.Message.setRepeatedWrapperField = function (a, b, c) {
    a.wrappers_ || (a.wrappers_ = {});
    c = c || [];

    for (var d = [], e = 0; e < c.length; e++) {
      d[e] = c[e].toArray();
    }

    a.wrappers_[b] = c;
    jspb.Message.setField(a, b, d);
  };

  jspb.Message.addToRepeatedWrapperField = function (a, b, c, d, e) {
    jspb.Message.wrapRepeatedField_(a, d, b);
    var f = a.wrappers_[b];
    f || (f = a.wrappers_[b] = []);
    c = c ? c : new d();
    a = jspb.Message.getRepeatedField(a, b);
    void 0 != e ? (f.splice(e, 0, c), a.splice(e, 0, c.toArray())) : (f.push(c), a.push(c.toArray()));
    return c;
  };

  jspb.Message.toMap = function (a, b, c, d) {
    for (var e = {}, f = 0; f < a.length; f++) {
      e[b.call(a[f])] = c ? c.call(a[f], d, a[f]) : a[f];
    }

    return e;
  };

  jspb.Message.prototype.syncMapFields_ = function () {
    if (this.wrappers_) for (var a in this.wrappers_) {
      var b = this.wrappers_[a];
      if (goog.isArray(b)) for (var c = 0; c < b.length; c++) {
        b[c] && b[c].toArray();
      } else b && b.toArray();
    }
  };

  jspb.Message.prototype.toArray = function () {
    this.syncMapFields_();
    return this.array;
  };

  jspb.Message.GENERATE_TO_STRING && (jspb.Message.prototype.toString = function () {
    this.syncMapFields_();
    return this.array.toString();
  });

  jspb.Message.prototype.getExtension = function (a) {
    if (this.extensionObject_) {
      this.wrappers_ || (this.wrappers_ = {});
      var b = a.fieldIndex;

      if (a.isRepeated) {
        if (a.isMessageType()) return this.wrappers_[b] || (this.wrappers_[b] = goog.array.map(this.extensionObject_[b] || [], function (b) {
          return new a.ctor(b);
        })), this.wrappers_[b];
      } else if (a.isMessageType()) return !this.wrappers_[b] && this.extensionObject_[b] && (this.wrappers_[b] = new a.ctor(this.extensionObject_[b])), this.wrappers_[b];

      return this.extensionObject_[b];
    }
  };

  jspb.Message.prototype.setExtension = function (a, b) {
    this.wrappers_ || (this.wrappers_ = {});
    jspb.Message.maybeInitEmptyExtensionObject_(this);
    var c = a.fieldIndex;
    a.isRepeated ? (b = b || [], a.isMessageType() ? (this.wrappers_[c] = b, this.extensionObject_[c] = goog.array.map(b, function (a) {
      return a.toArray();
    })) : this.extensionObject_[c] = b) : a.isMessageType() ? (this.wrappers_[c] = b, this.extensionObject_[c] = b ? b.toArray() : b) : this.extensionObject_[c] = b;
    return this;
  };

  jspb.Message.difference = function (a, b) {
    if (!(a instanceof b.constructor)) throw Error("Messages have different types.");
    var c = a.toArray();
    b = b.toArray();
    var d = [],
        e = 0,
        f = c.length > b.length ? c.length : b.length;
    a.getJsPbMessageId() && (d[0] = a.getJsPbMessageId(), e = 1);

    for (; e < f; e++) {
      jspb.Message.compareFields(c[e], b[e]) || (d[e] = b[e]);
    }

    return new a.constructor(d);
  };

  jspb.Message.equals = function (a, b) {
    return a == b || !(!a || !b) && a instanceof b.constructor && jspb.Message.compareFields(a.toArray(), b.toArray());
  };

  jspb.Message.compareExtensions = function (a, b) {
    a = a || {};
    b = b || {};
    var c = {},
        d;

    for (d in a) {
      c[d] = 0;
    }

    for (d in b) {
      c[d] = 0;
    }

    for (d in c) {
      if (!jspb.Message.compareFields(a[d], b[d])) return !1;
    }

    return !0;
  };

  jspb.Message.compareFields = function (a, b) {
    if (a == b) return !0;
    if (!goog.isObject(a) || !goog.isObject(b)) return goog.isNumber(a) && isNaN(a) || goog.isNumber(b) && isNaN(b) ? String(a) == String(b) : !1;
    if (a.constructor != b.constructor) return !1;

    if (jspb.Message.SUPPORTS_UINT8ARRAY_ && a.constructor === Uint8Array) {
      if (a.length != b.length) return !1;

      for (var c = 0; c < a.length; c++) {
        if (a[c] != b[c]) return !1;
      }

      return !0;
    }

    if (a.constructor === Array) {
      var d = void 0,
          e = void 0,
          f = Math.max(a.length, b.length);

      for (c = 0; c < f; c++) {
        var g = a[c],
            h = b[c];
        g && g.constructor == Object && (goog.asserts.assert(void 0 === d), goog.asserts.assert(c === a.length - 1), d = g, g = void 0);
        h && h.constructor == Object && (goog.asserts.assert(void 0 === e), goog.asserts.assert(c === b.length - 1), e = h, h = void 0);
        if (!jspb.Message.compareFields(g, h)) return !1;
      }

      return d || e ? (d = d || {}, e = e || {}, jspb.Message.compareExtensions(d, e)) : !0;
    }

    if (a.constructor === Object) return jspb.Message.compareExtensions(a, b);
    throw Error("Invalid type in JSPB array");
  };

  jspb.Message.prototype.cloneMessage = function () {
    return jspb.Message.cloneMessage(this);
  };

  jspb.Message.prototype.clone = function () {
    return jspb.Message.cloneMessage(this);
  };

  jspb.Message.clone = function (a) {
    return jspb.Message.cloneMessage(a);
  };

  jspb.Message.cloneMessage = function (a) {
    return new a.constructor(jspb.Message.clone_(a.toArray()));
  };

  jspb.Message.copyInto = function (a, b) {
    goog.asserts.assertInstanceof(a, jspb.Message);
    goog.asserts.assertInstanceof(b, jspb.Message);
    goog.asserts.assert(a.constructor == b.constructor, "Copy source and target message should have the same type.");
    a = jspb.Message.clone(a);

    for (var c = b.toArray(), d = a.toArray(), e = c.length = 0; e < d.length; e++) {
      c[e] = d[e];
    }

    b.wrappers_ = a.wrappers_;
    b.extensionObject_ = a.extensionObject_;
  };

  jspb.Message.clone_ = function (a) {
    if (goog.isArray(a)) {
      for (var b = Array(a.length), c = 0; c < a.length; c++) {
        var d = a[c];
        null != d && (b[c] = "object" == _typeof(d) ? jspb.Message.clone_(goog.asserts.assert(d)) : d);
      }

      return b;
    }

    if (jspb.Message.SUPPORTS_UINT8ARRAY_ && a instanceof Uint8Array) return new Uint8Array(a);
    b = {};

    for (c in a) {
      d = a[c], null != d && (b[c] = "object" == _typeof(d) ? jspb.Message.clone_(goog.asserts.assert(d)) : d);
    }

    return b;
  };

  jspb.Message.registerMessageType = function (a, b) {
    jspb.Message.registry_[a] = b;
    b.messageId = a;
  };

  jspb.Message.registry_ = {};
  jspb.Message.messageSetExtensions = {};
  jspb.Message.messageSetExtensionsBinary = {};
  jspb.arith = {};

  jspb.arith.UInt64 = function (a, b) {
    this.lo = a;
    this.hi = b;
  };

  jspb.arith.UInt64.prototype.cmp = function (a) {
    return this.hi < a.hi || this.hi == a.hi && this.lo < a.lo ? -1 : this.hi == a.hi && this.lo == a.lo ? 0 : 1;
  };

  jspb.arith.UInt64.prototype.rightShift = function () {
    return new jspb.arith.UInt64((this.lo >>> 1 | (this.hi & 1) << 31) >>> 0, this.hi >>> 1 >>> 0);
  };

  jspb.arith.UInt64.prototype.leftShift = function () {
    return new jspb.arith.UInt64(this.lo << 1 >>> 0, (this.hi << 1 | this.lo >>> 31) >>> 0);
  };

  jspb.arith.UInt64.prototype.msb = function () {
    return !!(this.hi & 2147483648);
  };

  jspb.arith.UInt64.prototype.lsb = function () {
    return !!(this.lo & 1);
  };

  jspb.arith.UInt64.prototype.zero = function () {
    return 0 == this.lo && 0 == this.hi;
  };

  jspb.arith.UInt64.prototype.add = function (a) {
    return new jspb.arith.UInt64((this.lo + a.lo & 4294967295) >>> 0 >>> 0, ((this.hi + a.hi & 4294967295) >>> 0) + (4294967296 <= this.lo + a.lo ? 1 : 0) >>> 0);
  };

  jspb.arith.UInt64.prototype.sub = function (a) {
    return new jspb.arith.UInt64((this.lo - a.lo & 4294967295) >>> 0 >>> 0, ((this.hi - a.hi & 4294967295) >>> 0) - (0 > this.lo - a.lo ? 1 : 0) >>> 0);
  };

  jspb.arith.UInt64.mul32x32 = function (a, b) {
    var c = a & 65535;
    a >>>= 16;
    var d = b & 65535,
        e = b >>> 16;
    b = c * d + 65536 * (c * e & 65535) + 65536 * (a * d & 65535);

    for (c = a * e + (c * e >>> 16) + (a * d >>> 16); 4294967296 <= b;) {
      b -= 4294967296, c += 1;
    }

    return new jspb.arith.UInt64(b >>> 0, c >>> 0);
  };

  jspb.arith.UInt64.prototype.mul = function (a) {
    var b = jspb.arith.UInt64.mul32x32(this.lo, a);
    a = jspb.arith.UInt64.mul32x32(this.hi, a);
    a.hi = a.lo;
    a.lo = 0;
    return b.add(a);
  };

  jspb.arith.UInt64.prototype.div = function (a) {
    if (0 == a) return [];
    var b = new jspb.arith.UInt64(0, 0),
        c = new jspb.arith.UInt64(this.lo, this.hi);
    a = new jspb.arith.UInt64(a, 0);

    for (var d = new jspb.arith.UInt64(1, 0); !a.msb();) {
      a = a.leftShift(), d = d.leftShift();
    }

    for (; !d.zero();) {
      0 >= a.cmp(c) && (b = b.add(d), c = c.sub(a)), a = a.rightShift(), d = d.rightShift();
    }

    return [b, c];
  };

  jspb.arith.UInt64.prototype.toString = function () {
    for (var a = "", b = this; !b.zero();) {
      b = b.div(10);
      var c = b[0];
      a = b[1].lo + a;
      b = c;
    }

    "" == a && (a = "0");
    return a;
  };

  jspb.arith.UInt64.fromString = function (a) {
    for (var b = new jspb.arith.UInt64(0, 0), c = new jspb.arith.UInt64(0, 0), d = 0; d < a.length; d++) {
      if ("0" > a[d] || "9" < a[d]) return null;
      var e = parseInt(a[d], 10);
      c.lo = e;
      b = b.mul(10).add(c);
    }

    return b;
  };

  jspb.arith.UInt64.prototype.clone = function () {
    return new jspb.arith.UInt64(this.lo, this.hi);
  };

  jspb.arith.Int64 = function (a, b) {
    this.lo = a;
    this.hi = b;
  };

  jspb.arith.Int64.prototype.add = function (a) {
    return new jspb.arith.Int64((this.lo + a.lo & 4294967295) >>> 0 >>> 0, ((this.hi + a.hi & 4294967295) >>> 0) + (4294967296 <= this.lo + a.lo ? 1 : 0) >>> 0);
  };

  jspb.arith.Int64.prototype.sub = function (a) {
    return new jspb.arith.Int64((this.lo - a.lo & 4294967295) >>> 0 >>> 0, ((this.hi - a.hi & 4294967295) >>> 0) - (0 > this.lo - a.lo ? 1 : 0) >>> 0);
  };

  jspb.arith.Int64.prototype.clone = function () {
    return new jspb.arith.Int64(this.lo, this.hi);
  };

  jspb.arith.Int64.prototype.toString = function () {
    var a = 0 != (this.hi & 2147483648),
        b = new jspb.arith.UInt64(this.lo, this.hi);
    a && (b = new jspb.arith.UInt64(0, 0).sub(b));
    return (a ? "-" : "") + b.toString();
  };

  jspb.arith.Int64.fromString = function (a) {
    var b = 0 < a.length && "-" == a[0];
    b && (a = a.substring(1));
    a = jspb.arith.UInt64.fromString(a);
    if (null === a) return null;
    b && (a = new jspb.arith.UInt64(0, 0).sub(a));
    return new jspb.arith.Int64(a.lo, a.hi);
  };

  jspb.BinaryEncoder = function () {
    this.buffer_ = [];
  };

  jspb.BinaryEncoder.prototype.length = function () {
    return this.buffer_.length;
  };

  jspb.BinaryEncoder.prototype.end = function () {
    var a = this.buffer_;
    this.buffer_ = [];
    return a;
  };

  jspb.BinaryEncoder.prototype.writeSplitVarint64 = function (a, b) {
    goog.asserts.assert(a == Math.floor(a));
    goog.asserts.assert(b == Math.floor(b));
    goog.asserts.assert(0 <= a && a < jspb.BinaryConstants.TWO_TO_32);

    for (goog.asserts.assert(0 <= b && b < jspb.BinaryConstants.TWO_TO_32); 0 < b || 127 < a;) {
      this.buffer_.push(a & 127 | 128), a = (a >>> 7 | b << 25) >>> 0, b >>>= 7;
    }

    this.buffer_.push(a);
  };

  jspb.BinaryEncoder.prototype.writeSplitFixed64 = function (a, b) {
    goog.asserts.assert(a == Math.floor(a));
    goog.asserts.assert(b == Math.floor(b));
    goog.asserts.assert(0 <= a && a < jspb.BinaryConstants.TWO_TO_32);
    goog.asserts.assert(0 <= b && b < jspb.BinaryConstants.TWO_TO_32);
    this.writeUint32(a);
    this.writeUint32(b);
  };

  jspb.BinaryEncoder.prototype.writeUnsignedVarint32 = function (a) {
    goog.asserts.assert(a == Math.floor(a));

    for (goog.asserts.assert(0 <= a && a < jspb.BinaryConstants.TWO_TO_32); 127 < a;) {
      this.buffer_.push(a & 127 | 128), a >>>= 7;
    }

    this.buffer_.push(a);
  };

  jspb.BinaryEncoder.prototype.writeSignedVarint32 = function (a) {
    goog.asserts.assert(a == Math.floor(a));
    goog.asserts.assert(a >= -jspb.BinaryConstants.TWO_TO_31 && a < jspb.BinaryConstants.TWO_TO_31);
    if (0 <= a) this.writeUnsignedVarint32(a);else {
      for (var b = 0; 9 > b; b++) {
        this.buffer_.push(a & 127 | 128), a >>= 7;
      }

      this.buffer_.push(1);
    }
  };

  jspb.BinaryEncoder.prototype.writeUnsignedVarint64 = function (a) {
    goog.asserts.assert(a == Math.floor(a));
    goog.asserts.assert(0 <= a && a < jspb.BinaryConstants.TWO_TO_64);
    jspb.utils.splitInt64(a);
    this.writeSplitVarint64(jspb.utils.split64Low, jspb.utils.split64High);
  };

  jspb.BinaryEncoder.prototype.writeSignedVarint64 = function (a) {
    goog.asserts.assert(a == Math.floor(a));
    goog.asserts.assert(a >= -jspb.BinaryConstants.TWO_TO_63 && a < jspb.BinaryConstants.TWO_TO_63);
    jspb.utils.splitInt64(a);
    this.writeSplitVarint64(jspb.utils.split64Low, jspb.utils.split64High);
  };

  jspb.BinaryEncoder.prototype.writeZigzagVarint32 = function (a) {
    goog.asserts.assert(a == Math.floor(a));
    goog.asserts.assert(a >= -jspb.BinaryConstants.TWO_TO_31 && a < jspb.BinaryConstants.TWO_TO_31);
    this.writeUnsignedVarint32((a << 1 ^ a >> 31) >>> 0);
  };

  jspb.BinaryEncoder.prototype.writeZigzagVarint64 = function (a) {
    goog.asserts.assert(a == Math.floor(a));
    goog.asserts.assert(a >= -jspb.BinaryConstants.TWO_TO_63 && a < jspb.BinaryConstants.TWO_TO_63);
    jspb.utils.splitZigzag64(a);
    this.writeSplitVarint64(jspb.utils.split64Low, jspb.utils.split64High);
  };

  jspb.BinaryEncoder.prototype.writeZigzagVarint64String = function (a) {
    this.writeZigzagVarint64(parseInt(a, 10));
  };

  jspb.BinaryEncoder.prototype.writeUint8 = function (a) {
    goog.asserts.assert(a == Math.floor(a));
    goog.asserts.assert(0 <= a && 256 > a);
    this.buffer_.push(a >>> 0 & 255);
  };

  jspb.BinaryEncoder.prototype.writeUint16 = function (a) {
    goog.asserts.assert(a == Math.floor(a));
    goog.asserts.assert(0 <= a && 65536 > a);
    this.buffer_.push(a >>> 0 & 255);
    this.buffer_.push(a >>> 8 & 255);
  };

  jspb.BinaryEncoder.prototype.writeUint32 = function (a) {
    goog.asserts.assert(a == Math.floor(a));
    goog.asserts.assert(0 <= a && a < jspb.BinaryConstants.TWO_TO_32);
    this.buffer_.push(a >>> 0 & 255);
    this.buffer_.push(a >>> 8 & 255);
    this.buffer_.push(a >>> 16 & 255);
    this.buffer_.push(a >>> 24 & 255);
  };

  jspb.BinaryEncoder.prototype.writeUint64 = function (a) {
    goog.asserts.assert(a == Math.floor(a));
    goog.asserts.assert(0 <= a && a < jspb.BinaryConstants.TWO_TO_64);
    jspb.utils.splitUint64(a);
    this.writeUint32(jspb.utils.split64Low);
    this.writeUint32(jspb.utils.split64High);
  };

  jspb.BinaryEncoder.prototype.writeInt8 = function (a) {
    goog.asserts.assert(a == Math.floor(a));
    goog.asserts.assert(-128 <= a && 128 > a);
    this.buffer_.push(a >>> 0 & 255);
  };

  jspb.BinaryEncoder.prototype.writeInt16 = function (a) {
    goog.asserts.assert(a == Math.floor(a));
    goog.asserts.assert(-32768 <= a && 32768 > a);
    this.buffer_.push(a >>> 0 & 255);
    this.buffer_.push(a >>> 8 & 255);
  };

  jspb.BinaryEncoder.prototype.writeInt32 = function (a) {
    goog.asserts.assert(a == Math.floor(a));
    goog.asserts.assert(a >= -jspb.BinaryConstants.TWO_TO_31 && a < jspb.BinaryConstants.TWO_TO_31);
    this.buffer_.push(a >>> 0 & 255);
    this.buffer_.push(a >>> 8 & 255);
    this.buffer_.push(a >>> 16 & 255);
    this.buffer_.push(a >>> 24 & 255);
  };

  jspb.BinaryEncoder.prototype.writeInt64 = function (a) {
    goog.asserts.assert(a == Math.floor(a));
    goog.asserts.assert(a >= -jspb.BinaryConstants.TWO_TO_63 && a < jspb.BinaryConstants.TWO_TO_63);
    jspb.utils.splitInt64(a);
    this.writeSplitFixed64(jspb.utils.split64Low, jspb.utils.split64High);
  };

  jspb.BinaryEncoder.prototype.writeInt64String = function (a) {
    goog.asserts.assert(a == Math.floor(a));
    goog.asserts.assert(+a >= -jspb.BinaryConstants.TWO_TO_63 && +a < jspb.BinaryConstants.TWO_TO_63);
    jspb.utils.splitHash64(jspb.utils.decimalStringToHash64(a));
    this.writeSplitFixed64(jspb.utils.split64Low, jspb.utils.split64High);
  };

  jspb.BinaryEncoder.prototype.writeFloat = function (a) {
    goog.asserts.assert(a >= -jspb.BinaryConstants.FLOAT32_MAX && a <= jspb.BinaryConstants.FLOAT32_MAX);
    jspb.utils.splitFloat32(a);
    this.writeUint32(jspb.utils.split64Low);
  };

  jspb.BinaryEncoder.prototype.writeDouble = function (a) {
    goog.asserts.assert(a >= -jspb.BinaryConstants.FLOAT64_MAX && a <= jspb.BinaryConstants.FLOAT64_MAX);
    jspb.utils.splitFloat64(a);
    this.writeUint32(jspb.utils.split64Low);
    this.writeUint32(jspb.utils.split64High);
  };

  jspb.BinaryEncoder.prototype.writeBool = function (a) {
    goog.asserts.assert(goog.isBoolean(a) || goog.isNumber(a));
    this.buffer_.push(a ? 1 : 0);
  };

  jspb.BinaryEncoder.prototype.writeEnum = function (a) {
    goog.asserts.assert(a == Math.floor(a));
    goog.asserts.assert(a >= -jspb.BinaryConstants.TWO_TO_31 && a < jspb.BinaryConstants.TWO_TO_31);
    this.writeSignedVarint32(a);
  };

  jspb.BinaryEncoder.prototype.writeBytes = function (a) {
    this.buffer_.push.apply(this.buffer_, a);
  };

  jspb.BinaryEncoder.prototype.writeVarintHash64 = function (a) {
    jspb.utils.splitHash64(a);
    this.writeSplitVarint64(jspb.utils.split64Low, jspb.utils.split64High);
  };

  jspb.BinaryEncoder.prototype.writeFixedHash64 = function (a) {
    jspb.utils.splitHash64(a);
    this.writeUint32(jspb.utils.split64Low);
    this.writeUint32(jspb.utils.split64High);
  };

  jspb.BinaryEncoder.prototype.writeString = function (a) {
    for (var b = this.buffer_.length, c = 0; c < a.length; c++) {
      var d = a.charCodeAt(c);
      if (128 > d) this.buffer_.push(d);else if (2048 > d) this.buffer_.push(d >> 6 | 192), this.buffer_.push(d & 63 | 128);else if (65536 > d) if (55296 <= d && 56319 >= d && c + 1 < a.length) {
        var e = a.charCodeAt(c + 1);
        56320 <= e && 57343 >= e && (d = 1024 * (d - 55296) + e - 56320 + 65536, this.buffer_.push(d >> 18 | 240), this.buffer_.push(d >> 12 & 63 | 128), this.buffer_.push(d >> 6 & 63 | 128), this.buffer_.push(d & 63 | 128), c++);
      } else this.buffer_.push(d >> 12 | 224), this.buffer_.push(d >> 6 & 63 | 128), this.buffer_.push(d & 63 | 128);
    }

    return this.buffer_.length - b;
  };

  jspb.BinaryWriter = function () {
    this.blocks_ = [];
    this.totalLength_ = 0;
    this.encoder_ = new jspb.BinaryEncoder();
    this.bookmarks_ = [];
  };

  jspb.BinaryWriter.prototype.appendUint8Array_ = function (a) {
    var b = this.encoder_.end();
    this.blocks_.push(b);
    this.blocks_.push(a);
    this.totalLength_ += b.length + a.length;
  };

  jspb.BinaryWriter.prototype.beginDelimited_ = function (a) {
    this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.DELIMITED);
    a = this.encoder_.end();
    this.blocks_.push(a);
    this.totalLength_ += a.length;
    a.push(this.totalLength_);
    return a;
  };

  jspb.BinaryWriter.prototype.endDelimited_ = function (a) {
    var b = a.pop();
    b = this.totalLength_ + this.encoder_.length() - b;

    for (goog.asserts.assert(0 <= b); 127 < b;) {
      a.push(b & 127 | 128), b >>>= 7, this.totalLength_++;
    }

    a.push(b);
    this.totalLength_++;
  };

  jspb.BinaryWriter.prototype.writeSerializedMessage = function (a, b, c) {
    this.appendUint8Array_(a.subarray(b, c));
  };

  jspb.BinaryWriter.prototype.maybeWriteSerializedMessage = function (a, b, c) {
    null != a && null != b && null != c && this.writeSerializedMessage(a, b, c);
  };

  jspb.BinaryWriter.prototype.reset = function () {
    this.blocks_ = [];
    this.encoder_.end();
    this.totalLength_ = 0;
    this.bookmarks_ = [];
  };

  jspb.BinaryWriter.prototype.getResultBuffer = function () {
    goog.asserts.assert(0 == this.bookmarks_.length);

    for (var a = new Uint8Array(this.totalLength_ + this.encoder_.length()), b = this.blocks_, c = b.length, d = 0, e = 0; e < c; e++) {
      var f = b[e];
      a.set(f, d);
      d += f.length;
    }

    b = this.encoder_.end();
    a.set(b, d);
    d += b.length;
    goog.asserts.assert(d == a.length);
    this.blocks_ = [a];
    return a;
  };

  jspb.BinaryWriter.prototype.getResultBase64String = function (a) {
    return goog.crypt.base64.encodeByteArray(this.getResultBuffer(), a);
  };

  jspb.BinaryWriter.prototype.beginSubMessage = function (a) {
    this.bookmarks_.push(this.beginDelimited_(a));
  };

  jspb.BinaryWriter.prototype.endSubMessage = function () {
    goog.asserts.assert(0 <= this.bookmarks_.length);
    this.endDelimited_(this.bookmarks_.pop());
  };

  jspb.BinaryWriter.prototype.writeFieldHeader_ = function (a, b) {
    goog.asserts.assert(1 <= a && a == Math.floor(a));
    this.encoder_.writeUnsignedVarint32(8 * a + b);
  };

  jspb.BinaryWriter.prototype.writeAny = function (a, b, c) {
    var d = jspb.BinaryConstants.FieldType;

    switch (a) {
      case d.DOUBLE:
        this.writeDouble(b, c);
        break;

      case d.FLOAT:
        this.writeFloat(b, c);
        break;

      case d.INT64:
        this.writeInt64(b, c);
        break;

      case d.UINT64:
        this.writeUint64(b, c);
        break;

      case d.INT32:
        this.writeInt32(b, c);
        break;

      case d.FIXED64:
        this.writeFixed64(b, c);
        break;

      case d.FIXED32:
        this.writeFixed32(b, c);
        break;

      case d.BOOL:
        this.writeBool(b, c);
        break;

      case d.STRING:
        this.writeString(b, c);
        break;

      case d.GROUP:
        goog.asserts.fail("Group field type not supported in writeAny()");
        break;

      case d.MESSAGE:
        goog.asserts.fail("Message field type not supported in writeAny()");
        break;

      case d.BYTES:
        this.writeBytes(b, c);
        break;

      case d.UINT32:
        this.writeUint32(b, c);
        break;

      case d.ENUM:
        this.writeEnum(b, c);
        break;

      case d.SFIXED32:
        this.writeSfixed32(b, c);
        break;

      case d.SFIXED64:
        this.writeSfixed64(b, c);
        break;

      case d.SINT32:
        this.writeSint32(b, c);
        break;

      case d.SINT64:
        this.writeSint64(b, c);
        break;

      case d.FHASH64:
        this.writeFixedHash64(b, c);
        break;

      case d.VHASH64:
        this.writeVarintHash64(b, c);
        break;

      default:
        goog.asserts.fail("Invalid field type in writeAny()");
    }
  };

  jspb.BinaryWriter.prototype.writeUnsignedVarint32_ = function (a, b) {
    null != b && (this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.VARINT), this.encoder_.writeUnsignedVarint32(b));
  };

  jspb.BinaryWriter.prototype.writeSignedVarint32_ = function (a, b) {
    null != b && (this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.VARINT), this.encoder_.writeSignedVarint32(b));
  };

  jspb.BinaryWriter.prototype.writeUnsignedVarint64_ = function (a, b) {
    null != b && (this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.VARINT), this.encoder_.writeUnsignedVarint64(b));
  };

  jspb.BinaryWriter.prototype.writeSignedVarint64_ = function (a, b) {
    null != b && (this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.VARINT), this.encoder_.writeSignedVarint64(b));
  };

  jspb.BinaryWriter.prototype.writeZigzagVarint32_ = function (a, b) {
    null != b && (this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.VARINT), this.encoder_.writeZigzagVarint32(b));
  };

  jspb.BinaryWriter.prototype.writeZigzagVarint64_ = function (a, b) {
    null != b && (this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.VARINT), this.encoder_.writeZigzagVarint64(b));
  };

  jspb.BinaryWriter.prototype.writeZigzagVarint64String_ = function (a, b) {
    null != b && (this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.VARINT), this.encoder_.writeZigzagVarint64String(b));
  };

  jspb.BinaryWriter.prototype.writeInt32 = function (a, b) {
    null != b && (goog.asserts.assert(b >= -jspb.BinaryConstants.TWO_TO_31 && b < jspb.BinaryConstants.TWO_TO_31), this.writeSignedVarint32_(a, b));
  };

  jspb.BinaryWriter.prototype.writeInt32String = function (a, b) {
    null != b && (b = parseInt(b, 10), goog.asserts.assert(b >= -jspb.BinaryConstants.TWO_TO_31 && b < jspb.BinaryConstants.TWO_TO_31), this.writeSignedVarint32_(a, b));
  };

  jspb.BinaryWriter.prototype.writeInt64 = function (a, b) {
    null != b && (goog.asserts.assert(b >= -jspb.BinaryConstants.TWO_TO_63 && b < jspb.BinaryConstants.TWO_TO_63), this.writeSignedVarint64_(a, b));
  };

  jspb.BinaryWriter.prototype.writeInt64String = function (a, b) {
    null != b && (b = jspb.arith.Int64.fromString(b), this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.VARINT), this.encoder_.writeSplitVarint64(b.lo, b.hi));
  };

  jspb.BinaryWriter.prototype.writeUint32 = function (a, b) {
    null != b && (goog.asserts.assert(0 <= b && b < jspb.BinaryConstants.TWO_TO_32), this.writeUnsignedVarint32_(a, b));
  };

  jspb.BinaryWriter.prototype.writeUint32String = function (a, b) {
    null != b && (b = parseInt(b, 10), goog.asserts.assert(0 <= b && b < jspb.BinaryConstants.TWO_TO_32), this.writeUnsignedVarint32_(a, b));
  };

  jspb.BinaryWriter.prototype.writeUint64 = function (a, b) {
    null != b && (goog.asserts.assert(0 <= b && b < jspb.BinaryConstants.TWO_TO_64), this.writeUnsignedVarint64_(a, b));
  };

  jspb.BinaryWriter.prototype.writeUint64String = function (a, b) {
    null != b && (b = jspb.arith.UInt64.fromString(b), this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.VARINT), this.encoder_.writeSplitVarint64(b.lo, b.hi));
  };

  jspb.BinaryWriter.prototype.writeSint32 = function (a, b) {
    null != b && (goog.asserts.assert(b >= -jspb.BinaryConstants.TWO_TO_31 && b < jspb.BinaryConstants.TWO_TO_31), this.writeZigzagVarint32_(a, b));
  };

  jspb.BinaryWriter.prototype.writeSint64 = function (a, b) {
    null != b && (goog.asserts.assert(b >= -jspb.BinaryConstants.TWO_TO_63 && b < jspb.BinaryConstants.TWO_TO_63), this.writeZigzagVarint64_(a, b));
  };

  jspb.BinaryWriter.prototype.writeSint64String = function (a, b) {
    null != b && (goog.asserts.assert(+b >= -jspb.BinaryConstants.TWO_TO_63 && +b < jspb.BinaryConstants.TWO_TO_63), this.writeZigzagVarint64String_(a, b));
  };

  jspb.BinaryWriter.prototype.writeFixed32 = function (a, b) {
    null != b && (goog.asserts.assert(0 <= b && b < jspb.BinaryConstants.TWO_TO_32), this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.FIXED32), this.encoder_.writeUint32(b));
  };

  jspb.BinaryWriter.prototype.writeFixed64 = function (a, b) {
    null != b && (goog.asserts.assert(0 <= b && b < jspb.BinaryConstants.TWO_TO_64), this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.FIXED64), this.encoder_.writeUint64(b));
  };

  jspb.BinaryWriter.prototype.writeFixed64String = function (a, b) {
    null != b && (b = jspb.arith.UInt64.fromString(b), this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.FIXED64), this.encoder_.writeSplitFixed64(b.lo, b.hi));
  };

  jspb.BinaryWriter.prototype.writeSfixed32 = function (a, b) {
    null != b && (goog.asserts.assert(b >= -jspb.BinaryConstants.TWO_TO_31 && b < jspb.BinaryConstants.TWO_TO_31), this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.FIXED32), this.encoder_.writeInt32(b));
  };

  jspb.BinaryWriter.prototype.writeSfixed64 = function (a, b) {
    null != b && (goog.asserts.assert(b >= -jspb.BinaryConstants.TWO_TO_63 && b < jspb.BinaryConstants.TWO_TO_63), this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.FIXED64), this.encoder_.writeInt64(b));
  };

  jspb.BinaryWriter.prototype.writeSfixed64String = function (a, b) {
    null != b && (b = jspb.arith.Int64.fromString(b), this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.FIXED64), this.encoder_.writeSplitFixed64(b.lo, b.hi));
  };

  jspb.BinaryWriter.prototype.writeFloat = function (a, b) {
    null != b && (this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.FIXED32), this.encoder_.writeFloat(b));
  };

  jspb.BinaryWriter.prototype.writeDouble = function (a, b) {
    null != b && (this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.FIXED64), this.encoder_.writeDouble(b));
  };

  jspb.BinaryWriter.prototype.writeBool = function (a, b) {
    null != b && (goog.asserts.assert(goog.isBoolean(b) || goog.isNumber(b)), this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.VARINT), this.encoder_.writeBool(b));
  };

  jspb.BinaryWriter.prototype.writeEnum = function (a, b) {
    null != b && (goog.asserts.assert(b >= -jspb.BinaryConstants.TWO_TO_31 && b < jspb.BinaryConstants.TWO_TO_31), this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.VARINT), this.encoder_.writeSignedVarint32(b));
  };

  jspb.BinaryWriter.prototype.writeString = function (a, b) {
    null != b && (a = this.beginDelimited_(a), this.encoder_.writeString(b), this.endDelimited_(a));
  };

  jspb.BinaryWriter.prototype.writeBytes = function (a, b) {
    null != b && (b = jspb.utils.byteSourceToUint8Array(b), this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.DELIMITED), this.encoder_.writeUnsignedVarint32(b.length), this.appendUint8Array_(b));
  };

  jspb.BinaryWriter.prototype.writeMessage = function (a, b, c) {
    null != b && (a = this.beginDelimited_(a), c(b, this), this.endDelimited_(a));
  };

  jspb.BinaryWriter.prototype.writeMessageSet = function (a, b, c) {
    null != b && (this.writeFieldHeader_(1, jspb.BinaryConstants.WireType.START_GROUP), this.writeFieldHeader_(2, jspb.BinaryConstants.WireType.VARINT), this.encoder_.writeSignedVarint32(a), a = this.beginDelimited_(3), c(b, this), this.endDelimited_(a), this.writeFieldHeader_(1, jspb.BinaryConstants.WireType.END_GROUP));
  };

  jspb.BinaryWriter.prototype.writeGroup = function (a, b, c) {
    null != b && (this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.START_GROUP), c(b, this), this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.END_GROUP));
  };

  jspb.BinaryWriter.prototype.writeFixedHash64 = function (a, b) {
    null != b && (goog.asserts.assert(8 == b.length), this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.FIXED64), this.encoder_.writeFixedHash64(b));
  };

  jspb.BinaryWriter.prototype.writeVarintHash64 = function (a, b) {
    null != b && (goog.asserts.assert(8 == b.length), this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.VARINT), this.encoder_.writeVarintHash64(b));
  };

  jspb.BinaryWriter.prototype.writeRepeatedInt32 = function (a, b) {
    if (null != b) for (var c = 0; c < b.length; c++) {
      this.writeSignedVarint32_(a, b[c]);
    }
  };

  jspb.BinaryWriter.prototype.writeRepeatedInt32String = function (a, b) {
    if (null != b) for (var c = 0; c < b.length; c++) {
      this.writeInt32String(a, b[c]);
    }
  };

  jspb.BinaryWriter.prototype.writeRepeatedInt64 = function (a, b) {
    if (null != b) for (var c = 0; c < b.length; c++) {
      this.writeSignedVarint64_(a, b[c]);
    }
  };

  jspb.BinaryWriter.prototype.writeRepeatedInt64String = function (a, b) {
    if (null != b) for (var c = 0; c < b.length; c++) {
      this.writeInt64String(a, b[c]);
    }
  };

  jspb.BinaryWriter.prototype.writeRepeatedUint32 = function (a, b) {
    if (null != b) for (var c = 0; c < b.length; c++) {
      this.writeUnsignedVarint32_(a, b[c]);
    }
  };

  jspb.BinaryWriter.prototype.writeRepeatedUint32String = function (a, b) {
    if (null != b) for (var c = 0; c < b.length; c++) {
      this.writeUint32String(a, b[c]);
    }
  };

  jspb.BinaryWriter.prototype.writeRepeatedUint64 = function (a, b) {
    if (null != b) for (var c = 0; c < b.length; c++) {
      this.writeUnsignedVarint64_(a, b[c]);
    }
  };

  jspb.BinaryWriter.prototype.writeRepeatedUint64String = function (a, b) {
    if (null != b) for (var c = 0; c < b.length; c++) {
      this.writeUint64String(a, b[c]);
    }
  };

  jspb.BinaryWriter.prototype.writeRepeatedSint32 = function (a, b) {
    if (null != b) for (var c = 0; c < b.length; c++) {
      this.writeZigzagVarint32_(a, b[c]);
    }
  };

  jspb.BinaryWriter.prototype.writeRepeatedSint64 = function (a, b) {
    if (null != b) for (var c = 0; c < b.length; c++) {
      this.writeZigzagVarint64_(a, b[c]);
    }
  };

  jspb.BinaryWriter.prototype.writeRepeatedSint64String = function (a, b) {
    if (null != b) for (var c = 0; c < b.length; c++) {
      this.writeZigzagVarint64String_(a, b[c]);
    }
  };

  jspb.BinaryWriter.prototype.writeRepeatedFixed32 = function (a, b) {
    if (null != b) for (var c = 0; c < b.length; c++) {
      this.writeFixed32(a, b[c]);
    }
  };

  jspb.BinaryWriter.prototype.writeRepeatedFixed64 = function (a, b) {
    if (null != b) for (var c = 0; c < b.length; c++) {
      this.writeFixed64(a, b[c]);
    }
  };

  jspb.BinaryWriter.prototype.writeRepeatedFixed64String = function (a, b) {
    if (null != b) for (var c = 0; c < b.length; c++) {
      this.writeFixed64String(a, b[c]);
    }
  };

  jspb.BinaryWriter.prototype.writeRepeatedSfixed32 = function (a, b) {
    if (null != b) for (var c = 0; c < b.length; c++) {
      this.writeSfixed32(a, b[c]);
    }
  };

  jspb.BinaryWriter.prototype.writeRepeatedSfixed64 = function (a, b) {
    if (null != b) for (var c = 0; c < b.length; c++) {
      this.writeSfixed64(a, b[c]);
    }
  };

  jspb.BinaryWriter.prototype.writeRepeatedSfixed64String = function (a, b) {
    if (null != b) for (var c = 0; c < b.length; c++) {
      this.writeSfixed64String(a, b[c]);
    }
  };

  jspb.BinaryWriter.prototype.writeRepeatedFloat = function (a, b) {
    if (null != b) for (var c = 0; c < b.length; c++) {
      this.writeFloat(a, b[c]);
    }
  };

  jspb.BinaryWriter.prototype.writeRepeatedDouble = function (a, b) {
    if (null != b) for (var c = 0; c < b.length; c++) {
      this.writeDouble(a, b[c]);
    }
  };

  jspb.BinaryWriter.prototype.writeRepeatedBool = function (a, b) {
    if (null != b) for (var c = 0; c < b.length; c++) {
      this.writeBool(a, b[c]);
    }
  };

  jspb.BinaryWriter.prototype.writeRepeatedEnum = function (a, b) {
    if (null != b) for (var c = 0; c < b.length; c++) {
      this.writeEnum(a, b[c]);
    }
  };

  jspb.BinaryWriter.prototype.writeRepeatedString = function (a, b) {
    if (null != b) for (var c = 0; c < b.length; c++) {
      this.writeString(a, b[c]);
    }
  };

  jspb.BinaryWriter.prototype.writeRepeatedBytes = function (a, b) {
    if (null != b) for (var c = 0; c < b.length; c++) {
      this.writeBytes(a, b[c]);
    }
  };

  jspb.BinaryWriter.prototype.writeRepeatedMessage = function (a, b, c) {
    if (null != b) for (var d = 0; d < b.length; d++) {
      var e = this.beginDelimited_(a);
      c(b[d], this);
      this.endDelimited_(e);
    }
  };

  jspb.BinaryWriter.prototype.writeRepeatedGroup = function (a, b, c) {
    if (null != b) for (var d = 0; d < b.length; d++) {
      this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.START_GROUP), c(b[d], this), this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.END_GROUP);
    }
  };

  jspb.BinaryWriter.prototype.writeRepeatedFixedHash64 = function (a, b) {
    if (null != b) for (var c = 0; c < b.length; c++) {
      this.writeFixedHash64(a, b[c]);
    }
  };

  jspb.BinaryWriter.prototype.writeRepeatedVarintHash64 = function (a, b) {
    if (null != b) for (var c = 0; c < b.length; c++) {
      this.writeVarintHash64(a, b[c]);
    }
  };

  jspb.BinaryWriter.prototype.writePackedInt32 = function (a, b) {
    if (null != b && b.length) {
      a = this.beginDelimited_(a);

      for (var c = 0; c < b.length; c++) {
        this.encoder_.writeSignedVarint32(b[c]);
      }

      this.endDelimited_(a);
    }
  };

  jspb.BinaryWriter.prototype.writePackedInt32String = function (a, b) {
    if (null != b && b.length) {
      a = this.beginDelimited_(a);

      for (var c = 0; c < b.length; c++) {
        this.encoder_.writeSignedVarint32(parseInt(b[c], 10));
      }

      this.endDelimited_(a);
    }
  };

  jspb.BinaryWriter.prototype.writePackedInt64 = function (a, b) {
    if (null != b && b.length) {
      a = this.beginDelimited_(a);

      for (var c = 0; c < b.length; c++) {
        this.encoder_.writeSignedVarint64(b[c]);
      }

      this.endDelimited_(a);
    }
  };

  jspb.BinaryWriter.prototype.writePackedInt64String = function (a, b) {
    if (null != b && b.length) {
      a = this.beginDelimited_(a);

      for (var c = 0; c < b.length; c++) {
        var d = jspb.arith.Int64.fromString(b[c]);
        this.encoder_.writeSplitVarint64(d.lo, d.hi);
      }

      this.endDelimited_(a);
    }
  };

  jspb.BinaryWriter.prototype.writePackedUint32 = function (a, b) {
    if (null != b && b.length) {
      a = this.beginDelimited_(a);

      for (var c = 0; c < b.length; c++) {
        this.encoder_.writeUnsignedVarint32(b[c]);
      }

      this.endDelimited_(a);
    }
  };

  jspb.BinaryWriter.prototype.writePackedUint32String = function (a, b) {
    if (null != b && b.length) {
      a = this.beginDelimited_(a);

      for (var c = 0; c < b.length; c++) {
        this.encoder_.writeUnsignedVarint32(parseInt(b[c], 10));
      }

      this.endDelimited_(a);
    }
  };

  jspb.BinaryWriter.prototype.writePackedUint64 = function (a, b) {
    if (null != b && b.length) {
      a = this.beginDelimited_(a);

      for (var c = 0; c < b.length; c++) {
        this.encoder_.writeUnsignedVarint64(b[c]);
      }

      this.endDelimited_(a);
    }
  };

  jspb.BinaryWriter.prototype.writePackedUint64String = function (a, b) {
    if (null != b && b.length) {
      a = this.beginDelimited_(a);

      for (var c = 0; c < b.length; c++) {
        var d = jspb.arith.UInt64.fromString(b[c]);
        this.encoder_.writeSplitVarint64(d.lo, d.hi);
      }

      this.endDelimited_(a);
    }
  };

  jspb.BinaryWriter.prototype.writePackedSint32 = function (a, b) {
    if (null != b && b.length) {
      a = this.beginDelimited_(a);

      for (var c = 0; c < b.length; c++) {
        this.encoder_.writeZigzagVarint32(b[c]);
      }

      this.endDelimited_(a);
    }
  };

  jspb.BinaryWriter.prototype.writePackedSint64 = function (a, b) {
    if (null != b && b.length) {
      a = this.beginDelimited_(a);

      for (var c = 0; c < b.length; c++) {
        this.encoder_.writeZigzagVarint64(b[c]);
      }

      this.endDelimited_(a);
    }
  };

  jspb.BinaryWriter.prototype.writePackedSint64String = function (a, b) {
    if (null != b && b.length) {
      a = this.beginDelimited_(a);

      for (var c = 0; c < b.length; c++) {
        this.encoder_.writeZigzagVarint64(parseInt(b[c], 10));
      }

      this.endDelimited_(a);
    }
  };

  jspb.BinaryWriter.prototype.writePackedFixed32 = function (a, b) {
    if (null != b && b.length) for (this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.DELIMITED), this.encoder_.writeUnsignedVarint32(4 * b.length), a = 0; a < b.length; a++) {
      this.encoder_.writeUint32(b[a]);
    }
  };

  jspb.BinaryWriter.prototype.writePackedFixed64 = function (a, b) {
    if (null != b && b.length) for (this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.DELIMITED), this.encoder_.writeUnsignedVarint32(8 * b.length), a = 0; a < b.length; a++) {
      this.encoder_.writeUint64(b[a]);
    }
  };

  jspb.BinaryWriter.prototype.writePackedFixed64String = function (a, b) {
    if (null != b && b.length) for (this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.DELIMITED), this.encoder_.writeUnsignedVarint32(8 * b.length), a = 0; a < b.length; a++) {
      var c = jspb.arith.UInt64.fromString(b[a]);
      this.encoder_.writeSplitFixed64(c.lo, c.hi);
    }
  };

  jspb.BinaryWriter.prototype.writePackedSfixed32 = function (a, b) {
    if (null != b && b.length) for (this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.DELIMITED), this.encoder_.writeUnsignedVarint32(4 * b.length), a = 0; a < b.length; a++) {
      this.encoder_.writeInt32(b[a]);
    }
  };

  jspb.BinaryWriter.prototype.writePackedSfixed64 = function (a, b) {
    if (null != b && b.length) for (this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.DELIMITED), this.encoder_.writeUnsignedVarint32(8 * b.length), a = 0; a < b.length; a++) {
      this.encoder_.writeInt64(b[a]);
    }
  };

  jspb.BinaryWriter.prototype.writePackedSfixed64String = function (a, b) {
    if (null != b && b.length) for (this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.DELIMITED), this.encoder_.writeUnsignedVarint32(8 * b.length), a = 0; a < b.length; a++) {
      this.encoder_.writeInt64String(b[a]);
    }
  };

  jspb.BinaryWriter.prototype.writePackedFloat = function (a, b) {
    if (null != b && b.length) for (this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.DELIMITED), this.encoder_.writeUnsignedVarint32(4 * b.length), a = 0; a < b.length; a++) {
      this.encoder_.writeFloat(b[a]);
    }
  };

  jspb.BinaryWriter.prototype.writePackedDouble = function (a, b) {
    if (null != b && b.length) for (this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.DELIMITED), this.encoder_.writeUnsignedVarint32(8 * b.length), a = 0; a < b.length; a++) {
      this.encoder_.writeDouble(b[a]);
    }
  };

  jspb.BinaryWriter.prototype.writePackedBool = function (a, b) {
    if (null != b && b.length) for (this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.DELIMITED), this.encoder_.writeUnsignedVarint32(b.length), a = 0; a < b.length; a++) {
      this.encoder_.writeBool(b[a]);
    }
  };

  jspb.BinaryWriter.prototype.writePackedEnum = function (a, b) {
    if (null != b && b.length) {
      a = this.beginDelimited_(a);

      for (var c = 0; c < b.length; c++) {
        this.encoder_.writeEnum(b[c]);
      }

      this.endDelimited_(a);
    }
  };

  jspb.BinaryWriter.prototype.writePackedFixedHash64 = function (a, b) {
    if (null != b && b.length) for (this.writeFieldHeader_(a, jspb.BinaryConstants.WireType.DELIMITED), this.encoder_.writeUnsignedVarint32(8 * b.length), a = 0; a < b.length; a++) {
      this.encoder_.writeFixedHash64(b[a]);
    }
  };

  jspb.BinaryWriter.prototype.writePackedVarintHash64 = function (a, b) {
    if (null != b && b.length) {
      a = this.beginDelimited_(a);

      for (var c = 0; c < b.length; c++) {
        this.encoder_.writeVarintHash64(b[c]);
      }

      this.endDelimited_(a);
    }
  };

  jspb.Export = {};
  var Map$1 = jspb.Map;
  var Message = jspb.Message;
  var BinaryReader = jspb.BinaryReader;
  var BinaryWriter = jspb.BinaryWriter;
  var ExtensionFieldInfo = jspb.ExtensionFieldInfo;
  var ExtensionFieldBinaryInfo = jspb.ExtensionFieldBinaryInfo;
  var exportSymbol = goog.exportSymbol;
  var inherits = goog.inherits;
  var object = {
    extend: goog.object.extend
  };
  var typeOf = goog.typeOf;
  var googleProtobuf = {
    Map: Map$1,
    Message: Message,
    BinaryReader: BinaryReader,
    BinaryWriter: BinaryWriter,
    ExtensionFieldInfo: ExtensionFieldInfo,
    ExtensionFieldBinaryInfo: ExtensionFieldBinaryInfo,
    exportSymbol: exportSymbol,
    inherits: inherits,
    object: object,
    typeOf: typeOf
  };

  var blockchain_pb = createCommonjsModule(function (module, exports) {
    /**
     * @fileoverview
     * @enhanceable
     * @suppress {messageConventions} JS Compiler reports an error if a variable or
     *     field starts with 'MSG_' and isn't a translatable message.
     * @public
     */
    // GENERATED CODE -- DO NOT EDIT!
    var goog = googleProtobuf;
    var global = Function('return this')();
    goog.exportSymbol('proto.types.ABI', null, global);
    goog.exportSymbol('proto.types.AccountProof', null, global);
    goog.exportSymbol('proto.types.Block', null, global);
    goog.exportSymbol('proto.types.BlockBody', null, global);
    goog.exportSymbol('proto.types.BlockHeader', null, global);
    goog.exportSymbol('proto.types.ContractVarProof', null, global);
    goog.exportSymbol('proto.types.Event', null, global);
    goog.exportSymbol('proto.types.FilterInfo', null, global);
    goog.exportSymbol('proto.types.FnArgument', null, global);
    goog.exportSymbol('proto.types.Function', null, global);
    goog.exportSymbol('proto.types.Proposal', null, global);
    goog.exportSymbol('proto.types.Query', null, global);
    goog.exportSymbol('proto.types.Receipt', null, global);
    goog.exportSymbol('proto.types.State', null, global);
    goog.exportSymbol('proto.types.StateQuery', null, global);
    goog.exportSymbol('proto.types.StateQueryProof', null, global);
    goog.exportSymbol('proto.types.StateVar', null, global);
    goog.exportSymbol('proto.types.Tx', null, global);
    goog.exportSymbol('proto.types.TxBody', null, global);
    goog.exportSymbol('proto.types.TxIdx', null, global);
    goog.exportSymbol('proto.types.TxInBlock', null, global);
    goog.exportSymbol('proto.types.TxList', null, global);
    goog.exportSymbol('proto.types.TxType', null, global);
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */

    proto.types.Block = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.Block, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.Block.displayName = 'proto.types.Block';
    }

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.Block.prototype.toObject = function (opt_includeInstance) {
        return proto.types.Block.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.Block} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.Block.toObject = function (includeInstance, msg) {
        var f,
            obj = {
          hash: msg.getHash_asB64(),
          header: (f = msg.getHeader()) && proto.types.BlockHeader.toObject(includeInstance, f),
          body: (f = msg.getBody()) && proto.types.BlockBody.toObject(includeInstance, f)
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.Block}
     */


    proto.types.Block.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.Block();
      return proto.types.Block.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.Block} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.Block}
     */


    proto.types.Block.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setHash(value);
            break;

          case 2:
            var value = new proto.types.BlockHeader();
            reader.readMessage(value, proto.types.BlockHeader.deserializeBinaryFromReader);
            msg.setHeader(value);
            break;

          case 3:
            var value = new proto.types.BlockBody();
            reader.readMessage(value, proto.types.BlockBody.deserializeBinaryFromReader);
            msg.setBody(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.Block.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.Block.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.Block} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.Block.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getHash_asU8();

      if (f.length > 0) {
        writer.writeBytes(1, f);
      }

      f = message.getHeader();

      if (f != null) {
        writer.writeMessage(2, f, proto.types.BlockHeader.serializeBinaryToWriter);
      }

      f = message.getBody();

      if (f != null) {
        writer.writeMessage(3, f, proto.types.BlockBody.serializeBinaryToWriter);
      }
    };
    /**
     * optional bytes hash = 1;
     * @return {!(string|Uint8Array)}
     */


    proto.types.Block.prototype.getHash = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, "")
      );
    };
    /**
     * optional bytes hash = 1;
     * This is a type-conversion wrapper around `getHash()`
     * @return {string}
     */


    proto.types.Block.prototype.getHash_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getHash())
      );
    };
    /**
     * optional bytes hash = 1;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getHash()`
     * @return {!Uint8Array}
     */


    proto.types.Block.prototype.getHash_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getHash())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.Block.prototype.setHash = function (value) {
      googleProtobuf.Message.setProto3BytesField(this, 1, value);
    };
    /**
     * optional BlockHeader header = 2;
     * @return {?proto.types.BlockHeader}
     */


    proto.types.Block.prototype.getHeader = function () {
      return (
        /** @type{?proto.types.BlockHeader} */
        googleProtobuf.Message.getWrapperField(this, proto.types.BlockHeader, 2)
      );
    };
    /** @param {?proto.types.BlockHeader|undefined} value */


    proto.types.Block.prototype.setHeader = function (value) {
      googleProtobuf.Message.setWrapperField(this, 2, value);
    };

    proto.types.Block.prototype.clearHeader = function () {
      this.setHeader(undefined);
    };
    /**
     * Returns whether this field is set.
     * @return {boolean}
     */


    proto.types.Block.prototype.hasHeader = function () {
      return googleProtobuf.Message.getField(this, 2) != null;
    };
    /**
     * optional BlockBody body = 3;
     * @return {?proto.types.BlockBody}
     */


    proto.types.Block.prototype.getBody = function () {
      return (
        /** @type{?proto.types.BlockBody} */
        googleProtobuf.Message.getWrapperField(this, proto.types.BlockBody, 3)
      );
    };
    /** @param {?proto.types.BlockBody|undefined} value */


    proto.types.Block.prototype.setBody = function (value) {
      googleProtobuf.Message.setWrapperField(this, 3, value);
    };

    proto.types.Block.prototype.clearBody = function () {
      this.setBody(undefined);
    };
    /**
     * Returns whether this field is set.
     * @return {boolean}
     */


    proto.types.Block.prototype.hasBody = function () {
      return googleProtobuf.Message.getField(this, 3) != null;
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.BlockHeader = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.BlockHeader, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.BlockHeader.displayName = 'proto.types.BlockHeader';
    }

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.BlockHeader.prototype.toObject = function (opt_includeInstance) {
        return proto.types.BlockHeader.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.BlockHeader} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.BlockHeader.toObject = function (includeInstance, msg) {
        var obj = {
          chainid: msg.getChainid_asB64(),
          prevblockhash: msg.getPrevblockhash_asB64(),
          blockno: googleProtobuf.Message.getFieldWithDefault(msg, 3, 0),
          timestamp: googleProtobuf.Message.getFieldWithDefault(msg, 4, 0),
          blocksroothash: msg.getBlocksroothash_asB64(),
          txsroothash: msg.getTxsroothash_asB64(),
          receiptsroothash: msg.getReceiptsroothash_asB64(),
          confirms: googleProtobuf.Message.getFieldWithDefault(msg, 8, 0),
          pubkey: msg.getPubkey_asB64(),
          coinbaseaccount: msg.getCoinbaseaccount_asB64(),
          sign: msg.getSign_asB64(),
          consensus: msg.getConsensus_asB64()
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.BlockHeader}
     */


    proto.types.BlockHeader.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.BlockHeader();
      return proto.types.BlockHeader.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.BlockHeader} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.BlockHeader}
     */


    proto.types.BlockHeader.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setChainid(value);
            break;

          case 2:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setPrevblockhash(value);
            break;

          case 3:
            var value =
            /** @type {number} */
            reader.readUint64();
            msg.setBlockno(value);
            break;

          case 4:
            var value =
            /** @type {number} */
            reader.readInt64();
            msg.setTimestamp(value);
            break;

          case 5:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setBlocksroothash(value);
            break;

          case 6:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setTxsroothash(value);
            break;

          case 7:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setReceiptsroothash(value);
            break;

          case 8:
            var value =
            /** @type {number} */
            reader.readUint64();
            msg.setConfirms(value);
            break;

          case 9:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setPubkey(value);
            break;

          case 10:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setCoinbaseaccount(value);
            break;

          case 11:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setSign(value);
            break;

          case 12:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setConsensus(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.BlockHeader.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.BlockHeader.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.BlockHeader} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.BlockHeader.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getChainid_asU8();

      if (f.length > 0) {
        writer.writeBytes(1, f);
      }

      f = message.getPrevblockhash_asU8();

      if (f.length > 0) {
        writer.writeBytes(2, f);
      }

      f = message.getBlockno();

      if (f !== 0) {
        writer.writeUint64(3, f);
      }

      f = message.getTimestamp();

      if (f !== 0) {
        writer.writeInt64(4, f);
      }

      f = message.getBlocksroothash_asU8();

      if (f.length > 0) {
        writer.writeBytes(5, f);
      }

      f = message.getTxsroothash_asU8();

      if (f.length > 0) {
        writer.writeBytes(6, f);
      }

      f = message.getReceiptsroothash_asU8();

      if (f.length > 0) {
        writer.writeBytes(7, f);
      }

      f = message.getConfirms();

      if (f !== 0) {
        writer.writeUint64(8, f);
      }

      f = message.getPubkey_asU8();

      if (f.length > 0) {
        writer.writeBytes(9, f);
      }

      f = message.getCoinbaseaccount_asU8();

      if (f.length > 0) {
        writer.writeBytes(10, f);
      }

      f = message.getSign_asU8();

      if (f.length > 0) {
        writer.writeBytes(11, f);
      }

      f = message.getConsensus_asU8();

      if (f.length > 0) {
        writer.writeBytes(12, f);
      }
    };
    /**
     * optional bytes chainID = 1;
     * @return {!(string|Uint8Array)}
     */


    proto.types.BlockHeader.prototype.getChainid = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, "")
      );
    };
    /**
     * optional bytes chainID = 1;
     * This is a type-conversion wrapper around `getChainid()`
     * @return {string}
     */


    proto.types.BlockHeader.prototype.getChainid_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getChainid())
      );
    };
    /**
     * optional bytes chainID = 1;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getChainid()`
     * @return {!Uint8Array}
     */


    proto.types.BlockHeader.prototype.getChainid_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getChainid())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.BlockHeader.prototype.setChainid = function (value) {
      googleProtobuf.Message.setProto3BytesField(this, 1, value);
    };
    /**
     * optional bytes prevBlockHash = 2;
     * @return {!(string|Uint8Array)}
     */


    proto.types.BlockHeader.prototype.getPrevblockhash = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 2, "")
      );
    };
    /**
     * optional bytes prevBlockHash = 2;
     * This is a type-conversion wrapper around `getPrevblockhash()`
     * @return {string}
     */


    proto.types.BlockHeader.prototype.getPrevblockhash_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getPrevblockhash())
      );
    };
    /**
     * optional bytes prevBlockHash = 2;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getPrevblockhash()`
     * @return {!Uint8Array}
     */


    proto.types.BlockHeader.prototype.getPrevblockhash_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getPrevblockhash())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.BlockHeader.prototype.setPrevblockhash = function (value) {
      googleProtobuf.Message.setProto3BytesField(this, 2, value);
    };
    /**
     * optional uint64 blockNo = 3;
     * @return {number}
     */


    proto.types.BlockHeader.prototype.getBlockno = function () {
      return (
        /** @type {number} */
        googleProtobuf.Message.getFieldWithDefault(this, 3, 0)
      );
    };
    /** @param {number} value */


    proto.types.BlockHeader.prototype.setBlockno = function (value) {
      googleProtobuf.Message.setProto3IntField(this, 3, value);
    };
    /**
     * optional int64 timestamp = 4;
     * @return {number}
     */


    proto.types.BlockHeader.prototype.getTimestamp = function () {
      return (
        /** @type {number} */
        googleProtobuf.Message.getFieldWithDefault(this, 4, 0)
      );
    };
    /** @param {number} value */


    proto.types.BlockHeader.prototype.setTimestamp = function (value) {
      googleProtobuf.Message.setProto3IntField(this, 4, value);
    };
    /**
     * optional bytes blocksRootHash = 5;
     * @return {!(string|Uint8Array)}
     */


    proto.types.BlockHeader.prototype.getBlocksroothash = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 5, "")
      );
    };
    /**
     * optional bytes blocksRootHash = 5;
     * This is a type-conversion wrapper around `getBlocksroothash()`
     * @return {string}
     */


    proto.types.BlockHeader.prototype.getBlocksroothash_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getBlocksroothash())
      );
    };
    /**
     * optional bytes blocksRootHash = 5;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getBlocksroothash()`
     * @return {!Uint8Array}
     */


    proto.types.BlockHeader.prototype.getBlocksroothash_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getBlocksroothash())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.BlockHeader.prototype.setBlocksroothash = function (value) {
      googleProtobuf.Message.setProto3BytesField(this, 5, value);
    };
    /**
     * optional bytes txsRootHash = 6;
     * @return {!(string|Uint8Array)}
     */


    proto.types.BlockHeader.prototype.getTxsroothash = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 6, "")
      );
    };
    /**
     * optional bytes txsRootHash = 6;
     * This is a type-conversion wrapper around `getTxsroothash()`
     * @return {string}
     */


    proto.types.BlockHeader.prototype.getTxsroothash_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getTxsroothash())
      );
    };
    /**
     * optional bytes txsRootHash = 6;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getTxsroothash()`
     * @return {!Uint8Array}
     */


    proto.types.BlockHeader.prototype.getTxsroothash_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getTxsroothash())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.BlockHeader.prototype.setTxsroothash = function (value) {
      googleProtobuf.Message.setProto3BytesField(this, 6, value);
    };
    /**
     * optional bytes receiptsRootHash = 7;
     * @return {!(string|Uint8Array)}
     */


    proto.types.BlockHeader.prototype.getReceiptsroothash = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 7, "")
      );
    };
    /**
     * optional bytes receiptsRootHash = 7;
     * This is a type-conversion wrapper around `getReceiptsroothash()`
     * @return {string}
     */


    proto.types.BlockHeader.prototype.getReceiptsroothash_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getReceiptsroothash())
      );
    };
    /**
     * optional bytes receiptsRootHash = 7;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getReceiptsroothash()`
     * @return {!Uint8Array}
     */


    proto.types.BlockHeader.prototype.getReceiptsroothash_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getReceiptsroothash())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.BlockHeader.prototype.setReceiptsroothash = function (value) {
      googleProtobuf.Message.setProto3BytesField(this, 7, value);
    };
    /**
     * optional uint64 confirms = 8;
     * @return {number}
     */


    proto.types.BlockHeader.prototype.getConfirms = function () {
      return (
        /** @type {number} */
        googleProtobuf.Message.getFieldWithDefault(this, 8, 0)
      );
    };
    /** @param {number} value */


    proto.types.BlockHeader.prototype.setConfirms = function (value) {
      googleProtobuf.Message.setProto3IntField(this, 8, value);
    };
    /**
     * optional bytes pubKey = 9;
     * @return {!(string|Uint8Array)}
     */


    proto.types.BlockHeader.prototype.getPubkey = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 9, "")
      );
    };
    /**
     * optional bytes pubKey = 9;
     * This is a type-conversion wrapper around `getPubkey()`
     * @return {string}
     */


    proto.types.BlockHeader.prototype.getPubkey_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getPubkey())
      );
    };
    /**
     * optional bytes pubKey = 9;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getPubkey()`
     * @return {!Uint8Array}
     */


    proto.types.BlockHeader.prototype.getPubkey_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getPubkey())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.BlockHeader.prototype.setPubkey = function (value) {
      googleProtobuf.Message.setProto3BytesField(this, 9, value);
    };
    /**
     * optional bytes coinbaseAccount = 10;
     * @return {!(string|Uint8Array)}
     */


    proto.types.BlockHeader.prototype.getCoinbaseaccount = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 10, "")
      );
    };
    /**
     * optional bytes coinbaseAccount = 10;
     * This is a type-conversion wrapper around `getCoinbaseaccount()`
     * @return {string}
     */


    proto.types.BlockHeader.prototype.getCoinbaseaccount_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getCoinbaseaccount())
      );
    };
    /**
     * optional bytes coinbaseAccount = 10;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getCoinbaseaccount()`
     * @return {!Uint8Array}
     */


    proto.types.BlockHeader.prototype.getCoinbaseaccount_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getCoinbaseaccount())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.BlockHeader.prototype.setCoinbaseaccount = function (value) {
      googleProtobuf.Message.setProto3BytesField(this, 10, value);
    };
    /**
     * optional bytes sign = 11;
     * @return {!(string|Uint8Array)}
     */


    proto.types.BlockHeader.prototype.getSign = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 11, "")
      );
    };
    /**
     * optional bytes sign = 11;
     * This is a type-conversion wrapper around `getSign()`
     * @return {string}
     */


    proto.types.BlockHeader.prototype.getSign_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getSign())
      );
    };
    /**
     * optional bytes sign = 11;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getSign()`
     * @return {!Uint8Array}
     */


    proto.types.BlockHeader.prototype.getSign_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getSign())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.BlockHeader.prototype.setSign = function (value) {
      googleProtobuf.Message.setProto3BytesField(this, 11, value);
    };
    /**
     * optional bytes consensus = 12;
     * @return {!(string|Uint8Array)}
     */


    proto.types.BlockHeader.prototype.getConsensus = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 12, "")
      );
    };
    /**
     * optional bytes consensus = 12;
     * This is a type-conversion wrapper around `getConsensus()`
     * @return {string}
     */


    proto.types.BlockHeader.prototype.getConsensus_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getConsensus())
      );
    };
    /**
     * optional bytes consensus = 12;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getConsensus()`
     * @return {!Uint8Array}
     */


    proto.types.BlockHeader.prototype.getConsensus_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getConsensus())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.BlockHeader.prototype.setConsensus = function (value) {
      googleProtobuf.Message.setProto3BytesField(this, 12, value);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.BlockBody = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, proto.types.BlockBody.repeatedFields_, null);
    };

    goog.inherits(proto.types.BlockBody, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.BlockBody.displayName = 'proto.types.BlockBody';
    }
    /**
     * List of repeated fields within this message type.
     * @private {!Array<number>}
     * @const
     */


    proto.types.BlockBody.repeatedFields_ = [1];

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.BlockBody.prototype.toObject = function (opt_includeInstance) {
        return proto.types.BlockBody.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.BlockBody} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.BlockBody.toObject = function (includeInstance, msg) {
        var obj = {
          txsList: googleProtobuf.Message.toObjectList(msg.getTxsList(), proto.types.Tx.toObject, includeInstance)
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.BlockBody}
     */


    proto.types.BlockBody.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.BlockBody();
      return proto.types.BlockBody.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.BlockBody} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.BlockBody}
     */


    proto.types.BlockBody.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value = new proto.types.Tx();
            reader.readMessage(value, proto.types.Tx.deserializeBinaryFromReader);
            msg.addTxs(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.BlockBody.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.BlockBody.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.BlockBody} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.BlockBody.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getTxsList();

      if (f.length > 0) {
        writer.writeRepeatedMessage(1, f, proto.types.Tx.serializeBinaryToWriter);
      }
    };
    /**
     * repeated Tx txs = 1;
     * @return {!Array<!proto.types.Tx>}
     */


    proto.types.BlockBody.prototype.getTxsList = function () {
      return (
        /** @type{!Array<!proto.types.Tx>} */
        googleProtobuf.Message.getRepeatedWrapperField(this, proto.types.Tx, 1)
      );
    };
    /** @param {!Array<!proto.types.Tx>} value */


    proto.types.BlockBody.prototype.setTxsList = function (value) {
      googleProtobuf.Message.setRepeatedWrapperField(this, 1, value);
    };
    /**
     * @param {!proto.types.Tx=} opt_value
     * @param {number=} opt_index
     * @return {!proto.types.Tx}
     */


    proto.types.BlockBody.prototype.addTxs = function (opt_value, opt_index) {
      return googleProtobuf.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.types.Tx, opt_index);
    };

    proto.types.BlockBody.prototype.clearTxsList = function () {
      this.setTxsList([]);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.TxList = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, proto.types.TxList.repeatedFields_, null);
    };

    goog.inherits(proto.types.TxList, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.TxList.displayName = 'proto.types.TxList';
    }
    /**
     * List of repeated fields within this message type.
     * @private {!Array<number>}
     * @const
     */


    proto.types.TxList.repeatedFields_ = [1];

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.TxList.prototype.toObject = function (opt_includeInstance) {
        return proto.types.TxList.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.TxList} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.TxList.toObject = function (includeInstance, msg) {
        var obj = {
          txsList: googleProtobuf.Message.toObjectList(msg.getTxsList(), proto.types.Tx.toObject, includeInstance)
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.TxList}
     */


    proto.types.TxList.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.TxList();
      return proto.types.TxList.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.TxList} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.TxList}
     */


    proto.types.TxList.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value = new proto.types.Tx();
            reader.readMessage(value, proto.types.Tx.deserializeBinaryFromReader);
            msg.addTxs(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.TxList.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.TxList.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.TxList} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.TxList.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getTxsList();

      if (f.length > 0) {
        writer.writeRepeatedMessage(1, f, proto.types.Tx.serializeBinaryToWriter);
      }
    };
    /**
     * repeated Tx txs = 1;
     * @return {!Array<!proto.types.Tx>}
     */


    proto.types.TxList.prototype.getTxsList = function () {
      return (
        /** @type{!Array<!proto.types.Tx>} */
        googleProtobuf.Message.getRepeatedWrapperField(this, proto.types.Tx, 1)
      );
    };
    /** @param {!Array<!proto.types.Tx>} value */


    proto.types.TxList.prototype.setTxsList = function (value) {
      googleProtobuf.Message.setRepeatedWrapperField(this, 1, value);
    };
    /**
     * @param {!proto.types.Tx=} opt_value
     * @param {number=} opt_index
     * @return {!proto.types.Tx}
     */


    proto.types.TxList.prototype.addTxs = function (opt_value, opt_index) {
      return googleProtobuf.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.types.Tx, opt_index);
    };

    proto.types.TxList.prototype.clearTxsList = function () {
      this.setTxsList([]);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.Tx = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.Tx, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.Tx.displayName = 'proto.types.Tx';
    }

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.Tx.prototype.toObject = function (opt_includeInstance) {
        return proto.types.Tx.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.Tx} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.Tx.toObject = function (includeInstance, msg) {
        var f,
            obj = {
          hash: msg.getHash_asB64(),
          body: (f = msg.getBody()) && proto.types.TxBody.toObject(includeInstance, f)
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.Tx}
     */


    proto.types.Tx.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.Tx();
      return proto.types.Tx.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.Tx} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.Tx}
     */


    proto.types.Tx.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setHash(value);
            break;

          case 2:
            var value = new proto.types.TxBody();
            reader.readMessage(value, proto.types.TxBody.deserializeBinaryFromReader);
            msg.setBody(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.Tx.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.Tx.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.Tx} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.Tx.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getHash_asU8();

      if (f.length > 0) {
        writer.writeBytes(1, f);
      }

      f = message.getBody();

      if (f != null) {
        writer.writeMessage(2, f, proto.types.TxBody.serializeBinaryToWriter);
      }
    };
    /**
     * optional bytes hash = 1;
     * @return {!(string|Uint8Array)}
     */


    proto.types.Tx.prototype.getHash = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, "")
      );
    };
    /**
     * optional bytes hash = 1;
     * This is a type-conversion wrapper around `getHash()`
     * @return {string}
     */


    proto.types.Tx.prototype.getHash_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getHash())
      );
    };
    /**
     * optional bytes hash = 1;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getHash()`
     * @return {!Uint8Array}
     */


    proto.types.Tx.prototype.getHash_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getHash())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.Tx.prototype.setHash = function (value) {
      googleProtobuf.Message.setProto3BytesField(this, 1, value);
    };
    /**
     * optional TxBody body = 2;
     * @return {?proto.types.TxBody}
     */


    proto.types.Tx.prototype.getBody = function () {
      return (
        /** @type{?proto.types.TxBody} */
        googleProtobuf.Message.getWrapperField(this, proto.types.TxBody, 2)
      );
    };
    /** @param {?proto.types.TxBody|undefined} value */


    proto.types.Tx.prototype.setBody = function (value) {
      googleProtobuf.Message.setWrapperField(this, 2, value);
    };

    proto.types.Tx.prototype.clearBody = function () {
      this.setBody(undefined);
    };
    /**
     * Returns whether this field is set.
     * @return {boolean}
     */


    proto.types.Tx.prototype.hasBody = function () {
      return googleProtobuf.Message.getField(this, 2) != null;
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.TxBody = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.TxBody, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.TxBody.displayName = 'proto.types.TxBody';
    }

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.TxBody.prototype.toObject = function (opt_includeInstance) {
        return proto.types.TxBody.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.TxBody} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.TxBody.toObject = function (includeInstance, msg) {
        var obj = {
          nonce: googleProtobuf.Message.getFieldWithDefault(msg, 1, 0),
          account: msg.getAccount_asB64(),
          recipient: msg.getRecipient_asB64(),
          amount: msg.getAmount_asB64(),
          payload: msg.getPayload_asB64(),
          gaslimit: googleProtobuf.Message.getFieldWithDefault(msg, 6, 0),
          gasprice: msg.getGasprice_asB64(),
          type: googleProtobuf.Message.getFieldWithDefault(msg, 8, 0),
          chainidhash: msg.getChainidhash_asB64(),
          sign: msg.getSign_asB64()
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.TxBody}
     */


    proto.types.TxBody.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.TxBody();
      return proto.types.TxBody.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.TxBody} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.TxBody}
     */


    proto.types.TxBody.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {number} */
            reader.readUint64();
            msg.setNonce(value);
            break;

          case 2:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setAccount(value);
            break;

          case 3:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setRecipient(value);
            break;

          case 4:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setAmount(value);
            break;

          case 5:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setPayload(value);
            break;

          case 6:
            var value =
            /** @type {number} */
            reader.readUint64();
            msg.setGaslimit(value);
            break;

          case 7:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setGasprice(value);
            break;

          case 8:
            var value =
            /** @type {!proto.types.TxType} */
            reader.readEnum();
            msg.setType(value);
            break;

          case 9:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setChainidhash(value);
            break;

          case 10:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setSign(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.TxBody.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.TxBody.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.TxBody} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.TxBody.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getNonce();

      if (f !== 0) {
        writer.writeUint64(1, f);
      }

      f = message.getAccount_asU8();

      if (f.length > 0) {
        writer.writeBytes(2, f);
      }

      f = message.getRecipient_asU8();

      if (f.length > 0) {
        writer.writeBytes(3, f);
      }

      f = message.getAmount_asU8();

      if (f.length > 0) {
        writer.writeBytes(4, f);
      }

      f = message.getPayload_asU8();

      if (f.length > 0) {
        writer.writeBytes(5, f);
      }

      f = message.getGaslimit();

      if (f !== 0) {
        writer.writeUint64(6, f);
      }

      f = message.getGasprice_asU8();

      if (f.length > 0) {
        writer.writeBytes(7, f);
      }

      f = message.getType();

      if (f !== 0.0) {
        writer.writeEnum(8, f);
      }

      f = message.getChainidhash_asU8();

      if (f.length > 0) {
        writer.writeBytes(9, f);
      }

      f = message.getSign_asU8();

      if (f.length > 0) {
        writer.writeBytes(10, f);
      }
    };
    /**
     * optional uint64 nonce = 1;
     * @return {number}
     */


    proto.types.TxBody.prototype.getNonce = function () {
      return (
        /** @type {number} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, 0)
      );
    };
    /** @param {number} value */


    proto.types.TxBody.prototype.setNonce = function (value) {
      googleProtobuf.Message.setProto3IntField(this, 1, value);
    };
    /**
     * optional bytes account = 2;
     * @return {!(string|Uint8Array)}
     */


    proto.types.TxBody.prototype.getAccount = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 2, "")
      );
    };
    /**
     * optional bytes account = 2;
     * This is a type-conversion wrapper around `getAccount()`
     * @return {string}
     */


    proto.types.TxBody.prototype.getAccount_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getAccount())
      );
    };
    /**
     * optional bytes account = 2;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getAccount()`
     * @return {!Uint8Array}
     */


    proto.types.TxBody.prototype.getAccount_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getAccount())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.TxBody.prototype.setAccount = function (value) {
      googleProtobuf.Message.setProto3BytesField(this, 2, value);
    };
    /**
     * optional bytes recipient = 3;
     * @return {!(string|Uint8Array)}
     */


    proto.types.TxBody.prototype.getRecipient = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 3, "")
      );
    };
    /**
     * optional bytes recipient = 3;
     * This is a type-conversion wrapper around `getRecipient()`
     * @return {string}
     */


    proto.types.TxBody.prototype.getRecipient_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getRecipient())
      );
    };
    /**
     * optional bytes recipient = 3;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getRecipient()`
     * @return {!Uint8Array}
     */


    proto.types.TxBody.prototype.getRecipient_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getRecipient())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.TxBody.prototype.setRecipient = function (value) {
      googleProtobuf.Message.setProto3BytesField(this, 3, value);
    };
    /**
     * optional bytes amount = 4;
     * @return {!(string|Uint8Array)}
     */


    proto.types.TxBody.prototype.getAmount = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 4, "")
      );
    };
    /**
     * optional bytes amount = 4;
     * This is a type-conversion wrapper around `getAmount()`
     * @return {string}
     */


    proto.types.TxBody.prototype.getAmount_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getAmount())
      );
    };
    /**
     * optional bytes amount = 4;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getAmount()`
     * @return {!Uint8Array}
     */


    proto.types.TxBody.prototype.getAmount_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getAmount())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.TxBody.prototype.setAmount = function (value) {
      googleProtobuf.Message.setProto3BytesField(this, 4, value);
    };
    /**
     * optional bytes payload = 5;
     * @return {!(string|Uint8Array)}
     */


    proto.types.TxBody.prototype.getPayload = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 5, "")
      );
    };
    /**
     * optional bytes payload = 5;
     * This is a type-conversion wrapper around `getPayload()`
     * @return {string}
     */


    proto.types.TxBody.prototype.getPayload_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getPayload())
      );
    };
    /**
     * optional bytes payload = 5;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getPayload()`
     * @return {!Uint8Array}
     */


    proto.types.TxBody.prototype.getPayload_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getPayload())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.TxBody.prototype.setPayload = function (value) {
      googleProtobuf.Message.setProto3BytesField(this, 5, value);
    };
    /**
     * optional uint64 gasLimit = 6;
     * @return {number}
     */


    proto.types.TxBody.prototype.getGaslimit = function () {
      return (
        /** @type {number} */
        googleProtobuf.Message.getFieldWithDefault(this, 6, 0)
      );
    };
    /** @param {number} value */


    proto.types.TxBody.prototype.setGaslimit = function (value) {
      googleProtobuf.Message.setProto3IntField(this, 6, value);
    };
    /**
     * optional bytes gasPrice = 7;
     * @return {!(string|Uint8Array)}
     */


    proto.types.TxBody.prototype.getGasprice = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 7, "")
      );
    };
    /**
     * optional bytes gasPrice = 7;
     * This is a type-conversion wrapper around `getGasprice()`
     * @return {string}
     */


    proto.types.TxBody.prototype.getGasprice_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getGasprice())
      );
    };
    /**
     * optional bytes gasPrice = 7;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getGasprice()`
     * @return {!Uint8Array}
     */


    proto.types.TxBody.prototype.getGasprice_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getGasprice())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.TxBody.prototype.setGasprice = function (value) {
      googleProtobuf.Message.setProto3BytesField(this, 7, value);
    };
    /**
     * optional TxType type = 8;
     * @return {!proto.types.TxType}
     */


    proto.types.TxBody.prototype.getType = function () {
      return (
        /** @type {!proto.types.TxType} */
        googleProtobuf.Message.getFieldWithDefault(this, 8, 0)
      );
    };
    /** @param {!proto.types.TxType} value */


    proto.types.TxBody.prototype.setType = function (value) {
      googleProtobuf.Message.setProto3EnumField(this, 8, value);
    };
    /**
     * optional bytes chainIdHash = 9;
     * @return {!(string|Uint8Array)}
     */


    proto.types.TxBody.prototype.getChainidhash = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 9, "")
      );
    };
    /**
     * optional bytes chainIdHash = 9;
     * This is a type-conversion wrapper around `getChainidhash()`
     * @return {string}
     */


    proto.types.TxBody.prototype.getChainidhash_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getChainidhash())
      );
    };
    /**
     * optional bytes chainIdHash = 9;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getChainidhash()`
     * @return {!Uint8Array}
     */


    proto.types.TxBody.prototype.getChainidhash_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getChainidhash())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.TxBody.prototype.setChainidhash = function (value) {
      googleProtobuf.Message.setProto3BytesField(this, 9, value);
    };
    /**
     * optional bytes sign = 10;
     * @return {!(string|Uint8Array)}
     */


    proto.types.TxBody.prototype.getSign = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 10, "")
      );
    };
    /**
     * optional bytes sign = 10;
     * This is a type-conversion wrapper around `getSign()`
     * @return {string}
     */


    proto.types.TxBody.prototype.getSign_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getSign())
      );
    };
    /**
     * optional bytes sign = 10;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getSign()`
     * @return {!Uint8Array}
     */


    proto.types.TxBody.prototype.getSign_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getSign())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.TxBody.prototype.setSign = function (value) {
      googleProtobuf.Message.setProto3BytesField(this, 10, value);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.TxIdx = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.TxIdx, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.TxIdx.displayName = 'proto.types.TxIdx';
    }

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.TxIdx.prototype.toObject = function (opt_includeInstance) {
        return proto.types.TxIdx.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.TxIdx} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.TxIdx.toObject = function (includeInstance, msg) {
        var obj = {
          blockhash: msg.getBlockhash_asB64(),
          idx: googleProtobuf.Message.getFieldWithDefault(msg, 2, 0)
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.TxIdx}
     */


    proto.types.TxIdx.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.TxIdx();
      return proto.types.TxIdx.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.TxIdx} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.TxIdx}
     */


    proto.types.TxIdx.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setBlockhash(value);
            break;

          case 2:
            var value =
            /** @type {number} */
            reader.readInt32();
            msg.setIdx(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.TxIdx.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.TxIdx.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.TxIdx} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.TxIdx.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getBlockhash_asU8();

      if (f.length > 0) {
        writer.writeBytes(1, f);
      }

      f = message.getIdx();

      if (f !== 0) {
        writer.writeInt32(2, f);
      }
    };
    /**
     * optional bytes blockHash = 1;
     * @return {!(string|Uint8Array)}
     */


    proto.types.TxIdx.prototype.getBlockhash = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, "")
      );
    };
    /**
     * optional bytes blockHash = 1;
     * This is a type-conversion wrapper around `getBlockhash()`
     * @return {string}
     */


    proto.types.TxIdx.prototype.getBlockhash_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getBlockhash())
      );
    };
    /**
     * optional bytes blockHash = 1;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getBlockhash()`
     * @return {!Uint8Array}
     */


    proto.types.TxIdx.prototype.getBlockhash_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getBlockhash())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.TxIdx.prototype.setBlockhash = function (value) {
      googleProtobuf.Message.setProto3BytesField(this, 1, value);
    };
    /**
     * optional int32 idx = 2;
     * @return {number}
     */


    proto.types.TxIdx.prototype.getIdx = function () {
      return (
        /** @type {number} */
        googleProtobuf.Message.getFieldWithDefault(this, 2, 0)
      );
    };
    /** @param {number} value */


    proto.types.TxIdx.prototype.setIdx = function (value) {
      googleProtobuf.Message.setProto3IntField(this, 2, value);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.TxInBlock = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.TxInBlock, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.TxInBlock.displayName = 'proto.types.TxInBlock';
    }

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.TxInBlock.prototype.toObject = function (opt_includeInstance) {
        return proto.types.TxInBlock.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.TxInBlock} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.TxInBlock.toObject = function (includeInstance, msg) {
        var f,
            obj = {
          txidx: (f = msg.getTxidx()) && proto.types.TxIdx.toObject(includeInstance, f),
          tx: (f = msg.getTx()) && proto.types.Tx.toObject(includeInstance, f)
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.TxInBlock}
     */


    proto.types.TxInBlock.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.TxInBlock();
      return proto.types.TxInBlock.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.TxInBlock} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.TxInBlock}
     */


    proto.types.TxInBlock.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value = new proto.types.TxIdx();
            reader.readMessage(value, proto.types.TxIdx.deserializeBinaryFromReader);
            msg.setTxidx(value);
            break;

          case 2:
            var value = new proto.types.Tx();
            reader.readMessage(value, proto.types.Tx.deserializeBinaryFromReader);
            msg.setTx(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.TxInBlock.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.TxInBlock.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.TxInBlock} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.TxInBlock.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getTxidx();

      if (f != null) {
        writer.writeMessage(1, f, proto.types.TxIdx.serializeBinaryToWriter);
      }

      f = message.getTx();

      if (f != null) {
        writer.writeMessage(2, f, proto.types.Tx.serializeBinaryToWriter);
      }
    };
    /**
     * optional TxIdx txIdx = 1;
     * @return {?proto.types.TxIdx}
     */


    proto.types.TxInBlock.prototype.getTxidx = function () {
      return (
        /** @type{?proto.types.TxIdx} */
        googleProtobuf.Message.getWrapperField(this, proto.types.TxIdx, 1)
      );
    };
    /** @param {?proto.types.TxIdx|undefined} value */


    proto.types.TxInBlock.prototype.setTxidx = function (value) {
      googleProtobuf.Message.setWrapperField(this, 1, value);
    };

    proto.types.TxInBlock.prototype.clearTxidx = function () {
      this.setTxidx(undefined);
    };
    /**
     * Returns whether this field is set.
     * @return {boolean}
     */


    proto.types.TxInBlock.prototype.hasTxidx = function () {
      return googleProtobuf.Message.getField(this, 1) != null;
    };
    /**
     * optional Tx tx = 2;
     * @return {?proto.types.Tx}
     */


    proto.types.TxInBlock.prototype.getTx = function () {
      return (
        /** @type{?proto.types.Tx} */
        googleProtobuf.Message.getWrapperField(this, proto.types.Tx, 2)
      );
    };
    /** @param {?proto.types.Tx|undefined} value */


    proto.types.TxInBlock.prototype.setTx = function (value) {
      googleProtobuf.Message.setWrapperField(this, 2, value);
    };

    proto.types.TxInBlock.prototype.clearTx = function () {
      this.setTx(undefined);
    };
    /**
     * Returns whether this field is set.
     * @return {boolean}
     */


    proto.types.TxInBlock.prototype.hasTx = function () {
      return googleProtobuf.Message.getField(this, 2) != null;
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.State = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.State, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.State.displayName = 'proto.types.State';
    }

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.State.prototype.toObject = function (opt_includeInstance) {
        return proto.types.State.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.State} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.State.toObject = function (includeInstance, msg) {
        var obj = {
          nonce: googleProtobuf.Message.getFieldWithDefault(msg, 1, 0),
          balance: msg.getBalance_asB64(),
          codehash: msg.getCodehash_asB64(),
          storageroot: msg.getStorageroot_asB64(),
          sqlrecoverypoint: googleProtobuf.Message.getFieldWithDefault(msg, 5, 0)
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.State}
     */


    proto.types.State.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.State();
      return proto.types.State.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.State} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.State}
     */


    proto.types.State.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {number} */
            reader.readUint64();
            msg.setNonce(value);
            break;

          case 2:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setBalance(value);
            break;

          case 3:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setCodehash(value);
            break;

          case 4:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setStorageroot(value);
            break;

          case 5:
            var value =
            /** @type {number} */
            reader.readUint64();
            msg.setSqlrecoverypoint(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.State.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.State.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.State} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.State.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getNonce();

      if (f !== 0) {
        writer.writeUint64(1, f);
      }

      f = message.getBalance_asU8();

      if (f.length > 0) {
        writer.writeBytes(2, f);
      }

      f = message.getCodehash_asU8();

      if (f.length > 0) {
        writer.writeBytes(3, f);
      }

      f = message.getStorageroot_asU8();

      if (f.length > 0) {
        writer.writeBytes(4, f);
      }

      f = message.getSqlrecoverypoint();

      if (f !== 0) {
        writer.writeUint64(5, f);
      }
    };
    /**
     * optional uint64 nonce = 1;
     * @return {number}
     */


    proto.types.State.prototype.getNonce = function () {
      return (
        /** @type {number} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, 0)
      );
    };
    /** @param {number} value */


    proto.types.State.prototype.setNonce = function (value) {
      googleProtobuf.Message.setProto3IntField(this, 1, value);
    };
    /**
     * optional bytes balance = 2;
     * @return {!(string|Uint8Array)}
     */


    proto.types.State.prototype.getBalance = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 2, "")
      );
    };
    /**
     * optional bytes balance = 2;
     * This is a type-conversion wrapper around `getBalance()`
     * @return {string}
     */


    proto.types.State.prototype.getBalance_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getBalance())
      );
    };
    /**
     * optional bytes balance = 2;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getBalance()`
     * @return {!Uint8Array}
     */


    proto.types.State.prototype.getBalance_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getBalance())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.State.prototype.setBalance = function (value) {
      googleProtobuf.Message.setProto3BytesField(this, 2, value);
    };
    /**
     * optional bytes codeHash = 3;
     * @return {!(string|Uint8Array)}
     */


    proto.types.State.prototype.getCodehash = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 3, "")
      );
    };
    /**
     * optional bytes codeHash = 3;
     * This is a type-conversion wrapper around `getCodehash()`
     * @return {string}
     */


    proto.types.State.prototype.getCodehash_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getCodehash())
      );
    };
    /**
     * optional bytes codeHash = 3;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getCodehash()`
     * @return {!Uint8Array}
     */


    proto.types.State.prototype.getCodehash_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getCodehash())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.State.prototype.setCodehash = function (value) {
      googleProtobuf.Message.setProto3BytesField(this, 3, value);
    };
    /**
     * optional bytes storageRoot = 4;
     * @return {!(string|Uint8Array)}
     */


    proto.types.State.prototype.getStorageroot = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 4, "")
      );
    };
    /**
     * optional bytes storageRoot = 4;
     * This is a type-conversion wrapper around `getStorageroot()`
     * @return {string}
     */


    proto.types.State.prototype.getStorageroot_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getStorageroot())
      );
    };
    /**
     * optional bytes storageRoot = 4;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getStorageroot()`
     * @return {!Uint8Array}
     */


    proto.types.State.prototype.getStorageroot_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getStorageroot())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.State.prototype.setStorageroot = function (value) {
      googleProtobuf.Message.setProto3BytesField(this, 4, value);
    };
    /**
     * optional uint64 sqlRecoveryPoint = 5;
     * @return {number}
     */


    proto.types.State.prototype.getSqlrecoverypoint = function () {
      return (
        /** @type {number} */
        googleProtobuf.Message.getFieldWithDefault(this, 5, 0)
      );
    };
    /** @param {number} value */


    proto.types.State.prototype.setSqlrecoverypoint = function (value) {
      googleProtobuf.Message.setProto3IntField(this, 5, value);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.AccountProof = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, proto.types.AccountProof.repeatedFields_, null);
    };

    goog.inherits(proto.types.AccountProof, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.AccountProof.displayName = 'proto.types.AccountProof';
    }
    /**
     * List of repeated fields within this message type.
     * @private {!Array<number>}
     * @const
     */


    proto.types.AccountProof.repeatedFields_ = [8];

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.AccountProof.prototype.toObject = function (opt_includeInstance) {
        return proto.types.AccountProof.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.AccountProof} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.AccountProof.toObject = function (includeInstance, msg) {
        var f,
            obj = {
          state: (f = msg.getState()) && proto.types.State.toObject(includeInstance, f),
          inclusion: googleProtobuf.Message.getFieldWithDefault(msg, 2, false),
          key: msg.getKey_asB64(),
          proofkey: msg.getProofkey_asB64(),
          proofval: msg.getProofval_asB64(),
          bitmap: msg.getBitmap_asB64(),
          height: googleProtobuf.Message.getFieldWithDefault(msg, 7, 0),
          auditpathList: msg.getAuditpathList_asB64()
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.AccountProof}
     */


    proto.types.AccountProof.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.AccountProof();
      return proto.types.AccountProof.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.AccountProof} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.AccountProof}
     */


    proto.types.AccountProof.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value = new proto.types.State();
            reader.readMessage(value, proto.types.State.deserializeBinaryFromReader);
            msg.setState(value);
            break;

          case 2:
            var value =
            /** @type {boolean} */
            reader.readBool();
            msg.setInclusion(value);
            break;

          case 3:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setKey(value);
            break;

          case 4:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setProofkey(value);
            break;

          case 5:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setProofval(value);
            break;

          case 6:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setBitmap(value);
            break;

          case 7:
            var value =
            /** @type {number} */
            reader.readUint32();
            msg.setHeight(value);
            break;

          case 8:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.addAuditpath(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.AccountProof.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.AccountProof.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.AccountProof} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.AccountProof.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getState();

      if (f != null) {
        writer.writeMessage(1, f, proto.types.State.serializeBinaryToWriter);
      }

      f = message.getInclusion();

      if (f) {
        writer.writeBool(2, f);
      }

      f = message.getKey_asU8();

      if (f.length > 0) {
        writer.writeBytes(3, f);
      }

      f = message.getProofkey_asU8();

      if (f.length > 0) {
        writer.writeBytes(4, f);
      }

      f = message.getProofval_asU8();

      if (f.length > 0) {
        writer.writeBytes(5, f);
      }

      f = message.getBitmap_asU8();

      if (f.length > 0) {
        writer.writeBytes(6, f);
      }

      f = message.getHeight();

      if (f !== 0) {
        writer.writeUint32(7, f);
      }

      f = message.getAuditpathList_asU8();

      if (f.length > 0) {
        writer.writeRepeatedBytes(8, f);
      }
    };
    /**
     * optional State state = 1;
     * @return {?proto.types.State}
     */


    proto.types.AccountProof.prototype.getState = function () {
      return (
        /** @type{?proto.types.State} */
        googleProtobuf.Message.getWrapperField(this, proto.types.State, 1)
      );
    };
    /** @param {?proto.types.State|undefined} value */


    proto.types.AccountProof.prototype.setState = function (value) {
      googleProtobuf.Message.setWrapperField(this, 1, value);
    };

    proto.types.AccountProof.prototype.clearState = function () {
      this.setState(undefined);
    };
    /**
     * Returns whether this field is set.
     * @return {boolean}
     */


    proto.types.AccountProof.prototype.hasState = function () {
      return googleProtobuf.Message.getField(this, 1) != null;
    };
    /**
     * optional bool inclusion = 2;
     * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
     * You should avoid comparisons like {@code val === true/false} in those cases.
     * @return {boolean}
     */


    proto.types.AccountProof.prototype.getInclusion = function () {
      return (
        /** @type {boolean} */
        googleProtobuf.Message.getFieldWithDefault(this, 2, false)
      );
    };
    /** @param {boolean} value */


    proto.types.AccountProof.prototype.setInclusion = function (value) {
      googleProtobuf.Message.setProto3BooleanField(this, 2, value);
    };
    /**
     * optional bytes key = 3;
     * @return {!(string|Uint8Array)}
     */


    proto.types.AccountProof.prototype.getKey = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 3, "")
      );
    };
    /**
     * optional bytes key = 3;
     * This is a type-conversion wrapper around `getKey()`
     * @return {string}
     */


    proto.types.AccountProof.prototype.getKey_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getKey())
      );
    };
    /**
     * optional bytes key = 3;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getKey()`
     * @return {!Uint8Array}
     */


    proto.types.AccountProof.prototype.getKey_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getKey())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.AccountProof.prototype.setKey = function (value) {
      googleProtobuf.Message.setProto3BytesField(this, 3, value);
    };
    /**
     * optional bytes proofKey = 4;
     * @return {!(string|Uint8Array)}
     */


    proto.types.AccountProof.prototype.getProofkey = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 4, "")
      );
    };
    /**
     * optional bytes proofKey = 4;
     * This is a type-conversion wrapper around `getProofkey()`
     * @return {string}
     */


    proto.types.AccountProof.prototype.getProofkey_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getProofkey())
      );
    };
    /**
     * optional bytes proofKey = 4;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getProofkey()`
     * @return {!Uint8Array}
     */


    proto.types.AccountProof.prototype.getProofkey_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getProofkey())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.AccountProof.prototype.setProofkey = function (value) {
      googleProtobuf.Message.setProto3BytesField(this, 4, value);
    };
    /**
     * optional bytes proofVal = 5;
     * @return {!(string|Uint8Array)}
     */


    proto.types.AccountProof.prototype.getProofval = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 5, "")
      );
    };
    /**
     * optional bytes proofVal = 5;
     * This is a type-conversion wrapper around `getProofval()`
     * @return {string}
     */


    proto.types.AccountProof.prototype.getProofval_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getProofval())
      );
    };
    /**
     * optional bytes proofVal = 5;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getProofval()`
     * @return {!Uint8Array}
     */


    proto.types.AccountProof.prototype.getProofval_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getProofval())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.AccountProof.prototype.setProofval = function (value) {
      googleProtobuf.Message.setProto3BytesField(this, 5, value);
    };
    /**
     * optional bytes bitmap = 6;
     * @return {!(string|Uint8Array)}
     */


    proto.types.AccountProof.prototype.getBitmap = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 6, "")
      );
    };
    /**
     * optional bytes bitmap = 6;
     * This is a type-conversion wrapper around `getBitmap()`
     * @return {string}
     */


    proto.types.AccountProof.prototype.getBitmap_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getBitmap())
      );
    };
    /**
     * optional bytes bitmap = 6;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getBitmap()`
     * @return {!Uint8Array}
     */


    proto.types.AccountProof.prototype.getBitmap_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getBitmap())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.AccountProof.prototype.setBitmap = function (value) {
      googleProtobuf.Message.setProto3BytesField(this, 6, value);
    };
    /**
     * optional uint32 height = 7;
     * @return {number}
     */


    proto.types.AccountProof.prototype.getHeight = function () {
      return (
        /** @type {number} */
        googleProtobuf.Message.getFieldWithDefault(this, 7, 0)
      );
    };
    /** @param {number} value */


    proto.types.AccountProof.prototype.setHeight = function (value) {
      googleProtobuf.Message.setProto3IntField(this, 7, value);
    };
    /**
     * repeated bytes auditPath = 8;
     * @return {!(Array<!Uint8Array>|Array<string>)}
     */


    proto.types.AccountProof.prototype.getAuditpathList = function () {
      return (
        /** @type {!(Array<!Uint8Array>|Array<string>)} */
        googleProtobuf.Message.getRepeatedField(this, 8)
      );
    };
    /**
     * repeated bytes auditPath = 8;
     * This is a type-conversion wrapper around `getAuditpathList()`
     * @return {!Array<string>}
     */


    proto.types.AccountProof.prototype.getAuditpathList_asB64 = function () {
      return (
        /** @type {!Array<string>} */
        googleProtobuf.Message.bytesListAsB64(this.getAuditpathList())
      );
    };
    /**
     * repeated bytes auditPath = 8;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getAuditpathList()`
     * @return {!Array<!Uint8Array>}
     */


    proto.types.AccountProof.prototype.getAuditpathList_asU8 = function () {
      return (
        /** @type {!Array<!Uint8Array>} */
        googleProtobuf.Message.bytesListAsU8(this.getAuditpathList())
      );
    };
    /** @param {!(Array<!Uint8Array>|Array<string>)} value */


    proto.types.AccountProof.prototype.setAuditpathList = function (value) {
      googleProtobuf.Message.setField(this, 8, value || []);
    };
    /**
     * @param {!(string|Uint8Array)} value
     * @param {number=} opt_index
     */


    proto.types.AccountProof.prototype.addAuditpath = function (value, opt_index) {
      googleProtobuf.Message.addToRepeatedField(this, 8, value, opt_index);
    };

    proto.types.AccountProof.prototype.clearAuditpathList = function () {
      this.setAuditpathList([]);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.ContractVarProof = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, proto.types.ContractVarProof.repeatedFields_, null);
    };

    goog.inherits(proto.types.ContractVarProof, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.ContractVarProof.displayName = 'proto.types.ContractVarProof';
    }
    /**
     * List of repeated fields within this message type.
     * @private {!Array<number>}
     * @const
     */


    proto.types.ContractVarProof.repeatedFields_ = [8];

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.ContractVarProof.prototype.toObject = function (opt_includeInstance) {
        return proto.types.ContractVarProof.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.ContractVarProof} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.ContractVarProof.toObject = function (includeInstance, msg) {
        var obj = {
          value: msg.getValue_asB64(),
          inclusion: googleProtobuf.Message.getFieldWithDefault(msg, 2, false),
          proofkey: msg.getProofkey_asB64(),
          proofval: msg.getProofval_asB64(),
          bitmap: msg.getBitmap_asB64(),
          height: googleProtobuf.Message.getFieldWithDefault(msg, 7, 0),
          auditpathList: msg.getAuditpathList_asB64(),
          key: msg.getKey_asB64()
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.ContractVarProof}
     */


    proto.types.ContractVarProof.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.ContractVarProof();
      return proto.types.ContractVarProof.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.ContractVarProof} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.ContractVarProof}
     */


    proto.types.ContractVarProof.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setValue(value);
            break;

          case 2:
            var value =
            /** @type {boolean} */
            reader.readBool();
            msg.setInclusion(value);
            break;

          case 4:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setProofkey(value);
            break;

          case 5:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setProofval(value);
            break;

          case 6:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setBitmap(value);
            break;

          case 7:
            var value =
            /** @type {number} */
            reader.readUint32();
            msg.setHeight(value);
            break;

          case 8:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.addAuditpath(value);
            break;

          case 9:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setKey(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.ContractVarProof.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.ContractVarProof.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.ContractVarProof} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.ContractVarProof.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getValue_asU8();

      if (f.length > 0) {
        writer.writeBytes(1, f);
      }

      f = message.getInclusion();

      if (f) {
        writer.writeBool(2, f);
      }

      f = message.getProofkey_asU8();

      if (f.length > 0) {
        writer.writeBytes(4, f);
      }

      f = message.getProofval_asU8();

      if (f.length > 0) {
        writer.writeBytes(5, f);
      }

      f = message.getBitmap_asU8();

      if (f.length > 0) {
        writer.writeBytes(6, f);
      }

      f = message.getHeight();

      if (f !== 0) {
        writer.writeUint32(7, f);
      }

      f = message.getAuditpathList_asU8();

      if (f.length > 0) {
        writer.writeRepeatedBytes(8, f);
      }

      f = message.getKey_asU8();

      if (f.length > 0) {
        writer.writeBytes(9, f);
      }
    };
    /**
     * optional bytes value = 1;
     * @return {!(string|Uint8Array)}
     */


    proto.types.ContractVarProof.prototype.getValue = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, "")
      );
    };
    /**
     * optional bytes value = 1;
     * This is a type-conversion wrapper around `getValue()`
     * @return {string}
     */


    proto.types.ContractVarProof.prototype.getValue_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getValue())
      );
    };
    /**
     * optional bytes value = 1;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getValue()`
     * @return {!Uint8Array}
     */


    proto.types.ContractVarProof.prototype.getValue_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getValue())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.ContractVarProof.prototype.setValue = function (value) {
      googleProtobuf.Message.setProto3BytesField(this, 1, value);
    };
    /**
     * optional bool inclusion = 2;
     * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
     * You should avoid comparisons like {@code val === true/false} in those cases.
     * @return {boolean}
     */


    proto.types.ContractVarProof.prototype.getInclusion = function () {
      return (
        /** @type {boolean} */
        googleProtobuf.Message.getFieldWithDefault(this, 2, false)
      );
    };
    /** @param {boolean} value */


    proto.types.ContractVarProof.prototype.setInclusion = function (value) {
      googleProtobuf.Message.setProto3BooleanField(this, 2, value);
    };
    /**
     * optional bytes proofKey = 4;
     * @return {!(string|Uint8Array)}
     */


    proto.types.ContractVarProof.prototype.getProofkey = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 4, "")
      );
    };
    /**
     * optional bytes proofKey = 4;
     * This is a type-conversion wrapper around `getProofkey()`
     * @return {string}
     */


    proto.types.ContractVarProof.prototype.getProofkey_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getProofkey())
      );
    };
    /**
     * optional bytes proofKey = 4;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getProofkey()`
     * @return {!Uint8Array}
     */


    proto.types.ContractVarProof.prototype.getProofkey_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getProofkey())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.ContractVarProof.prototype.setProofkey = function (value) {
      googleProtobuf.Message.setProto3BytesField(this, 4, value);
    };
    /**
     * optional bytes proofVal = 5;
     * @return {!(string|Uint8Array)}
     */


    proto.types.ContractVarProof.prototype.getProofval = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 5, "")
      );
    };
    /**
     * optional bytes proofVal = 5;
     * This is a type-conversion wrapper around `getProofval()`
     * @return {string}
     */


    proto.types.ContractVarProof.prototype.getProofval_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getProofval())
      );
    };
    /**
     * optional bytes proofVal = 5;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getProofval()`
     * @return {!Uint8Array}
     */


    proto.types.ContractVarProof.prototype.getProofval_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getProofval())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.ContractVarProof.prototype.setProofval = function (value) {
      googleProtobuf.Message.setProto3BytesField(this, 5, value);
    };
    /**
     * optional bytes bitmap = 6;
     * @return {!(string|Uint8Array)}
     */


    proto.types.ContractVarProof.prototype.getBitmap = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 6, "")
      );
    };
    /**
     * optional bytes bitmap = 6;
     * This is a type-conversion wrapper around `getBitmap()`
     * @return {string}
     */


    proto.types.ContractVarProof.prototype.getBitmap_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getBitmap())
      );
    };
    /**
     * optional bytes bitmap = 6;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getBitmap()`
     * @return {!Uint8Array}
     */


    proto.types.ContractVarProof.prototype.getBitmap_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getBitmap())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.ContractVarProof.prototype.setBitmap = function (value) {
      googleProtobuf.Message.setProto3BytesField(this, 6, value);
    };
    /**
     * optional uint32 height = 7;
     * @return {number}
     */


    proto.types.ContractVarProof.prototype.getHeight = function () {
      return (
        /** @type {number} */
        googleProtobuf.Message.getFieldWithDefault(this, 7, 0)
      );
    };
    /** @param {number} value */


    proto.types.ContractVarProof.prototype.setHeight = function (value) {
      googleProtobuf.Message.setProto3IntField(this, 7, value);
    };
    /**
     * repeated bytes auditPath = 8;
     * @return {!(Array<!Uint8Array>|Array<string>)}
     */


    proto.types.ContractVarProof.prototype.getAuditpathList = function () {
      return (
        /** @type {!(Array<!Uint8Array>|Array<string>)} */
        googleProtobuf.Message.getRepeatedField(this, 8)
      );
    };
    /**
     * repeated bytes auditPath = 8;
     * This is a type-conversion wrapper around `getAuditpathList()`
     * @return {!Array<string>}
     */


    proto.types.ContractVarProof.prototype.getAuditpathList_asB64 = function () {
      return (
        /** @type {!Array<string>} */
        googleProtobuf.Message.bytesListAsB64(this.getAuditpathList())
      );
    };
    /**
     * repeated bytes auditPath = 8;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getAuditpathList()`
     * @return {!Array<!Uint8Array>}
     */


    proto.types.ContractVarProof.prototype.getAuditpathList_asU8 = function () {
      return (
        /** @type {!Array<!Uint8Array>} */
        googleProtobuf.Message.bytesListAsU8(this.getAuditpathList())
      );
    };
    /** @param {!(Array<!Uint8Array>|Array<string>)} value */


    proto.types.ContractVarProof.prototype.setAuditpathList = function (value) {
      googleProtobuf.Message.setField(this, 8, value || []);
    };
    /**
     * @param {!(string|Uint8Array)} value
     * @param {number=} opt_index
     */


    proto.types.ContractVarProof.prototype.addAuditpath = function (value, opt_index) {
      googleProtobuf.Message.addToRepeatedField(this, 8, value, opt_index);
    };

    proto.types.ContractVarProof.prototype.clearAuditpathList = function () {
      this.setAuditpathList([]);
    };
    /**
     * optional bytes key = 9;
     * @return {!(string|Uint8Array)}
     */


    proto.types.ContractVarProof.prototype.getKey = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 9, "")
      );
    };
    /**
     * optional bytes key = 9;
     * This is a type-conversion wrapper around `getKey()`
     * @return {string}
     */


    proto.types.ContractVarProof.prototype.getKey_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getKey())
      );
    };
    /**
     * optional bytes key = 9;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getKey()`
     * @return {!Uint8Array}
     */


    proto.types.ContractVarProof.prototype.getKey_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getKey())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.ContractVarProof.prototype.setKey = function (value) {
      googleProtobuf.Message.setProto3BytesField(this, 9, value);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.StateQueryProof = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, proto.types.StateQueryProof.repeatedFields_, null);
    };

    goog.inherits(proto.types.StateQueryProof, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.StateQueryProof.displayName = 'proto.types.StateQueryProof';
    }
    /**
     * List of repeated fields within this message type.
     * @private {!Array<number>}
     * @const
     */


    proto.types.StateQueryProof.repeatedFields_ = [2];

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.StateQueryProof.prototype.toObject = function (opt_includeInstance) {
        return proto.types.StateQueryProof.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.StateQueryProof} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.StateQueryProof.toObject = function (includeInstance, msg) {
        var f,
            obj = {
          contractproof: (f = msg.getContractproof()) && proto.types.AccountProof.toObject(includeInstance, f),
          varproofsList: googleProtobuf.Message.toObjectList(msg.getVarproofsList(), proto.types.ContractVarProof.toObject, includeInstance)
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.StateQueryProof}
     */


    proto.types.StateQueryProof.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.StateQueryProof();
      return proto.types.StateQueryProof.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.StateQueryProof} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.StateQueryProof}
     */


    proto.types.StateQueryProof.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value = new proto.types.AccountProof();
            reader.readMessage(value, proto.types.AccountProof.deserializeBinaryFromReader);
            msg.setContractproof(value);
            break;

          case 2:
            var value = new proto.types.ContractVarProof();
            reader.readMessage(value, proto.types.ContractVarProof.deserializeBinaryFromReader);
            msg.addVarproofs(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.StateQueryProof.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.StateQueryProof.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.StateQueryProof} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.StateQueryProof.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getContractproof();

      if (f != null) {
        writer.writeMessage(1, f, proto.types.AccountProof.serializeBinaryToWriter);
      }

      f = message.getVarproofsList();

      if (f.length > 0) {
        writer.writeRepeatedMessage(2, f, proto.types.ContractVarProof.serializeBinaryToWriter);
      }
    };
    /**
     * optional AccountProof contractProof = 1;
     * @return {?proto.types.AccountProof}
     */


    proto.types.StateQueryProof.prototype.getContractproof = function () {
      return (
        /** @type{?proto.types.AccountProof} */
        googleProtobuf.Message.getWrapperField(this, proto.types.AccountProof, 1)
      );
    };
    /** @param {?proto.types.AccountProof|undefined} value */


    proto.types.StateQueryProof.prototype.setContractproof = function (value) {
      googleProtobuf.Message.setWrapperField(this, 1, value);
    };

    proto.types.StateQueryProof.prototype.clearContractproof = function () {
      this.setContractproof(undefined);
    };
    /**
     * Returns whether this field is set.
     * @return {boolean}
     */


    proto.types.StateQueryProof.prototype.hasContractproof = function () {
      return googleProtobuf.Message.getField(this, 1) != null;
    };
    /**
     * repeated ContractVarProof varProofs = 2;
     * @return {!Array<!proto.types.ContractVarProof>}
     */


    proto.types.StateQueryProof.prototype.getVarproofsList = function () {
      return (
        /** @type{!Array<!proto.types.ContractVarProof>} */
        googleProtobuf.Message.getRepeatedWrapperField(this, proto.types.ContractVarProof, 2)
      );
    };
    /** @param {!Array<!proto.types.ContractVarProof>} value */


    proto.types.StateQueryProof.prototype.setVarproofsList = function (value) {
      googleProtobuf.Message.setRepeatedWrapperField(this, 2, value);
    };
    /**
     * @param {!proto.types.ContractVarProof=} opt_value
     * @param {number=} opt_index
     * @return {!proto.types.ContractVarProof}
     */


    proto.types.StateQueryProof.prototype.addVarproofs = function (opt_value, opt_index) {
      return googleProtobuf.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.types.ContractVarProof, opt_index);
    };

    proto.types.StateQueryProof.prototype.clearVarproofsList = function () {
      this.setVarproofsList([]);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.Receipt = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, proto.types.Receipt.repeatedFields_, null);
    };

    goog.inherits(proto.types.Receipt, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.Receipt.displayName = 'proto.types.Receipt';
    }
    /**
     * List of repeated fields within this message type.
     * @private {!Array<number>}
     * @const
     */


    proto.types.Receipt.repeatedFields_ = [8];

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.Receipt.prototype.toObject = function (opt_includeInstance) {
        return proto.types.Receipt.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.Receipt} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.Receipt.toObject = function (includeInstance, msg) {
        var obj = {
          contractaddress: msg.getContractaddress_asB64(),
          status: googleProtobuf.Message.getFieldWithDefault(msg, 2, ""),
          ret: googleProtobuf.Message.getFieldWithDefault(msg, 3, ""),
          txhash: msg.getTxhash_asB64(),
          feeused: msg.getFeeused_asB64(),
          cumulativefeeused: msg.getCumulativefeeused_asB64(),
          bloom: msg.getBloom_asB64(),
          eventsList: googleProtobuf.Message.toObjectList(msg.getEventsList(), proto.types.Event.toObject, includeInstance),
          blockno: googleProtobuf.Message.getFieldWithDefault(msg, 9, 0),
          blockhash: msg.getBlockhash_asB64(),
          txindex: googleProtobuf.Message.getFieldWithDefault(msg, 11, 0),
          from: msg.getFrom_asB64(),
          to: msg.getTo_asB64(),
          feedelegation: googleProtobuf.Message.getFieldWithDefault(msg, 14, false),
          gasused: googleProtobuf.Message.getFieldWithDefault(msg, 15, 0)
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.Receipt}
     */


    proto.types.Receipt.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.Receipt();
      return proto.types.Receipt.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.Receipt} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.Receipt}
     */


    proto.types.Receipt.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setContractaddress(value);
            break;

          case 2:
            var value =
            /** @type {string} */
            reader.readString();
            msg.setStatus(value);
            break;

          case 3:
            var value =
            /** @type {string} */
            reader.readString();
            msg.setRet(value);
            break;

          case 4:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setTxhash(value);
            break;

          case 5:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setFeeused(value);
            break;

          case 6:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setCumulativefeeused(value);
            break;

          case 7:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setBloom(value);
            break;

          case 8:
            var value = new proto.types.Event();
            reader.readMessage(value, proto.types.Event.deserializeBinaryFromReader);
            msg.addEvents(value);
            break;

          case 9:
            var value =
            /** @type {number} */
            reader.readUint64();
            msg.setBlockno(value);
            break;

          case 10:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setBlockhash(value);
            break;

          case 11:
            var value =
            /** @type {number} */
            reader.readInt32();
            msg.setTxindex(value);
            break;

          case 12:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setFrom(value);
            break;

          case 13:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setTo(value);
            break;

          case 14:
            var value =
            /** @type {boolean} */
            reader.readBool();
            msg.setFeedelegation(value);
            break;

          case 15:
            var value =
            /** @type {number} */
            reader.readUint64();
            msg.setGasused(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.Receipt.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.Receipt.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.Receipt} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.Receipt.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getContractaddress_asU8();

      if (f.length > 0) {
        writer.writeBytes(1, f);
      }

      f = message.getStatus();

      if (f.length > 0) {
        writer.writeString(2, f);
      }

      f = message.getRet();

      if (f.length > 0) {
        writer.writeString(3, f);
      }

      f = message.getTxhash_asU8();

      if (f.length > 0) {
        writer.writeBytes(4, f);
      }

      f = message.getFeeused_asU8();

      if (f.length > 0) {
        writer.writeBytes(5, f);
      }

      f = message.getCumulativefeeused_asU8();

      if (f.length > 0) {
        writer.writeBytes(6, f);
      }

      f = message.getBloom_asU8();

      if (f.length > 0) {
        writer.writeBytes(7, f);
      }

      f = message.getEventsList();

      if (f.length > 0) {
        writer.writeRepeatedMessage(8, f, proto.types.Event.serializeBinaryToWriter);
      }

      f = message.getBlockno();

      if (f !== 0) {
        writer.writeUint64(9, f);
      }

      f = message.getBlockhash_asU8();

      if (f.length > 0) {
        writer.writeBytes(10, f);
      }

      f = message.getTxindex();

      if (f !== 0) {
        writer.writeInt32(11, f);
      }

      f = message.getFrom_asU8();

      if (f.length > 0) {
        writer.writeBytes(12, f);
      }

      f = message.getTo_asU8();

      if (f.length > 0) {
        writer.writeBytes(13, f);
      }

      f = message.getFeedelegation();

      if (f) {
        writer.writeBool(14, f);
      }

      f = message.getGasused();

      if (f !== 0) {
        writer.writeUint64(15, f);
      }
    };
    /**
     * optional bytes contractAddress = 1;
     * @return {!(string|Uint8Array)}
     */


    proto.types.Receipt.prototype.getContractaddress = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, "")
      );
    };
    /**
     * optional bytes contractAddress = 1;
     * This is a type-conversion wrapper around `getContractaddress()`
     * @return {string}
     */


    proto.types.Receipt.prototype.getContractaddress_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getContractaddress())
      );
    };
    /**
     * optional bytes contractAddress = 1;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getContractaddress()`
     * @return {!Uint8Array}
     */


    proto.types.Receipt.prototype.getContractaddress_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getContractaddress())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.Receipt.prototype.setContractaddress = function (value) {
      googleProtobuf.Message.setProto3BytesField(this, 1, value);
    };
    /**
     * optional string status = 2;
     * @return {string}
     */


    proto.types.Receipt.prototype.getStatus = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.getFieldWithDefault(this, 2, "")
      );
    };
    /** @param {string} value */


    proto.types.Receipt.prototype.setStatus = function (value) {
      googleProtobuf.Message.setProto3StringField(this, 2, value);
    };
    /**
     * optional string ret = 3;
     * @return {string}
     */


    proto.types.Receipt.prototype.getRet = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.getFieldWithDefault(this, 3, "")
      );
    };
    /** @param {string} value */


    proto.types.Receipt.prototype.setRet = function (value) {
      googleProtobuf.Message.setProto3StringField(this, 3, value);
    };
    /**
     * optional bytes txHash = 4;
     * @return {!(string|Uint8Array)}
     */


    proto.types.Receipt.prototype.getTxhash = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 4, "")
      );
    };
    /**
     * optional bytes txHash = 4;
     * This is a type-conversion wrapper around `getTxhash()`
     * @return {string}
     */


    proto.types.Receipt.prototype.getTxhash_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getTxhash())
      );
    };
    /**
     * optional bytes txHash = 4;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getTxhash()`
     * @return {!Uint8Array}
     */


    proto.types.Receipt.prototype.getTxhash_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getTxhash())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.Receipt.prototype.setTxhash = function (value) {
      googleProtobuf.Message.setProto3BytesField(this, 4, value);
    };
    /**
     * optional bytes feeUsed = 5;
     * @return {!(string|Uint8Array)}
     */


    proto.types.Receipt.prototype.getFeeused = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 5, "")
      );
    };
    /**
     * optional bytes feeUsed = 5;
     * This is a type-conversion wrapper around `getFeeused()`
     * @return {string}
     */


    proto.types.Receipt.prototype.getFeeused_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getFeeused())
      );
    };
    /**
     * optional bytes feeUsed = 5;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getFeeused()`
     * @return {!Uint8Array}
     */


    proto.types.Receipt.prototype.getFeeused_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getFeeused())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.Receipt.prototype.setFeeused = function (value) {
      googleProtobuf.Message.setProto3BytesField(this, 5, value);
    };
    /**
     * optional bytes cumulativeFeeUsed = 6;
     * @return {!(string|Uint8Array)}
     */


    proto.types.Receipt.prototype.getCumulativefeeused = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 6, "")
      );
    };
    /**
     * optional bytes cumulativeFeeUsed = 6;
     * This is a type-conversion wrapper around `getCumulativefeeused()`
     * @return {string}
     */


    proto.types.Receipt.prototype.getCumulativefeeused_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getCumulativefeeused())
      );
    };
    /**
     * optional bytes cumulativeFeeUsed = 6;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getCumulativefeeused()`
     * @return {!Uint8Array}
     */


    proto.types.Receipt.prototype.getCumulativefeeused_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getCumulativefeeused())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.Receipt.prototype.setCumulativefeeused = function (value) {
      googleProtobuf.Message.setProto3BytesField(this, 6, value);
    };
    /**
     * optional bytes bloom = 7;
     * @return {!(string|Uint8Array)}
     */


    proto.types.Receipt.prototype.getBloom = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 7, "")
      );
    };
    /**
     * optional bytes bloom = 7;
     * This is a type-conversion wrapper around `getBloom()`
     * @return {string}
     */


    proto.types.Receipt.prototype.getBloom_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getBloom())
      );
    };
    /**
     * optional bytes bloom = 7;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getBloom()`
     * @return {!Uint8Array}
     */


    proto.types.Receipt.prototype.getBloom_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getBloom())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.Receipt.prototype.setBloom = function (value) {
      googleProtobuf.Message.setProto3BytesField(this, 7, value);
    };
    /**
     * repeated Event events = 8;
     * @return {!Array<!proto.types.Event>}
     */


    proto.types.Receipt.prototype.getEventsList = function () {
      return (
        /** @type{!Array<!proto.types.Event>} */
        googleProtobuf.Message.getRepeatedWrapperField(this, proto.types.Event, 8)
      );
    };
    /** @param {!Array<!proto.types.Event>} value */


    proto.types.Receipt.prototype.setEventsList = function (value) {
      googleProtobuf.Message.setRepeatedWrapperField(this, 8, value);
    };
    /**
     * @param {!proto.types.Event=} opt_value
     * @param {number=} opt_index
     * @return {!proto.types.Event}
     */


    proto.types.Receipt.prototype.addEvents = function (opt_value, opt_index) {
      return googleProtobuf.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.types.Event, opt_index);
    };

    proto.types.Receipt.prototype.clearEventsList = function () {
      this.setEventsList([]);
    };
    /**
     * optional uint64 blockNo = 9;
     * @return {number}
     */


    proto.types.Receipt.prototype.getBlockno = function () {
      return (
        /** @type {number} */
        googleProtobuf.Message.getFieldWithDefault(this, 9, 0)
      );
    };
    /** @param {number} value */


    proto.types.Receipt.prototype.setBlockno = function (value) {
      googleProtobuf.Message.setProto3IntField(this, 9, value);
    };
    /**
     * optional bytes blockHash = 10;
     * @return {!(string|Uint8Array)}
     */


    proto.types.Receipt.prototype.getBlockhash = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 10, "")
      );
    };
    /**
     * optional bytes blockHash = 10;
     * This is a type-conversion wrapper around `getBlockhash()`
     * @return {string}
     */


    proto.types.Receipt.prototype.getBlockhash_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getBlockhash())
      );
    };
    /**
     * optional bytes blockHash = 10;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getBlockhash()`
     * @return {!Uint8Array}
     */


    proto.types.Receipt.prototype.getBlockhash_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getBlockhash())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.Receipt.prototype.setBlockhash = function (value) {
      googleProtobuf.Message.setProto3BytesField(this, 10, value);
    };
    /**
     * optional int32 txIndex = 11;
     * @return {number}
     */


    proto.types.Receipt.prototype.getTxindex = function () {
      return (
        /** @type {number} */
        googleProtobuf.Message.getFieldWithDefault(this, 11, 0)
      );
    };
    /** @param {number} value */


    proto.types.Receipt.prototype.setTxindex = function (value) {
      googleProtobuf.Message.setProto3IntField(this, 11, value);
    };
    /**
     * optional bytes from = 12;
     * @return {!(string|Uint8Array)}
     */


    proto.types.Receipt.prototype.getFrom = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 12, "")
      );
    };
    /**
     * optional bytes from = 12;
     * This is a type-conversion wrapper around `getFrom()`
     * @return {string}
     */


    proto.types.Receipt.prototype.getFrom_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getFrom())
      );
    };
    /**
     * optional bytes from = 12;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getFrom()`
     * @return {!Uint8Array}
     */


    proto.types.Receipt.prototype.getFrom_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getFrom())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.Receipt.prototype.setFrom = function (value) {
      googleProtobuf.Message.setProto3BytesField(this, 12, value);
    };
    /**
     * optional bytes to = 13;
     * @return {!(string|Uint8Array)}
     */


    proto.types.Receipt.prototype.getTo = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 13, "")
      );
    };
    /**
     * optional bytes to = 13;
     * This is a type-conversion wrapper around `getTo()`
     * @return {string}
     */


    proto.types.Receipt.prototype.getTo_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getTo())
      );
    };
    /**
     * optional bytes to = 13;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getTo()`
     * @return {!Uint8Array}
     */


    proto.types.Receipt.prototype.getTo_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getTo())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.Receipt.prototype.setTo = function (value) {
      googleProtobuf.Message.setProto3BytesField(this, 13, value);
    };
    /**
     * optional bool feeDelegation = 14;
     * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
     * You should avoid comparisons like {@code val === true/false} in those cases.
     * @return {boolean}
     */


    proto.types.Receipt.prototype.getFeedelegation = function () {
      return (
        /** @type {boolean} */
        googleProtobuf.Message.getFieldWithDefault(this, 14, false)
      );
    };
    /** @param {boolean} value */


    proto.types.Receipt.prototype.setFeedelegation = function (value) {
      googleProtobuf.Message.setProto3BooleanField(this, 14, value);
    };
    /**
     * optional uint64 gasUsed = 15;
     * @return {number}
     */


    proto.types.Receipt.prototype.getGasused = function () {
      return (
        /** @type {number} */
        googleProtobuf.Message.getFieldWithDefault(this, 15, 0)
      );
    };
    /** @param {number} value */


    proto.types.Receipt.prototype.setGasused = function (value) {
      googleProtobuf.Message.setProto3IntField(this, 15, value);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.Event = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.Event, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.Event.displayName = 'proto.types.Event';
    }

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.Event.prototype.toObject = function (opt_includeInstance) {
        return proto.types.Event.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.Event} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.Event.toObject = function (includeInstance, msg) {
        var obj = {
          contractaddress: msg.getContractaddress_asB64(),
          eventname: googleProtobuf.Message.getFieldWithDefault(msg, 2, ""),
          jsonargs: googleProtobuf.Message.getFieldWithDefault(msg, 3, ""),
          eventidx: googleProtobuf.Message.getFieldWithDefault(msg, 4, 0),
          txhash: msg.getTxhash_asB64(),
          blockhash: msg.getBlockhash_asB64(),
          blockno: googleProtobuf.Message.getFieldWithDefault(msg, 7, 0),
          txindex: googleProtobuf.Message.getFieldWithDefault(msg, 8, 0)
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.Event}
     */


    proto.types.Event.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.Event();
      return proto.types.Event.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.Event} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.Event}
     */


    proto.types.Event.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setContractaddress(value);
            break;

          case 2:
            var value =
            /** @type {string} */
            reader.readString();
            msg.setEventname(value);
            break;

          case 3:
            var value =
            /** @type {string} */
            reader.readString();
            msg.setJsonargs(value);
            break;

          case 4:
            var value =
            /** @type {number} */
            reader.readInt32();
            msg.setEventidx(value);
            break;

          case 5:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setTxhash(value);
            break;

          case 6:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setBlockhash(value);
            break;

          case 7:
            var value =
            /** @type {number} */
            reader.readUint64();
            msg.setBlockno(value);
            break;

          case 8:
            var value =
            /** @type {number} */
            reader.readInt32();
            msg.setTxindex(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.Event.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.Event.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.Event} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.Event.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getContractaddress_asU8();

      if (f.length > 0) {
        writer.writeBytes(1, f);
      }

      f = message.getEventname();

      if (f.length > 0) {
        writer.writeString(2, f);
      }

      f = message.getJsonargs();

      if (f.length > 0) {
        writer.writeString(3, f);
      }

      f = message.getEventidx();

      if (f !== 0) {
        writer.writeInt32(4, f);
      }

      f = message.getTxhash_asU8();

      if (f.length > 0) {
        writer.writeBytes(5, f);
      }

      f = message.getBlockhash_asU8();

      if (f.length > 0) {
        writer.writeBytes(6, f);
      }

      f = message.getBlockno();

      if (f !== 0) {
        writer.writeUint64(7, f);
      }

      f = message.getTxindex();

      if (f !== 0) {
        writer.writeInt32(8, f);
      }
    };
    /**
     * optional bytes contractAddress = 1;
     * @return {!(string|Uint8Array)}
     */


    proto.types.Event.prototype.getContractaddress = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, "")
      );
    };
    /**
     * optional bytes contractAddress = 1;
     * This is a type-conversion wrapper around `getContractaddress()`
     * @return {string}
     */


    proto.types.Event.prototype.getContractaddress_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getContractaddress())
      );
    };
    /**
     * optional bytes contractAddress = 1;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getContractaddress()`
     * @return {!Uint8Array}
     */


    proto.types.Event.prototype.getContractaddress_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getContractaddress())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.Event.prototype.setContractaddress = function (value) {
      googleProtobuf.Message.setProto3BytesField(this, 1, value);
    };
    /**
     * optional string eventName = 2;
     * @return {string}
     */


    proto.types.Event.prototype.getEventname = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.getFieldWithDefault(this, 2, "")
      );
    };
    /** @param {string} value */


    proto.types.Event.prototype.setEventname = function (value) {
      googleProtobuf.Message.setProto3StringField(this, 2, value);
    };
    /**
     * optional string jsonArgs = 3;
     * @return {string}
     */


    proto.types.Event.prototype.getJsonargs = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.getFieldWithDefault(this, 3, "")
      );
    };
    /** @param {string} value */


    proto.types.Event.prototype.setJsonargs = function (value) {
      googleProtobuf.Message.setProto3StringField(this, 3, value);
    };
    /**
     * optional int32 eventIdx = 4;
     * @return {number}
     */


    proto.types.Event.prototype.getEventidx = function () {
      return (
        /** @type {number} */
        googleProtobuf.Message.getFieldWithDefault(this, 4, 0)
      );
    };
    /** @param {number} value */


    proto.types.Event.prototype.setEventidx = function (value) {
      googleProtobuf.Message.setProto3IntField(this, 4, value);
    };
    /**
     * optional bytes txHash = 5;
     * @return {!(string|Uint8Array)}
     */


    proto.types.Event.prototype.getTxhash = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 5, "")
      );
    };
    /**
     * optional bytes txHash = 5;
     * This is a type-conversion wrapper around `getTxhash()`
     * @return {string}
     */


    proto.types.Event.prototype.getTxhash_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getTxhash())
      );
    };
    /**
     * optional bytes txHash = 5;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getTxhash()`
     * @return {!Uint8Array}
     */


    proto.types.Event.prototype.getTxhash_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getTxhash())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.Event.prototype.setTxhash = function (value) {
      googleProtobuf.Message.setProto3BytesField(this, 5, value);
    };
    /**
     * optional bytes blockHash = 6;
     * @return {!(string|Uint8Array)}
     */


    proto.types.Event.prototype.getBlockhash = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 6, "")
      );
    };
    /**
     * optional bytes blockHash = 6;
     * This is a type-conversion wrapper around `getBlockhash()`
     * @return {string}
     */


    proto.types.Event.prototype.getBlockhash_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getBlockhash())
      );
    };
    /**
     * optional bytes blockHash = 6;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getBlockhash()`
     * @return {!Uint8Array}
     */


    proto.types.Event.prototype.getBlockhash_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getBlockhash())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.Event.prototype.setBlockhash = function (value) {
      googleProtobuf.Message.setProto3BytesField(this, 6, value);
    };
    /**
     * optional uint64 blockNo = 7;
     * @return {number}
     */


    proto.types.Event.prototype.getBlockno = function () {
      return (
        /** @type {number} */
        googleProtobuf.Message.getFieldWithDefault(this, 7, 0)
      );
    };
    /** @param {number} value */


    proto.types.Event.prototype.setBlockno = function (value) {
      googleProtobuf.Message.setProto3IntField(this, 7, value);
    };
    /**
     * optional int32 txIndex = 8;
     * @return {number}
     */


    proto.types.Event.prototype.getTxindex = function () {
      return (
        /** @type {number} */
        googleProtobuf.Message.getFieldWithDefault(this, 8, 0)
      );
    };
    /** @param {number} value */


    proto.types.Event.prototype.setTxindex = function (value) {
      googleProtobuf.Message.setProto3IntField(this, 8, value);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.FnArgument = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.FnArgument, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.FnArgument.displayName = 'proto.types.FnArgument';
    }

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.FnArgument.prototype.toObject = function (opt_includeInstance) {
        return proto.types.FnArgument.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.FnArgument} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.FnArgument.toObject = function (includeInstance, msg) {
        var obj = {
          name: googleProtobuf.Message.getFieldWithDefault(msg, 1, "")
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.FnArgument}
     */


    proto.types.FnArgument.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.FnArgument();
      return proto.types.FnArgument.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.FnArgument} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.FnArgument}
     */


    proto.types.FnArgument.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {string} */
            reader.readString();
            msg.setName(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.FnArgument.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.FnArgument.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.FnArgument} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.FnArgument.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getName();

      if (f.length > 0) {
        writer.writeString(1, f);
      }
    };
    /**
     * optional string name = 1;
     * @return {string}
     */


    proto.types.FnArgument.prototype.getName = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, "")
      );
    };
    /** @param {string} value */


    proto.types.FnArgument.prototype.setName = function (value) {
      googleProtobuf.Message.setProto3StringField(this, 1, value);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.Function = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, proto.types.Function.repeatedFields_, null);
    };

    goog.inherits(proto.types.Function, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.Function.displayName = 'proto.types.Function';
    }
    /**
     * List of repeated fields within this message type.
     * @private {!Array<number>}
     * @const
     */


    proto.types.Function.repeatedFields_ = [2];

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.Function.prototype.toObject = function (opt_includeInstance) {
        return proto.types.Function.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.Function} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.Function.toObject = function (includeInstance, msg) {
        var obj = {
          name: googleProtobuf.Message.getFieldWithDefault(msg, 1, ""),
          argumentsList: googleProtobuf.Message.toObjectList(msg.getArgumentsList(), proto.types.FnArgument.toObject, includeInstance),
          payable: googleProtobuf.Message.getFieldWithDefault(msg, 3, false),
          view: googleProtobuf.Message.getFieldWithDefault(msg, 4, false),
          feeDelegation: googleProtobuf.Message.getFieldWithDefault(msg, 5, false)
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.Function}
     */


    proto.types.Function.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.Function();
      return proto.types.Function.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.Function} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.Function}
     */


    proto.types.Function.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {string} */
            reader.readString();
            msg.setName(value);
            break;

          case 2:
            var value = new proto.types.FnArgument();
            reader.readMessage(value, proto.types.FnArgument.deserializeBinaryFromReader);
            msg.addArguments(value);
            break;

          case 3:
            var value =
            /** @type {boolean} */
            reader.readBool();
            msg.setPayable(value);
            break;

          case 4:
            var value =
            /** @type {boolean} */
            reader.readBool();
            msg.setView(value);
            break;

          case 5:
            var value =
            /** @type {boolean} */
            reader.readBool();
            msg.setFeeDelegation(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.Function.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.Function.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.Function} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.Function.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getName();

      if (f.length > 0) {
        writer.writeString(1, f);
      }

      f = message.getArgumentsList();

      if (f.length > 0) {
        writer.writeRepeatedMessage(2, f, proto.types.FnArgument.serializeBinaryToWriter);
      }

      f = message.getPayable();

      if (f) {
        writer.writeBool(3, f);
      }

      f = message.getView();

      if (f) {
        writer.writeBool(4, f);
      }

      f = message.getFeeDelegation();

      if (f) {
        writer.writeBool(5, f);
      }
    };
    /**
     * optional string name = 1;
     * @return {string}
     */


    proto.types.Function.prototype.getName = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, "")
      );
    };
    /** @param {string} value */


    proto.types.Function.prototype.setName = function (value) {
      googleProtobuf.Message.setProto3StringField(this, 1, value);
    };
    /**
     * repeated FnArgument arguments = 2;
     * @return {!Array<!proto.types.FnArgument>}
     */


    proto.types.Function.prototype.getArgumentsList = function () {
      return (
        /** @type{!Array<!proto.types.FnArgument>} */
        googleProtobuf.Message.getRepeatedWrapperField(this, proto.types.FnArgument, 2)
      );
    };
    /** @param {!Array<!proto.types.FnArgument>} value */


    proto.types.Function.prototype.setArgumentsList = function (value) {
      googleProtobuf.Message.setRepeatedWrapperField(this, 2, value);
    };
    /**
     * @param {!proto.types.FnArgument=} opt_value
     * @param {number=} opt_index
     * @return {!proto.types.FnArgument}
     */


    proto.types.Function.prototype.addArguments = function (opt_value, opt_index) {
      return googleProtobuf.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.types.FnArgument, opt_index);
    };

    proto.types.Function.prototype.clearArgumentsList = function () {
      this.setArgumentsList([]);
    };
    /**
     * optional bool payable = 3;
     * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
     * You should avoid comparisons like {@code val === true/false} in those cases.
     * @return {boolean}
     */


    proto.types.Function.prototype.getPayable = function () {
      return (
        /** @type {boolean} */
        googleProtobuf.Message.getFieldWithDefault(this, 3, false)
      );
    };
    /** @param {boolean} value */


    proto.types.Function.prototype.setPayable = function (value) {
      googleProtobuf.Message.setProto3BooleanField(this, 3, value);
    };
    /**
     * optional bool view = 4;
     * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
     * You should avoid comparisons like {@code val === true/false} in those cases.
     * @return {boolean}
     */


    proto.types.Function.prototype.getView = function () {
      return (
        /** @type {boolean} */
        googleProtobuf.Message.getFieldWithDefault(this, 4, false)
      );
    };
    /** @param {boolean} value */


    proto.types.Function.prototype.setView = function (value) {
      googleProtobuf.Message.setProto3BooleanField(this, 4, value);
    };
    /**
     * optional bool fee_delegation = 5;
     * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
     * You should avoid comparisons like {@code val === true/false} in those cases.
     * @return {boolean}
     */


    proto.types.Function.prototype.getFeeDelegation = function () {
      return (
        /** @type {boolean} */
        googleProtobuf.Message.getFieldWithDefault(this, 5, false)
      );
    };
    /** @param {boolean} value */


    proto.types.Function.prototype.setFeeDelegation = function (value) {
      googleProtobuf.Message.setProto3BooleanField(this, 5, value);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.StateVar = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.StateVar, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.StateVar.displayName = 'proto.types.StateVar';
    }

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.StateVar.prototype.toObject = function (opt_includeInstance) {
        return proto.types.StateVar.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.StateVar} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.StateVar.toObject = function (includeInstance, msg) {
        var obj = {
          name: googleProtobuf.Message.getFieldWithDefault(msg, 1, ""),
          type: googleProtobuf.Message.getFieldWithDefault(msg, 2, ""),
          len: googleProtobuf.Message.getFieldWithDefault(msg, 3, 0)
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.StateVar}
     */


    proto.types.StateVar.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.StateVar();
      return proto.types.StateVar.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.StateVar} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.StateVar}
     */


    proto.types.StateVar.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {string} */
            reader.readString();
            msg.setName(value);
            break;

          case 2:
            var value =
            /** @type {string} */
            reader.readString();
            msg.setType(value);
            break;

          case 3:
            var value =
            /** @type {number} */
            reader.readInt32();
            msg.setLen(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.StateVar.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.StateVar.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.StateVar} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.StateVar.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getName();

      if (f.length > 0) {
        writer.writeString(1, f);
      }

      f = message.getType();

      if (f.length > 0) {
        writer.writeString(2, f);
      }

      f = message.getLen();

      if (f !== 0) {
        writer.writeInt32(3, f);
      }
    };
    /**
     * optional string name = 1;
     * @return {string}
     */


    proto.types.StateVar.prototype.getName = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, "")
      );
    };
    /** @param {string} value */


    proto.types.StateVar.prototype.setName = function (value) {
      googleProtobuf.Message.setProto3StringField(this, 1, value);
    };
    /**
     * optional string type = 2;
     * @return {string}
     */


    proto.types.StateVar.prototype.getType = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.getFieldWithDefault(this, 2, "")
      );
    };
    /** @param {string} value */


    proto.types.StateVar.prototype.setType = function (value) {
      googleProtobuf.Message.setProto3StringField(this, 2, value);
    };
    /**
     * optional int32 len = 3;
     * @return {number}
     */


    proto.types.StateVar.prototype.getLen = function () {
      return (
        /** @type {number} */
        googleProtobuf.Message.getFieldWithDefault(this, 3, 0)
      );
    };
    /** @param {number} value */


    proto.types.StateVar.prototype.setLen = function (value) {
      googleProtobuf.Message.setProto3IntField(this, 3, value);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.ABI = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, proto.types.ABI.repeatedFields_, null);
    };

    goog.inherits(proto.types.ABI, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.ABI.displayName = 'proto.types.ABI';
    }
    /**
     * List of repeated fields within this message type.
     * @private {!Array<number>}
     * @const
     */


    proto.types.ABI.repeatedFields_ = [3, 4];

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.ABI.prototype.toObject = function (opt_includeInstance) {
        return proto.types.ABI.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.ABI} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.ABI.toObject = function (includeInstance, msg) {
        var obj = {
          version: googleProtobuf.Message.getFieldWithDefault(msg, 1, ""),
          language: googleProtobuf.Message.getFieldWithDefault(msg, 2, ""),
          functionsList: googleProtobuf.Message.toObjectList(msg.getFunctionsList(), proto.types.Function.toObject, includeInstance),
          stateVariablesList: googleProtobuf.Message.toObjectList(msg.getStateVariablesList(), proto.types.StateVar.toObject, includeInstance)
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.ABI}
     */


    proto.types.ABI.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.ABI();
      return proto.types.ABI.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.ABI} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.ABI}
     */


    proto.types.ABI.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {string} */
            reader.readString();
            msg.setVersion(value);
            break;

          case 2:
            var value =
            /** @type {string} */
            reader.readString();
            msg.setLanguage(value);
            break;

          case 3:
            var value = new proto.types.Function();
            reader.readMessage(value, proto.types.Function.deserializeBinaryFromReader);
            msg.addFunctions(value);
            break;

          case 4:
            var value = new proto.types.StateVar();
            reader.readMessage(value, proto.types.StateVar.deserializeBinaryFromReader);
            msg.addStateVariables(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.ABI.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.ABI.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.ABI} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.ABI.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getVersion();

      if (f.length > 0) {
        writer.writeString(1, f);
      }

      f = message.getLanguage();

      if (f.length > 0) {
        writer.writeString(2, f);
      }

      f = message.getFunctionsList();

      if (f.length > 0) {
        writer.writeRepeatedMessage(3, f, proto.types.Function.serializeBinaryToWriter);
      }

      f = message.getStateVariablesList();

      if (f.length > 0) {
        writer.writeRepeatedMessage(4, f, proto.types.StateVar.serializeBinaryToWriter);
      }
    };
    /**
     * optional string version = 1;
     * @return {string}
     */


    proto.types.ABI.prototype.getVersion = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, "")
      );
    };
    /** @param {string} value */


    proto.types.ABI.prototype.setVersion = function (value) {
      googleProtobuf.Message.setProto3StringField(this, 1, value);
    };
    /**
     * optional string language = 2;
     * @return {string}
     */


    proto.types.ABI.prototype.getLanguage = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.getFieldWithDefault(this, 2, "")
      );
    };
    /** @param {string} value */


    proto.types.ABI.prototype.setLanguage = function (value) {
      googleProtobuf.Message.setProto3StringField(this, 2, value);
    };
    /**
     * repeated Function functions = 3;
     * @return {!Array<!proto.types.Function>}
     */


    proto.types.ABI.prototype.getFunctionsList = function () {
      return (
        /** @type{!Array<!proto.types.Function>} */
        googleProtobuf.Message.getRepeatedWrapperField(this, proto.types.Function, 3)
      );
    };
    /** @param {!Array<!proto.types.Function>} value */


    proto.types.ABI.prototype.setFunctionsList = function (value) {
      googleProtobuf.Message.setRepeatedWrapperField(this, 3, value);
    };
    /**
     * @param {!proto.types.Function=} opt_value
     * @param {number=} opt_index
     * @return {!proto.types.Function}
     */


    proto.types.ABI.prototype.addFunctions = function (opt_value, opt_index) {
      return googleProtobuf.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.types.Function, opt_index);
    };

    proto.types.ABI.prototype.clearFunctionsList = function () {
      this.setFunctionsList([]);
    };
    /**
     * repeated StateVar state_variables = 4;
     * @return {!Array<!proto.types.StateVar>}
     */


    proto.types.ABI.prototype.getStateVariablesList = function () {
      return (
        /** @type{!Array<!proto.types.StateVar>} */
        googleProtobuf.Message.getRepeatedWrapperField(this, proto.types.StateVar, 4)
      );
    };
    /** @param {!Array<!proto.types.StateVar>} value */


    proto.types.ABI.prototype.setStateVariablesList = function (value) {
      googleProtobuf.Message.setRepeatedWrapperField(this, 4, value);
    };
    /**
     * @param {!proto.types.StateVar=} opt_value
     * @param {number=} opt_index
     * @return {!proto.types.StateVar}
     */


    proto.types.ABI.prototype.addStateVariables = function (opt_value, opt_index) {
      return googleProtobuf.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.types.StateVar, opt_index);
    };

    proto.types.ABI.prototype.clearStateVariablesList = function () {
      this.setStateVariablesList([]);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.Query = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.Query, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.Query.displayName = 'proto.types.Query';
    }

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.Query.prototype.toObject = function (opt_includeInstance) {
        return proto.types.Query.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.Query} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.Query.toObject = function (includeInstance, msg) {
        var obj = {
          contractaddress: msg.getContractaddress_asB64(),
          queryinfo: msg.getQueryinfo_asB64()
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.Query}
     */


    proto.types.Query.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.Query();
      return proto.types.Query.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.Query} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.Query}
     */


    proto.types.Query.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setContractaddress(value);
            break;

          case 2:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setQueryinfo(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.Query.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.Query.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.Query} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.Query.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getContractaddress_asU8();

      if (f.length > 0) {
        writer.writeBytes(1, f);
      }

      f = message.getQueryinfo_asU8();

      if (f.length > 0) {
        writer.writeBytes(2, f);
      }
    };
    /**
     * optional bytes contractAddress = 1;
     * @return {!(string|Uint8Array)}
     */


    proto.types.Query.prototype.getContractaddress = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, "")
      );
    };
    /**
     * optional bytes contractAddress = 1;
     * This is a type-conversion wrapper around `getContractaddress()`
     * @return {string}
     */


    proto.types.Query.prototype.getContractaddress_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getContractaddress())
      );
    };
    /**
     * optional bytes contractAddress = 1;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getContractaddress()`
     * @return {!Uint8Array}
     */


    proto.types.Query.prototype.getContractaddress_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getContractaddress())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.Query.prototype.setContractaddress = function (value) {
      googleProtobuf.Message.setProto3BytesField(this, 1, value);
    };
    /**
     * optional bytes queryinfo = 2;
     * @return {!(string|Uint8Array)}
     */


    proto.types.Query.prototype.getQueryinfo = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 2, "")
      );
    };
    /**
     * optional bytes queryinfo = 2;
     * This is a type-conversion wrapper around `getQueryinfo()`
     * @return {string}
     */


    proto.types.Query.prototype.getQueryinfo_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getQueryinfo())
      );
    };
    /**
     * optional bytes queryinfo = 2;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getQueryinfo()`
     * @return {!Uint8Array}
     */


    proto.types.Query.prototype.getQueryinfo_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getQueryinfo())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.Query.prototype.setQueryinfo = function (value) {
      googleProtobuf.Message.setProto3BytesField(this, 2, value);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.StateQuery = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, proto.types.StateQuery.repeatedFields_, null);
    };

    goog.inherits(proto.types.StateQuery, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.StateQuery.displayName = 'proto.types.StateQuery';
    }
    /**
     * List of repeated fields within this message type.
     * @private {!Array<number>}
     * @const
     */


    proto.types.StateQuery.repeatedFields_ = [5];

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.StateQuery.prototype.toObject = function (opt_includeInstance) {
        return proto.types.StateQuery.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.StateQuery} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.StateQuery.toObject = function (includeInstance, msg) {
        var obj = {
          contractaddress: msg.getContractaddress_asB64(),
          root: msg.getRoot_asB64(),
          compressed: googleProtobuf.Message.getFieldWithDefault(msg, 4, false),
          storagekeysList: msg.getStoragekeysList_asB64()
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.StateQuery}
     */


    proto.types.StateQuery.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.StateQuery();
      return proto.types.StateQuery.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.StateQuery} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.StateQuery}
     */


    proto.types.StateQuery.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setContractaddress(value);
            break;

          case 3:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setRoot(value);
            break;

          case 4:
            var value =
            /** @type {boolean} */
            reader.readBool();
            msg.setCompressed(value);
            break;

          case 5:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.addStoragekeys(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.StateQuery.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.StateQuery.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.StateQuery} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.StateQuery.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getContractaddress_asU8();

      if (f.length > 0) {
        writer.writeBytes(1, f);
      }

      f = message.getRoot_asU8();

      if (f.length > 0) {
        writer.writeBytes(3, f);
      }

      f = message.getCompressed();

      if (f) {
        writer.writeBool(4, f);
      }

      f = message.getStoragekeysList_asU8();

      if (f.length > 0) {
        writer.writeRepeatedBytes(5, f);
      }
    };
    /**
     * optional bytes contractAddress = 1;
     * @return {!(string|Uint8Array)}
     */


    proto.types.StateQuery.prototype.getContractaddress = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, "")
      );
    };
    /**
     * optional bytes contractAddress = 1;
     * This is a type-conversion wrapper around `getContractaddress()`
     * @return {string}
     */


    proto.types.StateQuery.prototype.getContractaddress_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getContractaddress())
      );
    };
    /**
     * optional bytes contractAddress = 1;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getContractaddress()`
     * @return {!Uint8Array}
     */


    proto.types.StateQuery.prototype.getContractaddress_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getContractaddress())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.StateQuery.prototype.setContractaddress = function (value) {
      googleProtobuf.Message.setProto3BytesField(this, 1, value);
    };
    /**
     * optional bytes root = 3;
     * @return {!(string|Uint8Array)}
     */


    proto.types.StateQuery.prototype.getRoot = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 3, "")
      );
    };
    /**
     * optional bytes root = 3;
     * This is a type-conversion wrapper around `getRoot()`
     * @return {string}
     */


    proto.types.StateQuery.prototype.getRoot_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getRoot())
      );
    };
    /**
     * optional bytes root = 3;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getRoot()`
     * @return {!Uint8Array}
     */


    proto.types.StateQuery.prototype.getRoot_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getRoot())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.StateQuery.prototype.setRoot = function (value) {
      googleProtobuf.Message.setProto3BytesField(this, 3, value);
    };
    /**
     * optional bool compressed = 4;
     * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
     * You should avoid comparisons like {@code val === true/false} in those cases.
     * @return {boolean}
     */


    proto.types.StateQuery.prototype.getCompressed = function () {
      return (
        /** @type {boolean} */
        googleProtobuf.Message.getFieldWithDefault(this, 4, false)
      );
    };
    /** @param {boolean} value */


    proto.types.StateQuery.prototype.setCompressed = function (value) {
      googleProtobuf.Message.setProto3BooleanField(this, 4, value);
    };
    /**
     * repeated bytes storageKeys = 5;
     * @return {!(Array<!Uint8Array>|Array<string>)}
     */


    proto.types.StateQuery.prototype.getStoragekeysList = function () {
      return (
        /** @type {!(Array<!Uint8Array>|Array<string>)} */
        googleProtobuf.Message.getRepeatedField(this, 5)
      );
    };
    /**
     * repeated bytes storageKeys = 5;
     * This is a type-conversion wrapper around `getStoragekeysList()`
     * @return {!Array<string>}
     */


    proto.types.StateQuery.prototype.getStoragekeysList_asB64 = function () {
      return (
        /** @type {!Array<string>} */
        googleProtobuf.Message.bytesListAsB64(this.getStoragekeysList())
      );
    };
    /**
     * repeated bytes storageKeys = 5;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getStoragekeysList()`
     * @return {!Array<!Uint8Array>}
     */


    proto.types.StateQuery.prototype.getStoragekeysList_asU8 = function () {
      return (
        /** @type {!Array<!Uint8Array>} */
        googleProtobuf.Message.bytesListAsU8(this.getStoragekeysList())
      );
    };
    /** @param {!(Array<!Uint8Array>|Array<string>)} value */


    proto.types.StateQuery.prototype.setStoragekeysList = function (value) {
      googleProtobuf.Message.setField(this, 5, value || []);
    };
    /**
     * @param {!(string|Uint8Array)} value
     * @param {number=} opt_index
     */


    proto.types.StateQuery.prototype.addStoragekeys = function (value, opt_index) {
      googleProtobuf.Message.addToRepeatedField(this, 5, value, opt_index);
    };

    proto.types.StateQuery.prototype.clearStoragekeysList = function () {
      this.setStoragekeysList([]);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.FilterInfo = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.FilterInfo, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.FilterInfo.displayName = 'proto.types.FilterInfo';
    }

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.FilterInfo.prototype.toObject = function (opt_includeInstance) {
        return proto.types.FilterInfo.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.FilterInfo} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.FilterInfo.toObject = function (includeInstance, msg) {
        var obj = {
          contractaddress: msg.getContractaddress_asB64(),
          eventname: googleProtobuf.Message.getFieldWithDefault(msg, 2, ""),
          blockfrom: googleProtobuf.Message.getFieldWithDefault(msg, 3, 0),
          blockto: googleProtobuf.Message.getFieldWithDefault(msg, 4, 0),
          desc: googleProtobuf.Message.getFieldWithDefault(msg, 5, false),
          argfilter: msg.getArgfilter_asB64(),
          recentblockcnt: googleProtobuf.Message.getFieldWithDefault(msg, 7, 0)
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.FilterInfo}
     */


    proto.types.FilterInfo.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.FilterInfo();
      return proto.types.FilterInfo.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.FilterInfo} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.FilterInfo}
     */


    proto.types.FilterInfo.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setContractaddress(value);
            break;

          case 2:
            var value =
            /** @type {string} */
            reader.readString();
            msg.setEventname(value);
            break;

          case 3:
            var value =
            /** @type {number} */
            reader.readUint64();
            msg.setBlockfrom(value);
            break;

          case 4:
            var value =
            /** @type {number} */
            reader.readUint64();
            msg.setBlockto(value);
            break;

          case 5:
            var value =
            /** @type {boolean} */
            reader.readBool();
            msg.setDesc(value);
            break;

          case 6:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setArgfilter(value);
            break;

          case 7:
            var value =
            /** @type {number} */
            reader.readInt32();
            msg.setRecentblockcnt(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.FilterInfo.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.FilterInfo.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.FilterInfo} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.FilterInfo.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getContractaddress_asU8();

      if (f.length > 0) {
        writer.writeBytes(1, f);
      }

      f = message.getEventname();

      if (f.length > 0) {
        writer.writeString(2, f);
      }

      f = message.getBlockfrom();

      if (f !== 0) {
        writer.writeUint64(3, f);
      }

      f = message.getBlockto();

      if (f !== 0) {
        writer.writeUint64(4, f);
      }

      f = message.getDesc();

      if (f) {
        writer.writeBool(5, f);
      }

      f = message.getArgfilter_asU8();

      if (f.length > 0) {
        writer.writeBytes(6, f);
      }

      f = message.getRecentblockcnt();

      if (f !== 0) {
        writer.writeInt32(7, f);
      }
    };
    /**
     * optional bytes contractAddress = 1;
     * @return {!(string|Uint8Array)}
     */


    proto.types.FilterInfo.prototype.getContractaddress = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, "")
      );
    };
    /**
     * optional bytes contractAddress = 1;
     * This is a type-conversion wrapper around `getContractaddress()`
     * @return {string}
     */


    proto.types.FilterInfo.prototype.getContractaddress_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getContractaddress())
      );
    };
    /**
     * optional bytes contractAddress = 1;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getContractaddress()`
     * @return {!Uint8Array}
     */


    proto.types.FilterInfo.prototype.getContractaddress_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getContractaddress())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.FilterInfo.prototype.setContractaddress = function (value) {
      googleProtobuf.Message.setProto3BytesField(this, 1, value);
    };
    /**
     * optional string eventName = 2;
     * @return {string}
     */


    proto.types.FilterInfo.prototype.getEventname = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.getFieldWithDefault(this, 2, "")
      );
    };
    /** @param {string} value */


    proto.types.FilterInfo.prototype.setEventname = function (value) {
      googleProtobuf.Message.setProto3StringField(this, 2, value);
    };
    /**
     * optional uint64 blockfrom = 3;
     * @return {number}
     */


    proto.types.FilterInfo.prototype.getBlockfrom = function () {
      return (
        /** @type {number} */
        googleProtobuf.Message.getFieldWithDefault(this, 3, 0)
      );
    };
    /** @param {number} value */


    proto.types.FilterInfo.prototype.setBlockfrom = function (value) {
      googleProtobuf.Message.setProto3IntField(this, 3, value);
    };
    /**
     * optional uint64 blockto = 4;
     * @return {number}
     */


    proto.types.FilterInfo.prototype.getBlockto = function () {
      return (
        /** @type {number} */
        googleProtobuf.Message.getFieldWithDefault(this, 4, 0)
      );
    };
    /** @param {number} value */


    proto.types.FilterInfo.prototype.setBlockto = function (value) {
      googleProtobuf.Message.setProto3IntField(this, 4, value);
    };
    /**
     * optional bool desc = 5;
     * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
     * You should avoid comparisons like {@code val === true/false} in those cases.
     * @return {boolean}
     */


    proto.types.FilterInfo.prototype.getDesc = function () {
      return (
        /** @type {boolean} */
        googleProtobuf.Message.getFieldWithDefault(this, 5, false)
      );
    };
    /** @param {boolean} value */


    proto.types.FilterInfo.prototype.setDesc = function (value) {
      googleProtobuf.Message.setProto3BooleanField(this, 5, value);
    };
    /**
     * optional bytes argFilter = 6;
     * @return {!(string|Uint8Array)}
     */


    proto.types.FilterInfo.prototype.getArgfilter = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 6, "")
      );
    };
    /**
     * optional bytes argFilter = 6;
     * This is a type-conversion wrapper around `getArgfilter()`
     * @return {string}
     */


    proto.types.FilterInfo.prototype.getArgfilter_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getArgfilter())
      );
    };
    /**
     * optional bytes argFilter = 6;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getArgfilter()`
     * @return {!Uint8Array}
     */


    proto.types.FilterInfo.prototype.getArgfilter_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getArgfilter())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.FilterInfo.prototype.setArgfilter = function (value) {
      googleProtobuf.Message.setProto3BytesField(this, 6, value);
    };
    /**
     * optional int32 recentBlockCnt = 7;
     * @return {number}
     */


    proto.types.FilterInfo.prototype.getRecentblockcnt = function () {
      return (
        /** @type {number} */
        googleProtobuf.Message.getFieldWithDefault(this, 7, 0)
      );
    };
    /** @param {number} value */


    proto.types.FilterInfo.prototype.setRecentblockcnt = function (value) {
      googleProtobuf.Message.setProto3IntField(this, 7, value);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.Proposal = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.Proposal, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.Proposal.displayName = 'proto.types.Proposal';
    }

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.Proposal.prototype.toObject = function (opt_includeInstance) {
        return proto.types.Proposal.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.Proposal} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.Proposal.toObject = function (includeInstance, msg) {
        var obj = {
          id: googleProtobuf.Message.getFieldWithDefault(msg, 1, ""),
          description: googleProtobuf.Message.getFieldWithDefault(msg, 3, ""),
          multiplechoice: googleProtobuf.Message.getFieldWithDefault(msg, 6, 0)
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.Proposal}
     */


    proto.types.Proposal.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.Proposal();
      return proto.types.Proposal.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.Proposal} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.Proposal}
     */


    proto.types.Proposal.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {string} */
            reader.readString();
            msg.setId(value);
            break;

          case 3:
            var value =
            /** @type {string} */
            reader.readString();
            msg.setDescription(value);
            break;

          case 6:
            var value =
            /** @type {number} */
            reader.readUint32();
            msg.setMultiplechoice(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.Proposal.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.Proposal.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.Proposal} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.Proposal.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getId();

      if (f.length > 0) {
        writer.writeString(1, f);
      }

      f = message.getDescription();

      if (f.length > 0) {
        writer.writeString(3, f);
      }

      f = message.getMultiplechoice();

      if (f !== 0) {
        writer.writeUint32(6, f);
      }
    };
    /**
     * optional string id = 1;
     * @return {string}
     */


    proto.types.Proposal.prototype.getId = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, "")
      );
    };
    /** @param {string} value */


    proto.types.Proposal.prototype.setId = function (value) {
      googleProtobuf.Message.setProto3StringField(this, 1, value);
    };
    /**
     * optional string description = 3;
     * @return {string}
     */


    proto.types.Proposal.prototype.getDescription = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.getFieldWithDefault(this, 3, "")
      );
    };
    /** @param {string} value */


    proto.types.Proposal.prototype.setDescription = function (value) {
      googleProtobuf.Message.setProto3StringField(this, 3, value);
    };
    /**
     * optional uint32 multipleChoice = 6;
     * @return {number}
     */


    proto.types.Proposal.prototype.getMultiplechoice = function () {
      return (
        /** @type {number} */
        googleProtobuf.Message.getFieldWithDefault(this, 6, 0)
      );
    };
    /** @param {number} value */


    proto.types.Proposal.prototype.setMultiplechoice = function (value) {
      googleProtobuf.Message.setProto3IntField(this, 6, value);
    };
    /**
     * @enum {number}
     */


    proto.types.TxType = {
      NORMAL: 0,
      GOVERNANCE: 1,
      REDEPLOY: 2,
      FEEDELEGATION: 3,
      TRANSFER: 4,
      CALL: 5,
      DEPLOY: 6
    };
    goog.object.extend(exports, proto.types);
  });
  var blockchain_pb_1 = blockchain_pb.TxList;
  var blockchain_pb_2 = blockchain_pb.TxBody;
  var blockchain_pb_3 = blockchain_pb.Tx;
  var blockchain_pb_4 = blockchain_pb.TxType;
  var blockchain_pb_5 = blockchain_pb.Block;
  var blockchain_pb_6 = blockchain_pb.Query;
  var blockchain_pb_7 = blockchain_pb.StateQuery;
  var blockchain_pb_8 = blockchain_pb.FilterInfo;

  var account_pb = createCommonjsModule(function (module, exports) {
    /**
     * @fileoverview
     * @enhanceable
     * @suppress {messageConventions} JS Compiler reports an error if a variable or
     *     field starts with 'MSG_' and isn't a translatable message.
     * @public
     */
    // GENERATED CODE -- DO NOT EDIT!
    var goog = googleProtobuf;
    var global = Function('return this')();
    goog.exportSymbol('proto.types.Account', null, global);
    goog.exportSymbol('proto.types.AccountList', null, global);
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */

    proto.types.Account = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.Account, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.Account.displayName = 'proto.types.Account';
    }

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.Account.prototype.toObject = function (opt_includeInstance) {
        return proto.types.Account.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.Account} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.Account.toObject = function (includeInstance, msg) {
        var obj = {
          address: msg.getAddress_asB64()
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.Account}
     */


    proto.types.Account.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.Account();
      return proto.types.Account.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.Account} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.Account}
     */


    proto.types.Account.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setAddress(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.Account.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.Account.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.Account} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.Account.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getAddress_asU8();

      if (f.length > 0) {
        writer.writeBytes(1, f);
      }
    };
    /**
     * optional bytes address = 1;
     * @return {!(string|Uint8Array)}
     */


    proto.types.Account.prototype.getAddress = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, "")
      );
    };
    /**
     * optional bytes address = 1;
     * This is a type-conversion wrapper around `getAddress()`
     * @return {string}
     */


    proto.types.Account.prototype.getAddress_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getAddress())
      );
    };
    /**
     * optional bytes address = 1;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getAddress()`
     * @return {!Uint8Array}
     */


    proto.types.Account.prototype.getAddress_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getAddress())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.Account.prototype.setAddress = function (value) {
      googleProtobuf.Message.setProto3BytesField(this, 1, value);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.AccountList = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, proto.types.AccountList.repeatedFields_, null);
    };

    goog.inherits(proto.types.AccountList, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.AccountList.displayName = 'proto.types.AccountList';
    }
    /**
     * List of repeated fields within this message type.
     * @private {!Array<number>}
     * @const
     */


    proto.types.AccountList.repeatedFields_ = [1];

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.AccountList.prototype.toObject = function (opt_includeInstance) {
        return proto.types.AccountList.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.AccountList} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.AccountList.toObject = function (includeInstance, msg) {
        var obj = {
          accountsList: googleProtobuf.Message.toObjectList(msg.getAccountsList(), proto.types.Account.toObject, includeInstance)
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.AccountList}
     */


    proto.types.AccountList.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.AccountList();
      return proto.types.AccountList.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.AccountList} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.AccountList}
     */


    proto.types.AccountList.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value = new proto.types.Account();
            reader.readMessage(value, proto.types.Account.deserializeBinaryFromReader);
            msg.addAccounts(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.AccountList.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.AccountList.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.AccountList} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.AccountList.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getAccountsList();

      if (f.length > 0) {
        writer.writeRepeatedMessage(1, f, proto.types.Account.serializeBinaryToWriter);
      }
    };
    /**
     * repeated Account accounts = 1;
     * @return {!Array<!proto.types.Account>}
     */


    proto.types.AccountList.prototype.getAccountsList = function () {
      return (
        /** @type{!Array<!proto.types.Account>} */
        googleProtobuf.Message.getRepeatedWrapperField(this, proto.types.Account, 1)
      );
    };
    /** @param {!Array<!proto.types.Account>} value */


    proto.types.AccountList.prototype.setAccountsList = function (value) {
      googleProtobuf.Message.setRepeatedWrapperField(this, 1, value);
    };
    /**
     * @param {!proto.types.Account=} opt_value
     * @param {number=} opt_index
     * @return {!proto.types.Account}
     */


    proto.types.AccountList.prototype.addAccounts = function (opt_value, opt_index) {
      return googleProtobuf.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.types.Account, opt_index);
    };

    proto.types.AccountList.prototype.clearAccountsList = function () {
      this.setAccountsList([]);
    };

    goog.object.extend(exports, proto.types);
  });
  var account_pb_1 = account_pb.Account;

  var node_pb = createCommonjsModule(function (module, exports) {
    /**
     * @fileoverview
     * @enhanceable
     * @suppress {messageConventions} JS Compiler reports an error if a variable or
     *     field starts with 'MSG_' and isn't a translatable message.
     * @public
     */
    // GENERATED CODE -- DO NOT EDIT!
    var goog = googleProtobuf;
    var global = Function('return this')();
    goog.exportSymbol('proto.types.AgentCertificate', null, global);
    goog.exportSymbol('proto.types.PeerAddress', null, global);
    goog.exportSymbol('proto.types.PeerRole', null, global);
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */

    proto.types.PeerAddress = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, proto.types.PeerAddress.repeatedFields_, null);
    };

    goog.inherits(proto.types.PeerAddress, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.PeerAddress.displayName = 'proto.types.PeerAddress';
    }
    /**
     * List of repeated fields within this message type.
     * @private {!Array<number>}
     * @const
     */


    proto.types.PeerAddress.repeatedFields_ = [6, 7];

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.PeerAddress.prototype.toObject = function (opt_includeInstance) {
        return proto.types.PeerAddress.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.PeerAddress} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.PeerAddress.toObject = function (includeInstance, msg) {
        var obj = {
          address: googleProtobuf.Message.getFieldWithDefault(msg, 1, ""),
          port: googleProtobuf.Message.getFieldWithDefault(msg, 2, 0),
          peerid: msg.getPeerid_asB64(),
          role: googleProtobuf.Message.getFieldWithDefault(msg, 4, 0),
          version: googleProtobuf.Message.getFieldWithDefault(msg, 5, ""),
          addressesList: googleProtobuf.Message.getRepeatedField(msg, 6),
          produceridsList: msg.getProduceridsList_asB64()
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.PeerAddress}
     */


    proto.types.PeerAddress.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.PeerAddress();
      return proto.types.PeerAddress.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.PeerAddress} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.PeerAddress}
     */


    proto.types.PeerAddress.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {string} */
            reader.readString();
            msg.setAddress(value);
            break;

          case 2:
            var value =
            /** @type {number} */
            reader.readUint32();
            msg.setPort(value);
            break;

          case 3:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setPeerid(value);
            break;

          case 4:
            var value =
            /** @type {!proto.types.PeerRole} */
            reader.readEnum();
            msg.setRole(value);
            break;

          case 5:
            var value =
            /** @type {string} */
            reader.readString();
            msg.setVersion(value);
            break;

          case 6:
            var value =
            /** @type {string} */
            reader.readString();
            msg.addAddresses(value);
            break;

          case 7:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.addProducerids(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.PeerAddress.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.PeerAddress.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.PeerAddress} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.PeerAddress.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getAddress();

      if (f.length > 0) {
        writer.writeString(1, f);
      }

      f = message.getPort();

      if (f !== 0) {
        writer.writeUint32(2, f);
      }

      f = message.getPeerid_asU8();

      if (f.length > 0) {
        writer.writeBytes(3, f);
      }

      f = message.getRole();

      if (f !== 0.0) {
        writer.writeEnum(4, f);
      }

      f = message.getVersion();

      if (f.length > 0) {
        writer.writeString(5, f);
      }

      f = message.getAddressesList();

      if (f.length > 0) {
        writer.writeRepeatedString(6, f);
      }

      f = message.getProduceridsList_asU8();

      if (f.length > 0) {
        writer.writeRepeatedBytes(7, f);
      }
    };
    /**
     * optional string address = 1;
     * @return {string}
     */


    proto.types.PeerAddress.prototype.getAddress = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, "")
      );
    };
    /** @param {string} value */


    proto.types.PeerAddress.prototype.setAddress = function (value) {
      googleProtobuf.Message.setProto3StringField(this, 1, value);
    };
    /**
     * optional uint32 port = 2;
     * @return {number}
     */


    proto.types.PeerAddress.prototype.getPort = function () {
      return (
        /** @type {number} */
        googleProtobuf.Message.getFieldWithDefault(this, 2, 0)
      );
    };
    /** @param {number} value */


    proto.types.PeerAddress.prototype.setPort = function (value) {
      googleProtobuf.Message.setProto3IntField(this, 2, value);
    };
    /**
     * optional bytes peerID = 3;
     * @return {!(string|Uint8Array)}
     */


    proto.types.PeerAddress.prototype.getPeerid = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 3, "")
      );
    };
    /**
     * optional bytes peerID = 3;
     * This is a type-conversion wrapper around `getPeerid()`
     * @return {string}
     */


    proto.types.PeerAddress.prototype.getPeerid_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getPeerid())
      );
    };
    /**
     * optional bytes peerID = 3;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getPeerid()`
     * @return {!Uint8Array}
     */


    proto.types.PeerAddress.prototype.getPeerid_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getPeerid())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.PeerAddress.prototype.setPeerid = function (value) {
      googleProtobuf.Message.setProto3BytesField(this, 3, value);
    };
    /**
     * optional PeerRole role = 4;
     * @return {!proto.types.PeerRole}
     */


    proto.types.PeerAddress.prototype.getRole = function () {
      return (
        /** @type {!proto.types.PeerRole} */
        googleProtobuf.Message.getFieldWithDefault(this, 4, 0)
      );
    };
    /** @param {!proto.types.PeerRole} value */


    proto.types.PeerAddress.prototype.setRole = function (value) {
      googleProtobuf.Message.setProto3EnumField(this, 4, value);
    };
    /**
     * optional string version = 5;
     * @return {string}
     */


    proto.types.PeerAddress.prototype.getVersion = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.getFieldWithDefault(this, 5, "")
      );
    };
    /** @param {string} value */


    proto.types.PeerAddress.prototype.setVersion = function (value) {
      googleProtobuf.Message.setProto3StringField(this, 5, value);
    };
    /**
     * repeated string addresses = 6;
     * @return {!Array<string>}
     */


    proto.types.PeerAddress.prototype.getAddressesList = function () {
      return (
        /** @type {!Array<string>} */
        googleProtobuf.Message.getRepeatedField(this, 6)
      );
    };
    /** @param {!Array<string>} value */


    proto.types.PeerAddress.prototype.setAddressesList = function (value) {
      googleProtobuf.Message.setField(this, 6, value || []);
    };
    /**
     * @param {string} value
     * @param {number=} opt_index
     */


    proto.types.PeerAddress.prototype.addAddresses = function (value, opt_index) {
      googleProtobuf.Message.addToRepeatedField(this, 6, value, opt_index);
    };

    proto.types.PeerAddress.prototype.clearAddressesList = function () {
      this.setAddressesList([]);
    };
    /**
     * repeated bytes producerIDs = 7;
     * @return {!(Array<!Uint8Array>|Array<string>)}
     */


    proto.types.PeerAddress.prototype.getProduceridsList = function () {
      return (
        /** @type {!(Array<!Uint8Array>|Array<string>)} */
        googleProtobuf.Message.getRepeatedField(this, 7)
      );
    };
    /**
     * repeated bytes producerIDs = 7;
     * This is a type-conversion wrapper around `getProduceridsList()`
     * @return {!Array<string>}
     */


    proto.types.PeerAddress.prototype.getProduceridsList_asB64 = function () {
      return (
        /** @type {!Array<string>} */
        googleProtobuf.Message.bytesListAsB64(this.getProduceridsList())
      );
    };
    /**
     * repeated bytes producerIDs = 7;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getProduceridsList()`
     * @return {!Array<!Uint8Array>}
     */


    proto.types.PeerAddress.prototype.getProduceridsList_asU8 = function () {
      return (
        /** @type {!Array<!Uint8Array>} */
        googleProtobuf.Message.bytesListAsU8(this.getProduceridsList())
      );
    };
    /** @param {!(Array<!Uint8Array>|Array<string>)} value */


    proto.types.PeerAddress.prototype.setProduceridsList = function (value) {
      googleProtobuf.Message.setField(this, 7, value || []);
    };
    /**
     * @param {!(string|Uint8Array)} value
     * @param {number=} opt_index
     */


    proto.types.PeerAddress.prototype.addProducerids = function (value, opt_index) {
      googleProtobuf.Message.addToRepeatedField(this, 7, value, opt_index);
    };

    proto.types.PeerAddress.prototype.clearProduceridsList = function () {
      this.setProduceridsList([]);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.AgentCertificate = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, proto.types.AgentCertificate.repeatedFields_, null);
    };

    goog.inherits(proto.types.AgentCertificate, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.AgentCertificate.displayName = 'proto.types.AgentCertificate';
    }
    /**
     * List of repeated fields within this message type.
     * @private {!Array<number>}
     * @const
     */


    proto.types.AgentCertificate.repeatedFields_ = [7];

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.AgentCertificate.prototype.toObject = function (opt_includeInstance) {
        return proto.types.AgentCertificate.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.AgentCertificate} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.AgentCertificate.toObject = function (includeInstance, msg) {
        var obj = {
          certversion: googleProtobuf.Message.getFieldWithDefault(msg, 1, 0),
          bpid: msg.getBpid_asB64(),
          bppubkey: msg.getBppubkey_asB64(),
          createtime: googleProtobuf.Message.getFieldWithDefault(msg, 4, 0),
          expiretime: googleProtobuf.Message.getFieldWithDefault(msg, 5, 0),
          agentid: msg.getAgentid_asB64(),
          agentaddressList: msg.getAgentaddressList_asB64(),
          signature: msg.getSignature_asB64()
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.AgentCertificate}
     */


    proto.types.AgentCertificate.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.AgentCertificate();
      return proto.types.AgentCertificate.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.AgentCertificate} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.AgentCertificate}
     */


    proto.types.AgentCertificate.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {number} */
            reader.readUint32();
            msg.setCertversion(value);
            break;

          case 2:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setBpid(value);
            break;

          case 3:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setBppubkey(value);
            break;

          case 4:
            var value =
            /** @type {number} */
            reader.readInt64();
            msg.setCreatetime(value);
            break;

          case 5:
            var value =
            /** @type {number} */
            reader.readInt64();
            msg.setExpiretime(value);
            break;

          case 6:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setAgentid(value);
            break;

          case 7:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.addAgentaddress(value);
            break;

          case 8:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setSignature(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.AgentCertificate.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.AgentCertificate.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.AgentCertificate} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.AgentCertificate.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getCertversion();

      if (f !== 0) {
        writer.writeUint32(1, f);
      }

      f = message.getBpid_asU8();

      if (f.length > 0) {
        writer.writeBytes(2, f);
      }

      f = message.getBppubkey_asU8();

      if (f.length > 0) {
        writer.writeBytes(3, f);
      }

      f = message.getCreatetime();

      if (f !== 0) {
        writer.writeInt64(4, f);
      }

      f = message.getExpiretime();

      if (f !== 0) {
        writer.writeInt64(5, f);
      }

      f = message.getAgentid_asU8();

      if (f.length > 0) {
        writer.writeBytes(6, f);
      }

      f = message.getAgentaddressList_asU8();

      if (f.length > 0) {
        writer.writeRepeatedBytes(7, f);
      }

      f = message.getSignature_asU8();

      if (f.length > 0) {
        writer.writeBytes(8, f);
      }
    };
    /**
     * optional uint32 certVersion = 1;
     * @return {number}
     */


    proto.types.AgentCertificate.prototype.getCertversion = function () {
      return (
        /** @type {number} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, 0)
      );
    };
    /** @param {number} value */


    proto.types.AgentCertificate.prototype.setCertversion = function (value) {
      googleProtobuf.Message.setProto3IntField(this, 1, value);
    };
    /**
     * optional bytes BPID = 2;
     * @return {!(string|Uint8Array)}
     */


    proto.types.AgentCertificate.prototype.getBpid = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 2, "")
      );
    };
    /**
     * optional bytes BPID = 2;
     * This is a type-conversion wrapper around `getBpid()`
     * @return {string}
     */


    proto.types.AgentCertificate.prototype.getBpid_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getBpid())
      );
    };
    /**
     * optional bytes BPID = 2;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getBpid()`
     * @return {!Uint8Array}
     */


    proto.types.AgentCertificate.prototype.getBpid_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getBpid())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.AgentCertificate.prototype.setBpid = function (value) {
      googleProtobuf.Message.setProto3BytesField(this, 2, value);
    };
    /**
     * optional bytes BPPubKey = 3;
     * @return {!(string|Uint8Array)}
     */


    proto.types.AgentCertificate.prototype.getBppubkey = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 3, "")
      );
    };
    /**
     * optional bytes BPPubKey = 3;
     * This is a type-conversion wrapper around `getBppubkey()`
     * @return {string}
     */


    proto.types.AgentCertificate.prototype.getBppubkey_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getBppubkey())
      );
    };
    /**
     * optional bytes BPPubKey = 3;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getBppubkey()`
     * @return {!Uint8Array}
     */


    proto.types.AgentCertificate.prototype.getBppubkey_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getBppubkey())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.AgentCertificate.prototype.setBppubkey = function (value) {
      googleProtobuf.Message.setProto3BytesField(this, 3, value);
    };
    /**
     * optional int64 createTime = 4;
     * @return {number}
     */


    proto.types.AgentCertificate.prototype.getCreatetime = function () {
      return (
        /** @type {number} */
        googleProtobuf.Message.getFieldWithDefault(this, 4, 0)
      );
    };
    /** @param {number} value */


    proto.types.AgentCertificate.prototype.setCreatetime = function (value) {
      googleProtobuf.Message.setProto3IntField(this, 4, value);
    };
    /**
     * optional int64 expireTime = 5;
     * @return {number}
     */


    proto.types.AgentCertificate.prototype.getExpiretime = function () {
      return (
        /** @type {number} */
        googleProtobuf.Message.getFieldWithDefault(this, 5, 0)
      );
    };
    /** @param {number} value */


    proto.types.AgentCertificate.prototype.setExpiretime = function (value) {
      googleProtobuf.Message.setProto3IntField(this, 5, value);
    };
    /**
     * optional bytes agentID = 6;
     * @return {!(string|Uint8Array)}
     */


    proto.types.AgentCertificate.prototype.getAgentid = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 6, "")
      );
    };
    /**
     * optional bytes agentID = 6;
     * This is a type-conversion wrapper around `getAgentid()`
     * @return {string}
     */


    proto.types.AgentCertificate.prototype.getAgentid_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getAgentid())
      );
    };
    /**
     * optional bytes agentID = 6;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getAgentid()`
     * @return {!Uint8Array}
     */


    proto.types.AgentCertificate.prototype.getAgentid_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getAgentid())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.AgentCertificate.prototype.setAgentid = function (value) {
      googleProtobuf.Message.setProto3BytesField(this, 6, value);
    };
    /**
     * repeated bytes AgentAddress = 7;
     * @return {!(Array<!Uint8Array>|Array<string>)}
     */


    proto.types.AgentCertificate.prototype.getAgentaddressList = function () {
      return (
        /** @type {!(Array<!Uint8Array>|Array<string>)} */
        googleProtobuf.Message.getRepeatedField(this, 7)
      );
    };
    /**
     * repeated bytes AgentAddress = 7;
     * This is a type-conversion wrapper around `getAgentaddressList()`
     * @return {!Array<string>}
     */


    proto.types.AgentCertificate.prototype.getAgentaddressList_asB64 = function () {
      return (
        /** @type {!Array<string>} */
        googleProtobuf.Message.bytesListAsB64(this.getAgentaddressList())
      );
    };
    /**
     * repeated bytes AgentAddress = 7;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getAgentaddressList()`
     * @return {!Array<!Uint8Array>}
     */


    proto.types.AgentCertificate.prototype.getAgentaddressList_asU8 = function () {
      return (
        /** @type {!Array<!Uint8Array>} */
        googleProtobuf.Message.bytesListAsU8(this.getAgentaddressList())
      );
    };
    /** @param {!(Array<!Uint8Array>|Array<string>)} value */


    proto.types.AgentCertificate.prototype.setAgentaddressList = function (value) {
      googleProtobuf.Message.setField(this, 7, value || []);
    };
    /**
     * @param {!(string|Uint8Array)} value
     * @param {number=} opt_index
     */


    proto.types.AgentCertificate.prototype.addAgentaddress = function (value, opt_index) {
      googleProtobuf.Message.addToRepeatedField(this, 7, value, opt_index);
    };

    proto.types.AgentCertificate.prototype.clearAgentaddressList = function () {
      this.setAgentaddressList([]);
    };
    /**
     * optional bytes signature = 8;
     * @return {!(string|Uint8Array)}
     */


    proto.types.AgentCertificate.prototype.getSignature = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 8, "")
      );
    };
    /**
     * optional bytes signature = 8;
     * This is a type-conversion wrapper around `getSignature()`
     * @return {string}
     */


    proto.types.AgentCertificate.prototype.getSignature_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getSignature())
      );
    };
    /**
     * optional bytes signature = 8;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getSignature()`
     * @return {!Uint8Array}
     */


    proto.types.AgentCertificate.prototype.getSignature_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getSignature())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.AgentCertificate.prototype.setSignature = function (value) {
      googleProtobuf.Message.setProto3BytesField(this, 8, value);
    };
    /**
     * @enum {number}
     */


    proto.types.PeerRole = {
      LEGACYVERSION: 0,
      PRODUCER: 1,
      WATCHER: 2,
      AGENT: 3
    };
    goog.object.extend(exports, proto.types);
  });
  var node_pb_1 = node_pb.PeerRole;

  var p2p_pb = createCommonjsModule(function (module, exports) {
    /**
     * @fileoverview
     * @enhanceable
     * @suppress {messageConventions} JS Compiler reports an error if a variable or
     *     field starts with 'MSG_' and isn't a translatable message.
     * @public
     */
    // GENERATED CODE -- DO NOT EDIT!
    var goog = googleProtobuf;
    var global = Function('return this')();
    goog.object.extend(proto, blockchain_pb);
    goog.object.extend(proto, node_pb);
    goog.exportSymbol('proto.types.AddressesRequest', null, global);
    goog.exportSymbol('proto.types.AddressesResponse', null, global);
    goog.exportSymbol('proto.types.BlockProducedNotice', null, global);
    goog.exportSymbol('proto.types.CertificateRenewedNotice', null, global);
    goog.exportSymbol('proto.types.GetAncestorRequest', null, global);
    goog.exportSymbol('proto.types.GetAncestorResponse', null, global);
    goog.exportSymbol('proto.types.GetBlockHeadersRequest', null, global);
    goog.exportSymbol('proto.types.GetBlockHeadersResponse', null, global);
    goog.exportSymbol('proto.types.GetBlockRequest', null, global);
    goog.exportSymbol('proto.types.GetBlockResponse', null, global);
    goog.exportSymbol('proto.types.GetHashByNo', null, global);
    goog.exportSymbol('proto.types.GetHashByNoResponse', null, global);
    goog.exportSymbol('proto.types.GetHashesRequest', null, global);
    goog.exportSymbol('proto.types.GetHashesResponse', null, global);
    goog.exportSymbol('proto.types.GetMissingRequest', null, global);
    goog.exportSymbol('proto.types.GetTransactionsRequest', null, global);
    goog.exportSymbol('proto.types.GetTransactionsResponse', null, global);
    goog.exportSymbol('proto.types.GoAwayNotice', null, global);
    goog.exportSymbol('proto.types.IssueCertificateRequest', null, global);
    goog.exportSymbol('proto.types.IssueCertificateResponse', null, global);
    goog.exportSymbol('proto.types.MsgHeader', null, global);
    goog.exportSymbol('proto.types.NewBlockNotice', null, global);
    goog.exportSymbol('proto.types.NewTransactionsNotice', null, global);
    goog.exportSymbol('proto.types.P2PMessage', null, global);
    goog.exportSymbol('proto.types.Ping', null, global);
    goog.exportSymbol('proto.types.Pong', null, global);
    goog.exportSymbol('proto.types.ResultStatus', null, global);
    goog.exportSymbol('proto.types.Status', null, global);
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */

    proto.types.MsgHeader = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.MsgHeader, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.MsgHeader.displayName = 'proto.types.MsgHeader';
    }

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.MsgHeader.prototype.toObject = function (opt_includeInstance) {
        return proto.types.MsgHeader.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.MsgHeader} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.MsgHeader.toObject = function (includeInstance, msg) {
        var obj = {
          clientversion: googleProtobuf.Message.getFieldWithDefault(msg, 1, ""),
          timestamp: googleProtobuf.Message.getFieldWithDefault(msg, 2, 0),
          id: googleProtobuf.Message.getFieldWithDefault(msg, 3, ""),
          gossip: googleProtobuf.Message.getFieldWithDefault(msg, 4, false),
          peerid: msg.getPeerid_asB64(),
          nodepubkey: msg.getNodepubkey_asB64(),
          sign: msg.getSign_asB64(),
          subprotocol: googleProtobuf.Message.getFieldWithDefault(msg, 8, 0),
          length: googleProtobuf.Message.getFieldWithDefault(msg, 9, 0)
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.MsgHeader}
     */


    proto.types.MsgHeader.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.MsgHeader();
      return proto.types.MsgHeader.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.MsgHeader} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.MsgHeader}
     */


    proto.types.MsgHeader.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {string} */
            reader.readString();
            msg.setClientversion(value);
            break;

          case 2:
            var value =
            /** @type {number} */
            reader.readInt64();
            msg.setTimestamp(value);
            break;

          case 3:
            var value =
            /** @type {string} */
            reader.readString();
            msg.setId(value);
            break;

          case 4:
            var value =
            /** @type {boolean} */
            reader.readBool();
            msg.setGossip(value);
            break;

          case 5:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setPeerid(value);
            break;

          case 6:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setNodepubkey(value);
            break;

          case 7:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setSign(value);
            break;

          case 8:
            var value =
            /** @type {number} */
            reader.readUint32();
            msg.setSubprotocol(value);
            break;

          case 9:
            var value =
            /** @type {number} */
            reader.readUint32();
            msg.setLength(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.MsgHeader.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.MsgHeader.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.MsgHeader} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.MsgHeader.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getClientversion();

      if (f.length > 0) {
        writer.writeString(1, f);
      }

      f = message.getTimestamp();

      if (f !== 0) {
        writer.writeInt64(2, f);
      }

      f = message.getId();

      if (f.length > 0) {
        writer.writeString(3, f);
      }

      f = message.getGossip();

      if (f) {
        writer.writeBool(4, f);
      }

      f = message.getPeerid_asU8();

      if (f.length > 0) {
        writer.writeBytes(5, f);
      }

      f = message.getNodepubkey_asU8();

      if (f.length > 0) {
        writer.writeBytes(6, f);
      }

      f = message.getSign_asU8();

      if (f.length > 0) {
        writer.writeBytes(7, f);
      }

      f = message.getSubprotocol();

      if (f !== 0) {
        writer.writeUint32(8, f);
      }

      f = message.getLength();

      if (f !== 0) {
        writer.writeUint32(9, f);
      }
    };
    /**
     * optional string clientVersion = 1;
     * @return {string}
     */


    proto.types.MsgHeader.prototype.getClientversion = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, "")
      );
    };
    /** @param {string} value */


    proto.types.MsgHeader.prototype.setClientversion = function (value) {
      googleProtobuf.Message.setProto3StringField(this, 1, value);
    };
    /**
     * optional int64 timestamp = 2;
     * @return {number}
     */


    proto.types.MsgHeader.prototype.getTimestamp = function () {
      return (
        /** @type {number} */
        googleProtobuf.Message.getFieldWithDefault(this, 2, 0)
      );
    };
    /** @param {number} value */


    proto.types.MsgHeader.prototype.setTimestamp = function (value) {
      googleProtobuf.Message.setProto3IntField(this, 2, value);
    };
    /**
     * optional string id = 3;
     * @return {string}
     */


    proto.types.MsgHeader.prototype.getId = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.getFieldWithDefault(this, 3, "")
      );
    };
    /** @param {string} value */


    proto.types.MsgHeader.prototype.setId = function (value) {
      googleProtobuf.Message.setProto3StringField(this, 3, value);
    };
    /**
     * optional bool gossip = 4;
     * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
     * You should avoid comparisons like {@code val === true/false} in those cases.
     * @return {boolean}
     */


    proto.types.MsgHeader.prototype.getGossip = function () {
      return (
        /** @type {boolean} */
        googleProtobuf.Message.getFieldWithDefault(this, 4, false)
      );
    };
    /** @param {boolean} value */


    proto.types.MsgHeader.prototype.setGossip = function (value) {
      googleProtobuf.Message.setProto3BooleanField(this, 4, value);
    };
    /**
     * optional bytes peerID = 5;
     * @return {!(string|Uint8Array)}
     */


    proto.types.MsgHeader.prototype.getPeerid = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 5, "")
      );
    };
    /**
     * optional bytes peerID = 5;
     * This is a type-conversion wrapper around `getPeerid()`
     * @return {string}
     */


    proto.types.MsgHeader.prototype.getPeerid_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getPeerid())
      );
    };
    /**
     * optional bytes peerID = 5;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getPeerid()`
     * @return {!Uint8Array}
     */


    proto.types.MsgHeader.prototype.getPeerid_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getPeerid())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.MsgHeader.prototype.setPeerid = function (value) {
      googleProtobuf.Message.setProto3BytesField(this, 5, value);
    };
    /**
     * optional bytes nodePubKey = 6;
     * @return {!(string|Uint8Array)}
     */


    proto.types.MsgHeader.prototype.getNodepubkey = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 6, "")
      );
    };
    /**
     * optional bytes nodePubKey = 6;
     * This is a type-conversion wrapper around `getNodepubkey()`
     * @return {string}
     */


    proto.types.MsgHeader.prototype.getNodepubkey_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getNodepubkey())
      );
    };
    /**
     * optional bytes nodePubKey = 6;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getNodepubkey()`
     * @return {!Uint8Array}
     */


    proto.types.MsgHeader.prototype.getNodepubkey_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getNodepubkey())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.MsgHeader.prototype.setNodepubkey = function (value) {
      googleProtobuf.Message.setProto3BytesField(this, 6, value);
    };
    /**
     * optional bytes sign = 7;
     * @return {!(string|Uint8Array)}
     */


    proto.types.MsgHeader.prototype.getSign = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 7, "")
      );
    };
    /**
     * optional bytes sign = 7;
     * This is a type-conversion wrapper around `getSign()`
     * @return {string}
     */


    proto.types.MsgHeader.prototype.getSign_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getSign())
      );
    };
    /**
     * optional bytes sign = 7;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getSign()`
     * @return {!Uint8Array}
     */


    proto.types.MsgHeader.prototype.getSign_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getSign())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.MsgHeader.prototype.setSign = function (value) {
      googleProtobuf.Message.setProto3BytesField(this, 7, value);
    };
    /**
     * optional uint32 subprotocol = 8;
     * @return {number}
     */


    proto.types.MsgHeader.prototype.getSubprotocol = function () {
      return (
        /** @type {number} */
        googleProtobuf.Message.getFieldWithDefault(this, 8, 0)
      );
    };
    /** @param {number} value */


    proto.types.MsgHeader.prototype.setSubprotocol = function (value) {
      googleProtobuf.Message.setProto3IntField(this, 8, value);
    };
    /**
     * optional uint32 length = 9;
     * @return {number}
     */


    proto.types.MsgHeader.prototype.getLength = function () {
      return (
        /** @type {number} */
        googleProtobuf.Message.getFieldWithDefault(this, 9, 0)
      );
    };
    /** @param {number} value */


    proto.types.MsgHeader.prototype.setLength = function (value) {
      googleProtobuf.Message.setProto3IntField(this, 9, value);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.P2PMessage = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.P2PMessage, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.P2PMessage.displayName = 'proto.types.P2PMessage';
    }

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.P2PMessage.prototype.toObject = function (opt_includeInstance) {
        return proto.types.P2PMessage.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.P2PMessage} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.P2PMessage.toObject = function (includeInstance, msg) {
        var f,
            obj = {
          header: (f = msg.getHeader()) && proto.types.MsgHeader.toObject(includeInstance, f),
          data: msg.getData_asB64()
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.P2PMessage}
     */


    proto.types.P2PMessage.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.P2PMessage();
      return proto.types.P2PMessage.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.P2PMessage} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.P2PMessage}
     */


    proto.types.P2PMessage.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value = new proto.types.MsgHeader();
            reader.readMessage(value, proto.types.MsgHeader.deserializeBinaryFromReader);
            msg.setHeader(value);
            break;

          case 2:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setData(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.P2PMessage.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.P2PMessage.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.P2PMessage} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.P2PMessage.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getHeader();

      if (f != null) {
        writer.writeMessage(1, f, proto.types.MsgHeader.serializeBinaryToWriter);
      }

      f = message.getData_asU8();

      if (f.length > 0) {
        writer.writeBytes(2, f);
      }
    };
    /**
     * optional MsgHeader header = 1;
     * @return {?proto.types.MsgHeader}
     */


    proto.types.P2PMessage.prototype.getHeader = function () {
      return (
        /** @type{?proto.types.MsgHeader} */
        googleProtobuf.Message.getWrapperField(this, proto.types.MsgHeader, 1)
      );
    };
    /** @param {?proto.types.MsgHeader|undefined} value */


    proto.types.P2PMessage.prototype.setHeader = function (value) {
      googleProtobuf.Message.setWrapperField(this, 1, value);
    };

    proto.types.P2PMessage.prototype.clearHeader = function () {
      this.setHeader(undefined);
    };
    /**
     * Returns whether this field is set.
     * @return {boolean}
     */


    proto.types.P2PMessage.prototype.hasHeader = function () {
      return googleProtobuf.Message.getField(this, 1) != null;
    };
    /**
     * optional bytes data = 2;
     * @return {!(string|Uint8Array)}
     */


    proto.types.P2PMessage.prototype.getData = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 2, "")
      );
    };
    /**
     * optional bytes data = 2;
     * This is a type-conversion wrapper around `getData()`
     * @return {string}
     */


    proto.types.P2PMessage.prototype.getData_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getData())
      );
    };
    /**
     * optional bytes data = 2;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getData()`
     * @return {!Uint8Array}
     */


    proto.types.P2PMessage.prototype.getData_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getData())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.P2PMessage.prototype.setData = function (value) {
      googleProtobuf.Message.setProto3BytesField(this, 2, value);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.Ping = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.Ping, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.Ping.displayName = 'proto.types.Ping';
    }

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.Ping.prototype.toObject = function (opt_includeInstance) {
        return proto.types.Ping.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.Ping} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.Ping.toObject = function (includeInstance, msg) {
        var obj = {
          bestBlockHash: msg.getBestBlockHash_asB64(),
          bestHeight: googleProtobuf.Message.getFieldWithDefault(msg, 2, 0)
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.Ping}
     */


    proto.types.Ping.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.Ping();
      return proto.types.Ping.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.Ping} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.Ping}
     */


    proto.types.Ping.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setBestBlockHash(value);
            break;

          case 2:
            var value =
            /** @type {number} */
            reader.readUint64();
            msg.setBestHeight(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.Ping.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.Ping.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.Ping} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.Ping.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getBestBlockHash_asU8();

      if (f.length > 0) {
        writer.writeBytes(1, f);
      }

      f = message.getBestHeight();

      if (f !== 0) {
        writer.writeUint64(2, f);
      }
    };
    /**
     * optional bytes best_block_hash = 1;
     * @return {!(string|Uint8Array)}
     */


    proto.types.Ping.prototype.getBestBlockHash = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, "")
      );
    };
    /**
     * optional bytes best_block_hash = 1;
     * This is a type-conversion wrapper around `getBestBlockHash()`
     * @return {string}
     */


    proto.types.Ping.prototype.getBestBlockHash_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getBestBlockHash())
      );
    };
    /**
     * optional bytes best_block_hash = 1;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getBestBlockHash()`
     * @return {!Uint8Array}
     */


    proto.types.Ping.prototype.getBestBlockHash_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getBestBlockHash())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.Ping.prototype.setBestBlockHash = function (value) {
      googleProtobuf.Message.setProto3BytesField(this, 1, value);
    };
    /**
     * optional uint64 best_height = 2;
     * @return {number}
     */


    proto.types.Ping.prototype.getBestHeight = function () {
      return (
        /** @type {number} */
        googleProtobuf.Message.getFieldWithDefault(this, 2, 0)
      );
    };
    /** @param {number} value */


    proto.types.Ping.prototype.setBestHeight = function (value) {
      googleProtobuf.Message.setProto3IntField(this, 2, value);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.Pong = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.Pong, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.Pong.displayName = 'proto.types.Pong';
    }

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.Pong.prototype.toObject = function (opt_includeInstance) {
        return proto.types.Pong.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.Pong} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.Pong.toObject = function (includeInstance, msg) {
        var obj = {
          bestblockhash: msg.getBestblockhash_asB64(),
          bestheight: googleProtobuf.Message.getFieldWithDefault(msg, 2, 0)
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.Pong}
     */


    proto.types.Pong.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.Pong();
      return proto.types.Pong.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.Pong} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.Pong}
     */


    proto.types.Pong.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setBestblockhash(value);
            break;

          case 2:
            var value =
            /** @type {number} */
            reader.readUint64();
            msg.setBestheight(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.Pong.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.Pong.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.Pong} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.Pong.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getBestblockhash_asU8();

      if (f.length > 0) {
        writer.writeBytes(1, f);
      }

      f = message.getBestheight();

      if (f !== 0) {
        writer.writeUint64(2, f);
      }
    };
    /**
     * optional bytes bestBlockHash = 1;
     * @return {!(string|Uint8Array)}
     */


    proto.types.Pong.prototype.getBestblockhash = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, "")
      );
    };
    /**
     * optional bytes bestBlockHash = 1;
     * This is a type-conversion wrapper around `getBestblockhash()`
     * @return {string}
     */


    proto.types.Pong.prototype.getBestblockhash_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getBestblockhash())
      );
    };
    /**
     * optional bytes bestBlockHash = 1;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getBestblockhash()`
     * @return {!Uint8Array}
     */


    proto.types.Pong.prototype.getBestblockhash_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getBestblockhash())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.Pong.prototype.setBestblockhash = function (value) {
      googleProtobuf.Message.setProto3BytesField(this, 1, value);
    };
    /**
     * optional uint64 bestHeight = 2;
     * @return {number}
     */


    proto.types.Pong.prototype.getBestheight = function () {
      return (
        /** @type {number} */
        googleProtobuf.Message.getFieldWithDefault(this, 2, 0)
      );
    };
    /** @param {number} value */


    proto.types.Pong.prototype.setBestheight = function (value) {
      googleProtobuf.Message.setProto3IntField(this, 2, value);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.Status = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, proto.types.Status.repeatedFields_, null);
    };

    goog.inherits(proto.types.Status, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.Status.displayName = 'proto.types.Status';
    }
    /**
     * List of repeated fields within this message type.
     * @private {!Array<number>}
     * @const
     */


    proto.types.Status.repeatedFields_ = [8];

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.Status.prototype.toObject = function (opt_includeInstance) {
        return proto.types.Status.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.Status} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.Status.toObject = function (includeInstance, msg) {
        var f,
            obj = {
          sender: (f = msg.getSender()) && node_pb.PeerAddress.toObject(includeInstance, f),
          bestblockhash: msg.getBestblockhash_asB64(),
          bestheight: googleProtobuf.Message.getFieldWithDefault(msg, 3, 0),
          chainid: msg.getChainid_asB64(),
          noexpose: googleProtobuf.Message.getFieldWithDefault(msg, 5, false),
          version: googleProtobuf.Message.getFieldWithDefault(msg, 6, ""),
          genesis: msg.getGenesis_asB64(),
          certificatesList: googleProtobuf.Message.toObjectList(msg.getCertificatesList(), node_pb.AgentCertificate.toObject, includeInstance),
          issuecertificate: googleProtobuf.Message.getFieldWithDefault(msg, 9, false)
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.Status}
     */


    proto.types.Status.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.Status();
      return proto.types.Status.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.Status} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.Status}
     */


    proto.types.Status.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value = new node_pb.PeerAddress();
            reader.readMessage(value, node_pb.PeerAddress.deserializeBinaryFromReader);
            msg.setSender(value);
            break;

          case 2:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setBestblockhash(value);
            break;

          case 3:
            var value =
            /** @type {number} */
            reader.readUint64();
            msg.setBestheight(value);
            break;

          case 4:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setChainid(value);
            break;

          case 5:
            var value =
            /** @type {boolean} */
            reader.readBool();
            msg.setNoexpose(value);
            break;

          case 6:
            var value =
            /** @type {string} */
            reader.readString();
            msg.setVersion(value);
            break;

          case 7:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setGenesis(value);
            break;

          case 8:
            var value = new node_pb.AgentCertificate();
            reader.readMessage(value, node_pb.AgentCertificate.deserializeBinaryFromReader);
            msg.addCertificates(value);
            break;

          case 9:
            var value =
            /** @type {boolean} */
            reader.readBool();
            msg.setIssuecertificate(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.Status.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.Status.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.Status} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.Status.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getSender();

      if (f != null) {
        writer.writeMessage(1, f, node_pb.PeerAddress.serializeBinaryToWriter);
      }

      f = message.getBestblockhash_asU8();

      if (f.length > 0) {
        writer.writeBytes(2, f);
      }

      f = message.getBestheight();

      if (f !== 0) {
        writer.writeUint64(3, f);
      }

      f = message.getChainid_asU8();

      if (f.length > 0) {
        writer.writeBytes(4, f);
      }

      f = message.getNoexpose();

      if (f) {
        writer.writeBool(5, f);
      }

      f = message.getVersion();

      if (f.length > 0) {
        writer.writeString(6, f);
      }

      f = message.getGenesis_asU8();

      if (f.length > 0) {
        writer.writeBytes(7, f);
      }

      f = message.getCertificatesList();

      if (f.length > 0) {
        writer.writeRepeatedMessage(8, f, node_pb.AgentCertificate.serializeBinaryToWriter);
      }

      f = message.getIssuecertificate();

      if (f) {
        writer.writeBool(9, f);
      }
    };
    /**
     * optional PeerAddress sender = 1;
     * @return {?proto.types.PeerAddress}
     */


    proto.types.Status.prototype.getSender = function () {
      return (
        /** @type{?proto.types.PeerAddress} */
        googleProtobuf.Message.getWrapperField(this, node_pb.PeerAddress, 1)
      );
    };
    /** @param {?proto.types.PeerAddress|undefined} value */


    proto.types.Status.prototype.setSender = function (value) {
      googleProtobuf.Message.setWrapperField(this, 1, value);
    };

    proto.types.Status.prototype.clearSender = function () {
      this.setSender(undefined);
    };
    /**
     * Returns whether this field is set.
     * @return {boolean}
     */


    proto.types.Status.prototype.hasSender = function () {
      return googleProtobuf.Message.getField(this, 1) != null;
    };
    /**
     * optional bytes bestBlockHash = 2;
     * @return {!(string|Uint8Array)}
     */


    proto.types.Status.prototype.getBestblockhash = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 2, "")
      );
    };
    /**
     * optional bytes bestBlockHash = 2;
     * This is a type-conversion wrapper around `getBestblockhash()`
     * @return {string}
     */


    proto.types.Status.prototype.getBestblockhash_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getBestblockhash())
      );
    };
    /**
     * optional bytes bestBlockHash = 2;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getBestblockhash()`
     * @return {!Uint8Array}
     */


    proto.types.Status.prototype.getBestblockhash_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getBestblockhash())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.Status.prototype.setBestblockhash = function (value) {
      googleProtobuf.Message.setProto3BytesField(this, 2, value);
    };
    /**
     * optional uint64 bestHeight = 3;
     * @return {number}
     */


    proto.types.Status.prototype.getBestheight = function () {
      return (
        /** @type {number} */
        googleProtobuf.Message.getFieldWithDefault(this, 3, 0)
      );
    };
    /** @param {number} value */


    proto.types.Status.prototype.setBestheight = function (value) {
      googleProtobuf.Message.setProto3IntField(this, 3, value);
    };
    /**
     * optional bytes chainID = 4;
     * @return {!(string|Uint8Array)}
     */


    proto.types.Status.prototype.getChainid = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 4, "")
      );
    };
    /**
     * optional bytes chainID = 4;
     * This is a type-conversion wrapper around `getChainid()`
     * @return {string}
     */


    proto.types.Status.prototype.getChainid_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getChainid())
      );
    };
    /**
     * optional bytes chainID = 4;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getChainid()`
     * @return {!Uint8Array}
     */


    proto.types.Status.prototype.getChainid_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getChainid())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.Status.prototype.setChainid = function (value) {
      googleProtobuf.Message.setProto3BytesField(this, 4, value);
    };
    /**
     * optional bool noExpose = 5;
     * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
     * You should avoid comparisons like {@code val === true/false} in those cases.
     * @return {boolean}
     */


    proto.types.Status.prototype.getNoexpose = function () {
      return (
        /** @type {boolean} */
        googleProtobuf.Message.getFieldWithDefault(this, 5, false)
      );
    };
    /** @param {boolean} value */


    proto.types.Status.prototype.setNoexpose = function (value) {
      googleProtobuf.Message.setProto3BooleanField(this, 5, value);
    };
    /**
     * optional string version = 6;
     * @return {string}
     */


    proto.types.Status.prototype.getVersion = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.getFieldWithDefault(this, 6, "")
      );
    };
    /** @param {string} value */


    proto.types.Status.prototype.setVersion = function (value) {
      googleProtobuf.Message.setProto3StringField(this, 6, value);
    };
    /**
     * optional bytes genesis = 7;
     * @return {!(string|Uint8Array)}
     */


    proto.types.Status.prototype.getGenesis = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 7, "")
      );
    };
    /**
     * optional bytes genesis = 7;
     * This is a type-conversion wrapper around `getGenesis()`
     * @return {string}
     */


    proto.types.Status.prototype.getGenesis_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getGenesis())
      );
    };
    /**
     * optional bytes genesis = 7;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getGenesis()`
     * @return {!Uint8Array}
     */


    proto.types.Status.prototype.getGenesis_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getGenesis())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.Status.prototype.setGenesis = function (value) {
      googleProtobuf.Message.setProto3BytesField(this, 7, value);
    };
    /**
     * repeated AgentCertificate certificates = 8;
     * @return {!Array<!proto.types.AgentCertificate>}
     */


    proto.types.Status.prototype.getCertificatesList = function () {
      return (
        /** @type{!Array<!proto.types.AgentCertificate>} */
        googleProtobuf.Message.getRepeatedWrapperField(this, node_pb.AgentCertificate, 8)
      );
    };
    /** @param {!Array<!proto.types.AgentCertificate>} value */


    proto.types.Status.prototype.setCertificatesList = function (value) {
      googleProtobuf.Message.setRepeatedWrapperField(this, 8, value);
    };
    /**
     * @param {!proto.types.AgentCertificate=} opt_value
     * @param {number=} opt_index
     * @return {!proto.types.AgentCertificate}
     */


    proto.types.Status.prototype.addCertificates = function (opt_value, opt_index) {
      return googleProtobuf.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.types.AgentCertificate, opt_index);
    };

    proto.types.Status.prototype.clearCertificatesList = function () {
      this.setCertificatesList([]);
    };
    /**
     * optional bool issueCertificate = 9;
     * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
     * You should avoid comparisons like {@code val === true/false} in those cases.
     * @return {boolean}
     */


    proto.types.Status.prototype.getIssuecertificate = function () {
      return (
        /** @type {boolean} */
        googleProtobuf.Message.getFieldWithDefault(this, 9, false)
      );
    };
    /** @param {boolean} value */


    proto.types.Status.prototype.setIssuecertificate = function (value) {
      googleProtobuf.Message.setProto3BooleanField(this, 9, value);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.GoAwayNotice = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.GoAwayNotice, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.GoAwayNotice.displayName = 'proto.types.GoAwayNotice';
    }

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.GoAwayNotice.prototype.toObject = function (opt_includeInstance) {
        return proto.types.GoAwayNotice.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.GoAwayNotice} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.GoAwayNotice.toObject = function (includeInstance, msg) {
        var obj = {
          message: googleProtobuf.Message.getFieldWithDefault(msg, 1, "")
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.GoAwayNotice}
     */


    proto.types.GoAwayNotice.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.GoAwayNotice();
      return proto.types.GoAwayNotice.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.GoAwayNotice} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.GoAwayNotice}
     */


    proto.types.GoAwayNotice.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {string} */
            reader.readString();
            msg.setMessage(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.GoAwayNotice.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.GoAwayNotice.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.GoAwayNotice} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.GoAwayNotice.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getMessage();

      if (f.length > 0) {
        writer.writeString(1, f);
      }
    };
    /**
     * optional string message = 1;
     * @return {string}
     */


    proto.types.GoAwayNotice.prototype.getMessage = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, "")
      );
    };
    /** @param {string} value */


    proto.types.GoAwayNotice.prototype.setMessage = function (value) {
      googleProtobuf.Message.setProto3StringField(this, 1, value);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.AddressesRequest = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.AddressesRequest, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.AddressesRequest.displayName = 'proto.types.AddressesRequest';
    }

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.AddressesRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.types.AddressesRequest.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.AddressesRequest} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.AddressesRequest.toObject = function (includeInstance, msg) {
        var f,
            obj = {
          sender: (f = msg.getSender()) && node_pb.PeerAddress.toObject(includeInstance, f),
          maxsize: googleProtobuf.Message.getFieldWithDefault(msg, 2, 0)
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.AddressesRequest}
     */


    proto.types.AddressesRequest.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.AddressesRequest();
      return proto.types.AddressesRequest.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.AddressesRequest} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.AddressesRequest}
     */


    proto.types.AddressesRequest.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value = new node_pb.PeerAddress();
            reader.readMessage(value, node_pb.PeerAddress.deserializeBinaryFromReader);
            msg.setSender(value);
            break;

          case 2:
            var value =
            /** @type {number} */
            reader.readUint32();
            msg.setMaxsize(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.AddressesRequest.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.AddressesRequest.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.AddressesRequest} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.AddressesRequest.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getSender();

      if (f != null) {
        writer.writeMessage(1, f, node_pb.PeerAddress.serializeBinaryToWriter);
      }

      f = message.getMaxsize();

      if (f !== 0) {
        writer.writeUint32(2, f);
      }
    };
    /**
     * optional PeerAddress sender = 1;
     * @return {?proto.types.PeerAddress}
     */


    proto.types.AddressesRequest.prototype.getSender = function () {
      return (
        /** @type{?proto.types.PeerAddress} */
        googleProtobuf.Message.getWrapperField(this, node_pb.PeerAddress, 1)
      );
    };
    /** @param {?proto.types.PeerAddress|undefined} value */


    proto.types.AddressesRequest.prototype.setSender = function (value) {
      googleProtobuf.Message.setWrapperField(this, 1, value);
    };

    proto.types.AddressesRequest.prototype.clearSender = function () {
      this.setSender(undefined);
    };
    /**
     * Returns whether this field is set.
     * @return {boolean}
     */


    proto.types.AddressesRequest.prototype.hasSender = function () {
      return googleProtobuf.Message.getField(this, 1) != null;
    };
    /**
     * optional uint32 maxSize = 2;
     * @return {number}
     */


    proto.types.AddressesRequest.prototype.getMaxsize = function () {
      return (
        /** @type {number} */
        googleProtobuf.Message.getFieldWithDefault(this, 2, 0)
      );
    };
    /** @param {number} value */


    proto.types.AddressesRequest.prototype.setMaxsize = function (value) {
      googleProtobuf.Message.setProto3IntField(this, 2, value);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.AddressesResponse = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, proto.types.AddressesResponse.repeatedFields_, null);
    };

    goog.inherits(proto.types.AddressesResponse, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.AddressesResponse.displayName = 'proto.types.AddressesResponse';
    }
    /**
     * List of repeated fields within this message type.
     * @private {!Array<number>}
     * @const
     */


    proto.types.AddressesResponse.repeatedFields_ = [2];

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.AddressesResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.types.AddressesResponse.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.AddressesResponse} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.AddressesResponse.toObject = function (includeInstance, msg) {
        var obj = {
          status: googleProtobuf.Message.getFieldWithDefault(msg, 1, 0),
          peersList: googleProtobuf.Message.toObjectList(msg.getPeersList(), node_pb.PeerAddress.toObject, includeInstance)
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.AddressesResponse}
     */


    proto.types.AddressesResponse.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.AddressesResponse();
      return proto.types.AddressesResponse.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.AddressesResponse} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.AddressesResponse}
     */


    proto.types.AddressesResponse.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {!proto.types.ResultStatus} */
            reader.readEnum();
            msg.setStatus(value);
            break;

          case 2:
            var value = new node_pb.PeerAddress();
            reader.readMessage(value, node_pb.PeerAddress.deserializeBinaryFromReader);
            msg.addPeers(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.AddressesResponse.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.AddressesResponse.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.AddressesResponse} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.AddressesResponse.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getStatus();

      if (f !== 0.0) {
        writer.writeEnum(1, f);
      }

      f = message.getPeersList();

      if (f.length > 0) {
        writer.writeRepeatedMessage(2, f, node_pb.PeerAddress.serializeBinaryToWriter);
      }
    };
    /**
     * optional ResultStatus status = 1;
     * @return {!proto.types.ResultStatus}
     */


    proto.types.AddressesResponse.prototype.getStatus = function () {
      return (
        /** @type {!proto.types.ResultStatus} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, 0)
      );
    };
    /** @param {!proto.types.ResultStatus} value */


    proto.types.AddressesResponse.prototype.setStatus = function (value) {
      googleProtobuf.Message.setProto3EnumField(this, 1, value);
    };
    /**
     * repeated PeerAddress peers = 2;
     * @return {!Array<!proto.types.PeerAddress>}
     */


    proto.types.AddressesResponse.prototype.getPeersList = function () {
      return (
        /** @type{!Array<!proto.types.PeerAddress>} */
        googleProtobuf.Message.getRepeatedWrapperField(this, node_pb.PeerAddress, 2)
      );
    };
    /** @param {!Array<!proto.types.PeerAddress>} value */


    proto.types.AddressesResponse.prototype.setPeersList = function (value) {
      googleProtobuf.Message.setRepeatedWrapperField(this, 2, value);
    };
    /**
     * @param {!proto.types.PeerAddress=} opt_value
     * @param {number=} opt_index
     * @return {!proto.types.PeerAddress}
     */


    proto.types.AddressesResponse.prototype.addPeers = function (opt_value, opt_index) {
      return googleProtobuf.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.types.PeerAddress, opt_index);
    };

    proto.types.AddressesResponse.prototype.clearPeersList = function () {
      this.setPeersList([]);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.NewBlockNotice = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.NewBlockNotice, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.NewBlockNotice.displayName = 'proto.types.NewBlockNotice';
    }

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.NewBlockNotice.prototype.toObject = function (opt_includeInstance) {
        return proto.types.NewBlockNotice.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.NewBlockNotice} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.NewBlockNotice.toObject = function (includeInstance, msg) {
        var obj = {
          blockhash: msg.getBlockhash_asB64(),
          blockno: googleProtobuf.Message.getFieldWithDefault(msg, 2, 0)
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.NewBlockNotice}
     */


    proto.types.NewBlockNotice.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.NewBlockNotice();
      return proto.types.NewBlockNotice.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.NewBlockNotice} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.NewBlockNotice}
     */


    proto.types.NewBlockNotice.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setBlockhash(value);
            break;

          case 2:
            var value =
            /** @type {number} */
            reader.readUint64();
            msg.setBlockno(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.NewBlockNotice.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.NewBlockNotice.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.NewBlockNotice} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.NewBlockNotice.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getBlockhash_asU8();

      if (f.length > 0) {
        writer.writeBytes(1, f);
      }

      f = message.getBlockno();

      if (f !== 0) {
        writer.writeUint64(2, f);
      }
    };
    /**
     * optional bytes blockHash = 1;
     * @return {!(string|Uint8Array)}
     */


    proto.types.NewBlockNotice.prototype.getBlockhash = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, "")
      );
    };
    /**
     * optional bytes blockHash = 1;
     * This is a type-conversion wrapper around `getBlockhash()`
     * @return {string}
     */


    proto.types.NewBlockNotice.prototype.getBlockhash_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getBlockhash())
      );
    };
    /**
     * optional bytes blockHash = 1;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getBlockhash()`
     * @return {!Uint8Array}
     */


    proto.types.NewBlockNotice.prototype.getBlockhash_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getBlockhash())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.NewBlockNotice.prototype.setBlockhash = function (value) {
      googleProtobuf.Message.setProto3BytesField(this, 1, value);
    };
    /**
     * optional uint64 blockNo = 2;
     * @return {number}
     */


    proto.types.NewBlockNotice.prototype.getBlockno = function () {
      return (
        /** @type {number} */
        googleProtobuf.Message.getFieldWithDefault(this, 2, 0)
      );
    };
    /** @param {number} value */


    proto.types.NewBlockNotice.prototype.setBlockno = function (value) {
      googleProtobuf.Message.setProto3IntField(this, 2, value);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.BlockProducedNotice = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.BlockProducedNotice, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.BlockProducedNotice.displayName = 'proto.types.BlockProducedNotice';
    }

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.BlockProducedNotice.prototype.toObject = function (opt_includeInstance) {
        return proto.types.BlockProducedNotice.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.BlockProducedNotice} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.BlockProducedNotice.toObject = function (includeInstance, msg) {
        var f,
            obj = {
          producerid: msg.getProducerid_asB64(),
          blockno: googleProtobuf.Message.getFieldWithDefault(msg, 2, 0),
          block: (f = msg.getBlock()) && blockchain_pb.Block.toObject(includeInstance, f)
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.BlockProducedNotice}
     */


    proto.types.BlockProducedNotice.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.BlockProducedNotice();
      return proto.types.BlockProducedNotice.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.BlockProducedNotice} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.BlockProducedNotice}
     */


    proto.types.BlockProducedNotice.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setProducerid(value);
            break;

          case 2:
            var value =
            /** @type {number} */
            reader.readUint64();
            msg.setBlockno(value);
            break;

          case 3:
            var value = new blockchain_pb.Block();
            reader.readMessage(value, blockchain_pb.Block.deserializeBinaryFromReader);
            msg.setBlock(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.BlockProducedNotice.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.BlockProducedNotice.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.BlockProducedNotice} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.BlockProducedNotice.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getProducerid_asU8();

      if (f.length > 0) {
        writer.writeBytes(1, f);
      }

      f = message.getBlockno();

      if (f !== 0) {
        writer.writeUint64(2, f);
      }

      f = message.getBlock();

      if (f != null) {
        writer.writeMessage(3, f, blockchain_pb.Block.serializeBinaryToWriter);
      }
    };
    /**
     * optional bytes producerID = 1;
     * @return {!(string|Uint8Array)}
     */


    proto.types.BlockProducedNotice.prototype.getProducerid = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, "")
      );
    };
    /**
     * optional bytes producerID = 1;
     * This is a type-conversion wrapper around `getProducerid()`
     * @return {string}
     */


    proto.types.BlockProducedNotice.prototype.getProducerid_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getProducerid())
      );
    };
    /**
     * optional bytes producerID = 1;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getProducerid()`
     * @return {!Uint8Array}
     */


    proto.types.BlockProducedNotice.prototype.getProducerid_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getProducerid())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.BlockProducedNotice.prototype.setProducerid = function (value) {
      googleProtobuf.Message.setProto3BytesField(this, 1, value);
    };
    /**
     * optional uint64 blockNo = 2;
     * @return {number}
     */


    proto.types.BlockProducedNotice.prototype.getBlockno = function () {
      return (
        /** @type {number} */
        googleProtobuf.Message.getFieldWithDefault(this, 2, 0)
      );
    };
    /** @param {number} value */


    proto.types.BlockProducedNotice.prototype.setBlockno = function (value) {
      googleProtobuf.Message.setProto3IntField(this, 2, value);
    };
    /**
     * optional Block block = 3;
     * @return {?proto.types.Block}
     */


    proto.types.BlockProducedNotice.prototype.getBlock = function () {
      return (
        /** @type{?proto.types.Block} */
        googleProtobuf.Message.getWrapperField(this, blockchain_pb.Block, 3)
      );
    };
    /** @param {?proto.types.Block|undefined} value */


    proto.types.BlockProducedNotice.prototype.setBlock = function (value) {
      googleProtobuf.Message.setWrapperField(this, 3, value);
    };

    proto.types.BlockProducedNotice.prototype.clearBlock = function () {
      this.setBlock(undefined);
    };
    /**
     * Returns whether this field is set.
     * @return {boolean}
     */


    proto.types.BlockProducedNotice.prototype.hasBlock = function () {
      return googleProtobuf.Message.getField(this, 3) != null;
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.GetBlockHeadersRequest = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.GetBlockHeadersRequest, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.GetBlockHeadersRequest.displayName = 'proto.types.GetBlockHeadersRequest';
    }

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.GetBlockHeadersRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.types.GetBlockHeadersRequest.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.GetBlockHeadersRequest} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.GetBlockHeadersRequest.toObject = function (includeInstance, msg) {
        var obj = {
          hash: msg.getHash_asB64(),
          height: googleProtobuf.Message.getFieldWithDefault(msg, 2, 0),
          offset: googleProtobuf.Message.getFieldWithDefault(msg, 3, 0),
          size: googleProtobuf.Message.getFieldWithDefault(msg, 4, 0),
          asc: googleProtobuf.Message.getFieldWithDefault(msg, 5, false)
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.GetBlockHeadersRequest}
     */


    proto.types.GetBlockHeadersRequest.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.GetBlockHeadersRequest();
      return proto.types.GetBlockHeadersRequest.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.GetBlockHeadersRequest} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.GetBlockHeadersRequest}
     */


    proto.types.GetBlockHeadersRequest.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setHash(value);
            break;

          case 2:
            var value =
            /** @type {number} */
            reader.readUint64();
            msg.setHeight(value);
            break;

          case 3:
            var value =
            /** @type {number} */
            reader.readUint64();
            msg.setOffset(value);
            break;

          case 4:
            var value =
            /** @type {number} */
            reader.readUint32();
            msg.setSize(value);
            break;

          case 5:
            var value =
            /** @type {boolean} */
            reader.readBool();
            msg.setAsc(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.GetBlockHeadersRequest.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.GetBlockHeadersRequest.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.GetBlockHeadersRequest} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.GetBlockHeadersRequest.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getHash_asU8();

      if (f.length > 0) {
        writer.writeBytes(1, f);
      }

      f = message.getHeight();

      if (f !== 0) {
        writer.writeUint64(2, f);
      }

      f = message.getOffset();

      if (f !== 0) {
        writer.writeUint64(3, f);
      }

      f = message.getSize();

      if (f !== 0) {
        writer.writeUint32(4, f);
      }

      f = message.getAsc();

      if (f) {
        writer.writeBool(5, f);
      }
    };
    /**
     * optional bytes hash = 1;
     * @return {!(string|Uint8Array)}
     */


    proto.types.GetBlockHeadersRequest.prototype.getHash = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, "")
      );
    };
    /**
     * optional bytes hash = 1;
     * This is a type-conversion wrapper around `getHash()`
     * @return {string}
     */


    proto.types.GetBlockHeadersRequest.prototype.getHash_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getHash())
      );
    };
    /**
     * optional bytes hash = 1;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getHash()`
     * @return {!Uint8Array}
     */


    proto.types.GetBlockHeadersRequest.prototype.getHash_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getHash())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.GetBlockHeadersRequest.prototype.setHash = function (value) {
      googleProtobuf.Message.setProto3BytesField(this, 1, value);
    };
    /**
     * optional uint64 height = 2;
     * @return {number}
     */


    proto.types.GetBlockHeadersRequest.prototype.getHeight = function () {
      return (
        /** @type {number} */
        googleProtobuf.Message.getFieldWithDefault(this, 2, 0)
      );
    };
    /** @param {number} value */


    proto.types.GetBlockHeadersRequest.prototype.setHeight = function (value) {
      googleProtobuf.Message.setProto3IntField(this, 2, value);
    };
    /**
     * optional uint64 offset = 3;
     * @return {number}
     */


    proto.types.GetBlockHeadersRequest.prototype.getOffset = function () {
      return (
        /** @type {number} */
        googleProtobuf.Message.getFieldWithDefault(this, 3, 0)
      );
    };
    /** @param {number} value */


    proto.types.GetBlockHeadersRequest.prototype.setOffset = function (value) {
      googleProtobuf.Message.setProto3IntField(this, 3, value);
    };
    /**
     * optional uint32 size = 4;
     * @return {number}
     */


    proto.types.GetBlockHeadersRequest.prototype.getSize = function () {
      return (
        /** @type {number} */
        googleProtobuf.Message.getFieldWithDefault(this, 4, 0)
      );
    };
    /** @param {number} value */


    proto.types.GetBlockHeadersRequest.prototype.setSize = function (value) {
      googleProtobuf.Message.setProto3IntField(this, 4, value);
    };
    /**
     * optional bool asc = 5;
     * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
     * You should avoid comparisons like {@code val === true/false} in those cases.
     * @return {boolean}
     */


    proto.types.GetBlockHeadersRequest.prototype.getAsc = function () {
      return (
        /** @type {boolean} */
        googleProtobuf.Message.getFieldWithDefault(this, 5, false)
      );
    };
    /** @param {boolean} value */


    proto.types.GetBlockHeadersRequest.prototype.setAsc = function (value) {
      googleProtobuf.Message.setProto3BooleanField(this, 5, value);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.GetBlockHeadersResponse = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, proto.types.GetBlockHeadersResponse.repeatedFields_, null);
    };

    goog.inherits(proto.types.GetBlockHeadersResponse, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.GetBlockHeadersResponse.displayName = 'proto.types.GetBlockHeadersResponse';
    }
    /**
     * List of repeated fields within this message type.
     * @private {!Array<number>}
     * @const
     */


    proto.types.GetBlockHeadersResponse.repeatedFields_ = [2, 3];

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.GetBlockHeadersResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.types.GetBlockHeadersResponse.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.GetBlockHeadersResponse} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.GetBlockHeadersResponse.toObject = function (includeInstance, msg) {
        var obj = {
          status: googleProtobuf.Message.getFieldWithDefault(msg, 1, 0),
          hashesList: msg.getHashesList_asB64(),
          headersList: googleProtobuf.Message.toObjectList(msg.getHeadersList(), blockchain_pb.BlockHeader.toObject, includeInstance),
          hasnext: googleProtobuf.Message.getFieldWithDefault(msg, 4, false)
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.GetBlockHeadersResponse}
     */


    proto.types.GetBlockHeadersResponse.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.GetBlockHeadersResponse();
      return proto.types.GetBlockHeadersResponse.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.GetBlockHeadersResponse} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.GetBlockHeadersResponse}
     */


    proto.types.GetBlockHeadersResponse.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {!proto.types.ResultStatus} */
            reader.readEnum();
            msg.setStatus(value);
            break;

          case 2:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.addHashes(value);
            break;

          case 3:
            var value = new blockchain_pb.BlockHeader();
            reader.readMessage(value, blockchain_pb.BlockHeader.deserializeBinaryFromReader);
            msg.addHeaders(value);
            break;

          case 4:
            var value =
            /** @type {boolean} */
            reader.readBool();
            msg.setHasnext(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.GetBlockHeadersResponse.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.GetBlockHeadersResponse.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.GetBlockHeadersResponse} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.GetBlockHeadersResponse.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getStatus();

      if (f !== 0.0) {
        writer.writeEnum(1, f);
      }

      f = message.getHashesList_asU8();

      if (f.length > 0) {
        writer.writeRepeatedBytes(2, f);
      }

      f = message.getHeadersList();

      if (f.length > 0) {
        writer.writeRepeatedMessage(3, f, blockchain_pb.BlockHeader.serializeBinaryToWriter);
      }

      f = message.getHasnext();

      if (f) {
        writer.writeBool(4, f);
      }
    };
    /**
     * optional ResultStatus status = 1;
     * @return {!proto.types.ResultStatus}
     */


    proto.types.GetBlockHeadersResponse.prototype.getStatus = function () {
      return (
        /** @type {!proto.types.ResultStatus} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, 0)
      );
    };
    /** @param {!proto.types.ResultStatus} value */


    proto.types.GetBlockHeadersResponse.prototype.setStatus = function (value) {
      googleProtobuf.Message.setProto3EnumField(this, 1, value);
    };
    /**
     * repeated bytes hashes = 2;
     * @return {!(Array<!Uint8Array>|Array<string>)}
     */


    proto.types.GetBlockHeadersResponse.prototype.getHashesList = function () {
      return (
        /** @type {!(Array<!Uint8Array>|Array<string>)} */
        googleProtobuf.Message.getRepeatedField(this, 2)
      );
    };
    /**
     * repeated bytes hashes = 2;
     * This is a type-conversion wrapper around `getHashesList()`
     * @return {!Array<string>}
     */


    proto.types.GetBlockHeadersResponse.prototype.getHashesList_asB64 = function () {
      return (
        /** @type {!Array<string>} */
        googleProtobuf.Message.bytesListAsB64(this.getHashesList())
      );
    };
    /**
     * repeated bytes hashes = 2;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getHashesList()`
     * @return {!Array<!Uint8Array>}
     */


    proto.types.GetBlockHeadersResponse.prototype.getHashesList_asU8 = function () {
      return (
        /** @type {!Array<!Uint8Array>} */
        googleProtobuf.Message.bytesListAsU8(this.getHashesList())
      );
    };
    /** @param {!(Array<!Uint8Array>|Array<string>)} value */


    proto.types.GetBlockHeadersResponse.prototype.setHashesList = function (value) {
      googleProtobuf.Message.setField(this, 2, value || []);
    };
    /**
     * @param {!(string|Uint8Array)} value
     * @param {number=} opt_index
     */


    proto.types.GetBlockHeadersResponse.prototype.addHashes = function (value, opt_index) {
      googleProtobuf.Message.addToRepeatedField(this, 2, value, opt_index);
    };

    proto.types.GetBlockHeadersResponse.prototype.clearHashesList = function () {
      this.setHashesList([]);
    };
    /**
     * repeated BlockHeader headers = 3;
     * @return {!Array<!proto.types.BlockHeader>}
     */


    proto.types.GetBlockHeadersResponse.prototype.getHeadersList = function () {
      return (
        /** @type{!Array<!proto.types.BlockHeader>} */
        googleProtobuf.Message.getRepeatedWrapperField(this, blockchain_pb.BlockHeader, 3)
      );
    };
    /** @param {!Array<!proto.types.BlockHeader>} value */


    proto.types.GetBlockHeadersResponse.prototype.setHeadersList = function (value) {
      googleProtobuf.Message.setRepeatedWrapperField(this, 3, value);
    };
    /**
     * @param {!proto.types.BlockHeader=} opt_value
     * @param {number=} opt_index
     * @return {!proto.types.BlockHeader}
     */


    proto.types.GetBlockHeadersResponse.prototype.addHeaders = function (opt_value, opt_index) {
      return googleProtobuf.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.types.BlockHeader, opt_index);
    };

    proto.types.GetBlockHeadersResponse.prototype.clearHeadersList = function () {
      this.setHeadersList([]);
    };
    /**
     * optional bool hasNext = 4;
     * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
     * You should avoid comparisons like {@code val === true/false} in those cases.
     * @return {boolean}
     */


    proto.types.GetBlockHeadersResponse.prototype.getHasnext = function () {
      return (
        /** @type {boolean} */
        googleProtobuf.Message.getFieldWithDefault(this, 4, false)
      );
    };
    /** @param {boolean} value */


    proto.types.GetBlockHeadersResponse.prototype.setHasnext = function (value) {
      googleProtobuf.Message.setProto3BooleanField(this, 4, value);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.GetBlockRequest = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, proto.types.GetBlockRequest.repeatedFields_, null);
    };

    goog.inherits(proto.types.GetBlockRequest, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.GetBlockRequest.displayName = 'proto.types.GetBlockRequest';
    }
    /**
     * List of repeated fields within this message type.
     * @private {!Array<number>}
     * @const
     */


    proto.types.GetBlockRequest.repeatedFields_ = [1];

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.GetBlockRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.types.GetBlockRequest.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.GetBlockRequest} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.GetBlockRequest.toObject = function (includeInstance, msg) {
        var obj = {
          hashesList: msg.getHashesList_asB64()
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.GetBlockRequest}
     */


    proto.types.GetBlockRequest.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.GetBlockRequest();
      return proto.types.GetBlockRequest.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.GetBlockRequest} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.GetBlockRequest}
     */


    proto.types.GetBlockRequest.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.addHashes(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.GetBlockRequest.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.GetBlockRequest.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.GetBlockRequest} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.GetBlockRequest.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getHashesList_asU8();

      if (f.length > 0) {
        writer.writeRepeatedBytes(1, f);
      }
    };
    /**
     * repeated bytes hashes = 1;
     * @return {!(Array<!Uint8Array>|Array<string>)}
     */


    proto.types.GetBlockRequest.prototype.getHashesList = function () {
      return (
        /** @type {!(Array<!Uint8Array>|Array<string>)} */
        googleProtobuf.Message.getRepeatedField(this, 1)
      );
    };
    /**
     * repeated bytes hashes = 1;
     * This is a type-conversion wrapper around `getHashesList()`
     * @return {!Array<string>}
     */


    proto.types.GetBlockRequest.prototype.getHashesList_asB64 = function () {
      return (
        /** @type {!Array<string>} */
        googleProtobuf.Message.bytesListAsB64(this.getHashesList())
      );
    };
    /**
     * repeated bytes hashes = 1;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getHashesList()`
     * @return {!Array<!Uint8Array>}
     */


    proto.types.GetBlockRequest.prototype.getHashesList_asU8 = function () {
      return (
        /** @type {!Array<!Uint8Array>} */
        googleProtobuf.Message.bytesListAsU8(this.getHashesList())
      );
    };
    /** @param {!(Array<!Uint8Array>|Array<string>)} value */


    proto.types.GetBlockRequest.prototype.setHashesList = function (value) {
      googleProtobuf.Message.setField(this, 1, value || []);
    };
    /**
     * @param {!(string|Uint8Array)} value
     * @param {number=} opt_index
     */


    proto.types.GetBlockRequest.prototype.addHashes = function (value, opt_index) {
      googleProtobuf.Message.addToRepeatedField(this, 1, value, opt_index);
    };

    proto.types.GetBlockRequest.prototype.clearHashesList = function () {
      this.setHashesList([]);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.GetBlockResponse = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, proto.types.GetBlockResponse.repeatedFields_, null);
    };

    goog.inherits(proto.types.GetBlockResponse, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.GetBlockResponse.displayName = 'proto.types.GetBlockResponse';
    }
    /**
     * List of repeated fields within this message type.
     * @private {!Array<number>}
     * @const
     */


    proto.types.GetBlockResponse.repeatedFields_ = [2];

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.GetBlockResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.types.GetBlockResponse.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.GetBlockResponse} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.GetBlockResponse.toObject = function (includeInstance, msg) {
        var obj = {
          status: googleProtobuf.Message.getFieldWithDefault(msg, 1, 0),
          blocksList: googleProtobuf.Message.toObjectList(msg.getBlocksList(), blockchain_pb.Block.toObject, includeInstance),
          hasnext: googleProtobuf.Message.getFieldWithDefault(msg, 3, false)
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.GetBlockResponse}
     */


    proto.types.GetBlockResponse.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.GetBlockResponse();
      return proto.types.GetBlockResponse.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.GetBlockResponse} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.GetBlockResponse}
     */


    proto.types.GetBlockResponse.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {!proto.types.ResultStatus} */
            reader.readEnum();
            msg.setStatus(value);
            break;

          case 2:
            var value = new blockchain_pb.Block();
            reader.readMessage(value, blockchain_pb.Block.deserializeBinaryFromReader);
            msg.addBlocks(value);
            break;

          case 3:
            var value =
            /** @type {boolean} */
            reader.readBool();
            msg.setHasnext(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.GetBlockResponse.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.GetBlockResponse.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.GetBlockResponse} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.GetBlockResponse.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getStatus();

      if (f !== 0.0) {
        writer.writeEnum(1, f);
      }

      f = message.getBlocksList();

      if (f.length > 0) {
        writer.writeRepeatedMessage(2, f, blockchain_pb.Block.serializeBinaryToWriter);
      }

      f = message.getHasnext();

      if (f) {
        writer.writeBool(3, f);
      }
    };
    /**
     * optional ResultStatus status = 1;
     * @return {!proto.types.ResultStatus}
     */


    proto.types.GetBlockResponse.prototype.getStatus = function () {
      return (
        /** @type {!proto.types.ResultStatus} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, 0)
      );
    };
    /** @param {!proto.types.ResultStatus} value */


    proto.types.GetBlockResponse.prototype.setStatus = function (value) {
      googleProtobuf.Message.setProto3EnumField(this, 1, value);
    };
    /**
     * repeated Block blocks = 2;
     * @return {!Array<!proto.types.Block>}
     */


    proto.types.GetBlockResponse.prototype.getBlocksList = function () {
      return (
        /** @type{!Array<!proto.types.Block>} */
        googleProtobuf.Message.getRepeatedWrapperField(this, blockchain_pb.Block, 2)
      );
    };
    /** @param {!Array<!proto.types.Block>} value */


    proto.types.GetBlockResponse.prototype.setBlocksList = function (value) {
      googleProtobuf.Message.setRepeatedWrapperField(this, 2, value);
    };
    /**
     * @param {!proto.types.Block=} opt_value
     * @param {number=} opt_index
     * @return {!proto.types.Block}
     */


    proto.types.GetBlockResponse.prototype.addBlocks = function (opt_value, opt_index) {
      return googleProtobuf.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.types.Block, opt_index);
    };

    proto.types.GetBlockResponse.prototype.clearBlocksList = function () {
      this.setBlocksList([]);
    };
    /**
     * optional bool hasNext = 3;
     * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
     * You should avoid comparisons like {@code val === true/false} in those cases.
     * @return {boolean}
     */


    proto.types.GetBlockResponse.prototype.getHasnext = function () {
      return (
        /** @type {boolean} */
        googleProtobuf.Message.getFieldWithDefault(this, 3, false)
      );
    };
    /** @param {boolean} value */


    proto.types.GetBlockResponse.prototype.setHasnext = function (value) {
      googleProtobuf.Message.setProto3BooleanField(this, 3, value);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.NewTransactionsNotice = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, proto.types.NewTransactionsNotice.repeatedFields_, null);
    };

    goog.inherits(proto.types.NewTransactionsNotice, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.NewTransactionsNotice.displayName = 'proto.types.NewTransactionsNotice';
    }
    /**
     * List of repeated fields within this message type.
     * @private {!Array<number>}
     * @const
     */


    proto.types.NewTransactionsNotice.repeatedFields_ = [1];

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.NewTransactionsNotice.prototype.toObject = function (opt_includeInstance) {
        return proto.types.NewTransactionsNotice.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.NewTransactionsNotice} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.NewTransactionsNotice.toObject = function (includeInstance, msg) {
        var obj = {
          txhashesList: msg.getTxhashesList_asB64()
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.NewTransactionsNotice}
     */


    proto.types.NewTransactionsNotice.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.NewTransactionsNotice();
      return proto.types.NewTransactionsNotice.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.NewTransactionsNotice} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.NewTransactionsNotice}
     */


    proto.types.NewTransactionsNotice.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.addTxhashes(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.NewTransactionsNotice.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.NewTransactionsNotice.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.NewTransactionsNotice} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.NewTransactionsNotice.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getTxhashesList_asU8();

      if (f.length > 0) {
        writer.writeRepeatedBytes(1, f);
      }
    };
    /**
     * repeated bytes txHashes = 1;
     * @return {!(Array<!Uint8Array>|Array<string>)}
     */


    proto.types.NewTransactionsNotice.prototype.getTxhashesList = function () {
      return (
        /** @type {!(Array<!Uint8Array>|Array<string>)} */
        googleProtobuf.Message.getRepeatedField(this, 1)
      );
    };
    /**
     * repeated bytes txHashes = 1;
     * This is a type-conversion wrapper around `getTxhashesList()`
     * @return {!Array<string>}
     */


    proto.types.NewTransactionsNotice.prototype.getTxhashesList_asB64 = function () {
      return (
        /** @type {!Array<string>} */
        googleProtobuf.Message.bytesListAsB64(this.getTxhashesList())
      );
    };
    /**
     * repeated bytes txHashes = 1;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getTxhashesList()`
     * @return {!Array<!Uint8Array>}
     */


    proto.types.NewTransactionsNotice.prototype.getTxhashesList_asU8 = function () {
      return (
        /** @type {!Array<!Uint8Array>} */
        googleProtobuf.Message.bytesListAsU8(this.getTxhashesList())
      );
    };
    /** @param {!(Array<!Uint8Array>|Array<string>)} value */


    proto.types.NewTransactionsNotice.prototype.setTxhashesList = function (value) {
      googleProtobuf.Message.setField(this, 1, value || []);
    };
    /**
     * @param {!(string|Uint8Array)} value
     * @param {number=} opt_index
     */


    proto.types.NewTransactionsNotice.prototype.addTxhashes = function (value, opt_index) {
      googleProtobuf.Message.addToRepeatedField(this, 1, value, opt_index);
    };

    proto.types.NewTransactionsNotice.prototype.clearTxhashesList = function () {
      this.setTxhashesList([]);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.GetTransactionsRequest = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, proto.types.GetTransactionsRequest.repeatedFields_, null);
    };

    goog.inherits(proto.types.GetTransactionsRequest, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.GetTransactionsRequest.displayName = 'proto.types.GetTransactionsRequest';
    }
    /**
     * List of repeated fields within this message type.
     * @private {!Array<number>}
     * @const
     */


    proto.types.GetTransactionsRequest.repeatedFields_ = [1];

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.GetTransactionsRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.types.GetTransactionsRequest.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.GetTransactionsRequest} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.GetTransactionsRequest.toObject = function (includeInstance, msg) {
        var obj = {
          hashesList: msg.getHashesList_asB64()
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.GetTransactionsRequest}
     */


    proto.types.GetTransactionsRequest.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.GetTransactionsRequest();
      return proto.types.GetTransactionsRequest.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.GetTransactionsRequest} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.GetTransactionsRequest}
     */


    proto.types.GetTransactionsRequest.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.addHashes(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.GetTransactionsRequest.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.GetTransactionsRequest.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.GetTransactionsRequest} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.GetTransactionsRequest.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getHashesList_asU8();

      if (f.length > 0) {
        writer.writeRepeatedBytes(1, f);
      }
    };
    /**
     * repeated bytes hashes = 1;
     * @return {!(Array<!Uint8Array>|Array<string>)}
     */


    proto.types.GetTransactionsRequest.prototype.getHashesList = function () {
      return (
        /** @type {!(Array<!Uint8Array>|Array<string>)} */
        googleProtobuf.Message.getRepeatedField(this, 1)
      );
    };
    /**
     * repeated bytes hashes = 1;
     * This is a type-conversion wrapper around `getHashesList()`
     * @return {!Array<string>}
     */


    proto.types.GetTransactionsRequest.prototype.getHashesList_asB64 = function () {
      return (
        /** @type {!Array<string>} */
        googleProtobuf.Message.bytesListAsB64(this.getHashesList())
      );
    };
    /**
     * repeated bytes hashes = 1;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getHashesList()`
     * @return {!Array<!Uint8Array>}
     */


    proto.types.GetTransactionsRequest.prototype.getHashesList_asU8 = function () {
      return (
        /** @type {!Array<!Uint8Array>} */
        googleProtobuf.Message.bytesListAsU8(this.getHashesList())
      );
    };
    /** @param {!(Array<!Uint8Array>|Array<string>)} value */


    proto.types.GetTransactionsRequest.prototype.setHashesList = function (value) {
      googleProtobuf.Message.setField(this, 1, value || []);
    };
    /**
     * @param {!(string|Uint8Array)} value
     * @param {number=} opt_index
     */


    proto.types.GetTransactionsRequest.prototype.addHashes = function (value, opt_index) {
      googleProtobuf.Message.addToRepeatedField(this, 1, value, opt_index);
    };

    proto.types.GetTransactionsRequest.prototype.clearHashesList = function () {
      this.setHashesList([]);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.GetTransactionsResponse = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, proto.types.GetTransactionsResponse.repeatedFields_, null);
    };

    goog.inherits(proto.types.GetTransactionsResponse, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.GetTransactionsResponse.displayName = 'proto.types.GetTransactionsResponse';
    }
    /**
     * List of repeated fields within this message type.
     * @private {!Array<number>}
     * @const
     */


    proto.types.GetTransactionsResponse.repeatedFields_ = [2, 3];

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.GetTransactionsResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.types.GetTransactionsResponse.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.GetTransactionsResponse} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.GetTransactionsResponse.toObject = function (includeInstance, msg) {
        var obj = {
          status: googleProtobuf.Message.getFieldWithDefault(msg, 1, 0),
          hashesList: msg.getHashesList_asB64(),
          txsList: googleProtobuf.Message.toObjectList(msg.getTxsList(), blockchain_pb.Tx.toObject, includeInstance),
          hasnext: googleProtobuf.Message.getFieldWithDefault(msg, 4, false)
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.GetTransactionsResponse}
     */


    proto.types.GetTransactionsResponse.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.GetTransactionsResponse();
      return proto.types.GetTransactionsResponse.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.GetTransactionsResponse} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.GetTransactionsResponse}
     */


    proto.types.GetTransactionsResponse.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {!proto.types.ResultStatus} */
            reader.readEnum();
            msg.setStatus(value);
            break;

          case 2:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.addHashes(value);
            break;

          case 3:
            var value = new blockchain_pb.Tx();
            reader.readMessage(value, blockchain_pb.Tx.deserializeBinaryFromReader);
            msg.addTxs(value);
            break;

          case 4:
            var value =
            /** @type {boolean} */
            reader.readBool();
            msg.setHasnext(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.GetTransactionsResponse.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.GetTransactionsResponse.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.GetTransactionsResponse} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.GetTransactionsResponse.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getStatus();

      if (f !== 0.0) {
        writer.writeEnum(1, f);
      }

      f = message.getHashesList_asU8();

      if (f.length > 0) {
        writer.writeRepeatedBytes(2, f);
      }

      f = message.getTxsList();

      if (f.length > 0) {
        writer.writeRepeatedMessage(3, f, blockchain_pb.Tx.serializeBinaryToWriter);
      }

      f = message.getHasnext();

      if (f) {
        writer.writeBool(4, f);
      }
    };
    /**
     * optional ResultStatus status = 1;
     * @return {!proto.types.ResultStatus}
     */


    proto.types.GetTransactionsResponse.prototype.getStatus = function () {
      return (
        /** @type {!proto.types.ResultStatus} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, 0)
      );
    };
    /** @param {!proto.types.ResultStatus} value */


    proto.types.GetTransactionsResponse.prototype.setStatus = function (value) {
      googleProtobuf.Message.setProto3EnumField(this, 1, value);
    };
    /**
     * repeated bytes hashes = 2;
     * @return {!(Array<!Uint8Array>|Array<string>)}
     */


    proto.types.GetTransactionsResponse.prototype.getHashesList = function () {
      return (
        /** @type {!(Array<!Uint8Array>|Array<string>)} */
        googleProtobuf.Message.getRepeatedField(this, 2)
      );
    };
    /**
     * repeated bytes hashes = 2;
     * This is a type-conversion wrapper around `getHashesList()`
     * @return {!Array<string>}
     */


    proto.types.GetTransactionsResponse.prototype.getHashesList_asB64 = function () {
      return (
        /** @type {!Array<string>} */
        googleProtobuf.Message.bytesListAsB64(this.getHashesList())
      );
    };
    /**
     * repeated bytes hashes = 2;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getHashesList()`
     * @return {!Array<!Uint8Array>}
     */


    proto.types.GetTransactionsResponse.prototype.getHashesList_asU8 = function () {
      return (
        /** @type {!Array<!Uint8Array>} */
        googleProtobuf.Message.bytesListAsU8(this.getHashesList())
      );
    };
    /** @param {!(Array<!Uint8Array>|Array<string>)} value */


    proto.types.GetTransactionsResponse.prototype.setHashesList = function (value) {
      googleProtobuf.Message.setField(this, 2, value || []);
    };
    /**
     * @param {!(string|Uint8Array)} value
     * @param {number=} opt_index
     */


    proto.types.GetTransactionsResponse.prototype.addHashes = function (value, opt_index) {
      googleProtobuf.Message.addToRepeatedField(this, 2, value, opt_index);
    };

    proto.types.GetTransactionsResponse.prototype.clearHashesList = function () {
      this.setHashesList([]);
    };
    /**
     * repeated Tx txs = 3;
     * @return {!Array<!proto.types.Tx>}
     */


    proto.types.GetTransactionsResponse.prototype.getTxsList = function () {
      return (
        /** @type{!Array<!proto.types.Tx>} */
        googleProtobuf.Message.getRepeatedWrapperField(this, blockchain_pb.Tx, 3)
      );
    };
    /** @param {!Array<!proto.types.Tx>} value */


    proto.types.GetTransactionsResponse.prototype.setTxsList = function (value) {
      googleProtobuf.Message.setRepeatedWrapperField(this, 3, value);
    };
    /**
     * @param {!proto.types.Tx=} opt_value
     * @param {number=} opt_index
     * @return {!proto.types.Tx}
     */


    proto.types.GetTransactionsResponse.prototype.addTxs = function (opt_value, opt_index) {
      return googleProtobuf.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.types.Tx, opt_index);
    };

    proto.types.GetTransactionsResponse.prototype.clearTxsList = function () {
      this.setTxsList([]);
    };
    /**
     * optional bool hasNext = 4;
     * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
     * You should avoid comparisons like {@code val === true/false} in those cases.
     * @return {boolean}
     */


    proto.types.GetTransactionsResponse.prototype.getHasnext = function () {
      return (
        /** @type {boolean} */
        googleProtobuf.Message.getFieldWithDefault(this, 4, false)
      );
    };
    /** @param {boolean} value */


    proto.types.GetTransactionsResponse.prototype.setHasnext = function (value) {
      googleProtobuf.Message.setProto3BooleanField(this, 4, value);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.GetMissingRequest = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, proto.types.GetMissingRequest.repeatedFields_, null);
    };

    goog.inherits(proto.types.GetMissingRequest, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.GetMissingRequest.displayName = 'proto.types.GetMissingRequest';
    }
    /**
     * List of repeated fields within this message type.
     * @private {!Array<number>}
     * @const
     */


    proto.types.GetMissingRequest.repeatedFields_ = [1];

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.GetMissingRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.types.GetMissingRequest.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.GetMissingRequest} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.GetMissingRequest.toObject = function (includeInstance, msg) {
        var obj = {
          hashesList: msg.getHashesList_asB64(),
          stophash: msg.getStophash_asB64()
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.GetMissingRequest}
     */


    proto.types.GetMissingRequest.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.GetMissingRequest();
      return proto.types.GetMissingRequest.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.GetMissingRequest} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.GetMissingRequest}
     */


    proto.types.GetMissingRequest.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.addHashes(value);
            break;

          case 2:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setStophash(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.GetMissingRequest.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.GetMissingRequest.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.GetMissingRequest} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.GetMissingRequest.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getHashesList_asU8();

      if (f.length > 0) {
        writer.writeRepeatedBytes(1, f);
      }

      f = message.getStophash_asU8();

      if (f.length > 0) {
        writer.writeBytes(2, f);
      }
    };
    /**
     * repeated bytes hashes = 1;
     * @return {!(Array<!Uint8Array>|Array<string>)}
     */


    proto.types.GetMissingRequest.prototype.getHashesList = function () {
      return (
        /** @type {!(Array<!Uint8Array>|Array<string>)} */
        googleProtobuf.Message.getRepeatedField(this, 1)
      );
    };
    /**
     * repeated bytes hashes = 1;
     * This is a type-conversion wrapper around `getHashesList()`
     * @return {!Array<string>}
     */


    proto.types.GetMissingRequest.prototype.getHashesList_asB64 = function () {
      return (
        /** @type {!Array<string>} */
        googleProtobuf.Message.bytesListAsB64(this.getHashesList())
      );
    };
    /**
     * repeated bytes hashes = 1;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getHashesList()`
     * @return {!Array<!Uint8Array>}
     */


    proto.types.GetMissingRequest.prototype.getHashesList_asU8 = function () {
      return (
        /** @type {!Array<!Uint8Array>} */
        googleProtobuf.Message.bytesListAsU8(this.getHashesList())
      );
    };
    /** @param {!(Array<!Uint8Array>|Array<string>)} value */


    proto.types.GetMissingRequest.prototype.setHashesList = function (value) {
      googleProtobuf.Message.setField(this, 1, value || []);
    };
    /**
     * @param {!(string|Uint8Array)} value
     * @param {number=} opt_index
     */


    proto.types.GetMissingRequest.prototype.addHashes = function (value, opt_index) {
      googleProtobuf.Message.addToRepeatedField(this, 1, value, opt_index);
    };

    proto.types.GetMissingRequest.prototype.clearHashesList = function () {
      this.setHashesList([]);
    };
    /**
     * optional bytes stophash = 2;
     * @return {!(string|Uint8Array)}
     */


    proto.types.GetMissingRequest.prototype.getStophash = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 2, "")
      );
    };
    /**
     * optional bytes stophash = 2;
     * This is a type-conversion wrapper around `getStophash()`
     * @return {string}
     */


    proto.types.GetMissingRequest.prototype.getStophash_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getStophash())
      );
    };
    /**
     * optional bytes stophash = 2;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getStophash()`
     * @return {!Uint8Array}
     */


    proto.types.GetMissingRequest.prototype.getStophash_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getStophash())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.GetMissingRequest.prototype.setStophash = function (value) {
      googleProtobuf.Message.setProto3BytesField(this, 2, value);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.GetAncestorRequest = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, proto.types.GetAncestorRequest.repeatedFields_, null);
    };

    goog.inherits(proto.types.GetAncestorRequest, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.GetAncestorRequest.displayName = 'proto.types.GetAncestorRequest';
    }
    /**
     * List of repeated fields within this message type.
     * @private {!Array<number>}
     * @const
     */


    proto.types.GetAncestorRequest.repeatedFields_ = [1];

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.GetAncestorRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.types.GetAncestorRequest.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.GetAncestorRequest} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.GetAncestorRequest.toObject = function (includeInstance, msg) {
        var obj = {
          hashesList: msg.getHashesList_asB64()
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.GetAncestorRequest}
     */


    proto.types.GetAncestorRequest.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.GetAncestorRequest();
      return proto.types.GetAncestorRequest.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.GetAncestorRequest} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.GetAncestorRequest}
     */


    proto.types.GetAncestorRequest.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.addHashes(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.GetAncestorRequest.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.GetAncestorRequest.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.GetAncestorRequest} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.GetAncestorRequest.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getHashesList_asU8();

      if (f.length > 0) {
        writer.writeRepeatedBytes(1, f);
      }
    };
    /**
     * repeated bytes hashes = 1;
     * @return {!(Array<!Uint8Array>|Array<string>)}
     */


    proto.types.GetAncestorRequest.prototype.getHashesList = function () {
      return (
        /** @type {!(Array<!Uint8Array>|Array<string>)} */
        googleProtobuf.Message.getRepeatedField(this, 1)
      );
    };
    /**
     * repeated bytes hashes = 1;
     * This is a type-conversion wrapper around `getHashesList()`
     * @return {!Array<string>}
     */


    proto.types.GetAncestorRequest.prototype.getHashesList_asB64 = function () {
      return (
        /** @type {!Array<string>} */
        googleProtobuf.Message.bytesListAsB64(this.getHashesList())
      );
    };
    /**
     * repeated bytes hashes = 1;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getHashesList()`
     * @return {!Array<!Uint8Array>}
     */


    proto.types.GetAncestorRequest.prototype.getHashesList_asU8 = function () {
      return (
        /** @type {!Array<!Uint8Array>} */
        googleProtobuf.Message.bytesListAsU8(this.getHashesList())
      );
    };
    /** @param {!(Array<!Uint8Array>|Array<string>)} value */


    proto.types.GetAncestorRequest.prototype.setHashesList = function (value) {
      googleProtobuf.Message.setField(this, 1, value || []);
    };
    /**
     * @param {!(string|Uint8Array)} value
     * @param {number=} opt_index
     */


    proto.types.GetAncestorRequest.prototype.addHashes = function (value, opt_index) {
      googleProtobuf.Message.addToRepeatedField(this, 1, value, opt_index);
    };

    proto.types.GetAncestorRequest.prototype.clearHashesList = function () {
      this.setHashesList([]);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.GetAncestorResponse = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.GetAncestorResponse, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.GetAncestorResponse.displayName = 'proto.types.GetAncestorResponse';
    }

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.GetAncestorResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.types.GetAncestorResponse.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.GetAncestorResponse} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.GetAncestorResponse.toObject = function (includeInstance, msg) {
        var obj = {
          status: googleProtobuf.Message.getFieldWithDefault(msg, 1, 0),
          ancestorhash: msg.getAncestorhash_asB64(),
          ancestorno: googleProtobuf.Message.getFieldWithDefault(msg, 3, 0)
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.GetAncestorResponse}
     */


    proto.types.GetAncestorResponse.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.GetAncestorResponse();
      return proto.types.GetAncestorResponse.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.GetAncestorResponse} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.GetAncestorResponse}
     */


    proto.types.GetAncestorResponse.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {!proto.types.ResultStatus} */
            reader.readEnum();
            msg.setStatus(value);
            break;

          case 2:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setAncestorhash(value);
            break;

          case 3:
            var value =
            /** @type {number} */
            reader.readUint64();
            msg.setAncestorno(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.GetAncestorResponse.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.GetAncestorResponse.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.GetAncestorResponse} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.GetAncestorResponse.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getStatus();

      if (f !== 0.0) {
        writer.writeEnum(1, f);
      }

      f = message.getAncestorhash_asU8();

      if (f.length > 0) {
        writer.writeBytes(2, f);
      }

      f = message.getAncestorno();

      if (f !== 0) {
        writer.writeUint64(3, f);
      }
    };
    /**
     * optional ResultStatus status = 1;
     * @return {!proto.types.ResultStatus}
     */


    proto.types.GetAncestorResponse.prototype.getStatus = function () {
      return (
        /** @type {!proto.types.ResultStatus} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, 0)
      );
    };
    /** @param {!proto.types.ResultStatus} value */


    proto.types.GetAncestorResponse.prototype.setStatus = function (value) {
      googleProtobuf.Message.setProto3EnumField(this, 1, value);
    };
    /**
     * optional bytes ancestorHash = 2;
     * @return {!(string|Uint8Array)}
     */


    proto.types.GetAncestorResponse.prototype.getAncestorhash = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 2, "")
      );
    };
    /**
     * optional bytes ancestorHash = 2;
     * This is a type-conversion wrapper around `getAncestorhash()`
     * @return {string}
     */


    proto.types.GetAncestorResponse.prototype.getAncestorhash_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getAncestorhash())
      );
    };
    /**
     * optional bytes ancestorHash = 2;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getAncestorhash()`
     * @return {!Uint8Array}
     */


    proto.types.GetAncestorResponse.prototype.getAncestorhash_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getAncestorhash())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.GetAncestorResponse.prototype.setAncestorhash = function (value) {
      googleProtobuf.Message.setProto3BytesField(this, 2, value);
    };
    /**
     * optional uint64 ancestorNo = 3;
     * @return {number}
     */


    proto.types.GetAncestorResponse.prototype.getAncestorno = function () {
      return (
        /** @type {number} */
        googleProtobuf.Message.getFieldWithDefault(this, 3, 0)
      );
    };
    /** @param {number} value */


    proto.types.GetAncestorResponse.prototype.setAncestorno = function (value) {
      googleProtobuf.Message.setProto3IntField(this, 3, value);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.GetHashByNo = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.GetHashByNo, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.GetHashByNo.displayName = 'proto.types.GetHashByNo';
    }

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.GetHashByNo.prototype.toObject = function (opt_includeInstance) {
        return proto.types.GetHashByNo.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.GetHashByNo} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.GetHashByNo.toObject = function (includeInstance, msg) {
        var obj = {
          blockno: googleProtobuf.Message.getFieldWithDefault(msg, 1, 0)
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.GetHashByNo}
     */


    proto.types.GetHashByNo.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.GetHashByNo();
      return proto.types.GetHashByNo.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.GetHashByNo} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.GetHashByNo}
     */


    proto.types.GetHashByNo.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {number} */
            reader.readUint64();
            msg.setBlockno(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.GetHashByNo.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.GetHashByNo.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.GetHashByNo} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.GetHashByNo.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getBlockno();

      if (f !== 0) {
        writer.writeUint64(1, f);
      }
    };
    /**
     * optional uint64 blockNo = 1;
     * @return {number}
     */


    proto.types.GetHashByNo.prototype.getBlockno = function () {
      return (
        /** @type {number} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, 0)
      );
    };
    /** @param {number} value */


    proto.types.GetHashByNo.prototype.setBlockno = function (value) {
      googleProtobuf.Message.setProto3IntField(this, 1, value);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.GetHashByNoResponse = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.GetHashByNoResponse, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.GetHashByNoResponse.displayName = 'proto.types.GetHashByNoResponse';
    }

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.GetHashByNoResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.types.GetHashByNoResponse.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.GetHashByNoResponse} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.GetHashByNoResponse.toObject = function (includeInstance, msg) {
        var obj = {
          status: googleProtobuf.Message.getFieldWithDefault(msg, 1, 0),
          blockhash: msg.getBlockhash_asB64()
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.GetHashByNoResponse}
     */


    proto.types.GetHashByNoResponse.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.GetHashByNoResponse();
      return proto.types.GetHashByNoResponse.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.GetHashByNoResponse} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.GetHashByNoResponse}
     */


    proto.types.GetHashByNoResponse.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {!proto.types.ResultStatus} */
            reader.readEnum();
            msg.setStatus(value);
            break;

          case 2:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setBlockhash(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.GetHashByNoResponse.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.GetHashByNoResponse.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.GetHashByNoResponse} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.GetHashByNoResponse.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getStatus();

      if (f !== 0.0) {
        writer.writeEnum(1, f);
      }

      f = message.getBlockhash_asU8();

      if (f.length > 0) {
        writer.writeBytes(2, f);
      }
    };
    /**
     * optional ResultStatus status = 1;
     * @return {!proto.types.ResultStatus}
     */


    proto.types.GetHashByNoResponse.prototype.getStatus = function () {
      return (
        /** @type {!proto.types.ResultStatus} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, 0)
      );
    };
    /** @param {!proto.types.ResultStatus} value */


    proto.types.GetHashByNoResponse.prototype.setStatus = function (value) {
      googleProtobuf.Message.setProto3EnumField(this, 1, value);
    };
    /**
     * optional bytes blockHash = 2;
     * @return {!(string|Uint8Array)}
     */


    proto.types.GetHashByNoResponse.prototype.getBlockhash = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 2, "")
      );
    };
    /**
     * optional bytes blockHash = 2;
     * This is a type-conversion wrapper around `getBlockhash()`
     * @return {string}
     */


    proto.types.GetHashByNoResponse.prototype.getBlockhash_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getBlockhash())
      );
    };
    /**
     * optional bytes blockHash = 2;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getBlockhash()`
     * @return {!Uint8Array}
     */


    proto.types.GetHashByNoResponse.prototype.getBlockhash_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getBlockhash())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.GetHashByNoResponse.prototype.setBlockhash = function (value) {
      googleProtobuf.Message.setProto3BytesField(this, 2, value);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.GetHashesRequest = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.GetHashesRequest, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.GetHashesRequest.displayName = 'proto.types.GetHashesRequest';
    }

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.GetHashesRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.types.GetHashesRequest.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.GetHashesRequest} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.GetHashesRequest.toObject = function (includeInstance, msg) {
        var obj = {
          prevhash: msg.getPrevhash_asB64(),
          prevnumber: googleProtobuf.Message.getFieldWithDefault(msg, 2, 0),
          size: googleProtobuf.Message.getFieldWithDefault(msg, 3, 0)
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.GetHashesRequest}
     */


    proto.types.GetHashesRequest.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.GetHashesRequest();
      return proto.types.GetHashesRequest.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.GetHashesRequest} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.GetHashesRequest}
     */


    proto.types.GetHashesRequest.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setPrevhash(value);
            break;

          case 2:
            var value =
            /** @type {number} */
            reader.readUint64();
            msg.setPrevnumber(value);
            break;

          case 3:
            var value =
            /** @type {number} */
            reader.readUint64();
            msg.setSize(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.GetHashesRequest.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.GetHashesRequest.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.GetHashesRequest} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.GetHashesRequest.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getPrevhash_asU8();

      if (f.length > 0) {
        writer.writeBytes(1, f);
      }

      f = message.getPrevnumber();

      if (f !== 0) {
        writer.writeUint64(2, f);
      }

      f = message.getSize();

      if (f !== 0) {
        writer.writeUint64(3, f);
      }
    };
    /**
     * optional bytes prevHash = 1;
     * @return {!(string|Uint8Array)}
     */


    proto.types.GetHashesRequest.prototype.getPrevhash = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, "")
      );
    };
    /**
     * optional bytes prevHash = 1;
     * This is a type-conversion wrapper around `getPrevhash()`
     * @return {string}
     */


    proto.types.GetHashesRequest.prototype.getPrevhash_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getPrevhash())
      );
    };
    /**
     * optional bytes prevHash = 1;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getPrevhash()`
     * @return {!Uint8Array}
     */


    proto.types.GetHashesRequest.prototype.getPrevhash_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getPrevhash())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.GetHashesRequest.prototype.setPrevhash = function (value) {
      googleProtobuf.Message.setProto3BytesField(this, 1, value);
    };
    /**
     * optional uint64 prevNumber = 2;
     * @return {number}
     */


    proto.types.GetHashesRequest.prototype.getPrevnumber = function () {
      return (
        /** @type {number} */
        googleProtobuf.Message.getFieldWithDefault(this, 2, 0)
      );
    };
    /** @param {number} value */


    proto.types.GetHashesRequest.prototype.setPrevnumber = function (value) {
      googleProtobuf.Message.setProto3IntField(this, 2, value);
    };
    /**
     * optional uint64 size = 3;
     * @return {number}
     */


    proto.types.GetHashesRequest.prototype.getSize = function () {
      return (
        /** @type {number} */
        googleProtobuf.Message.getFieldWithDefault(this, 3, 0)
      );
    };
    /** @param {number} value */


    proto.types.GetHashesRequest.prototype.setSize = function (value) {
      googleProtobuf.Message.setProto3IntField(this, 3, value);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.GetHashesResponse = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, proto.types.GetHashesResponse.repeatedFields_, null);
    };

    goog.inherits(proto.types.GetHashesResponse, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.GetHashesResponse.displayName = 'proto.types.GetHashesResponse';
    }
    /**
     * List of repeated fields within this message type.
     * @private {!Array<number>}
     * @const
     */


    proto.types.GetHashesResponse.repeatedFields_ = [2];

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.GetHashesResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.types.GetHashesResponse.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.GetHashesResponse} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.GetHashesResponse.toObject = function (includeInstance, msg) {
        var obj = {
          status: googleProtobuf.Message.getFieldWithDefault(msg, 1, 0),
          hashesList: msg.getHashesList_asB64(),
          hasnext: googleProtobuf.Message.getFieldWithDefault(msg, 3, false)
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.GetHashesResponse}
     */


    proto.types.GetHashesResponse.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.GetHashesResponse();
      return proto.types.GetHashesResponse.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.GetHashesResponse} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.GetHashesResponse}
     */


    proto.types.GetHashesResponse.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {!proto.types.ResultStatus} */
            reader.readEnum();
            msg.setStatus(value);
            break;

          case 2:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.addHashes(value);
            break;

          case 3:
            var value =
            /** @type {boolean} */
            reader.readBool();
            msg.setHasnext(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.GetHashesResponse.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.GetHashesResponse.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.GetHashesResponse} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.GetHashesResponse.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getStatus();

      if (f !== 0.0) {
        writer.writeEnum(1, f);
      }

      f = message.getHashesList_asU8();

      if (f.length > 0) {
        writer.writeRepeatedBytes(2, f);
      }

      f = message.getHasnext();

      if (f) {
        writer.writeBool(3, f);
      }
    };
    /**
     * optional ResultStatus status = 1;
     * @return {!proto.types.ResultStatus}
     */


    proto.types.GetHashesResponse.prototype.getStatus = function () {
      return (
        /** @type {!proto.types.ResultStatus} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, 0)
      );
    };
    /** @param {!proto.types.ResultStatus} value */


    proto.types.GetHashesResponse.prototype.setStatus = function (value) {
      googleProtobuf.Message.setProto3EnumField(this, 1, value);
    };
    /**
     * repeated bytes hashes = 2;
     * @return {!(Array<!Uint8Array>|Array<string>)}
     */


    proto.types.GetHashesResponse.prototype.getHashesList = function () {
      return (
        /** @type {!(Array<!Uint8Array>|Array<string>)} */
        googleProtobuf.Message.getRepeatedField(this, 2)
      );
    };
    /**
     * repeated bytes hashes = 2;
     * This is a type-conversion wrapper around `getHashesList()`
     * @return {!Array<string>}
     */


    proto.types.GetHashesResponse.prototype.getHashesList_asB64 = function () {
      return (
        /** @type {!Array<string>} */
        googleProtobuf.Message.bytesListAsB64(this.getHashesList())
      );
    };
    /**
     * repeated bytes hashes = 2;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getHashesList()`
     * @return {!Array<!Uint8Array>}
     */


    proto.types.GetHashesResponse.prototype.getHashesList_asU8 = function () {
      return (
        /** @type {!Array<!Uint8Array>} */
        googleProtobuf.Message.bytesListAsU8(this.getHashesList())
      );
    };
    /** @param {!(Array<!Uint8Array>|Array<string>)} value */


    proto.types.GetHashesResponse.prototype.setHashesList = function (value) {
      googleProtobuf.Message.setField(this, 2, value || []);
    };
    /**
     * @param {!(string|Uint8Array)} value
     * @param {number=} opt_index
     */


    proto.types.GetHashesResponse.prototype.addHashes = function (value, opt_index) {
      googleProtobuf.Message.addToRepeatedField(this, 2, value, opt_index);
    };

    proto.types.GetHashesResponse.prototype.clearHashesList = function () {
      this.setHashesList([]);
    };
    /**
     * optional bool hasNext = 3;
     * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
     * You should avoid comparisons like {@code val === true/false} in those cases.
     * @return {boolean}
     */


    proto.types.GetHashesResponse.prototype.getHasnext = function () {
      return (
        /** @type {boolean} */
        googleProtobuf.Message.getFieldWithDefault(this, 3, false)
      );
    };
    /** @param {boolean} value */


    proto.types.GetHashesResponse.prototype.setHasnext = function (value) {
      googleProtobuf.Message.setProto3BooleanField(this, 3, value);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.IssueCertificateRequest = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.IssueCertificateRequest, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.IssueCertificateRequest.displayName = 'proto.types.IssueCertificateRequest';
    }

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.IssueCertificateRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.types.IssueCertificateRequest.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.IssueCertificateRequest} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.IssueCertificateRequest.toObject = function (includeInstance, msg) {
        var obj = {};

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.IssueCertificateRequest}
     */


    proto.types.IssueCertificateRequest.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.IssueCertificateRequest();
      return proto.types.IssueCertificateRequest.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.IssueCertificateRequest} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.IssueCertificateRequest}
     */


    proto.types.IssueCertificateRequest.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.IssueCertificateRequest.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.IssueCertificateRequest.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.IssueCertificateRequest} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.IssueCertificateRequest.serializeBinaryToWriter = function (message, writer) {
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.IssueCertificateResponse = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.IssueCertificateResponse, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.IssueCertificateResponse.displayName = 'proto.types.IssueCertificateResponse';
    }

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.IssueCertificateResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.types.IssueCertificateResponse.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.IssueCertificateResponse} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.IssueCertificateResponse.toObject = function (includeInstance, msg) {
        var f,
            obj = {
          status: googleProtobuf.Message.getFieldWithDefault(msg, 1, 0),
          certificate: (f = msg.getCertificate()) && node_pb.AgentCertificate.toObject(includeInstance, f)
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.IssueCertificateResponse}
     */


    proto.types.IssueCertificateResponse.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.IssueCertificateResponse();
      return proto.types.IssueCertificateResponse.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.IssueCertificateResponse} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.IssueCertificateResponse}
     */


    proto.types.IssueCertificateResponse.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {!proto.types.ResultStatus} */
            reader.readEnum();
            msg.setStatus(value);
            break;

          case 2:
            var value = new node_pb.AgentCertificate();
            reader.readMessage(value, node_pb.AgentCertificate.deserializeBinaryFromReader);
            msg.setCertificate(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.IssueCertificateResponse.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.IssueCertificateResponse.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.IssueCertificateResponse} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.IssueCertificateResponse.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getStatus();

      if (f !== 0.0) {
        writer.writeEnum(1, f);
      }

      f = message.getCertificate();

      if (f != null) {
        writer.writeMessage(2, f, node_pb.AgentCertificate.serializeBinaryToWriter);
      }
    };
    /**
     * optional ResultStatus status = 1;
     * @return {!proto.types.ResultStatus}
     */


    proto.types.IssueCertificateResponse.prototype.getStatus = function () {
      return (
        /** @type {!proto.types.ResultStatus} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, 0)
      );
    };
    /** @param {!proto.types.ResultStatus} value */


    proto.types.IssueCertificateResponse.prototype.setStatus = function (value) {
      googleProtobuf.Message.setProto3EnumField(this, 1, value);
    };
    /**
     * optional AgentCertificate certificate = 2;
     * @return {?proto.types.AgentCertificate}
     */


    proto.types.IssueCertificateResponse.prototype.getCertificate = function () {
      return (
        /** @type{?proto.types.AgentCertificate} */
        googleProtobuf.Message.getWrapperField(this, node_pb.AgentCertificate, 2)
      );
    };
    /** @param {?proto.types.AgentCertificate|undefined} value */


    proto.types.IssueCertificateResponse.prototype.setCertificate = function (value) {
      googleProtobuf.Message.setWrapperField(this, 2, value);
    };

    proto.types.IssueCertificateResponse.prototype.clearCertificate = function () {
      this.setCertificate(undefined);
    };
    /**
     * Returns whether this field is set.
     * @return {boolean}
     */


    proto.types.IssueCertificateResponse.prototype.hasCertificate = function () {
      return googleProtobuf.Message.getField(this, 2) != null;
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.CertificateRenewedNotice = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.CertificateRenewedNotice, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.CertificateRenewedNotice.displayName = 'proto.types.CertificateRenewedNotice';
    }

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.CertificateRenewedNotice.prototype.toObject = function (opt_includeInstance) {
        return proto.types.CertificateRenewedNotice.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.CertificateRenewedNotice} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.CertificateRenewedNotice.toObject = function (includeInstance, msg) {
        var f,
            obj = {
          certificate: (f = msg.getCertificate()) && node_pb.AgentCertificate.toObject(includeInstance, f)
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.CertificateRenewedNotice}
     */


    proto.types.CertificateRenewedNotice.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.CertificateRenewedNotice();
      return proto.types.CertificateRenewedNotice.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.CertificateRenewedNotice} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.CertificateRenewedNotice}
     */


    proto.types.CertificateRenewedNotice.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 2:
            var value = new node_pb.AgentCertificate();
            reader.readMessage(value, node_pb.AgentCertificate.deserializeBinaryFromReader);
            msg.setCertificate(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.CertificateRenewedNotice.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.CertificateRenewedNotice.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.CertificateRenewedNotice} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.CertificateRenewedNotice.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getCertificate();

      if (f != null) {
        writer.writeMessage(2, f, node_pb.AgentCertificate.serializeBinaryToWriter);
      }
    };
    /**
     * optional AgentCertificate certificate = 2;
     * @return {?proto.types.AgentCertificate}
     */


    proto.types.CertificateRenewedNotice.prototype.getCertificate = function () {
      return (
        /** @type{?proto.types.AgentCertificate} */
        googleProtobuf.Message.getWrapperField(this, node_pb.AgentCertificate, 2)
      );
    };
    /** @param {?proto.types.AgentCertificate|undefined} value */


    proto.types.CertificateRenewedNotice.prototype.setCertificate = function (value) {
      googleProtobuf.Message.setWrapperField(this, 2, value);
    };

    proto.types.CertificateRenewedNotice.prototype.clearCertificate = function () {
      this.setCertificate(undefined);
    };
    /**
     * Returns whether this field is set.
     * @return {boolean}
     */


    proto.types.CertificateRenewedNotice.prototype.hasCertificate = function () {
      return googleProtobuf.Message.getField(this, 2) != null;
    };
    /**
     * @enum {number}
     */


    proto.types.ResultStatus = {
      OK: 0,
      CANCELED: 1,
      UNKNOWN: 2,
      INVALID_ARGUMENT: 3,
      DEADLINE_EXCEEDED: 4,
      NOT_FOUND: 5,
      ALREADY_EXISTS: 6,
      PERMISSION_DENIED: 7,
      RESOURCE_EXHAUSTED: 8,
      FAILED_PRECONDITION: 9,
      ABORTED: 10,
      OUT_OF_RANGE: 11,
      UNIMPLEMENTED: 12,
      INTERNAL: 13,
      UNAVAILABLE: 14,
      DATA_LOSS: 15,
      UNAUTHENTICATED: 16
    };
    goog.object.extend(exports, proto.types);
  });

  var metric_pb = createCommonjsModule(function (module, exports) {
    /**
     * @fileoverview
     * @enhanceable
     * @suppress {messageConventions} JS Compiler reports an error if a variable or
     *     field starts with 'MSG_' and isn't a translatable message.
     * @public
     */
    // GENERATED CODE -- DO NOT EDIT!
    var goog = googleProtobuf;
    var global = Function('return this')();
    goog.exportSymbol('proto.types.MetricType', null, global);
    goog.exportSymbol('proto.types.Metrics', null, global);
    goog.exportSymbol('proto.types.MetricsRequest', null, global);
    goog.exportSymbol('proto.types.PeerMetric', null, global);
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */

    proto.types.MetricsRequest = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, proto.types.MetricsRequest.repeatedFields_, null);
    };

    goog.inherits(proto.types.MetricsRequest, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.MetricsRequest.displayName = 'proto.types.MetricsRequest';
    }
    /**
     * List of repeated fields within this message type.
     * @private {!Array<number>}
     * @const
     */


    proto.types.MetricsRequest.repeatedFields_ = [1];

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.MetricsRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.types.MetricsRequest.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.MetricsRequest} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.MetricsRequest.toObject = function (includeInstance, msg) {
        var obj = {
          typesList: googleProtobuf.Message.getRepeatedField(msg, 1)
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.MetricsRequest}
     */


    proto.types.MetricsRequest.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.MetricsRequest();
      return proto.types.MetricsRequest.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.MetricsRequest} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.MetricsRequest}
     */


    proto.types.MetricsRequest.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {!Array<!proto.types.MetricType>} */
            reader.readPackedEnum();
            msg.setTypesList(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.MetricsRequest.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.MetricsRequest.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.MetricsRequest} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.MetricsRequest.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getTypesList();

      if (f.length > 0) {
        writer.writePackedEnum(1, f);
      }
    };
    /**
     * repeated MetricType types = 1;
     * @return {!Array<!proto.types.MetricType>}
     */


    proto.types.MetricsRequest.prototype.getTypesList = function () {
      return (
        /** @type {!Array<!proto.types.MetricType>} */
        googleProtobuf.Message.getRepeatedField(this, 1)
      );
    };
    /** @param {!Array<!proto.types.MetricType>} value */


    proto.types.MetricsRequest.prototype.setTypesList = function (value) {
      googleProtobuf.Message.setField(this, 1, value || []);
    };
    /**
     * @param {!proto.types.MetricType} value
     * @param {number=} opt_index
     */


    proto.types.MetricsRequest.prototype.addTypes = function (value, opt_index) {
      googleProtobuf.Message.addToRepeatedField(this, 1, value, opt_index);
    };

    proto.types.MetricsRequest.prototype.clearTypesList = function () {
      this.setTypesList([]);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.Metrics = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, proto.types.Metrics.repeatedFields_, null);
    };

    goog.inherits(proto.types.Metrics, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.Metrics.displayName = 'proto.types.Metrics';
    }
    /**
     * List of repeated fields within this message type.
     * @private {!Array<number>}
     * @const
     */


    proto.types.Metrics.repeatedFields_ = [1];

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.Metrics.prototype.toObject = function (opt_includeInstance) {
        return proto.types.Metrics.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.Metrics} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.Metrics.toObject = function (includeInstance, msg) {
        var obj = {
          peersList: googleProtobuf.Message.toObjectList(msg.getPeersList(), proto.types.PeerMetric.toObject, includeInstance)
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.Metrics}
     */


    proto.types.Metrics.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.Metrics();
      return proto.types.Metrics.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.Metrics} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.Metrics}
     */


    proto.types.Metrics.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value = new proto.types.PeerMetric();
            reader.readMessage(value, proto.types.PeerMetric.deserializeBinaryFromReader);
            msg.addPeers(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.Metrics.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.Metrics.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.Metrics} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.Metrics.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getPeersList();

      if (f.length > 0) {
        writer.writeRepeatedMessage(1, f, proto.types.PeerMetric.serializeBinaryToWriter);
      }
    };
    /**
     * repeated PeerMetric peers = 1;
     * @return {!Array<!proto.types.PeerMetric>}
     */


    proto.types.Metrics.prototype.getPeersList = function () {
      return (
        /** @type{!Array<!proto.types.PeerMetric>} */
        googleProtobuf.Message.getRepeatedWrapperField(this, proto.types.PeerMetric, 1)
      );
    };
    /** @param {!Array<!proto.types.PeerMetric>} value */


    proto.types.Metrics.prototype.setPeersList = function (value) {
      googleProtobuf.Message.setRepeatedWrapperField(this, 1, value);
    };
    /**
     * @param {!proto.types.PeerMetric=} opt_value
     * @param {number=} opt_index
     * @return {!proto.types.PeerMetric}
     */


    proto.types.Metrics.prototype.addPeers = function (opt_value, opt_index) {
      return googleProtobuf.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.types.PeerMetric, opt_index);
    };

    proto.types.Metrics.prototype.clearPeersList = function () {
      this.setPeersList([]);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.PeerMetric = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.PeerMetric, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.PeerMetric.displayName = 'proto.types.PeerMetric';
    }

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.PeerMetric.prototype.toObject = function (opt_includeInstance) {
        return proto.types.PeerMetric.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.PeerMetric} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.PeerMetric.toObject = function (includeInstance, msg) {
        var obj = {
          peerid: msg.getPeerid_asB64(),
          sumin: googleProtobuf.Message.getFieldWithDefault(msg, 2, 0),
          avrin: googleProtobuf.Message.getFieldWithDefault(msg, 3, 0),
          sumout: googleProtobuf.Message.getFieldWithDefault(msg, 4, 0),
          avrout: googleProtobuf.Message.getFieldWithDefault(msg, 5, 0)
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.PeerMetric}
     */


    proto.types.PeerMetric.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.PeerMetric();
      return proto.types.PeerMetric.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.PeerMetric} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.PeerMetric}
     */


    proto.types.PeerMetric.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setPeerid(value);
            break;

          case 2:
            var value =
            /** @type {number} */
            reader.readInt64();
            msg.setSumin(value);
            break;

          case 3:
            var value =
            /** @type {number} */
            reader.readInt64();
            msg.setAvrin(value);
            break;

          case 4:
            var value =
            /** @type {number} */
            reader.readInt64();
            msg.setSumout(value);
            break;

          case 5:
            var value =
            /** @type {number} */
            reader.readInt64();
            msg.setAvrout(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.PeerMetric.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.PeerMetric.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.PeerMetric} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.PeerMetric.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getPeerid_asU8();

      if (f.length > 0) {
        writer.writeBytes(1, f);
      }

      f = message.getSumin();

      if (f !== 0) {
        writer.writeInt64(2, f);
      }

      f = message.getAvrin();

      if (f !== 0) {
        writer.writeInt64(3, f);
      }

      f = message.getSumout();

      if (f !== 0) {
        writer.writeInt64(4, f);
      }

      f = message.getAvrout();

      if (f !== 0) {
        writer.writeInt64(5, f);
      }
    };
    /**
     * optional bytes peerID = 1;
     * @return {!(string|Uint8Array)}
     */


    proto.types.PeerMetric.prototype.getPeerid = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, "")
      );
    };
    /**
     * optional bytes peerID = 1;
     * This is a type-conversion wrapper around `getPeerid()`
     * @return {string}
     */


    proto.types.PeerMetric.prototype.getPeerid_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getPeerid())
      );
    };
    /**
     * optional bytes peerID = 1;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getPeerid()`
     * @return {!Uint8Array}
     */


    proto.types.PeerMetric.prototype.getPeerid_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getPeerid())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.PeerMetric.prototype.setPeerid = function (value) {
      googleProtobuf.Message.setProto3BytesField(this, 1, value);
    };
    /**
     * optional int64 sumIn = 2;
     * @return {number}
     */


    proto.types.PeerMetric.prototype.getSumin = function () {
      return (
        /** @type {number} */
        googleProtobuf.Message.getFieldWithDefault(this, 2, 0)
      );
    };
    /** @param {number} value */


    proto.types.PeerMetric.prototype.setSumin = function (value) {
      googleProtobuf.Message.setProto3IntField(this, 2, value);
    };
    /**
     * optional int64 avrIn = 3;
     * @return {number}
     */


    proto.types.PeerMetric.prototype.getAvrin = function () {
      return (
        /** @type {number} */
        googleProtobuf.Message.getFieldWithDefault(this, 3, 0)
      );
    };
    /** @param {number} value */


    proto.types.PeerMetric.prototype.setAvrin = function (value) {
      googleProtobuf.Message.setProto3IntField(this, 3, value);
    };
    /**
     * optional int64 sumOut = 4;
     * @return {number}
     */


    proto.types.PeerMetric.prototype.getSumout = function () {
      return (
        /** @type {number} */
        googleProtobuf.Message.getFieldWithDefault(this, 4, 0)
      );
    };
    /** @param {number} value */


    proto.types.PeerMetric.prototype.setSumout = function (value) {
      googleProtobuf.Message.setProto3IntField(this, 4, value);
    };
    /**
     * optional int64 avrOut = 5;
     * @return {number}
     */


    proto.types.PeerMetric.prototype.getAvrout = function () {
      return (
        /** @type {number} */
        googleProtobuf.Message.getFieldWithDefault(this, 5, 0)
      );
    };
    /** @param {number} value */


    proto.types.PeerMetric.prototype.setAvrout = function (value) {
      googleProtobuf.Message.setProto3IntField(this, 5, value);
    };
    /**
     * @enum {number}
     */


    proto.types.MetricType = {
      NOTHING: 0,
      P2P_NETWORK: 1
    };
    goog.object.extend(exports, proto.types);
  });

  var raft_pb = createCommonjsModule(function (module, exports) {
    /**
     * @fileoverview
     * @enhanceable
     * @suppress {messageConventions} JS Compiler reports an error if a variable or
     *     field starts with 'MSG_' and isn't a translatable message.
     * @public
     */
    // GENERATED CODE -- DO NOT EDIT!
    var goog = googleProtobuf;
    var global = Function('return this')();
    goog.object.extend(proto, p2p_pb);
    goog.exportSymbol('proto.types.ConfChangeProgress', null, global);
    goog.exportSymbol('proto.types.ConfChangeState', null, global);
    goog.exportSymbol('proto.types.GetClusterInfoRequest', null, global);
    goog.exportSymbol('proto.types.GetClusterInfoResponse', null, global);
    goog.exportSymbol('proto.types.HardStateInfo', null, global);
    goog.exportSymbol('proto.types.MemberAttr', null, global);
    goog.exportSymbol('proto.types.MembershipChange', null, global);
    goog.exportSymbol('proto.types.MembershipChangeReply', null, global);
    goog.exportSymbol('proto.types.MembershipChangeType', null, global);
    goog.exportSymbol('proto.types.SnapshotResponse', null, global);
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */

    proto.types.MemberAttr = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.MemberAttr, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.MemberAttr.displayName = 'proto.types.MemberAttr';
    }

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.MemberAttr.prototype.toObject = function (opt_includeInstance) {
        return proto.types.MemberAttr.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.MemberAttr} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.MemberAttr.toObject = function (includeInstance, msg) {
        var obj = {
          id: googleProtobuf.Message.getFieldWithDefault(msg, 1, 0),
          name: googleProtobuf.Message.getFieldWithDefault(msg, 2, ""),
          address: googleProtobuf.Message.getFieldWithDefault(msg, 3, ""),
          peerid: msg.getPeerid_asB64()
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.MemberAttr}
     */


    proto.types.MemberAttr.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.MemberAttr();
      return proto.types.MemberAttr.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.MemberAttr} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.MemberAttr}
     */


    proto.types.MemberAttr.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {number} */
            reader.readUint64();
            msg.setId(value);
            break;

          case 2:
            var value =
            /** @type {string} */
            reader.readString();
            msg.setName(value);
            break;

          case 3:
            var value =
            /** @type {string} */
            reader.readString();
            msg.setAddress(value);
            break;

          case 4:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setPeerid(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.MemberAttr.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.MemberAttr.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.MemberAttr} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.MemberAttr.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getId();

      if (f !== 0) {
        writer.writeUint64(1, f);
      }

      f = message.getName();

      if (f.length > 0) {
        writer.writeString(2, f);
      }

      f = message.getAddress();

      if (f.length > 0) {
        writer.writeString(3, f);
      }

      f = message.getPeerid_asU8();

      if (f.length > 0) {
        writer.writeBytes(4, f);
      }
    };
    /**
     * optional uint64 ID = 1;
     * @return {number}
     */


    proto.types.MemberAttr.prototype.getId = function () {
      return (
        /** @type {number} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, 0)
      );
    };
    /** @param {number} value */


    proto.types.MemberAttr.prototype.setId = function (value) {
      googleProtobuf.Message.setProto3IntField(this, 1, value);
    };
    /**
     * optional string name = 2;
     * @return {string}
     */


    proto.types.MemberAttr.prototype.getName = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.getFieldWithDefault(this, 2, "")
      );
    };
    /** @param {string} value */


    proto.types.MemberAttr.prototype.setName = function (value) {
      googleProtobuf.Message.setProto3StringField(this, 2, value);
    };
    /**
     * optional string address = 3;
     * @return {string}
     */


    proto.types.MemberAttr.prototype.getAddress = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.getFieldWithDefault(this, 3, "")
      );
    };
    /** @param {string} value */


    proto.types.MemberAttr.prototype.setAddress = function (value) {
      googleProtobuf.Message.setProto3StringField(this, 3, value);
    };
    /**
     * optional bytes peerID = 4;
     * @return {!(string|Uint8Array)}
     */


    proto.types.MemberAttr.prototype.getPeerid = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 4, "")
      );
    };
    /**
     * optional bytes peerID = 4;
     * This is a type-conversion wrapper around `getPeerid()`
     * @return {string}
     */


    proto.types.MemberAttr.prototype.getPeerid_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getPeerid())
      );
    };
    /**
     * optional bytes peerID = 4;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getPeerid()`
     * @return {!Uint8Array}
     */


    proto.types.MemberAttr.prototype.getPeerid_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getPeerid())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.MemberAttr.prototype.setPeerid = function (value) {
      googleProtobuf.Message.setProto3BytesField(this, 4, value);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.MembershipChange = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.MembershipChange, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.MembershipChange.displayName = 'proto.types.MembershipChange';
    }

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.MembershipChange.prototype.toObject = function (opt_includeInstance) {
        return proto.types.MembershipChange.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.MembershipChange} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.MembershipChange.toObject = function (includeInstance, msg) {
        var f,
            obj = {
          type: googleProtobuf.Message.getFieldWithDefault(msg, 1, 0),
          requestid: googleProtobuf.Message.getFieldWithDefault(msg, 2, 0),
          attr: (f = msg.getAttr()) && proto.types.MemberAttr.toObject(includeInstance, f)
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.MembershipChange}
     */


    proto.types.MembershipChange.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.MembershipChange();
      return proto.types.MembershipChange.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.MembershipChange} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.MembershipChange}
     */


    proto.types.MembershipChange.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {!proto.types.MembershipChangeType} */
            reader.readEnum();
            msg.setType(value);
            break;

          case 2:
            var value =
            /** @type {number} */
            reader.readUint64();
            msg.setRequestid(value);
            break;

          case 3:
            var value = new proto.types.MemberAttr();
            reader.readMessage(value, proto.types.MemberAttr.deserializeBinaryFromReader);
            msg.setAttr(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.MembershipChange.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.MembershipChange.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.MembershipChange} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.MembershipChange.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getType();

      if (f !== 0.0) {
        writer.writeEnum(1, f);
      }

      f = message.getRequestid();

      if (f !== 0) {
        writer.writeUint64(2, f);
      }

      f = message.getAttr();

      if (f != null) {
        writer.writeMessage(3, f, proto.types.MemberAttr.serializeBinaryToWriter);
      }
    };
    /**
     * optional MembershipChangeType type = 1;
     * @return {!proto.types.MembershipChangeType}
     */


    proto.types.MembershipChange.prototype.getType = function () {
      return (
        /** @type {!proto.types.MembershipChangeType} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, 0)
      );
    };
    /** @param {!proto.types.MembershipChangeType} value */


    proto.types.MembershipChange.prototype.setType = function (value) {
      googleProtobuf.Message.setProto3EnumField(this, 1, value);
    };
    /**
     * optional uint64 requestID = 2;
     * @return {number}
     */


    proto.types.MembershipChange.prototype.getRequestid = function () {
      return (
        /** @type {number} */
        googleProtobuf.Message.getFieldWithDefault(this, 2, 0)
      );
    };
    /** @param {number} value */


    proto.types.MembershipChange.prototype.setRequestid = function (value) {
      googleProtobuf.Message.setProto3IntField(this, 2, value);
    };
    /**
     * optional MemberAttr attr = 3;
     * @return {?proto.types.MemberAttr}
     */


    proto.types.MembershipChange.prototype.getAttr = function () {
      return (
        /** @type{?proto.types.MemberAttr} */
        googleProtobuf.Message.getWrapperField(this, proto.types.MemberAttr, 3)
      );
    };
    /** @param {?proto.types.MemberAttr|undefined} value */


    proto.types.MembershipChange.prototype.setAttr = function (value) {
      googleProtobuf.Message.setWrapperField(this, 3, value);
    };

    proto.types.MembershipChange.prototype.clearAttr = function () {
      this.setAttr(undefined);
    };
    /**
     * Returns whether this field is set.
     * @return {boolean}
     */


    proto.types.MembershipChange.prototype.hasAttr = function () {
      return googleProtobuf.Message.getField(this, 3) != null;
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.MembershipChangeReply = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.MembershipChangeReply, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.MembershipChangeReply.displayName = 'proto.types.MembershipChangeReply';
    }

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.MembershipChangeReply.prototype.toObject = function (opt_includeInstance) {
        return proto.types.MembershipChangeReply.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.MembershipChangeReply} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.MembershipChangeReply.toObject = function (includeInstance, msg) {
        var f,
            obj = {
          attr: (f = msg.getAttr()) && proto.types.MemberAttr.toObject(includeInstance, f)
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.MembershipChangeReply}
     */


    proto.types.MembershipChangeReply.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.MembershipChangeReply();
      return proto.types.MembershipChangeReply.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.MembershipChangeReply} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.MembershipChangeReply}
     */


    proto.types.MembershipChangeReply.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value = new proto.types.MemberAttr();
            reader.readMessage(value, proto.types.MemberAttr.deserializeBinaryFromReader);
            msg.setAttr(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.MembershipChangeReply.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.MembershipChangeReply.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.MembershipChangeReply} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.MembershipChangeReply.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getAttr();

      if (f != null) {
        writer.writeMessage(1, f, proto.types.MemberAttr.serializeBinaryToWriter);
      }
    };
    /**
     * optional MemberAttr attr = 1;
     * @return {?proto.types.MemberAttr}
     */


    proto.types.MembershipChangeReply.prototype.getAttr = function () {
      return (
        /** @type{?proto.types.MemberAttr} */
        googleProtobuf.Message.getWrapperField(this, proto.types.MemberAttr, 1)
      );
    };
    /** @param {?proto.types.MemberAttr|undefined} value */


    proto.types.MembershipChangeReply.prototype.setAttr = function (value) {
      googleProtobuf.Message.setWrapperField(this, 1, value);
    };

    proto.types.MembershipChangeReply.prototype.clearAttr = function () {
      this.setAttr(undefined);
    };
    /**
     * Returns whether this field is set.
     * @return {boolean}
     */


    proto.types.MembershipChangeReply.prototype.hasAttr = function () {
      return googleProtobuf.Message.getField(this, 1) != null;
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.HardStateInfo = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.HardStateInfo, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.HardStateInfo.displayName = 'proto.types.HardStateInfo';
    }

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.HardStateInfo.prototype.toObject = function (opt_includeInstance) {
        return proto.types.HardStateInfo.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.HardStateInfo} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.HardStateInfo.toObject = function (includeInstance, msg) {
        var obj = {
          term: googleProtobuf.Message.getFieldWithDefault(msg, 1, 0),
          commit: googleProtobuf.Message.getFieldWithDefault(msg, 2, 0)
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.HardStateInfo}
     */


    proto.types.HardStateInfo.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.HardStateInfo();
      return proto.types.HardStateInfo.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.HardStateInfo} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.HardStateInfo}
     */


    proto.types.HardStateInfo.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {number} */
            reader.readUint64();
            msg.setTerm(value);
            break;

          case 2:
            var value =
            /** @type {number} */
            reader.readUint64();
            msg.setCommit(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.HardStateInfo.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.HardStateInfo.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.HardStateInfo} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.HardStateInfo.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getTerm();

      if (f !== 0) {
        writer.writeUint64(1, f);
      }

      f = message.getCommit();

      if (f !== 0) {
        writer.writeUint64(2, f);
      }
    };
    /**
     * optional uint64 term = 1;
     * @return {number}
     */


    proto.types.HardStateInfo.prototype.getTerm = function () {
      return (
        /** @type {number} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, 0)
      );
    };
    /** @param {number} value */


    proto.types.HardStateInfo.prototype.setTerm = function (value) {
      googleProtobuf.Message.setProto3IntField(this, 1, value);
    };
    /**
     * optional uint64 commit = 2;
     * @return {number}
     */


    proto.types.HardStateInfo.prototype.getCommit = function () {
      return (
        /** @type {number} */
        googleProtobuf.Message.getFieldWithDefault(this, 2, 0)
      );
    };
    /** @param {number} value */


    proto.types.HardStateInfo.prototype.setCommit = function (value) {
      googleProtobuf.Message.setProto3IntField(this, 2, value);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.GetClusterInfoRequest = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.GetClusterInfoRequest, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.GetClusterInfoRequest.displayName = 'proto.types.GetClusterInfoRequest';
    }

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.GetClusterInfoRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.types.GetClusterInfoRequest.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.GetClusterInfoRequest} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.GetClusterInfoRequest.toObject = function (includeInstance, msg) {
        var obj = {
          bestblockhash: msg.getBestblockhash_asB64()
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.GetClusterInfoRequest}
     */


    proto.types.GetClusterInfoRequest.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.GetClusterInfoRequest();
      return proto.types.GetClusterInfoRequest.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.GetClusterInfoRequest} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.GetClusterInfoRequest}
     */


    proto.types.GetClusterInfoRequest.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setBestblockhash(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.GetClusterInfoRequest.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.GetClusterInfoRequest.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.GetClusterInfoRequest} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.GetClusterInfoRequest.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getBestblockhash_asU8();

      if (f.length > 0) {
        writer.writeBytes(1, f);
      }
    };
    /**
     * optional bytes bestBlockHash = 1;
     * @return {!(string|Uint8Array)}
     */


    proto.types.GetClusterInfoRequest.prototype.getBestblockhash = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, "")
      );
    };
    /**
     * optional bytes bestBlockHash = 1;
     * This is a type-conversion wrapper around `getBestblockhash()`
     * @return {string}
     */


    proto.types.GetClusterInfoRequest.prototype.getBestblockhash_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getBestblockhash())
      );
    };
    /**
     * optional bytes bestBlockHash = 1;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getBestblockhash()`
     * @return {!Uint8Array}
     */


    proto.types.GetClusterInfoRequest.prototype.getBestblockhash_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getBestblockhash())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.GetClusterInfoRequest.prototype.setBestblockhash = function (value) {
      googleProtobuf.Message.setProto3BytesField(this, 1, value);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.GetClusterInfoResponse = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, proto.types.GetClusterInfoResponse.repeatedFields_, null);
    };

    goog.inherits(proto.types.GetClusterInfoResponse, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.GetClusterInfoResponse.displayName = 'proto.types.GetClusterInfoResponse';
    }
    /**
     * List of repeated fields within this message type.
     * @private {!Array<number>}
     * @const
     */


    proto.types.GetClusterInfoResponse.repeatedFields_ = [4];

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.GetClusterInfoResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.types.GetClusterInfoResponse.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.GetClusterInfoResponse} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.GetClusterInfoResponse.toObject = function (includeInstance, msg) {
        var f,
            obj = {
          chainid: msg.getChainid_asB64(),
          clusterid: googleProtobuf.Message.getFieldWithDefault(msg, 2, 0),
          error: googleProtobuf.Message.getFieldWithDefault(msg, 3, ""),
          mbrattrsList: googleProtobuf.Message.toObjectList(msg.getMbrattrsList(), proto.types.MemberAttr.toObject, includeInstance),
          bestblockno: googleProtobuf.Message.getFieldWithDefault(msg, 5, 0),
          hardstateinfo: (f = msg.getHardstateinfo()) && proto.types.HardStateInfo.toObject(includeInstance, f)
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.GetClusterInfoResponse}
     */


    proto.types.GetClusterInfoResponse.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.GetClusterInfoResponse();
      return proto.types.GetClusterInfoResponse.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.GetClusterInfoResponse} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.GetClusterInfoResponse}
     */


    proto.types.GetClusterInfoResponse.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setChainid(value);
            break;

          case 2:
            var value =
            /** @type {number} */
            reader.readUint64();
            msg.setClusterid(value);
            break;

          case 3:
            var value =
            /** @type {string} */
            reader.readString();
            msg.setError(value);
            break;

          case 4:
            var value = new proto.types.MemberAttr();
            reader.readMessage(value, proto.types.MemberAttr.deserializeBinaryFromReader);
            msg.addMbrattrs(value);
            break;

          case 5:
            var value =
            /** @type {number} */
            reader.readUint64();
            msg.setBestblockno(value);
            break;

          case 6:
            var value = new proto.types.HardStateInfo();
            reader.readMessage(value, proto.types.HardStateInfo.deserializeBinaryFromReader);
            msg.setHardstateinfo(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.GetClusterInfoResponse.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.GetClusterInfoResponse.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.GetClusterInfoResponse} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.GetClusterInfoResponse.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getChainid_asU8();

      if (f.length > 0) {
        writer.writeBytes(1, f);
      }

      f = message.getClusterid();

      if (f !== 0) {
        writer.writeUint64(2, f);
      }

      f = message.getError();

      if (f.length > 0) {
        writer.writeString(3, f);
      }

      f = message.getMbrattrsList();

      if (f.length > 0) {
        writer.writeRepeatedMessage(4, f, proto.types.MemberAttr.serializeBinaryToWriter);
      }

      f = message.getBestblockno();

      if (f !== 0) {
        writer.writeUint64(5, f);
      }

      f = message.getHardstateinfo();

      if (f != null) {
        writer.writeMessage(6, f, proto.types.HardStateInfo.serializeBinaryToWriter);
      }
    };
    /**
     * optional bytes chainID = 1;
     * @return {!(string|Uint8Array)}
     */


    proto.types.GetClusterInfoResponse.prototype.getChainid = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, "")
      );
    };
    /**
     * optional bytes chainID = 1;
     * This is a type-conversion wrapper around `getChainid()`
     * @return {string}
     */


    proto.types.GetClusterInfoResponse.prototype.getChainid_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getChainid())
      );
    };
    /**
     * optional bytes chainID = 1;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getChainid()`
     * @return {!Uint8Array}
     */


    proto.types.GetClusterInfoResponse.prototype.getChainid_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getChainid())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.GetClusterInfoResponse.prototype.setChainid = function (value) {
      googleProtobuf.Message.setProto3BytesField(this, 1, value);
    };
    /**
     * optional uint64 clusterID = 2;
     * @return {number}
     */


    proto.types.GetClusterInfoResponse.prototype.getClusterid = function () {
      return (
        /** @type {number} */
        googleProtobuf.Message.getFieldWithDefault(this, 2, 0)
      );
    };
    /** @param {number} value */


    proto.types.GetClusterInfoResponse.prototype.setClusterid = function (value) {
      googleProtobuf.Message.setProto3IntField(this, 2, value);
    };
    /**
     * optional string error = 3;
     * @return {string}
     */


    proto.types.GetClusterInfoResponse.prototype.getError = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.getFieldWithDefault(this, 3, "")
      );
    };
    /** @param {string} value */


    proto.types.GetClusterInfoResponse.prototype.setError = function (value) {
      googleProtobuf.Message.setProto3StringField(this, 3, value);
    };
    /**
     * repeated MemberAttr mbrAttrs = 4;
     * @return {!Array<!proto.types.MemberAttr>}
     */


    proto.types.GetClusterInfoResponse.prototype.getMbrattrsList = function () {
      return (
        /** @type{!Array<!proto.types.MemberAttr>} */
        googleProtobuf.Message.getRepeatedWrapperField(this, proto.types.MemberAttr, 4)
      );
    };
    /** @param {!Array<!proto.types.MemberAttr>} value */


    proto.types.GetClusterInfoResponse.prototype.setMbrattrsList = function (value) {
      googleProtobuf.Message.setRepeatedWrapperField(this, 4, value);
    };
    /**
     * @param {!proto.types.MemberAttr=} opt_value
     * @param {number=} opt_index
     * @return {!proto.types.MemberAttr}
     */


    proto.types.GetClusterInfoResponse.prototype.addMbrattrs = function (opt_value, opt_index) {
      return googleProtobuf.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.types.MemberAttr, opt_index);
    };

    proto.types.GetClusterInfoResponse.prototype.clearMbrattrsList = function () {
      this.setMbrattrsList([]);
    };
    /**
     * optional uint64 bestBlockNo = 5;
     * @return {number}
     */


    proto.types.GetClusterInfoResponse.prototype.getBestblockno = function () {
      return (
        /** @type {number} */
        googleProtobuf.Message.getFieldWithDefault(this, 5, 0)
      );
    };
    /** @param {number} value */


    proto.types.GetClusterInfoResponse.prototype.setBestblockno = function (value) {
      googleProtobuf.Message.setProto3IntField(this, 5, value);
    };
    /**
     * optional HardStateInfo hardStateInfo = 6;
     * @return {?proto.types.HardStateInfo}
     */


    proto.types.GetClusterInfoResponse.prototype.getHardstateinfo = function () {
      return (
        /** @type{?proto.types.HardStateInfo} */
        googleProtobuf.Message.getWrapperField(this, proto.types.HardStateInfo, 6)
      );
    };
    /** @param {?proto.types.HardStateInfo|undefined} value */


    proto.types.GetClusterInfoResponse.prototype.setHardstateinfo = function (value) {
      googleProtobuf.Message.setWrapperField(this, 6, value);
    };

    proto.types.GetClusterInfoResponse.prototype.clearHardstateinfo = function () {
      this.setHardstateinfo(undefined);
    };
    /**
     * Returns whether this field is set.
     * @return {boolean}
     */


    proto.types.GetClusterInfoResponse.prototype.hasHardstateinfo = function () {
      return googleProtobuf.Message.getField(this, 6) != null;
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.ConfChangeProgress = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, proto.types.ConfChangeProgress.repeatedFields_, null);
    };

    goog.inherits(proto.types.ConfChangeProgress, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.ConfChangeProgress.displayName = 'proto.types.ConfChangeProgress';
    }
    /**
     * List of repeated fields within this message type.
     * @private {!Array<number>}
     * @const
     */


    proto.types.ConfChangeProgress.repeatedFields_ = [3];

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.ConfChangeProgress.prototype.toObject = function (opt_includeInstance) {
        return proto.types.ConfChangeProgress.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.ConfChangeProgress} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.ConfChangeProgress.toObject = function (includeInstance, msg) {
        var obj = {
          state: googleProtobuf.Message.getFieldWithDefault(msg, 1, 0),
          err: googleProtobuf.Message.getFieldWithDefault(msg, 2, ""),
          membersList: googleProtobuf.Message.toObjectList(msg.getMembersList(), proto.types.MemberAttr.toObject, includeInstance)
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.ConfChangeProgress}
     */


    proto.types.ConfChangeProgress.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.ConfChangeProgress();
      return proto.types.ConfChangeProgress.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.ConfChangeProgress} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.ConfChangeProgress}
     */


    proto.types.ConfChangeProgress.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {!proto.types.ConfChangeState} */
            reader.readEnum();
            msg.setState(value);
            break;

          case 2:
            var value =
            /** @type {string} */
            reader.readString();
            msg.setErr(value);
            break;

          case 3:
            var value = new proto.types.MemberAttr();
            reader.readMessage(value, proto.types.MemberAttr.deserializeBinaryFromReader);
            msg.addMembers(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.ConfChangeProgress.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.ConfChangeProgress.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.ConfChangeProgress} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.ConfChangeProgress.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getState();

      if (f !== 0.0) {
        writer.writeEnum(1, f);
      }

      f = message.getErr();

      if (f.length > 0) {
        writer.writeString(2, f);
      }

      f = message.getMembersList();

      if (f.length > 0) {
        writer.writeRepeatedMessage(3, f, proto.types.MemberAttr.serializeBinaryToWriter);
      }
    };
    /**
     * optional ConfChangeState State = 1;
     * @return {!proto.types.ConfChangeState}
     */


    proto.types.ConfChangeProgress.prototype.getState = function () {
      return (
        /** @type {!proto.types.ConfChangeState} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, 0)
      );
    };
    /** @param {!proto.types.ConfChangeState} value */


    proto.types.ConfChangeProgress.prototype.setState = function (value) {
      googleProtobuf.Message.setProto3EnumField(this, 1, value);
    };
    /**
     * optional string Err = 2;
     * @return {string}
     */


    proto.types.ConfChangeProgress.prototype.getErr = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.getFieldWithDefault(this, 2, "")
      );
    };
    /** @param {string} value */


    proto.types.ConfChangeProgress.prototype.setErr = function (value) {
      googleProtobuf.Message.setProto3StringField(this, 2, value);
    };
    /**
     * repeated MemberAttr Members = 3;
     * @return {!Array<!proto.types.MemberAttr>}
     */


    proto.types.ConfChangeProgress.prototype.getMembersList = function () {
      return (
        /** @type{!Array<!proto.types.MemberAttr>} */
        googleProtobuf.Message.getRepeatedWrapperField(this, proto.types.MemberAttr, 3)
      );
    };
    /** @param {!Array<!proto.types.MemberAttr>} value */


    proto.types.ConfChangeProgress.prototype.setMembersList = function (value) {
      googleProtobuf.Message.setRepeatedWrapperField(this, 3, value);
    };
    /**
     * @param {!proto.types.MemberAttr=} opt_value
     * @param {number=} opt_index
     * @return {!proto.types.MemberAttr}
     */


    proto.types.ConfChangeProgress.prototype.addMembers = function (opt_value, opt_index) {
      return googleProtobuf.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.types.MemberAttr, opt_index);
    };

    proto.types.ConfChangeProgress.prototype.clearMembersList = function () {
      this.setMembersList([]);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.SnapshotResponse = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.SnapshotResponse, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.SnapshotResponse.displayName = 'proto.types.SnapshotResponse';
    }

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.SnapshotResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.types.SnapshotResponse.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.SnapshotResponse} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.SnapshotResponse.toObject = function (includeInstance, msg) {
        var obj = {
          status: googleProtobuf.Message.getFieldWithDefault(msg, 1, 0),
          message: googleProtobuf.Message.getFieldWithDefault(msg, 2, "")
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.SnapshotResponse}
     */


    proto.types.SnapshotResponse.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.SnapshotResponse();
      return proto.types.SnapshotResponse.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.SnapshotResponse} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.SnapshotResponse}
     */


    proto.types.SnapshotResponse.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {!proto.types.ResultStatus} */
            reader.readEnum();
            msg.setStatus(value);
            break;

          case 2:
            var value =
            /** @type {string} */
            reader.readString();
            msg.setMessage(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.SnapshotResponse.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.SnapshotResponse.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.SnapshotResponse} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.SnapshotResponse.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getStatus();

      if (f !== 0.0) {
        writer.writeEnum(1, f);
      }

      f = message.getMessage();

      if (f.length > 0) {
        writer.writeString(2, f);
      }
    };
    /**
     * optional ResultStatus status = 1;
     * @return {!proto.types.ResultStatus}
     */


    proto.types.SnapshotResponse.prototype.getStatus = function () {
      return (
        /** @type {!proto.types.ResultStatus} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, 0)
      );
    };
    /** @param {!proto.types.ResultStatus} value */


    proto.types.SnapshotResponse.prototype.setStatus = function (value) {
      googleProtobuf.Message.setProto3EnumField(this, 1, value);
    };
    /**
     * optional string message = 2;
     * @return {string}
     */


    proto.types.SnapshotResponse.prototype.getMessage = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.getFieldWithDefault(this, 2, "")
      );
    };
    /** @param {string} value */


    proto.types.SnapshotResponse.prototype.setMessage = function (value) {
      googleProtobuf.Message.setProto3StringField(this, 2, value);
    };
    /**
     * @enum {number}
     */


    proto.types.MembershipChangeType = {
      ADD_MEMBER: 0,
      REMOVE_MEMBER: 1
    };
    /**
     * @enum {number}
     */

    proto.types.ConfChangeState = {
      CONF_CHANGE_STATE_PROPOSED: 0,
      CONF_CHANGE_STATE_SAVED: 1,
      CONF_CHANGE_STATE_APPLIED: 2
    };
    goog.object.extend(exports, proto.types);
  });

  var rpc_pb = createCommonjsModule(function (module, exports) {
    /**
     * @fileoverview
     * @enhanceable
     * @suppress {messageConventions} JS Compiler reports an error if a variable or
     *     field starts with 'MSG_' and isn't a translatable message.
     * @public
     */
    // GENERATED CODE -- DO NOT EDIT!
    var goog = googleProtobuf;
    var global = Function('return this')();
    goog.object.extend(proto, blockchain_pb);
    goog.object.extend(proto, account_pb);
    goog.object.extend(proto, node_pb);
    goog.object.extend(proto, p2p_pb);
    goog.object.extend(proto, metric_pb);
    goog.object.extend(proto, raft_pb);
    goog.exportSymbol('proto.types.AccountAddress', null, global);
    goog.exportSymbol('proto.types.AccountAndRoot', null, global);
    goog.exportSymbol('proto.types.AccountVoteInfo', null, global);
    goog.exportSymbol('proto.types.BlockBodyPaged', null, global);
    goog.exportSymbol('proto.types.BlockBodyParams', null, global);
    goog.exportSymbol('proto.types.BlockHeaderList', null, global);
    goog.exportSymbol('proto.types.BlockMetadata', null, global);
    goog.exportSymbol('proto.types.BlockMetadataList', null, global);
    goog.exportSymbol('proto.types.BlockchainStatus', null, global);
    goog.exportSymbol('proto.types.ChainId', null, global);
    goog.exportSymbol('proto.types.ChainInfo', null, global);
    goog.exportSymbol('proto.types.ChainStats', null, global);
    goog.exportSymbol('proto.types.CommitResult', null, global);
    goog.exportSymbol('proto.types.CommitResultList', null, global);
    goog.exportSymbol('proto.types.CommitStatus', null, global);
    goog.exportSymbol('proto.types.ConfigItem', null, global);
    goog.exportSymbol('proto.types.ConsensusInfo', null, global);
    goog.exportSymbol('proto.types.Empty', null, global);
    goog.exportSymbol('proto.types.EnterpriseConfig', null, global);
    goog.exportSymbol('proto.types.EnterpriseConfigKey', null, global);
    goog.exportSymbol('proto.types.EventList', null, global);
    goog.exportSymbol('proto.types.ImportFormat', null, global);
    goog.exportSymbol('proto.types.Input', null, global);
    goog.exportSymbol('proto.types.KeyParams', null, global);
    goog.exportSymbol('proto.types.ListParams', null, global);
    goog.exportSymbol('proto.types.Name', null, global);
    goog.exportSymbol('proto.types.NameInfo', null, global);
    goog.exportSymbol('proto.types.NodeReq', null, global);
    goog.exportSymbol('proto.types.Output', null, global);
    goog.exportSymbol('proto.types.PageParams', null, global);
    goog.exportSymbol('proto.types.Peer', null, global);
    goog.exportSymbol('proto.types.PeerList', null, global);
    goog.exportSymbol('proto.types.PeersParams', null, global);
    goog.exportSymbol('proto.types.Personal', null, global);
    goog.exportSymbol('proto.types.ServerInfo', null, global);
    goog.exportSymbol('proto.types.SingleBytes', null, global);
    goog.exportSymbol('proto.types.SingleString', null, global);
    goog.exportSymbol('proto.types.Staking', null, global);
    goog.exportSymbol('proto.types.VerifyResult', null, global);
    goog.exportSymbol('proto.types.VerifyStatus', null, global);
    goog.exportSymbol('proto.types.Vote', null, global);
    goog.exportSymbol('proto.types.VoteInfo', null, global);
    goog.exportSymbol('proto.types.VoteList', null, global);
    goog.exportSymbol('proto.types.VoteParams', null, global);
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */

    proto.types.BlockchainStatus = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.BlockchainStatus, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.BlockchainStatus.displayName = 'proto.types.BlockchainStatus';
    }

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.BlockchainStatus.prototype.toObject = function (opt_includeInstance) {
        return proto.types.BlockchainStatus.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.BlockchainStatus} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.BlockchainStatus.toObject = function (includeInstance, msg) {
        var f,
            obj = {
          bestBlockHash: msg.getBestBlockHash_asB64(),
          bestHeight: googleProtobuf.Message.getFieldWithDefault(msg, 2, 0),
          consensusInfo: googleProtobuf.Message.getFieldWithDefault(msg, 3, ""),
          bestChainIdHash: msg.getBestChainIdHash_asB64(),
          chainInfo: (f = msg.getChainInfo()) && proto.types.ChainInfo.toObject(includeInstance, f)
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.BlockchainStatus}
     */


    proto.types.BlockchainStatus.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.BlockchainStatus();
      return proto.types.BlockchainStatus.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.BlockchainStatus} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.BlockchainStatus}
     */


    proto.types.BlockchainStatus.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setBestBlockHash(value);
            break;

          case 2:
            var value =
            /** @type {number} */
            reader.readUint64();
            msg.setBestHeight(value);
            break;

          case 3:
            var value =
            /** @type {string} */
            reader.readString();
            msg.setConsensusInfo(value);
            break;

          case 4:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setBestChainIdHash(value);
            break;

          case 5:
            var value = new proto.types.ChainInfo();
            reader.readMessage(value, proto.types.ChainInfo.deserializeBinaryFromReader);
            msg.setChainInfo(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.BlockchainStatus.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.BlockchainStatus.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.BlockchainStatus} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.BlockchainStatus.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getBestBlockHash_asU8();

      if (f.length > 0) {
        writer.writeBytes(1, f);
      }

      f = message.getBestHeight();

      if (f !== 0) {
        writer.writeUint64(2, f);
      }

      f = message.getConsensusInfo();

      if (f.length > 0) {
        writer.writeString(3, f);
      }

      f = message.getBestChainIdHash_asU8();

      if (f.length > 0) {
        writer.writeBytes(4, f);
      }

      f = message.getChainInfo();

      if (f != null) {
        writer.writeMessage(5, f, proto.types.ChainInfo.serializeBinaryToWriter);
      }
    };
    /**
     * optional bytes best_block_hash = 1;
     * @return {!(string|Uint8Array)}
     */


    proto.types.BlockchainStatus.prototype.getBestBlockHash = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, "")
      );
    };
    /**
     * optional bytes best_block_hash = 1;
     * This is a type-conversion wrapper around `getBestBlockHash()`
     * @return {string}
     */


    proto.types.BlockchainStatus.prototype.getBestBlockHash_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getBestBlockHash())
      );
    };
    /**
     * optional bytes best_block_hash = 1;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getBestBlockHash()`
     * @return {!Uint8Array}
     */


    proto.types.BlockchainStatus.prototype.getBestBlockHash_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getBestBlockHash())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.BlockchainStatus.prototype.setBestBlockHash = function (value) {
      googleProtobuf.Message.setProto3BytesField(this, 1, value);
    };
    /**
     * optional uint64 best_height = 2;
     * @return {number}
     */


    proto.types.BlockchainStatus.prototype.getBestHeight = function () {
      return (
        /** @type {number} */
        googleProtobuf.Message.getFieldWithDefault(this, 2, 0)
      );
    };
    /** @param {number} value */


    proto.types.BlockchainStatus.prototype.setBestHeight = function (value) {
      googleProtobuf.Message.setProto3IntField(this, 2, value);
    };
    /**
     * optional string consensus_info = 3;
     * @return {string}
     */


    proto.types.BlockchainStatus.prototype.getConsensusInfo = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.getFieldWithDefault(this, 3, "")
      );
    };
    /** @param {string} value */


    proto.types.BlockchainStatus.prototype.setConsensusInfo = function (value) {
      googleProtobuf.Message.setProto3StringField(this, 3, value);
    };
    /**
     * optional bytes best_chain_id_hash = 4;
     * @return {!(string|Uint8Array)}
     */


    proto.types.BlockchainStatus.prototype.getBestChainIdHash = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 4, "")
      );
    };
    /**
     * optional bytes best_chain_id_hash = 4;
     * This is a type-conversion wrapper around `getBestChainIdHash()`
     * @return {string}
     */


    proto.types.BlockchainStatus.prototype.getBestChainIdHash_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getBestChainIdHash())
      );
    };
    /**
     * optional bytes best_chain_id_hash = 4;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getBestChainIdHash()`
     * @return {!Uint8Array}
     */


    proto.types.BlockchainStatus.prototype.getBestChainIdHash_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getBestChainIdHash())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.BlockchainStatus.prototype.setBestChainIdHash = function (value) {
      googleProtobuf.Message.setProto3BytesField(this, 4, value);
    };
    /**
     * optional ChainInfo chain_info = 5;
     * @return {?proto.types.ChainInfo}
     */


    proto.types.BlockchainStatus.prototype.getChainInfo = function () {
      return (
        /** @type{?proto.types.ChainInfo} */
        googleProtobuf.Message.getWrapperField(this, proto.types.ChainInfo, 5)
      );
    };
    /** @param {?proto.types.ChainInfo|undefined} value */


    proto.types.BlockchainStatus.prototype.setChainInfo = function (value) {
      googleProtobuf.Message.setWrapperField(this, 5, value);
    };

    proto.types.BlockchainStatus.prototype.clearChainInfo = function () {
      this.setChainInfo(undefined);
    };
    /**
     * Returns whether this field is set.
     * @return {boolean}
     */


    proto.types.BlockchainStatus.prototype.hasChainInfo = function () {
      return googleProtobuf.Message.getField(this, 5) != null;
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.ChainId = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.ChainId, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.ChainId.displayName = 'proto.types.ChainId';
    }

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.ChainId.prototype.toObject = function (opt_includeInstance) {
        return proto.types.ChainId.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.ChainId} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.ChainId.toObject = function (includeInstance, msg) {
        var obj = {
          magic: googleProtobuf.Message.getFieldWithDefault(msg, 1, ""),
          pb_public: googleProtobuf.Message.getFieldWithDefault(msg, 2, false),
          mainnet: googleProtobuf.Message.getFieldWithDefault(msg, 3, false),
          consensus: googleProtobuf.Message.getFieldWithDefault(msg, 4, ""),
          version: googleProtobuf.Message.getFieldWithDefault(msg, 5, 0)
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.ChainId}
     */


    proto.types.ChainId.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.ChainId();
      return proto.types.ChainId.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.ChainId} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.ChainId}
     */


    proto.types.ChainId.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {string} */
            reader.readString();
            msg.setMagic(value);
            break;

          case 2:
            var value =
            /** @type {boolean} */
            reader.readBool();
            msg.setPublic(value);
            break;

          case 3:
            var value =
            /** @type {boolean} */
            reader.readBool();
            msg.setMainnet(value);
            break;

          case 4:
            var value =
            /** @type {string} */
            reader.readString();
            msg.setConsensus(value);
            break;

          case 5:
            var value =
            /** @type {number} */
            reader.readInt32();
            msg.setVersion(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.ChainId.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.ChainId.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.ChainId} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.ChainId.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getMagic();

      if (f.length > 0) {
        writer.writeString(1, f);
      }

      f = message.getPublic();

      if (f) {
        writer.writeBool(2, f);
      }

      f = message.getMainnet();

      if (f) {
        writer.writeBool(3, f);
      }

      f = message.getConsensus();

      if (f.length > 0) {
        writer.writeString(4, f);
      }

      f = message.getVersion();

      if (f !== 0) {
        writer.writeInt32(5, f);
      }
    };
    /**
     * optional string magic = 1;
     * @return {string}
     */


    proto.types.ChainId.prototype.getMagic = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, "")
      );
    };
    /** @param {string} value */


    proto.types.ChainId.prototype.setMagic = function (value) {
      googleProtobuf.Message.setProto3StringField(this, 1, value);
    };
    /**
     * optional bool public = 2;
     * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
     * You should avoid comparisons like {@code val === true/false} in those cases.
     * @return {boolean}
     */


    proto.types.ChainId.prototype.getPublic = function () {
      return (
        /** @type {boolean} */
        googleProtobuf.Message.getFieldWithDefault(this, 2, false)
      );
    };
    /** @param {boolean} value */


    proto.types.ChainId.prototype.setPublic = function (value) {
      googleProtobuf.Message.setProto3BooleanField(this, 2, value);
    };
    /**
     * optional bool mainnet = 3;
     * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
     * You should avoid comparisons like {@code val === true/false} in those cases.
     * @return {boolean}
     */


    proto.types.ChainId.prototype.getMainnet = function () {
      return (
        /** @type {boolean} */
        googleProtobuf.Message.getFieldWithDefault(this, 3, false)
      );
    };
    /** @param {boolean} value */


    proto.types.ChainId.prototype.setMainnet = function (value) {
      googleProtobuf.Message.setProto3BooleanField(this, 3, value);
    };
    /**
     * optional string consensus = 4;
     * @return {string}
     */


    proto.types.ChainId.prototype.getConsensus = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.getFieldWithDefault(this, 4, "")
      );
    };
    /** @param {string} value */


    proto.types.ChainId.prototype.setConsensus = function (value) {
      googleProtobuf.Message.setProto3StringField(this, 4, value);
    };
    /**
     * optional int32 version = 5;
     * @return {number}
     */


    proto.types.ChainId.prototype.getVersion = function () {
      return (
        /** @type {number} */
        googleProtobuf.Message.getFieldWithDefault(this, 5, 0)
      );
    };
    /** @param {number} value */


    proto.types.ChainId.prototype.setVersion = function (value) {
      googleProtobuf.Message.setProto3IntField(this, 5, value);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.ChainInfo = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.ChainInfo, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.ChainInfo.displayName = 'proto.types.ChainInfo';
    }

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.ChainInfo.prototype.toObject = function (opt_includeInstance) {
        return proto.types.ChainInfo.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.ChainInfo} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.ChainInfo.toObject = function (includeInstance, msg) {
        var f,
            obj = {
          id: (f = msg.getId()) && proto.types.ChainId.toObject(includeInstance, f),
          bpnumber: googleProtobuf.Message.getFieldWithDefault(msg, 2, 0),
          maxblocksize: googleProtobuf.Message.getFieldWithDefault(msg, 3, 0),
          maxtokens: msg.getMaxtokens_asB64(),
          stakingminimum: msg.getStakingminimum_asB64(),
          totalstaking: msg.getTotalstaking_asB64(),
          gasprice: msg.getGasprice_asB64(),
          nameprice: msg.getNameprice_asB64(),
          totalvotingpower: msg.getTotalvotingpower_asB64(),
          votingreward: msg.getVotingreward_asB64()
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.ChainInfo}
     */


    proto.types.ChainInfo.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.ChainInfo();
      return proto.types.ChainInfo.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.ChainInfo} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.ChainInfo}
     */


    proto.types.ChainInfo.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value = new proto.types.ChainId();
            reader.readMessage(value, proto.types.ChainId.deserializeBinaryFromReader);
            msg.setId(value);
            break;

          case 2:
            var value =
            /** @type {number} */
            reader.readUint32();
            msg.setBpnumber(value);
            break;

          case 3:
            var value =
            /** @type {number} */
            reader.readUint64();
            msg.setMaxblocksize(value);
            break;

          case 4:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setMaxtokens(value);
            break;

          case 5:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setStakingminimum(value);
            break;

          case 6:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setTotalstaking(value);
            break;

          case 7:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setGasprice(value);
            break;

          case 8:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setNameprice(value);
            break;

          case 9:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setTotalvotingpower(value);
            break;

          case 10:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setVotingreward(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.ChainInfo.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.ChainInfo.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.ChainInfo} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.ChainInfo.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getId();

      if (f != null) {
        writer.writeMessage(1, f, proto.types.ChainId.serializeBinaryToWriter);
      }

      f = message.getBpnumber();

      if (f !== 0) {
        writer.writeUint32(2, f);
      }

      f = message.getMaxblocksize();

      if (f !== 0) {
        writer.writeUint64(3, f);
      }

      f = message.getMaxtokens_asU8();

      if (f.length > 0) {
        writer.writeBytes(4, f);
      }

      f = message.getStakingminimum_asU8();

      if (f.length > 0) {
        writer.writeBytes(5, f);
      }

      f = message.getTotalstaking_asU8();

      if (f.length > 0) {
        writer.writeBytes(6, f);
      }

      f = message.getGasprice_asU8();

      if (f.length > 0) {
        writer.writeBytes(7, f);
      }

      f = message.getNameprice_asU8();

      if (f.length > 0) {
        writer.writeBytes(8, f);
      }

      f = message.getTotalvotingpower_asU8();

      if (f.length > 0) {
        writer.writeBytes(9, f);
      }

      f = message.getVotingreward_asU8();

      if (f.length > 0) {
        writer.writeBytes(10, f);
      }
    };
    /**
     * optional ChainId id = 1;
     * @return {?proto.types.ChainId}
     */


    proto.types.ChainInfo.prototype.getId = function () {
      return (
        /** @type{?proto.types.ChainId} */
        googleProtobuf.Message.getWrapperField(this, proto.types.ChainId, 1)
      );
    };
    /** @param {?proto.types.ChainId|undefined} value */


    proto.types.ChainInfo.prototype.setId = function (value) {
      googleProtobuf.Message.setWrapperField(this, 1, value);
    };

    proto.types.ChainInfo.prototype.clearId = function () {
      this.setId(undefined);
    };
    /**
     * Returns whether this field is set.
     * @return {boolean}
     */


    proto.types.ChainInfo.prototype.hasId = function () {
      return googleProtobuf.Message.getField(this, 1) != null;
    };
    /**
     * optional uint32 bpNumber = 2;
     * @return {number}
     */


    proto.types.ChainInfo.prototype.getBpnumber = function () {
      return (
        /** @type {number} */
        googleProtobuf.Message.getFieldWithDefault(this, 2, 0)
      );
    };
    /** @param {number} value */


    proto.types.ChainInfo.prototype.setBpnumber = function (value) {
      googleProtobuf.Message.setProto3IntField(this, 2, value);
    };
    /**
     * optional uint64 maxblocksize = 3;
     * @return {number}
     */


    proto.types.ChainInfo.prototype.getMaxblocksize = function () {
      return (
        /** @type {number} */
        googleProtobuf.Message.getFieldWithDefault(this, 3, 0)
      );
    };
    /** @param {number} value */


    proto.types.ChainInfo.prototype.setMaxblocksize = function (value) {
      googleProtobuf.Message.setProto3IntField(this, 3, value);
    };
    /**
     * optional bytes maxtokens = 4;
     * @return {!(string|Uint8Array)}
     */


    proto.types.ChainInfo.prototype.getMaxtokens = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 4, "")
      );
    };
    /**
     * optional bytes maxtokens = 4;
     * This is a type-conversion wrapper around `getMaxtokens()`
     * @return {string}
     */


    proto.types.ChainInfo.prototype.getMaxtokens_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getMaxtokens())
      );
    };
    /**
     * optional bytes maxtokens = 4;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getMaxtokens()`
     * @return {!Uint8Array}
     */


    proto.types.ChainInfo.prototype.getMaxtokens_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getMaxtokens())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.ChainInfo.prototype.setMaxtokens = function (value) {
      googleProtobuf.Message.setProto3BytesField(this, 4, value);
    };
    /**
     * optional bytes stakingminimum = 5;
     * @return {!(string|Uint8Array)}
     */


    proto.types.ChainInfo.prototype.getStakingminimum = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 5, "")
      );
    };
    /**
     * optional bytes stakingminimum = 5;
     * This is a type-conversion wrapper around `getStakingminimum()`
     * @return {string}
     */


    proto.types.ChainInfo.prototype.getStakingminimum_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getStakingminimum())
      );
    };
    /**
     * optional bytes stakingminimum = 5;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getStakingminimum()`
     * @return {!Uint8Array}
     */


    proto.types.ChainInfo.prototype.getStakingminimum_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getStakingminimum())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.ChainInfo.prototype.setStakingminimum = function (value) {
      googleProtobuf.Message.setProto3BytesField(this, 5, value);
    };
    /**
     * optional bytes totalstaking = 6;
     * @return {!(string|Uint8Array)}
     */


    proto.types.ChainInfo.prototype.getTotalstaking = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 6, "")
      );
    };
    /**
     * optional bytes totalstaking = 6;
     * This is a type-conversion wrapper around `getTotalstaking()`
     * @return {string}
     */


    proto.types.ChainInfo.prototype.getTotalstaking_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getTotalstaking())
      );
    };
    /**
     * optional bytes totalstaking = 6;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getTotalstaking()`
     * @return {!Uint8Array}
     */


    proto.types.ChainInfo.prototype.getTotalstaking_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getTotalstaking())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.ChainInfo.prototype.setTotalstaking = function (value) {
      googleProtobuf.Message.setProto3BytesField(this, 6, value);
    };
    /**
     * optional bytes gasprice = 7;
     * @return {!(string|Uint8Array)}
     */


    proto.types.ChainInfo.prototype.getGasprice = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 7, "")
      );
    };
    /**
     * optional bytes gasprice = 7;
     * This is a type-conversion wrapper around `getGasprice()`
     * @return {string}
     */


    proto.types.ChainInfo.prototype.getGasprice_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getGasprice())
      );
    };
    /**
     * optional bytes gasprice = 7;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getGasprice()`
     * @return {!Uint8Array}
     */


    proto.types.ChainInfo.prototype.getGasprice_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getGasprice())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.ChainInfo.prototype.setGasprice = function (value) {
      googleProtobuf.Message.setProto3BytesField(this, 7, value);
    };
    /**
     * optional bytes nameprice = 8;
     * @return {!(string|Uint8Array)}
     */


    proto.types.ChainInfo.prototype.getNameprice = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 8, "")
      );
    };
    /**
     * optional bytes nameprice = 8;
     * This is a type-conversion wrapper around `getNameprice()`
     * @return {string}
     */


    proto.types.ChainInfo.prototype.getNameprice_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getNameprice())
      );
    };
    /**
     * optional bytes nameprice = 8;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getNameprice()`
     * @return {!Uint8Array}
     */


    proto.types.ChainInfo.prototype.getNameprice_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getNameprice())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.ChainInfo.prototype.setNameprice = function (value) {
      googleProtobuf.Message.setProto3BytesField(this, 8, value);
    };
    /**
     * optional bytes totalvotingpower = 9;
     * @return {!(string|Uint8Array)}
     */


    proto.types.ChainInfo.prototype.getTotalvotingpower = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 9, "")
      );
    };
    /**
     * optional bytes totalvotingpower = 9;
     * This is a type-conversion wrapper around `getTotalvotingpower()`
     * @return {string}
     */


    proto.types.ChainInfo.prototype.getTotalvotingpower_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getTotalvotingpower())
      );
    };
    /**
     * optional bytes totalvotingpower = 9;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getTotalvotingpower()`
     * @return {!Uint8Array}
     */


    proto.types.ChainInfo.prototype.getTotalvotingpower_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getTotalvotingpower())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.ChainInfo.prototype.setTotalvotingpower = function (value) {
      googleProtobuf.Message.setProto3BytesField(this, 9, value);
    };
    /**
     * optional bytes votingreward = 10;
     * @return {!(string|Uint8Array)}
     */


    proto.types.ChainInfo.prototype.getVotingreward = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 10, "")
      );
    };
    /**
     * optional bytes votingreward = 10;
     * This is a type-conversion wrapper around `getVotingreward()`
     * @return {string}
     */


    proto.types.ChainInfo.prototype.getVotingreward_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getVotingreward())
      );
    };
    /**
     * optional bytes votingreward = 10;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getVotingreward()`
     * @return {!Uint8Array}
     */


    proto.types.ChainInfo.prototype.getVotingreward_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getVotingreward())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.ChainInfo.prototype.setVotingreward = function (value) {
      googleProtobuf.Message.setProto3BytesField(this, 10, value);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.ChainStats = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.ChainStats, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.ChainStats.displayName = 'proto.types.ChainStats';
    }

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.ChainStats.prototype.toObject = function (opt_includeInstance) {
        return proto.types.ChainStats.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.ChainStats} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.ChainStats.toObject = function (includeInstance, msg) {
        var obj = {
          report: googleProtobuf.Message.getFieldWithDefault(msg, 1, "")
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.ChainStats}
     */


    proto.types.ChainStats.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.ChainStats();
      return proto.types.ChainStats.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.ChainStats} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.ChainStats}
     */


    proto.types.ChainStats.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {string} */
            reader.readString();
            msg.setReport(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.ChainStats.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.ChainStats.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.ChainStats} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.ChainStats.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getReport();

      if (f.length > 0) {
        writer.writeString(1, f);
      }
    };
    /**
     * optional string report = 1;
     * @return {string}
     */


    proto.types.ChainStats.prototype.getReport = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, "")
      );
    };
    /** @param {string} value */


    proto.types.ChainStats.prototype.setReport = function (value) {
      googleProtobuf.Message.setProto3StringField(this, 1, value);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.Input = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, proto.types.Input.repeatedFields_, null);
    };

    goog.inherits(proto.types.Input, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.Input.displayName = 'proto.types.Input';
    }
    /**
     * List of repeated fields within this message type.
     * @private {!Array<number>}
     * @const
     */


    proto.types.Input.repeatedFields_ = [2];

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.Input.prototype.toObject = function (opt_includeInstance) {
        return proto.types.Input.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.Input} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.Input.toObject = function (includeInstance, msg) {
        var obj = {
          hash: msg.getHash_asB64(),
          addressList: msg.getAddressList_asB64(),
          value: msg.getValue_asB64(),
          script: msg.getScript_asB64()
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.Input}
     */


    proto.types.Input.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.Input();
      return proto.types.Input.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.Input} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.Input}
     */


    proto.types.Input.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setHash(value);
            break;

          case 2:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.addAddress(value);
            break;

          case 3:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setValue(value);
            break;

          case 4:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setScript(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.Input.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.Input.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.Input} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.Input.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getHash_asU8();

      if (f.length > 0) {
        writer.writeBytes(1, f);
      }

      f = message.getAddressList_asU8();

      if (f.length > 0) {
        writer.writeRepeatedBytes(2, f);
      }

      f = message.getValue_asU8();

      if (f.length > 0) {
        writer.writeBytes(3, f);
      }

      f = message.getScript_asU8();

      if (f.length > 0) {
        writer.writeBytes(4, f);
      }
    };
    /**
     * optional bytes hash = 1;
     * @return {!(string|Uint8Array)}
     */


    proto.types.Input.prototype.getHash = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, "")
      );
    };
    /**
     * optional bytes hash = 1;
     * This is a type-conversion wrapper around `getHash()`
     * @return {string}
     */


    proto.types.Input.prototype.getHash_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getHash())
      );
    };
    /**
     * optional bytes hash = 1;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getHash()`
     * @return {!Uint8Array}
     */


    proto.types.Input.prototype.getHash_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getHash())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.Input.prototype.setHash = function (value) {
      googleProtobuf.Message.setProto3BytesField(this, 1, value);
    };
    /**
     * repeated bytes address = 2;
     * @return {!(Array<!Uint8Array>|Array<string>)}
     */


    proto.types.Input.prototype.getAddressList = function () {
      return (
        /** @type {!(Array<!Uint8Array>|Array<string>)} */
        googleProtobuf.Message.getRepeatedField(this, 2)
      );
    };
    /**
     * repeated bytes address = 2;
     * This is a type-conversion wrapper around `getAddressList()`
     * @return {!Array<string>}
     */


    proto.types.Input.prototype.getAddressList_asB64 = function () {
      return (
        /** @type {!Array<string>} */
        googleProtobuf.Message.bytesListAsB64(this.getAddressList())
      );
    };
    /**
     * repeated bytes address = 2;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getAddressList()`
     * @return {!Array<!Uint8Array>}
     */


    proto.types.Input.prototype.getAddressList_asU8 = function () {
      return (
        /** @type {!Array<!Uint8Array>} */
        googleProtobuf.Message.bytesListAsU8(this.getAddressList())
      );
    };
    /** @param {!(Array<!Uint8Array>|Array<string>)} value */


    proto.types.Input.prototype.setAddressList = function (value) {
      googleProtobuf.Message.setField(this, 2, value || []);
    };
    /**
     * @param {!(string|Uint8Array)} value
     * @param {number=} opt_index
     */


    proto.types.Input.prototype.addAddress = function (value, opt_index) {
      googleProtobuf.Message.addToRepeatedField(this, 2, value, opt_index);
    };

    proto.types.Input.prototype.clearAddressList = function () {
      this.setAddressList([]);
    };
    /**
     * optional bytes value = 3;
     * @return {!(string|Uint8Array)}
     */


    proto.types.Input.prototype.getValue = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 3, "")
      );
    };
    /**
     * optional bytes value = 3;
     * This is a type-conversion wrapper around `getValue()`
     * @return {string}
     */


    proto.types.Input.prototype.getValue_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getValue())
      );
    };
    /**
     * optional bytes value = 3;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getValue()`
     * @return {!Uint8Array}
     */


    proto.types.Input.prototype.getValue_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getValue())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.Input.prototype.setValue = function (value) {
      googleProtobuf.Message.setProto3BytesField(this, 3, value);
    };
    /**
     * optional bytes script = 4;
     * @return {!(string|Uint8Array)}
     */


    proto.types.Input.prototype.getScript = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 4, "")
      );
    };
    /**
     * optional bytes script = 4;
     * This is a type-conversion wrapper around `getScript()`
     * @return {string}
     */


    proto.types.Input.prototype.getScript_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getScript())
      );
    };
    /**
     * optional bytes script = 4;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getScript()`
     * @return {!Uint8Array}
     */


    proto.types.Input.prototype.getScript_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getScript())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.Input.prototype.setScript = function (value) {
      googleProtobuf.Message.setProto3BytesField(this, 4, value);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.Output = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.Output, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.Output.displayName = 'proto.types.Output';
    }

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.Output.prototype.toObject = function (opt_includeInstance) {
        return proto.types.Output.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.Output} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.Output.toObject = function (includeInstance, msg) {
        var obj = {
          index: googleProtobuf.Message.getFieldWithDefault(msg, 1, 0),
          address: msg.getAddress_asB64(),
          value: msg.getValue_asB64(),
          script: msg.getScript_asB64()
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.Output}
     */


    proto.types.Output.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.Output();
      return proto.types.Output.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.Output} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.Output}
     */


    proto.types.Output.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {number} */
            reader.readUint32();
            msg.setIndex(value);
            break;

          case 2:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setAddress(value);
            break;

          case 3:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setValue(value);
            break;

          case 4:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setScript(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.Output.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.Output.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.Output} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.Output.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getIndex();

      if (f !== 0) {
        writer.writeUint32(1, f);
      }

      f = message.getAddress_asU8();

      if (f.length > 0) {
        writer.writeBytes(2, f);
      }

      f = message.getValue_asU8();

      if (f.length > 0) {
        writer.writeBytes(3, f);
      }

      f = message.getScript_asU8();

      if (f.length > 0) {
        writer.writeBytes(4, f);
      }
    };
    /**
     * optional uint32 index = 1;
     * @return {number}
     */


    proto.types.Output.prototype.getIndex = function () {
      return (
        /** @type {number} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, 0)
      );
    };
    /** @param {number} value */


    proto.types.Output.prototype.setIndex = function (value) {
      googleProtobuf.Message.setProto3IntField(this, 1, value);
    };
    /**
     * optional bytes address = 2;
     * @return {!(string|Uint8Array)}
     */


    proto.types.Output.prototype.getAddress = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 2, "")
      );
    };
    /**
     * optional bytes address = 2;
     * This is a type-conversion wrapper around `getAddress()`
     * @return {string}
     */


    proto.types.Output.prototype.getAddress_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getAddress())
      );
    };
    /**
     * optional bytes address = 2;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getAddress()`
     * @return {!Uint8Array}
     */


    proto.types.Output.prototype.getAddress_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getAddress())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.Output.prototype.setAddress = function (value) {
      googleProtobuf.Message.setProto3BytesField(this, 2, value);
    };
    /**
     * optional bytes value = 3;
     * @return {!(string|Uint8Array)}
     */


    proto.types.Output.prototype.getValue = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 3, "")
      );
    };
    /**
     * optional bytes value = 3;
     * This is a type-conversion wrapper around `getValue()`
     * @return {string}
     */


    proto.types.Output.prototype.getValue_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getValue())
      );
    };
    /**
     * optional bytes value = 3;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getValue()`
     * @return {!Uint8Array}
     */


    proto.types.Output.prototype.getValue_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getValue())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.Output.prototype.setValue = function (value) {
      googleProtobuf.Message.setProto3BytesField(this, 3, value);
    };
    /**
     * optional bytes script = 4;
     * @return {!(string|Uint8Array)}
     */


    proto.types.Output.prototype.getScript = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 4, "")
      );
    };
    /**
     * optional bytes script = 4;
     * This is a type-conversion wrapper around `getScript()`
     * @return {string}
     */


    proto.types.Output.prototype.getScript_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getScript())
      );
    };
    /**
     * optional bytes script = 4;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getScript()`
     * @return {!Uint8Array}
     */


    proto.types.Output.prototype.getScript_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getScript())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.Output.prototype.setScript = function (value) {
      googleProtobuf.Message.setProto3BytesField(this, 4, value);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.Empty = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.Empty, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.Empty.displayName = 'proto.types.Empty';
    }

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.Empty.prototype.toObject = function (opt_includeInstance) {
        return proto.types.Empty.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.Empty} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.Empty.toObject = function (includeInstance, msg) {
        var obj = {};

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.Empty}
     */


    proto.types.Empty.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.Empty();
      return proto.types.Empty.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.Empty} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.Empty}
     */


    proto.types.Empty.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.Empty.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.Empty.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.Empty} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.Empty.serializeBinaryToWriter = function (message, writer) {
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.SingleBytes = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.SingleBytes, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.SingleBytes.displayName = 'proto.types.SingleBytes';
    }

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.SingleBytes.prototype.toObject = function (opt_includeInstance) {
        return proto.types.SingleBytes.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.SingleBytes} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.SingleBytes.toObject = function (includeInstance, msg) {
        var obj = {
          value: msg.getValue_asB64()
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.SingleBytes}
     */


    proto.types.SingleBytes.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.SingleBytes();
      return proto.types.SingleBytes.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.SingleBytes} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.SingleBytes}
     */


    proto.types.SingleBytes.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setValue(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.SingleBytes.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.SingleBytes.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.SingleBytes} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.SingleBytes.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getValue_asU8();

      if (f.length > 0) {
        writer.writeBytes(1, f);
      }
    };
    /**
     * optional bytes value = 1;
     * @return {!(string|Uint8Array)}
     */


    proto.types.SingleBytes.prototype.getValue = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, "")
      );
    };
    /**
     * optional bytes value = 1;
     * This is a type-conversion wrapper around `getValue()`
     * @return {string}
     */


    proto.types.SingleBytes.prototype.getValue_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getValue())
      );
    };
    /**
     * optional bytes value = 1;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getValue()`
     * @return {!Uint8Array}
     */


    proto.types.SingleBytes.prototype.getValue_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getValue())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.SingleBytes.prototype.setValue = function (value) {
      googleProtobuf.Message.setProto3BytesField(this, 1, value);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.SingleString = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.SingleString, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.SingleString.displayName = 'proto.types.SingleString';
    }

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.SingleString.prototype.toObject = function (opt_includeInstance) {
        return proto.types.SingleString.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.SingleString} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.SingleString.toObject = function (includeInstance, msg) {
        var obj = {
          value: googleProtobuf.Message.getFieldWithDefault(msg, 1, "")
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.SingleString}
     */


    proto.types.SingleString.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.SingleString();
      return proto.types.SingleString.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.SingleString} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.SingleString}
     */


    proto.types.SingleString.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {string} */
            reader.readString();
            msg.setValue(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.SingleString.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.SingleString.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.SingleString} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.SingleString.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getValue();

      if (f.length > 0) {
        writer.writeString(1, f);
      }
    };
    /**
     * optional string value = 1;
     * @return {string}
     */


    proto.types.SingleString.prototype.getValue = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, "")
      );
    };
    /** @param {string} value */


    proto.types.SingleString.prototype.setValue = function (value) {
      googleProtobuf.Message.setProto3StringField(this, 1, value);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.AccountAddress = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.AccountAddress, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.AccountAddress.displayName = 'proto.types.AccountAddress';
    }

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.AccountAddress.prototype.toObject = function (opt_includeInstance) {
        return proto.types.AccountAddress.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.AccountAddress} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.AccountAddress.toObject = function (includeInstance, msg) {
        var obj = {
          value: msg.getValue_asB64()
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.AccountAddress}
     */


    proto.types.AccountAddress.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.AccountAddress();
      return proto.types.AccountAddress.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.AccountAddress} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.AccountAddress}
     */


    proto.types.AccountAddress.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setValue(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.AccountAddress.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.AccountAddress.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.AccountAddress} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.AccountAddress.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getValue_asU8();

      if (f.length > 0) {
        writer.writeBytes(1, f);
      }
    };
    /**
     * optional bytes value = 1;
     * @return {!(string|Uint8Array)}
     */


    proto.types.AccountAddress.prototype.getValue = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, "")
      );
    };
    /**
     * optional bytes value = 1;
     * This is a type-conversion wrapper around `getValue()`
     * @return {string}
     */


    proto.types.AccountAddress.prototype.getValue_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getValue())
      );
    };
    /**
     * optional bytes value = 1;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getValue()`
     * @return {!Uint8Array}
     */


    proto.types.AccountAddress.prototype.getValue_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getValue())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.AccountAddress.prototype.setValue = function (value) {
      googleProtobuf.Message.setProto3BytesField(this, 1, value);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.AccountAndRoot = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.AccountAndRoot, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.AccountAndRoot.displayName = 'proto.types.AccountAndRoot';
    }

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.AccountAndRoot.prototype.toObject = function (opt_includeInstance) {
        return proto.types.AccountAndRoot.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.AccountAndRoot} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.AccountAndRoot.toObject = function (includeInstance, msg) {
        var obj = {
          account: msg.getAccount_asB64(),
          root: msg.getRoot_asB64(),
          compressed: googleProtobuf.Message.getFieldWithDefault(msg, 3, false)
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.AccountAndRoot}
     */


    proto.types.AccountAndRoot.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.AccountAndRoot();
      return proto.types.AccountAndRoot.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.AccountAndRoot} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.AccountAndRoot}
     */


    proto.types.AccountAndRoot.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setAccount(value);
            break;

          case 2:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setRoot(value);
            break;

          case 3:
            var value =
            /** @type {boolean} */
            reader.readBool();
            msg.setCompressed(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.AccountAndRoot.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.AccountAndRoot.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.AccountAndRoot} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.AccountAndRoot.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getAccount_asU8();

      if (f.length > 0) {
        writer.writeBytes(1, f);
      }

      f = message.getRoot_asU8();

      if (f.length > 0) {
        writer.writeBytes(2, f);
      }

      f = message.getCompressed();

      if (f) {
        writer.writeBool(3, f);
      }
    };
    /**
     * optional bytes Account = 1;
     * @return {!(string|Uint8Array)}
     */


    proto.types.AccountAndRoot.prototype.getAccount = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, "")
      );
    };
    /**
     * optional bytes Account = 1;
     * This is a type-conversion wrapper around `getAccount()`
     * @return {string}
     */


    proto.types.AccountAndRoot.prototype.getAccount_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getAccount())
      );
    };
    /**
     * optional bytes Account = 1;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getAccount()`
     * @return {!Uint8Array}
     */


    proto.types.AccountAndRoot.prototype.getAccount_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getAccount())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.AccountAndRoot.prototype.setAccount = function (value) {
      googleProtobuf.Message.setProto3BytesField(this, 1, value);
    };
    /**
     * optional bytes Root = 2;
     * @return {!(string|Uint8Array)}
     */


    proto.types.AccountAndRoot.prototype.getRoot = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 2, "")
      );
    };
    /**
     * optional bytes Root = 2;
     * This is a type-conversion wrapper around `getRoot()`
     * @return {string}
     */


    proto.types.AccountAndRoot.prototype.getRoot_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getRoot())
      );
    };
    /**
     * optional bytes Root = 2;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getRoot()`
     * @return {!Uint8Array}
     */


    proto.types.AccountAndRoot.prototype.getRoot_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getRoot())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.AccountAndRoot.prototype.setRoot = function (value) {
      googleProtobuf.Message.setProto3BytesField(this, 2, value);
    };
    /**
     * optional bool Compressed = 3;
     * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
     * You should avoid comparisons like {@code val === true/false} in those cases.
     * @return {boolean}
     */


    proto.types.AccountAndRoot.prototype.getCompressed = function () {
      return (
        /** @type {boolean} */
        googleProtobuf.Message.getFieldWithDefault(this, 3, false)
      );
    };
    /** @param {boolean} value */


    proto.types.AccountAndRoot.prototype.setCompressed = function (value) {
      googleProtobuf.Message.setProto3BooleanField(this, 3, value);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.Peer = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, proto.types.Peer.repeatedFields_, null);
    };

    goog.inherits(proto.types.Peer, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.Peer.displayName = 'proto.types.Peer';
    }
    /**
     * List of repeated fields within this message type.
     * @private {!Array<number>}
     * @const
     */


    proto.types.Peer.repeatedFields_ = [8];

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.Peer.prototype.toObject = function (opt_includeInstance) {
        return proto.types.Peer.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.Peer} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.Peer.toObject = function (includeInstance, msg) {
        var f,
            obj = {
          address: (f = msg.getAddress()) && node_pb.PeerAddress.toObject(includeInstance, f),
          bestblock: (f = msg.getBestblock()) && p2p_pb.NewBlockNotice.toObject(includeInstance, f),
          state: googleProtobuf.Message.getFieldWithDefault(msg, 3, 0),
          hidden: googleProtobuf.Message.getFieldWithDefault(msg, 4, false),
          lashcheck: googleProtobuf.Message.getFieldWithDefault(msg, 5, 0),
          selfpeer: googleProtobuf.Message.getFieldWithDefault(msg, 6, false),
          version: googleProtobuf.Message.getFieldWithDefault(msg, 7, ""),
          certificatesList: googleProtobuf.Message.toObjectList(msg.getCertificatesList(), node_pb.AgentCertificate.toObject, includeInstance),
          acceptedrole: googleProtobuf.Message.getFieldWithDefault(msg, 9, 0)
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.Peer}
     */


    proto.types.Peer.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.Peer();
      return proto.types.Peer.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.Peer} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.Peer}
     */


    proto.types.Peer.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value = new node_pb.PeerAddress();
            reader.readMessage(value, node_pb.PeerAddress.deserializeBinaryFromReader);
            msg.setAddress(value);
            break;

          case 2:
            var value = new p2p_pb.NewBlockNotice();
            reader.readMessage(value, p2p_pb.NewBlockNotice.deserializeBinaryFromReader);
            msg.setBestblock(value);
            break;

          case 3:
            var value =
            /** @type {number} */
            reader.readInt32();
            msg.setState(value);
            break;

          case 4:
            var value =
            /** @type {boolean} */
            reader.readBool();
            msg.setHidden(value);
            break;

          case 5:
            var value =
            /** @type {number} */
            reader.readInt64();
            msg.setLashcheck(value);
            break;

          case 6:
            var value =
            /** @type {boolean} */
            reader.readBool();
            msg.setSelfpeer(value);
            break;

          case 7:
            var value =
            /** @type {string} */
            reader.readString();
            msg.setVersion(value);
            break;

          case 8:
            var value = new node_pb.AgentCertificate();
            reader.readMessage(value, node_pb.AgentCertificate.deserializeBinaryFromReader);
            msg.addCertificates(value);
            break;

          case 9:
            var value =
            /** @type {!proto.types.PeerRole} */
            reader.readEnum();
            msg.setAcceptedrole(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.Peer.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.Peer.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.Peer} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.Peer.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getAddress();

      if (f != null) {
        writer.writeMessage(1, f, node_pb.PeerAddress.serializeBinaryToWriter);
      }

      f = message.getBestblock();

      if (f != null) {
        writer.writeMessage(2, f, p2p_pb.NewBlockNotice.serializeBinaryToWriter);
      }

      f = message.getState();

      if (f !== 0) {
        writer.writeInt32(3, f);
      }

      f = message.getHidden();

      if (f) {
        writer.writeBool(4, f);
      }

      f = message.getLashcheck();

      if (f !== 0) {
        writer.writeInt64(5, f);
      }

      f = message.getSelfpeer();

      if (f) {
        writer.writeBool(6, f);
      }

      f = message.getVersion();

      if (f.length > 0) {
        writer.writeString(7, f);
      }

      f = message.getCertificatesList();

      if (f.length > 0) {
        writer.writeRepeatedMessage(8, f, node_pb.AgentCertificate.serializeBinaryToWriter);
      }

      f = message.getAcceptedrole();

      if (f !== 0.0) {
        writer.writeEnum(9, f);
      }
    };
    /**
     * optional PeerAddress address = 1;
     * @return {?proto.types.PeerAddress}
     */


    proto.types.Peer.prototype.getAddress = function () {
      return (
        /** @type{?proto.types.PeerAddress} */
        googleProtobuf.Message.getWrapperField(this, node_pb.PeerAddress, 1)
      );
    };
    /** @param {?proto.types.PeerAddress|undefined} value */


    proto.types.Peer.prototype.setAddress = function (value) {
      googleProtobuf.Message.setWrapperField(this, 1, value);
    };

    proto.types.Peer.prototype.clearAddress = function () {
      this.setAddress(undefined);
    };
    /**
     * Returns whether this field is set.
     * @return {boolean}
     */


    proto.types.Peer.prototype.hasAddress = function () {
      return googleProtobuf.Message.getField(this, 1) != null;
    };
    /**
     * optional NewBlockNotice bestblock = 2;
     * @return {?proto.types.NewBlockNotice}
     */


    proto.types.Peer.prototype.getBestblock = function () {
      return (
        /** @type{?proto.types.NewBlockNotice} */
        googleProtobuf.Message.getWrapperField(this, p2p_pb.NewBlockNotice, 2)
      );
    };
    /** @param {?proto.types.NewBlockNotice|undefined} value */


    proto.types.Peer.prototype.setBestblock = function (value) {
      googleProtobuf.Message.setWrapperField(this, 2, value);
    };

    proto.types.Peer.prototype.clearBestblock = function () {
      this.setBestblock(undefined);
    };
    /**
     * Returns whether this field is set.
     * @return {boolean}
     */


    proto.types.Peer.prototype.hasBestblock = function () {
      return googleProtobuf.Message.getField(this, 2) != null;
    };
    /**
     * optional int32 state = 3;
     * @return {number}
     */


    proto.types.Peer.prototype.getState = function () {
      return (
        /** @type {number} */
        googleProtobuf.Message.getFieldWithDefault(this, 3, 0)
      );
    };
    /** @param {number} value */


    proto.types.Peer.prototype.setState = function (value) {
      googleProtobuf.Message.setProto3IntField(this, 3, value);
    };
    /**
     * optional bool hidden = 4;
     * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
     * You should avoid comparisons like {@code val === true/false} in those cases.
     * @return {boolean}
     */


    proto.types.Peer.prototype.getHidden = function () {
      return (
        /** @type {boolean} */
        googleProtobuf.Message.getFieldWithDefault(this, 4, false)
      );
    };
    /** @param {boolean} value */


    proto.types.Peer.prototype.setHidden = function (value) {
      googleProtobuf.Message.setProto3BooleanField(this, 4, value);
    };
    /**
     * optional int64 lashCheck = 5;
     * @return {number}
     */


    proto.types.Peer.prototype.getLashcheck = function () {
      return (
        /** @type {number} */
        googleProtobuf.Message.getFieldWithDefault(this, 5, 0)
      );
    };
    /** @param {number} value */


    proto.types.Peer.prototype.setLashcheck = function (value) {
      googleProtobuf.Message.setProto3IntField(this, 5, value);
    };
    /**
     * optional bool selfpeer = 6;
     * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
     * You should avoid comparisons like {@code val === true/false} in those cases.
     * @return {boolean}
     */


    proto.types.Peer.prototype.getSelfpeer = function () {
      return (
        /** @type {boolean} */
        googleProtobuf.Message.getFieldWithDefault(this, 6, false)
      );
    };
    /** @param {boolean} value */


    proto.types.Peer.prototype.setSelfpeer = function (value) {
      googleProtobuf.Message.setProto3BooleanField(this, 6, value);
    };
    /**
     * optional string version = 7;
     * @return {string}
     */


    proto.types.Peer.prototype.getVersion = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.getFieldWithDefault(this, 7, "")
      );
    };
    /** @param {string} value */


    proto.types.Peer.prototype.setVersion = function (value) {
      googleProtobuf.Message.setProto3StringField(this, 7, value);
    };
    /**
     * repeated AgentCertificate certificates = 8;
     * @return {!Array<!proto.types.AgentCertificate>}
     */


    proto.types.Peer.prototype.getCertificatesList = function () {
      return (
        /** @type{!Array<!proto.types.AgentCertificate>} */
        googleProtobuf.Message.getRepeatedWrapperField(this, node_pb.AgentCertificate, 8)
      );
    };
    /** @param {!Array<!proto.types.AgentCertificate>} value */


    proto.types.Peer.prototype.setCertificatesList = function (value) {
      googleProtobuf.Message.setRepeatedWrapperField(this, 8, value);
    };
    /**
     * @param {!proto.types.AgentCertificate=} opt_value
     * @param {number=} opt_index
     * @return {!proto.types.AgentCertificate}
     */


    proto.types.Peer.prototype.addCertificates = function (opt_value, opt_index) {
      return googleProtobuf.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.types.AgentCertificate, opt_index);
    };

    proto.types.Peer.prototype.clearCertificatesList = function () {
      this.setCertificatesList([]);
    };
    /**
     * optional PeerRole acceptedRole = 9;
     * @return {!proto.types.PeerRole}
     */


    proto.types.Peer.prototype.getAcceptedrole = function () {
      return (
        /** @type {!proto.types.PeerRole} */
        googleProtobuf.Message.getFieldWithDefault(this, 9, 0)
      );
    };
    /** @param {!proto.types.PeerRole} value */


    proto.types.Peer.prototype.setAcceptedrole = function (value) {
      googleProtobuf.Message.setProto3EnumField(this, 9, value);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.PeerList = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, proto.types.PeerList.repeatedFields_, null);
    };

    goog.inherits(proto.types.PeerList, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.PeerList.displayName = 'proto.types.PeerList';
    }
    /**
     * List of repeated fields within this message type.
     * @private {!Array<number>}
     * @const
     */


    proto.types.PeerList.repeatedFields_ = [1];

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.PeerList.prototype.toObject = function (opt_includeInstance) {
        return proto.types.PeerList.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.PeerList} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.PeerList.toObject = function (includeInstance, msg) {
        var obj = {
          peersList: googleProtobuf.Message.toObjectList(msg.getPeersList(), proto.types.Peer.toObject, includeInstance)
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.PeerList}
     */


    proto.types.PeerList.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.PeerList();
      return proto.types.PeerList.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.PeerList} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.PeerList}
     */


    proto.types.PeerList.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value = new proto.types.Peer();
            reader.readMessage(value, proto.types.Peer.deserializeBinaryFromReader);
            msg.addPeers(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.PeerList.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.PeerList.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.PeerList} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.PeerList.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getPeersList();

      if (f.length > 0) {
        writer.writeRepeatedMessage(1, f, proto.types.Peer.serializeBinaryToWriter);
      }
    };
    /**
     * repeated Peer peers = 1;
     * @return {!Array<!proto.types.Peer>}
     */


    proto.types.PeerList.prototype.getPeersList = function () {
      return (
        /** @type{!Array<!proto.types.Peer>} */
        googleProtobuf.Message.getRepeatedWrapperField(this, proto.types.Peer, 1)
      );
    };
    /** @param {!Array<!proto.types.Peer>} value */


    proto.types.PeerList.prototype.setPeersList = function (value) {
      googleProtobuf.Message.setRepeatedWrapperField(this, 1, value);
    };
    /**
     * @param {!proto.types.Peer=} opt_value
     * @param {number=} opt_index
     * @return {!proto.types.Peer}
     */


    proto.types.PeerList.prototype.addPeers = function (opt_value, opt_index) {
      return googleProtobuf.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.types.Peer, opt_index);
    };

    proto.types.PeerList.prototype.clearPeersList = function () {
      this.setPeersList([]);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.ListParams = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.ListParams, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.ListParams.displayName = 'proto.types.ListParams';
    }

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.ListParams.prototype.toObject = function (opt_includeInstance) {
        return proto.types.ListParams.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.ListParams} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.ListParams.toObject = function (includeInstance, msg) {
        var obj = {
          hash: msg.getHash_asB64(),
          height: googleProtobuf.Message.getFieldWithDefault(msg, 2, 0),
          size: googleProtobuf.Message.getFieldWithDefault(msg, 3, 0),
          offset: googleProtobuf.Message.getFieldWithDefault(msg, 4, 0),
          asc: googleProtobuf.Message.getFieldWithDefault(msg, 5, false)
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.ListParams}
     */


    proto.types.ListParams.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.ListParams();
      return proto.types.ListParams.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.ListParams} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.ListParams}
     */


    proto.types.ListParams.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setHash(value);
            break;

          case 2:
            var value =
            /** @type {number} */
            reader.readUint64();
            msg.setHeight(value);
            break;

          case 3:
            var value =
            /** @type {number} */
            reader.readUint32();
            msg.setSize(value);
            break;

          case 4:
            var value =
            /** @type {number} */
            reader.readUint32();
            msg.setOffset(value);
            break;

          case 5:
            var value =
            /** @type {boolean} */
            reader.readBool();
            msg.setAsc(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.ListParams.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.ListParams.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.ListParams} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.ListParams.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getHash_asU8();

      if (f.length > 0) {
        writer.writeBytes(1, f);
      }

      f = message.getHeight();

      if (f !== 0) {
        writer.writeUint64(2, f);
      }

      f = message.getSize();

      if (f !== 0) {
        writer.writeUint32(3, f);
      }

      f = message.getOffset();

      if (f !== 0) {
        writer.writeUint32(4, f);
      }

      f = message.getAsc();

      if (f) {
        writer.writeBool(5, f);
      }
    };
    /**
     * optional bytes hash = 1;
     * @return {!(string|Uint8Array)}
     */


    proto.types.ListParams.prototype.getHash = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, "")
      );
    };
    /**
     * optional bytes hash = 1;
     * This is a type-conversion wrapper around `getHash()`
     * @return {string}
     */


    proto.types.ListParams.prototype.getHash_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getHash())
      );
    };
    /**
     * optional bytes hash = 1;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getHash()`
     * @return {!Uint8Array}
     */


    proto.types.ListParams.prototype.getHash_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getHash())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.ListParams.prototype.setHash = function (value) {
      googleProtobuf.Message.setProto3BytesField(this, 1, value);
    };
    /**
     * optional uint64 height = 2;
     * @return {number}
     */


    proto.types.ListParams.prototype.getHeight = function () {
      return (
        /** @type {number} */
        googleProtobuf.Message.getFieldWithDefault(this, 2, 0)
      );
    };
    /** @param {number} value */


    proto.types.ListParams.prototype.setHeight = function (value) {
      googleProtobuf.Message.setProto3IntField(this, 2, value);
    };
    /**
     * optional uint32 size = 3;
     * @return {number}
     */


    proto.types.ListParams.prototype.getSize = function () {
      return (
        /** @type {number} */
        googleProtobuf.Message.getFieldWithDefault(this, 3, 0)
      );
    };
    /** @param {number} value */


    proto.types.ListParams.prototype.setSize = function (value) {
      googleProtobuf.Message.setProto3IntField(this, 3, value);
    };
    /**
     * optional uint32 offset = 4;
     * @return {number}
     */


    proto.types.ListParams.prototype.getOffset = function () {
      return (
        /** @type {number} */
        googleProtobuf.Message.getFieldWithDefault(this, 4, 0)
      );
    };
    /** @param {number} value */


    proto.types.ListParams.prototype.setOffset = function (value) {
      googleProtobuf.Message.setProto3IntField(this, 4, value);
    };
    /**
     * optional bool asc = 5;
     * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
     * You should avoid comparisons like {@code val === true/false} in those cases.
     * @return {boolean}
     */


    proto.types.ListParams.prototype.getAsc = function () {
      return (
        /** @type {boolean} */
        googleProtobuf.Message.getFieldWithDefault(this, 5, false)
      );
    };
    /** @param {boolean} value */


    proto.types.ListParams.prototype.setAsc = function (value) {
      googleProtobuf.Message.setProto3BooleanField(this, 5, value);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.PageParams = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.PageParams, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.PageParams.displayName = 'proto.types.PageParams';
    }

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.PageParams.prototype.toObject = function (opt_includeInstance) {
        return proto.types.PageParams.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.PageParams} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.PageParams.toObject = function (includeInstance, msg) {
        var obj = {
          offset: googleProtobuf.Message.getFieldWithDefault(msg, 1, 0),
          size: googleProtobuf.Message.getFieldWithDefault(msg, 2, 0)
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.PageParams}
     */


    proto.types.PageParams.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.PageParams();
      return proto.types.PageParams.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.PageParams} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.PageParams}
     */


    proto.types.PageParams.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {number} */
            reader.readUint32();
            msg.setOffset(value);
            break;

          case 2:
            var value =
            /** @type {number} */
            reader.readUint32();
            msg.setSize(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.PageParams.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.PageParams.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.PageParams} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.PageParams.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getOffset();

      if (f !== 0) {
        writer.writeUint32(1, f);
      }

      f = message.getSize();

      if (f !== 0) {
        writer.writeUint32(2, f);
      }
    };
    /**
     * optional uint32 offset = 1;
     * @return {number}
     */


    proto.types.PageParams.prototype.getOffset = function () {
      return (
        /** @type {number} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, 0)
      );
    };
    /** @param {number} value */


    proto.types.PageParams.prototype.setOffset = function (value) {
      googleProtobuf.Message.setProto3IntField(this, 1, value);
    };
    /**
     * optional uint32 size = 2;
     * @return {number}
     */


    proto.types.PageParams.prototype.getSize = function () {
      return (
        /** @type {number} */
        googleProtobuf.Message.getFieldWithDefault(this, 2, 0)
      );
    };
    /** @param {number} value */


    proto.types.PageParams.prototype.setSize = function (value) {
      googleProtobuf.Message.setProto3IntField(this, 2, value);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.BlockBodyPaged = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.BlockBodyPaged, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.BlockBodyPaged.displayName = 'proto.types.BlockBodyPaged';
    }

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.BlockBodyPaged.prototype.toObject = function (opt_includeInstance) {
        return proto.types.BlockBodyPaged.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.BlockBodyPaged} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.BlockBodyPaged.toObject = function (includeInstance, msg) {
        var f,
            obj = {
          total: googleProtobuf.Message.getFieldWithDefault(msg, 1, 0),
          offset: googleProtobuf.Message.getFieldWithDefault(msg, 2, 0),
          size: googleProtobuf.Message.getFieldWithDefault(msg, 3, 0),
          body: (f = msg.getBody()) && blockchain_pb.BlockBody.toObject(includeInstance, f)
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.BlockBodyPaged}
     */


    proto.types.BlockBodyPaged.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.BlockBodyPaged();
      return proto.types.BlockBodyPaged.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.BlockBodyPaged} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.BlockBodyPaged}
     */


    proto.types.BlockBodyPaged.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {number} */
            reader.readUint32();
            msg.setTotal(value);
            break;

          case 2:
            var value =
            /** @type {number} */
            reader.readUint32();
            msg.setOffset(value);
            break;

          case 3:
            var value =
            /** @type {number} */
            reader.readUint32();
            msg.setSize(value);
            break;

          case 4:
            var value = new blockchain_pb.BlockBody();
            reader.readMessage(value, blockchain_pb.BlockBody.deserializeBinaryFromReader);
            msg.setBody(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.BlockBodyPaged.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.BlockBodyPaged.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.BlockBodyPaged} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.BlockBodyPaged.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getTotal();

      if (f !== 0) {
        writer.writeUint32(1, f);
      }

      f = message.getOffset();

      if (f !== 0) {
        writer.writeUint32(2, f);
      }

      f = message.getSize();

      if (f !== 0) {
        writer.writeUint32(3, f);
      }

      f = message.getBody();

      if (f != null) {
        writer.writeMessage(4, f, blockchain_pb.BlockBody.serializeBinaryToWriter);
      }
    };
    /**
     * optional uint32 total = 1;
     * @return {number}
     */


    proto.types.BlockBodyPaged.prototype.getTotal = function () {
      return (
        /** @type {number} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, 0)
      );
    };
    /** @param {number} value */


    proto.types.BlockBodyPaged.prototype.setTotal = function (value) {
      googleProtobuf.Message.setProto3IntField(this, 1, value);
    };
    /**
     * optional uint32 offset = 2;
     * @return {number}
     */


    proto.types.BlockBodyPaged.prototype.getOffset = function () {
      return (
        /** @type {number} */
        googleProtobuf.Message.getFieldWithDefault(this, 2, 0)
      );
    };
    /** @param {number} value */


    proto.types.BlockBodyPaged.prototype.setOffset = function (value) {
      googleProtobuf.Message.setProto3IntField(this, 2, value);
    };
    /**
     * optional uint32 size = 3;
     * @return {number}
     */


    proto.types.BlockBodyPaged.prototype.getSize = function () {
      return (
        /** @type {number} */
        googleProtobuf.Message.getFieldWithDefault(this, 3, 0)
      );
    };
    /** @param {number} value */


    proto.types.BlockBodyPaged.prototype.setSize = function (value) {
      googleProtobuf.Message.setProto3IntField(this, 3, value);
    };
    /**
     * optional BlockBody body = 4;
     * @return {?proto.types.BlockBody}
     */


    proto.types.BlockBodyPaged.prototype.getBody = function () {
      return (
        /** @type{?proto.types.BlockBody} */
        googleProtobuf.Message.getWrapperField(this, blockchain_pb.BlockBody, 4)
      );
    };
    /** @param {?proto.types.BlockBody|undefined} value */


    proto.types.BlockBodyPaged.prototype.setBody = function (value) {
      googleProtobuf.Message.setWrapperField(this, 4, value);
    };

    proto.types.BlockBodyPaged.prototype.clearBody = function () {
      this.setBody(undefined);
    };
    /**
     * Returns whether this field is set.
     * @return {boolean}
     */


    proto.types.BlockBodyPaged.prototype.hasBody = function () {
      return googleProtobuf.Message.getField(this, 4) != null;
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.BlockBodyParams = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.BlockBodyParams, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.BlockBodyParams.displayName = 'proto.types.BlockBodyParams';
    }

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.BlockBodyParams.prototype.toObject = function (opt_includeInstance) {
        return proto.types.BlockBodyParams.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.BlockBodyParams} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.BlockBodyParams.toObject = function (includeInstance, msg) {
        var f,
            obj = {
          hashornumber: msg.getHashornumber_asB64(),
          paging: (f = msg.getPaging()) && proto.types.PageParams.toObject(includeInstance, f)
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.BlockBodyParams}
     */


    proto.types.BlockBodyParams.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.BlockBodyParams();
      return proto.types.BlockBodyParams.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.BlockBodyParams} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.BlockBodyParams}
     */


    proto.types.BlockBodyParams.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setHashornumber(value);
            break;

          case 2:
            var value = new proto.types.PageParams();
            reader.readMessage(value, proto.types.PageParams.deserializeBinaryFromReader);
            msg.setPaging(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.BlockBodyParams.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.BlockBodyParams.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.BlockBodyParams} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.BlockBodyParams.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getHashornumber_asU8();

      if (f.length > 0) {
        writer.writeBytes(1, f);
      }

      f = message.getPaging();

      if (f != null) {
        writer.writeMessage(2, f, proto.types.PageParams.serializeBinaryToWriter);
      }
    };
    /**
     * optional bytes hashornumber = 1;
     * @return {!(string|Uint8Array)}
     */


    proto.types.BlockBodyParams.prototype.getHashornumber = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, "")
      );
    };
    /**
     * optional bytes hashornumber = 1;
     * This is a type-conversion wrapper around `getHashornumber()`
     * @return {string}
     */


    proto.types.BlockBodyParams.prototype.getHashornumber_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getHashornumber())
      );
    };
    /**
     * optional bytes hashornumber = 1;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getHashornumber()`
     * @return {!Uint8Array}
     */


    proto.types.BlockBodyParams.prototype.getHashornumber_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getHashornumber())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.BlockBodyParams.prototype.setHashornumber = function (value) {
      googleProtobuf.Message.setProto3BytesField(this, 1, value);
    };
    /**
     * optional PageParams paging = 2;
     * @return {?proto.types.PageParams}
     */


    proto.types.BlockBodyParams.prototype.getPaging = function () {
      return (
        /** @type{?proto.types.PageParams} */
        googleProtobuf.Message.getWrapperField(this, proto.types.PageParams, 2)
      );
    };
    /** @param {?proto.types.PageParams|undefined} value */


    proto.types.BlockBodyParams.prototype.setPaging = function (value) {
      googleProtobuf.Message.setWrapperField(this, 2, value);
    };

    proto.types.BlockBodyParams.prototype.clearPaging = function () {
      this.setPaging(undefined);
    };
    /**
     * Returns whether this field is set.
     * @return {boolean}
     */


    proto.types.BlockBodyParams.prototype.hasPaging = function () {
      return googleProtobuf.Message.getField(this, 2) != null;
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.BlockHeaderList = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, proto.types.BlockHeaderList.repeatedFields_, null);
    };

    goog.inherits(proto.types.BlockHeaderList, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.BlockHeaderList.displayName = 'proto.types.BlockHeaderList';
    }
    /**
     * List of repeated fields within this message type.
     * @private {!Array<number>}
     * @const
     */


    proto.types.BlockHeaderList.repeatedFields_ = [1];

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.BlockHeaderList.prototype.toObject = function (opt_includeInstance) {
        return proto.types.BlockHeaderList.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.BlockHeaderList} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.BlockHeaderList.toObject = function (includeInstance, msg) {
        var obj = {
          blocksList: googleProtobuf.Message.toObjectList(msg.getBlocksList(), blockchain_pb.Block.toObject, includeInstance)
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.BlockHeaderList}
     */


    proto.types.BlockHeaderList.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.BlockHeaderList();
      return proto.types.BlockHeaderList.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.BlockHeaderList} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.BlockHeaderList}
     */


    proto.types.BlockHeaderList.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value = new blockchain_pb.Block();
            reader.readMessage(value, blockchain_pb.Block.deserializeBinaryFromReader);
            msg.addBlocks(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.BlockHeaderList.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.BlockHeaderList.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.BlockHeaderList} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.BlockHeaderList.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getBlocksList();

      if (f.length > 0) {
        writer.writeRepeatedMessage(1, f, blockchain_pb.Block.serializeBinaryToWriter);
      }
    };
    /**
     * repeated Block blocks = 1;
     * @return {!Array<!proto.types.Block>}
     */


    proto.types.BlockHeaderList.prototype.getBlocksList = function () {
      return (
        /** @type{!Array<!proto.types.Block>} */
        googleProtobuf.Message.getRepeatedWrapperField(this, blockchain_pb.Block, 1)
      );
    };
    /** @param {!Array<!proto.types.Block>} value */


    proto.types.BlockHeaderList.prototype.setBlocksList = function (value) {
      googleProtobuf.Message.setRepeatedWrapperField(this, 1, value);
    };
    /**
     * @param {!proto.types.Block=} opt_value
     * @param {number=} opt_index
     * @return {!proto.types.Block}
     */


    proto.types.BlockHeaderList.prototype.addBlocks = function (opt_value, opt_index) {
      return googleProtobuf.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.types.Block, opt_index);
    };

    proto.types.BlockHeaderList.prototype.clearBlocksList = function () {
      this.setBlocksList([]);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.BlockMetadata = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.BlockMetadata, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.BlockMetadata.displayName = 'proto.types.BlockMetadata';
    }

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.BlockMetadata.prototype.toObject = function (opt_includeInstance) {
        return proto.types.BlockMetadata.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.BlockMetadata} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.BlockMetadata.toObject = function (includeInstance, msg) {
        var f,
            obj = {
          hash: msg.getHash_asB64(),
          header: (f = msg.getHeader()) && blockchain_pb.BlockHeader.toObject(includeInstance, f),
          txcount: googleProtobuf.Message.getFieldWithDefault(msg, 3, 0),
          size: googleProtobuf.Message.getFieldWithDefault(msg, 4, 0)
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.BlockMetadata}
     */


    proto.types.BlockMetadata.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.BlockMetadata();
      return proto.types.BlockMetadata.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.BlockMetadata} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.BlockMetadata}
     */


    proto.types.BlockMetadata.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setHash(value);
            break;

          case 2:
            var value = new blockchain_pb.BlockHeader();
            reader.readMessage(value, blockchain_pb.BlockHeader.deserializeBinaryFromReader);
            msg.setHeader(value);
            break;

          case 3:
            var value =
            /** @type {number} */
            reader.readInt32();
            msg.setTxcount(value);
            break;

          case 4:
            var value =
            /** @type {number} */
            reader.readInt64();
            msg.setSize(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.BlockMetadata.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.BlockMetadata.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.BlockMetadata} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.BlockMetadata.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getHash_asU8();

      if (f.length > 0) {
        writer.writeBytes(1, f);
      }

      f = message.getHeader();

      if (f != null) {
        writer.writeMessage(2, f, blockchain_pb.BlockHeader.serializeBinaryToWriter);
      }

      f = message.getTxcount();

      if (f !== 0) {
        writer.writeInt32(3, f);
      }

      f = message.getSize();

      if (f !== 0) {
        writer.writeInt64(4, f);
      }
    };
    /**
     * optional bytes hash = 1;
     * @return {!(string|Uint8Array)}
     */


    proto.types.BlockMetadata.prototype.getHash = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, "")
      );
    };
    /**
     * optional bytes hash = 1;
     * This is a type-conversion wrapper around `getHash()`
     * @return {string}
     */


    proto.types.BlockMetadata.prototype.getHash_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getHash())
      );
    };
    /**
     * optional bytes hash = 1;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getHash()`
     * @return {!Uint8Array}
     */


    proto.types.BlockMetadata.prototype.getHash_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getHash())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.BlockMetadata.prototype.setHash = function (value) {
      googleProtobuf.Message.setProto3BytesField(this, 1, value);
    };
    /**
     * optional BlockHeader header = 2;
     * @return {?proto.types.BlockHeader}
     */


    proto.types.BlockMetadata.prototype.getHeader = function () {
      return (
        /** @type{?proto.types.BlockHeader} */
        googleProtobuf.Message.getWrapperField(this, blockchain_pb.BlockHeader, 2)
      );
    };
    /** @param {?proto.types.BlockHeader|undefined} value */


    proto.types.BlockMetadata.prototype.setHeader = function (value) {
      googleProtobuf.Message.setWrapperField(this, 2, value);
    };

    proto.types.BlockMetadata.prototype.clearHeader = function () {
      this.setHeader(undefined);
    };
    /**
     * Returns whether this field is set.
     * @return {boolean}
     */


    proto.types.BlockMetadata.prototype.hasHeader = function () {
      return googleProtobuf.Message.getField(this, 2) != null;
    };
    /**
     * optional int32 txcount = 3;
     * @return {number}
     */


    proto.types.BlockMetadata.prototype.getTxcount = function () {
      return (
        /** @type {number} */
        googleProtobuf.Message.getFieldWithDefault(this, 3, 0)
      );
    };
    /** @param {number} value */


    proto.types.BlockMetadata.prototype.setTxcount = function (value) {
      googleProtobuf.Message.setProto3IntField(this, 3, value);
    };
    /**
     * optional int64 size = 4;
     * @return {number}
     */


    proto.types.BlockMetadata.prototype.getSize = function () {
      return (
        /** @type {number} */
        googleProtobuf.Message.getFieldWithDefault(this, 4, 0)
      );
    };
    /** @param {number} value */


    proto.types.BlockMetadata.prototype.setSize = function (value) {
      googleProtobuf.Message.setProto3IntField(this, 4, value);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.BlockMetadataList = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, proto.types.BlockMetadataList.repeatedFields_, null);
    };

    goog.inherits(proto.types.BlockMetadataList, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.BlockMetadataList.displayName = 'proto.types.BlockMetadataList';
    }
    /**
     * List of repeated fields within this message type.
     * @private {!Array<number>}
     * @const
     */


    proto.types.BlockMetadataList.repeatedFields_ = [1];

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.BlockMetadataList.prototype.toObject = function (opt_includeInstance) {
        return proto.types.BlockMetadataList.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.BlockMetadataList} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.BlockMetadataList.toObject = function (includeInstance, msg) {
        var obj = {
          blocksList: googleProtobuf.Message.toObjectList(msg.getBlocksList(), proto.types.BlockMetadata.toObject, includeInstance)
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.BlockMetadataList}
     */


    proto.types.BlockMetadataList.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.BlockMetadataList();
      return proto.types.BlockMetadataList.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.BlockMetadataList} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.BlockMetadataList}
     */


    proto.types.BlockMetadataList.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value = new proto.types.BlockMetadata();
            reader.readMessage(value, proto.types.BlockMetadata.deserializeBinaryFromReader);
            msg.addBlocks(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.BlockMetadataList.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.BlockMetadataList.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.BlockMetadataList} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.BlockMetadataList.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getBlocksList();

      if (f.length > 0) {
        writer.writeRepeatedMessage(1, f, proto.types.BlockMetadata.serializeBinaryToWriter);
      }
    };
    /**
     * repeated BlockMetadata blocks = 1;
     * @return {!Array<!proto.types.BlockMetadata>}
     */


    proto.types.BlockMetadataList.prototype.getBlocksList = function () {
      return (
        /** @type{!Array<!proto.types.BlockMetadata>} */
        googleProtobuf.Message.getRepeatedWrapperField(this, proto.types.BlockMetadata, 1)
      );
    };
    /** @param {!Array<!proto.types.BlockMetadata>} value */


    proto.types.BlockMetadataList.prototype.setBlocksList = function (value) {
      googleProtobuf.Message.setRepeatedWrapperField(this, 1, value);
    };
    /**
     * @param {!proto.types.BlockMetadata=} opt_value
     * @param {number=} opt_index
     * @return {!proto.types.BlockMetadata}
     */


    proto.types.BlockMetadataList.prototype.addBlocks = function (opt_value, opt_index) {
      return googleProtobuf.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.types.BlockMetadata, opt_index);
    };

    proto.types.BlockMetadataList.prototype.clearBlocksList = function () {
      this.setBlocksList([]);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.CommitResult = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.CommitResult, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.CommitResult.displayName = 'proto.types.CommitResult';
    }

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.CommitResult.prototype.toObject = function (opt_includeInstance) {
        return proto.types.CommitResult.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.CommitResult} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.CommitResult.toObject = function (includeInstance, msg) {
        var obj = {
          hash: msg.getHash_asB64(),
          error: googleProtobuf.Message.getFieldWithDefault(msg, 2, 0),
          detail: googleProtobuf.Message.getFieldWithDefault(msg, 3, "")
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.CommitResult}
     */


    proto.types.CommitResult.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.CommitResult();
      return proto.types.CommitResult.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.CommitResult} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.CommitResult}
     */


    proto.types.CommitResult.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setHash(value);
            break;

          case 2:
            var value =
            /** @type {!proto.types.CommitStatus} */
            reader.readEnum();
            msg.setError(value);
            break;

          case 3:
            var value =
            /** @type {string} */
            reader.readString();
            msg.setDetail(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.CommitResult.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.CommitResult.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.CommitResult} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.CommitResult.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getHash_asU8();

      if (f.length > 0) {
        writer.writeBytes(1, f);
      }

      f = message.getError();

      if (f !== 0.0) {
        writer.writeEnum(2, f);
      }

      f = message.getDetail();

      if (f.length > 0) {
        writer.writeString(3, f);
      }
    };
    /**
     * optional bytes hash = 1;
     * @return {!(string|Uint8Array)}
     */


    proto.types.CommitResult.prototype.getHash = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, "")
      );
    };
    /**
     * optional bytes hash = 1;
     * This is a type-conversion wrapper around `getHash()`
     * @return {string}
     */


    proto.types.CommitResult.prototype.getHash_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getHash())
      );
    };
    /**
     * optional bytes hash = 1;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getHash()`
     * @return {!Uint8Array}
     */


    proto.types.CommitResult.prototype.getHash_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getHash())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.CommitResult.prototype.setHash = function (value) {
      googleProtobuf.Message.setProto3BytesField(this, 1, value);
    };
    /**
     * optional CommitStatus error = 2;
     * @return {!proto.types.CommitStatus}
     */


    proto.types.CommitResult.prototype.getError = function () {
      return (
        /** @type {!proto.types.CommitStatus} */
        googleProtobuf.Message.getFieldWithDefault(this, 2, 0)
      );
    };
    /** @param {!proto.types.CommitStatus} value */


    proto.types.CommitResult.prototype.setError = function (value) {
      googleProtobuf.Message.setProto3EnumField(this, 2, value);
    };
    /**
     * optional string detail = 3;
     * @return {string}
     */


    proto.types.CommitResult.prototype.getDetail = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.getFieldWithDefault(this, 3, "")
      );
    };
    /** @param {string} value */


    proto.types.CommitResult.prototype.setDetail = function (value) {
      googleProtobuf.Message.setProto3StringField(this, 3, value);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.CommitResultList = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, proto.types.CommitResultList.repeatedFields_, null);
    };

    goog.inherits(proto.types.CommitResultList, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.CommitResultList.displayName = 'proto.types.CommitResultList';
    }
    /**
     * List of repeated fields within this message type.
     * @private {!Array<number>}
     * @const
     */


    proto.types.CommitResultList.repeatedFields_ = [1];

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.CommitResultList.prototype.toObject = function (opt_includeInstance) {
        return proto.types.CommitResultList.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.CommitResultList} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.CommitResultList.toObject = function (includeInstance, msg) {
        var obj = {
          resultsList: googleProtobuf.Message.toObjectList(msg.getResultsList(), proto.types.CommitResult.toObject, includeInstance)
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.CommitResultList}
     */


    proto.types.CommitResultList.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.CommitResultList();
      return proto.types.CommitResultList.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.CommitResultList} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.CommitResultList}
     */


    proto.types.CommitResultList.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value = new proto.types.CommitResult();
            reader.readMessage(value, proto.types.CommitResult.deserializeBinaryFromReader);
            msg.addResults(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.CommitResultList.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.CommitResultList.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.CommitResultList} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.CommitResultList.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getResultsList();

      if (f.length > 0) {
        writer.writeRepeatedMessage(1, f, proto.types.CommitResult.serializeBinaryToWriter);
      }
    };
    /**
     * repeated CommitResult results = 1;
     * @return {!Array<!proto.types.CommitResult>}
     */


    proto.types.CommitResultList.prototype.getResultsList = function () {
      return (
        /** @type{!Array<!proto.types.CommitResult>} */
        googleProtobuf.Message.getRepeatedWrapperField(this, proto.types.CommitResult, 1)
      );
    };
    /** @param {!Array<!proto.types.CommitResult>} value */


    proto.types.CommitResultList.prototype.setResultsList = function (value) {
      googleProtobuf.Message.setRepeatedWrapperField(this, 1, value);
    };
    /**
     * @param {!proto.types.CommitResult=} opt_value
     * @param {number=} opt_index
     * @return {!proto.types.CommitResult}
     */


    proto.types.CommitResultList.prototype.addResults = function (opt_value, opt_index) {
      return googleProtobuf.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.types.CommitResult, opt_index);
    };

    proto.types.CommitResultList.prototype.clearResultsList = function () {
      this.setResultsList([]);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.VerifyResult = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.VerifyResult, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.VerifyResult.displayName = 'proto.types.VerifyResult';
    }

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.VerifyResult.prototype.toObject = function (opt_includeInstance) {
        return proto.types.VerifyResult.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.VerifyResult} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.VerifyResult.toObject = function (includeInstance, msg) {
        var f,
            obj = {
          tx: (f = msg.getTx()) && blockchain_pb.Tx.toObject(includeInstance, f),
          error: googleProtobuf.Message.getFieldWithDefault(msg, 2, 0)
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.VerifyResult}
     */


    proto.types.VerifyResult.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.VerifyResult();
      return proto.types.VerifyResult.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.VerifyResult} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.VerifyResult}
     */


    proto.types.VerifyResult.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value = new blockchain_pb.Tx();
            reader.readMessage(value, blockchain_pb.Tx.deserializeBinaryFromReader);
            msg.setTx(value);
            break;

          case 2:
            var value =
            /** @type {!proto.types.VerifyStatus} */
            reader.readEnum();
            msg.setError(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.VerifyResult.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.VerifyResult.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.VerifyResult} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.VerifyResult.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getTx();

      if (f != null) {
        writer.writeMessage(1, f, blockchain_pb.Tx.serializeBinaryToWriter);
      }

      f = message.getError();

      if (f !== 0.0) {
        writer.writeEnum(2, f);
      }
    };
    /**
     * optional Tx tx = 1;
     * @return {?proto.types.Tx}
     */


    proto.types.VerifyResult.prototype.getTx = function () {
      return (
        /** @type{?proto.types.Tx} */
        googleProtobuf.Message.getWrapperField(this, blockchain_pb.Tx, 1)
      );
    };
    /** @param {?proto.types.Tx|undefined} value */


    proto.types.VerifyResult.prototype.setTx = function (value) {
      googleProtobuf.Message.setWrapperField(this, 1, value);
    };

    proto.types.VerifyResult.prototype.clearTx = function () {
      this.setTx(undefined);
    };
    /**
     * Returns whether this field is set.
     * @return {boolean}
     */


    proto.types.VerifyResult.prototype.hasTx = function () {
      return googleProtobuf.Message.getField(this, 1) != null;
    };
    /**
     * optional VerifyStatus error = 2;
     * @return {!proto.types.VerifyStatus}
     */


    proto.types.VerifyResult.prototype.getError = function () {
      return (
        /** @type {!proto.types.VerifyStatus} */
        googleProtobuf.Message.getFieldWithDefault(this, 2, 0)
      );
    };
    /** @param {!proto.types.VerifyStatus} value */


    proto.types.VerifyResult.prototype.setError = function (value) {
      googleProtobuf.Message.setProto3EnumField(this, 2, value);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.Personal = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.Personal, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.Personal.displayName = 'proto.types.Personal';
    }

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.Personal.prototype.toObject = function (opt_includeInstance) {
        return proto.types.Personal.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.Personal} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.Personal.toObject = function (includeInstance, msg) {
        var f,
            obj = {
          passphrase: googleProtobuf.Message.getFieldWithDefault(msg, 1, ""),
          account: (f = msg.getAccount()) && account_pb.Account.toObject(includeInstance, f)
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.Personal}
     */


    proto.types.Personal.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.Personal();
      return proto.types.Personal.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.Personal} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.Personal}
     */


    proto.types.Personal.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {string} */
            reader.readString();
            msg.setPassphrase(value);
            break;

          case 2:
            var value = new account_pb.Account();
            reader.readMessage(value, account_pb.Account.deserializeBinaryFromReader);
            msg.setAccount(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.Personal.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.Personal.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.Personal} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.Personal.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getPassphrase();

      if (f.length > 0) {
        writer.writeString(1, f);
      }

      f = message.getAccount();

      if (f != null) {
        writer.writeMessage(2, f, account_pb.Account.serializeBinaryToWriter);
      }
    };
    /**
     * optional string passphrase = 1;
     * @return {string}
     */


    proto.types.Personal.prototype.getPassphrase = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, "")
      );
    };
    /** @param {string} value */


    proto.types.Personal.prototype.setPassphrase = function (value) {
      googleProtobuf.Message.setProto3StringField(this, 1, value);
    };
    /**
     * optional Account account = 2;
     * @return {?proto.types.Account}
     */


    proto.types.Personal.prototype.getAccount = function () {
      return (
        /** @type{?proto.types.Account} */
        googleProtobuf.Message.getWrapperField(this, account_pb.Account, 2)
      );
    };
    /** @param {?proto.types.Account|undefined} value */


    proto.types.Personal.prototype.setAccount = function (value) {
      googleProtobuf.Message.setWrapperField(this, 2, value);
    };

    proto.types.Personal.prototype.clearAccount = function () {
      this.setAccount(undefined);
    };
    /**
     * Returns whether this field is set.
     * @return {boolean}
     */


    proto.types.Personal.prototype.hasAccount = function () {
      return googleProtobuf.Message.getField(this, 2) != null;
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.ImportFormat = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.ImportFormat, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.ImportFormat.displayName = 'proto.types.ImportFormat';
    }

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.ImportFormat.prototype.toObject = function (opt_includeInstance) {
        return proto.types.ImportFormat.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.ImportFormat} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.ImportFormat.toObject = function (includeInstance, msg) {
        var f,
            obj = {
          wif: (f = msg.getWif()) && proto.types.SingleBytes.toObject(includeInstance, f),
          oldpass: googleProtobuf.Message.getFieldWithDefault(msg, 2, ""),
          newpass: googleProtobuf.Message.getFieldWithDefault(msg, 3, "")
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.ImportFormat}
     */


    proto.types.ImportFormat.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.ImportFormat();
      return proto.types.ImportFormat.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.ImportFormat} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.ImportFormat}
     */


    proto.types.ImportFormat.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value = new proto.types.SingleBytes();
            reader.readMessage(value, proto.types.SingleBytes.deserializeBinaryFromReader);
            msg.setWif(value);
            break;

          case 2:
            var value =
            /** @type {string} */
            reader.readString();
            msg.setOldpass(value);
            break;

          case 3:
            var value =
            /** @type {string} */
            reader.readString();
            msg.setNewpass(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.ImportFormat.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.ImportFormat.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.ImportFormat} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.ImportFormat.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getWif();

      if (f != null) {
        writer.writeMessage(1, f, proto.types.SingleBytes.serializeBinaryToWriter);
      }

      f = message.getOldpass();

      if (f.length > 0) {
        writer.writeString(2, f);
      }

      f = message.getNewpass();

      if (f.length > 0) {
        writer.writeString(3, f);
      }
    };
    /**
     * optional SingleBytes wif = 1;
     * @return {?proto.types.SingleBytes}
     */


    proto.types.ImportFormat.prototype.getWif = function () {
      return (
        /** @type{?proto.types.SingleBytes} */
        googleProtobuf.Message.getWrapperField(this, proto.types.SingleBytes, 1)
      );
    };
    /** @param {?proto.types.SingleBytes|undefined} value */


    proto.types.ImportFormat.prototype.setWif = function (value) {
      googleProtobuf.Message.setWrapperField(this, 1, value);
    };

    proto.types.ImportFormat.prototype.clearWif = function () {
      this.setWif(undefined);
    };
    /**
     * Returns whether this field is set.
     * @return {boolean}
     */


    proto.types.ImportFormat.prototype.hasWif = function () {
      return googleProtobuf.Message.getField(this, 1) != null;
    };
    /**
     * optional string oldpass = 2;
     * @return {string}
     */


    proto.types.ImportFormat.prototype.getOldpass = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.getFieldWithDefault(this, 2, "")
      );
    };
    /** @param {string} value */


    proto.types.ImportFormat.prototype.setOldpass = function (value) {
      googleProtobuf.Message.setProto3StringField(this, 2, value);
    };
    /**
     * optional string newpass = 3;
     * @return {string}
     */


    proto.types.ImportFormat.prototype.getNewpass = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.getFieldWithDefault(this, 3, "")
      );
    };
    /** @param {string} value */


    proto.types.ImportFormat.prototype.setNewpass = function (value) {
      googleProtobuf.Message.setProto3StringField(this, 3, value);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.Staking = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.Staking, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.Staking.displayName = 'proto.types.Staking';
    }

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.Staking.prototype.toObject = function (opt_includeInstance) {
        return proto.types.Staking.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.Staking} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.Staking.toObject = function (includeInstance, msg) {
        var obj = {
          amount: msg.getAmount_asB64(),
          when: googleProtobuf.Message.getFieldWithDefault(msg, 2, 0)
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.Staking}
     */


    proto.types.Staking.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.Staking();
      return proto.types.Staking.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.Staking} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.Staking}
     */


    proto.types.Staking.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setAmount(value);
            break;

          case 2:
            var value =
            /** @type {number} */
            reader.readUint64();
            msg.setWhen(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.Staking.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.Staking.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.Staking} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.Staking.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getAmount_asU8();

      if (f.length > 0) {
        writer.writeBytes(1, f);
      }

      f = message.getWhen();

      if (f !== 0) {
        writer.writeUint64(2, f);
      }
    };
    /**
     * optional bytes amount = 1;
     * @return {!(string|Uint8Array)}
     */


    proto.types.Staking.prototype.getAmount = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, "")
      );
    };
    /**
     * optional bytes amount = 1;
     * This is a type-conversion wrapper around `getAmount()`
     * @return {string}
     */


    proto.types.Staking.prototype.getAmount_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getAmount())
      );
    };
    /**
     * optional bytes amount = 1;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getAmount()`
     * @return {!Uint8Array}
     */


    proto.types.Staking.prototype.getAmount_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getAmount())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.Staking.prototype.setAmount = function (value) {
      googleProtobuf.Message.setProto3BytesField(this, 1, value);
    };
    /**
     * optional uint64 when = 2;
     * @return {number}
     */


    proto.types.Staking.prototype.getWhen = function () {
      return (
        /** @type {number} */
        googleProtobuf.Message.getFieldWithDefault(this, 2, 0)
      );
    };
    /** @param {number} value */


    proto.types.Staking.prototype.setWhen = function (value) {
      googleProtobuf.Message.setProto3IntField(this, 2, value);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.Vote = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.Vote, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.Vote.displayName = 'proto.types.Vote';
    }

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.Vote.prototype.toObject = function (opt_includeInstance) {
        return proto.types.Vote.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.Vote} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.Vote.toObject = function (includeInstance, msg) {
        var obj = {
          candidate: msg.getCandidate_asB64(),
          amount: msg.getAmount_asB64()
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.Vote}
     */


    proto.types.Vote.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.Vote();
      return proto.types.Vote.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.Vote} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.Vote}
     */


    proto.types.Vote.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setCandidate(value);
            break;

          case 2:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setAmount(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.Vote.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.Vote.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.Vote} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.Vote.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getCandidate_asU8();

      if (f.length > 0) {
        writer.writeBytes(1, f);
      }

      f = message.getAmount_asU8();

      if (f.length > 0) {
        writer.writeBytes(2, f);
      }
    };
    /**
     * optional bytes candidate = 1;
     * @return {!(string|Uint8Array)}
     */


    proto.types.Vote.prototype.getCandidate = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, "")
      );
    };
    /**
     * optional bytes candidate = 1;
     * This is a type-conversion wrapper around `getCandidate()`
     * @return {string}
     */


    proto.types.Vote.prototype.getCandidate_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getCandidate())
      );
    };
    /**
     * optional bytes candidate = 1;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getCandidate()`
     * @return {!Uint8Array}
     */


    proto.types.Vote.prototype.getCandidate_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getCandidate())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.Vote.prototype.setCandidate = function (value) {
      googleProtobuf.Message.setProto3BytesField(this, 1, value);
    };
    /**
     * optional bytes amount = 2;
     * @return {!(string|Uint8Array)}
     */


    proto.types.Vote.prototype.getAmount = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 2, "")
      );
    };
    /**
     * optional bytes amount = 2;
     * This is a type-conversion wrapper around `getAmount()`
     * @return {string}
     */


    proto.types.Vote.prototype.getAmount_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getAmount())
      );
    };
    /**
     * optional bytes amount = 2;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getAmount()`
     * @return {!Uint8Array}
     */


    proto.types.Vote.prototype.getAmount_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getAmount())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.Vote.prototype.setAmount = function (value) {
      googleProtobuf.Message.setProto3BytesField(this, 2, value);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.VoteParams = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.VoteParams, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.VoteParams.displayName = 'proto.types.VoteParams';
    }

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.VoteParams.prototype.toObject = function (opt_includeInstance) {
        return proto.types.VoteParams.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.VoteParams} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.VoteParams.toObject = function (includeInstance, msg) {
        var obj = {
          id: googleProtobuf.Message.getFieldWithDefault(msg, 1, ""),
          count: googleProtobuf.Message.getFieldWithDefault(msg, 2, 0)
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.VoteParams}
     */


    proto.types.VoteParams.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.VoteParams();
      return proto.types.VoteParams.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.VoteParams} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.VoteParams}
     */


    proto.types.VoteParams.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {string} */
            reader.readString();
            msg.setId(value);
            break;

          case 2:
            var value =
            /** @type {number} */
            reader.readUint32();
            msg.setCount(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.VoteParams.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.VoteParams.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.VoteParams} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.VoteParams.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getId();

      if (f.length > 0) {
        writer.writeString(1, f);
      }

      f = message.getCount();

      if (f !== 0) {
        writer.writeUint32(2, f);
      }
    };
    /**
     * optional string id = 1;
     * @return {string}
     */


    proto.types.VoteParams.prototype.getId = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, "")
      );
    };
    /** @param {string} value */


    proto.types.VoteParams.prototype.setId = function (value) {
      googleProtobuf.Message.setProto3StringField(this, 1, value);
    };
    /**
     * optional uint32 count = 2;
     * @return {number}
     */


    proto.types.VoteParams.prototype.getCount = function () {
      return (
        /** @type {number} */
        googleProtobuf.Message.getFieldWithDefault(this, 2, 0)
      );
    };
    /** @param {number} value */


    proto.types.VoteParams.prototype.setCount = function (value) {
      googleProtobuf.Message.setProto3IntField(this, 2, value);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.AccountVoteInfo = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, proto.types.AccountVoteInfo.repeatedFields_, null);
    };

    goog.inherits(proto.types.AccountVoteInfo, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.AccountVoteInfo.displayName = 'proto.types.AccountVoteInfo';
    }
    /**
     * List of repeated fields within this message type.
     * @private {!Array<number>}
     * @const
     */


    proto.types.AccountVoteInfo.repeatedFields_ = [2];

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.AccountVoteInfo.prototype.toObject = function (opt_includeInstance) {
        return proto.types.AccountVoteInfo.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.AccountVoteInfo} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.AccountVoteInfo.toObject = function (includeInstance, msg) {
        var f,
            obj = {
          staking: (f = msg.getStaking()) && proto.types.Staking.toObject(includeInstance, f),
          votingList: googleProtobuf.Message.toObjectList(msg.getVotingList(), proto.types.VoteInfo.toObject, includeInstance)
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.AccountVoteInfo}
     */


    proto.types.AccountVoteInfo.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.AccountVoteInfo();
      return proto.types.AccountVoteInfo.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.AccountVoteInfo} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.AccountVoteInfo}
     */


    proto.types.AccountVoteInfo.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value = new proto.types.Staking();
            reader.readMessage(value, proto.types.Staking.deserializeBinaryFromReader);
            msg.setStaking(value);
            break;

          case 2:
            var value = new proto.types.VoteInfo();
            reader.readMessage(value, proto.types.VoteInfo.deserializeBinaryFromReader);
            msg.addVoting(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.AccountVoteInfo.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.AccountVoteInfo.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.AccountVoteInfo} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.AccountVoteInfo.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getStaking();

      if (f != null) {
        writer.writeMessage(1, f, proto.types.Staking.serializeBinaryToWriter);
      }

      f = message.getVotingList();

      if (f.length > 0) {
        writer.writeRepeatedMessage(2, f, proto.types.VoteInfo.serializeBinaryToWriter);
      }
    };
    /**
     * optional Staking staking = 1;
     * @return {?proto.types.Staking}
     */


    proto.types.AccountVoteInfo.prototype.getStaking = function () {
      return (
        /** @type{?proto.types.Staking} */
        googleProtobuf.Message.getWrapperField(this, proto.types.Staking, 1)
      );
    };
    /** @param {?proto.types.Staking|undefined} value */


    proto.types.AccountVoteInfo.prototype.setStaking = function (value) {
      googleProtobuf.Message.setWrapperField(this, 1, value);
    };

    proto.types.AccountVoteInfo.prototype.clearStaking = function () {
      this.setStaking(undefined);
    };
    /**
     * Returns whether this field is set.
     * @return {boolean}
     */


    proto.types.AccountVoteInfo.prototype.hasStaking = function () {
      return googleProtobuf.Message.getField(this, 1) != null;
    };
    /**
     * repeated VoteInfo voting = 2;
     * @return {!Array<!proto.types.VoteInfo>}
     */


    proto.types.AccountVoteInfo.prototype.getVotingList = function () {
      return (
        /** @type{!Array<!proto.types.VoteInfo>} */
        googleProtobuf.Message.getRepeatedWrapperField(this, proto.types.VoteInfo, 2)
      );
    };
    /** @param {!Array<!proto.types.VoteInfo>} value */


    proto.types.AccountVoteInfo.prototype.setVotingList = function (value) {
      googleProtobuf.Message.setRepeatedWrapperField(this, 2, value);
    };
    /**
     * @param {!proto.types.VoteInfo=} opt_value
     * @param {number=} opt_index
     * @return {!proto.types.VoteInfo}
     */


    proto.types.AccountVoteInfo.prototype.addVoting = function (opt_value, opt_index) {
      return googleProtobuf.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.types.VoteInfo, opt_index);
    };

    proto.types.AccountVoteInfo.prototype.clearVotingList = function () {
      this.setVotingList([]);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.VoteInfo = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, proto.types.VoteInfo.repeatedFields_, null);
    };

    goog.inherits(proto.types.VoteInfo, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.VoteInfo.displayName = 'proto.types.VoteInfo';
    }
    /**
     * List of repeated fields within this message type.
     * @private {!Array<number>}
     * @const
     */


    proto.types.VoteInfo.repeatedFields_ = [2];

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.VoteInfo.prototype.toObject = function (opt_includeInstance) {
        return proto.types.VoteInfo.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.VoteInfo} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.VoteInfo.toObject = function (includeInstance, msg) {
        var obj = {
          id: googleProtobuf.Message.getFieldWithDefault(msg, 1, ""),
          candidatesList: googleProtobuf.Message.getRepeatedField(msg, 2),
          amount: googleProtobuf.Message.getFieldWithDefault(msg, 3, "")
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.VoteInfo}
     */


    proto.types.VoteInfo.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.VoteInfo();
      return proto.types.VoteInfo.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.VoteInfo} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.VoteInfo}
     */


    proto.types.VoteInfo.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {string} */
            reader.readString();
            msg.setId(value);
            break;

          case 2:
            var value =
            /** @type {string} */
            reader.readString();
            msg.addCandidates(value);
            break;

          case 3:
            var value =
            /** @type {string} */
            reader.readString();
            msg.setAmount(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.VoteInfo.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.VoteInfo.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.VoteInfo} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.VoteInfo.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getId();

      if (f.length > 0) {
        writer.writeString(1, f);
      }

      f = message.getCandidatesList();

      if (f.length > 0) {
        writer.writeRepeatedString(2, f);
      }

      f = message.getAmount();

      if (f.length > 0) {
        writer.writeString(3, f);
      }
    };
    /**
     * optional string id = 1;
     * @return {string}
     */


    proto.types.VoteInfo.prototype.getId = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, "")
      );
    };
    /** @param {string} value */


    proto.types.VoteInfo.prototype.setId = function (value) {
      googleProtobuf.Message.setProto3StringField(this, 1, value);
    };
    /**
     * repeated string candidates = 2;
     * @return {!Array<string>}
     */


    proto.types.VoteInfo.prototype.getCandidatesList = function () {
      return (
        /** @type {!Array<string>} */
        googleProtobuf.Message.getRepeatedField(this, 2)
      );
    };
    /** @param {!Array<string>} value */


    proto.types.VoteInfo.prototype.setCandidatesList = function (value) {
      googleProtobuf.Message.setField(this, 2, value || []);
    };
    /**
     * @param {string} value
     * @param {number=} opt_index
     */


    proto.types.VoteInfo.prototype.addCandidates = function (value, opt_index) {
      googleProtobuf.Message.addToRepeatedField(this, 2, value, opt_index);
    };

    proto.types.VoteInfo.prototype.clearCandidatesList = function () {
      this.setCandidatesList([]);
    };
    /**
     * optional string amount = 3;
     * @return {string}
     */


    proto.types.VoteInfo.prototype.getAmount = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.getFieldWithDefault(this, 3, "")
      );
    };
    /** @param {string} value */


    proto.types.VoteInfo.prototype.setAmount = function (value) {
      googleProtobuf.Message.setProto3StringField(this, 3, value);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.VoteList = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, proto.types.VoteList.repeatedFields_, null);
    };

    goog.inherits(proto.types.VoteList, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.VoteList.displayName = 'proto.types.VoteList';
    }
    /**
     * List of repeated fields within this message type.
     * @private {!Array<number>}
     * @const
     */


    proto.types.VoteList.repeatedFields_ = [1];

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.VoteList.prototype.toObject = function (opt_includeInstance) {
        return proto.types.VoteList.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.VoteList} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.VoteList.toObject = function (includeInstance, msg) {
        var obj = {
          votesList: googleProtobuf.Message.toObjectList(msg.getVotesList(), proto.types.Vote.toObject, includeInstance),
          id: googleProtobuf.Message.getFieldWithDefault(msg, 2, "")
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.VoteList}
     */


    proto.types.VoteList.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.VoteList();
      return proto.types.VoteList.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.VoteList} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.VoteList}
     */


    proto.types.VoteList.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value = new proto.types.Vote();
            reader.readMessage(value, proto.types.Vote.deserializeBinaryFromReader);
            msg.addVotes(value);
            break;

          case 2:
            var value =
            /** @type {string} */
            reader.readString();
            msg.setId(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.VoteList.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.VoteList.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.VoteList} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.VoteList.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getVotesList();

      if (f.length > 0) {
        writer.writeRepeatedMessage(1, f, proto.types.Vote.serializeBinaryToWriter);
      }

      f = message.getId();

      if (f.length > 0) {
        writer.writeString(2, f);
      }
    };
    /**
     * repeated Vote votes = 1;
     * @return {!Array<!proto.types.Vote>}
     */


    proto.types.VoteList.prototype.getVotesList = function () {
      return (
        /** @type{!Array<!proto.types.Vote>} */
        googleProtobuf.Message.getRepeatedWrapperField(this, proto.types.Vote, 1)
      );
    };
    /** @param {!Array<!proto.types.Vote>} value */


    proto.types.VoteList.prototype.setVotesList = function (value) {
      googleProtobuf.Message.setRepeatedWrapperField(this, 1, value);
    };
    /**
     * @param {!proto.types.Vote=} opt_value
     * @param {number=} opt_index
     * @return {!proto.types.Vote}
     */


    proto.types.VoteList.prototype.addVotes = function (opt_value, opt_index) {
      return googleProtobuf.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.types.Vote, opt_index);
    };

    proto.types.VoteList.prototype.clearVotesList = function () {
      this.setVotesList([]);
    };
    /**
     * optional string id = 2;
     * @return {string}
     */


    proto.types.VoteList.prototype.getId = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.getFieldWithDefault(this, 2, "")
      );
    };
    /** @param {string} value */


    proto.types.VoteList.prototype.setId = function (value) {
      googleProtobuf.Message.setProto3StringField(this, 2, value);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.NodeReq = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.NodeReq, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.NodeReq.displayName = 'proto.types.NodeReq';
    }

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.NodeReq.prototype.toObject = function (opt_includeInstance) {
        return proto.types.NodeReq.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.NodeReq} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.NodeReq.toObject = function (includeInstance, msg) {
        var obj = {
          timeout: msg.getTimeout_asB64(),
          component: msg.getComponent_asB64()
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.NodeReq}
     */


    proto.types.NodeReq.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.NodeReq();
      return proto.types.NodeReq.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.NodeReq} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.NodeReq}
     */


    proto.types.NodeReq.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setTimeout(value);
            break;

          case 2:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setComponent(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.NodeReq.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.NodeReq.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.NodeReq} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.NodeReq.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getTimeout_asU8();

      if (f.length > 0) {
        writer.writeBytes(1, f);
      }

      f = message.getComponent_asU8();

      if (f.length > 0) {
        writer.writeBytes(2, f);
      }
    };
    /**
     * optional bytes timeout = 1;
     * @return {!(string|Uint8Array)}
     */


    proto.types.NodeReq.prototype.getTimeout = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, "")
      );
    };
    /**
     * optional bytes timeout = 1;
     * This is a type-conversion wrapper around `getTimeout()`
     * @return {string}
     */


    proto.types.NodeReq.prototype.getTimeout_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getTimeout())
      );
    };
    /**
     * optional bytes timeout = 1;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getTimeout()`
     * @return {!Uint8Array}
     */


    proto.types.NodeReq.prototype.getTimeout_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getTimeout())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.NodeReq.prototype.setTimeout = function (value) {
      googleProtobuf.Message.setProto3BytesField(this, 1, value);
    };
    /**
     * optional bytes component = 2;
     * @return {!(string|Uint8Array)}
     */


    proto.types.NodeReq.prototype.getComponent = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 2, "")
      );
    };
    /**
     * optional bytes component = 2;
     * This is a type-conversion wrapper around `getComponent()`
     * @return {string}
     */


    proto.types.NodeReq.prototype.getComponent_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getComponent())
      );
    };
    /**
     * optional bytes component = 2;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getComponent()`
     * @return {!Uint8Array}
     */


    proto.types.NodeReq.prototype.getComponent_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getComponent())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.NodeReq.prototype.setComponent = function (value) {
      googleProtobuf.Message.setProto3BytesField(this, 2, value);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.Name = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.Name, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.Name.displayName = 'proto.types.Name';
    }

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.Name.prototype.toObject = function (opt_includeInstance) {
        return proto.types.Name.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.Name} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.Name.toObject = function (includeInstance, msg) {
        var obj = {
          name: googleProtobuf.Message.getFieldWithDefault(msg, 1, ""),
          blockno: googleProtobuf.Message.getFieldWithDefault(msg, 2, 0)
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.Name}
     */


    proto.types.Name.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.Name();
      return proto.types.Name.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.Name} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.Name}
     */


    proto.types.Name.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {string} */
            reader.readString();
            msg.setName(value);
            break;

          case 2:
            var value =
            /** @type {number} */
            reader.readUint64();
            msg.setBlockno(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.Name.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.Name.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.Name} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.Name.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getName();

      if (f.length > 0) {
        writer.writeString(1, f);
      }

      f = message.getBlockno();

      if (f !== 0) {
        writer.writeUint64(2, f);
      }
    };
    /**
     * optional string name = 1;
     * @return {string}
     */


    proto.types.Name.prototype.getName = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, "")
      );
    };
    /** @param {string} value */


    proto.types.Name.prototype.setName = function (value) {
      googleProtobuf.Message.setProto3StringField(this, 1, value);
    };
    /**
     * optional uint64 blockNo = 2;
     * @return {number}
     */


    proto.types.Name.prototype.getBlockno = function () {
      return (
        /** @type {number} */
        googleProtobuf.Message.getFieldWithDefault(this, 2, 0)
      );
    };
    /** @param {number} value */


    proto.types.Name.prototype.setBlockno = function (value) {
      googleProtobuf.Message.setProto3IntField(this, 2, value);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.NameInfo = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.NameInfo, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.NameInfo.displayName = 'proto.types.NameInfo';
    }

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.NameInfo.prototype.toObject = function (opt_includeInstance) {
        return proto.types.NameInfo.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.NameInfo} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.NameInfo.toObject = function (includeInstance, msg) {
        var f,
            obj = {
          name: (f = msg.getName()) && proto.types.Name.toObject(includeInstance, f),
          owner: msg.getOwner_asB64(),
          destination: msg.getDestination_asB64()
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.NameInfo}
     */


    proto.types.NameInfo.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.NameInfo();
      return proto.types.NameInfo.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.NameInfo} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.NameInfo}
     */


    proto.types.NameInfo.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value = new proto.types.Name();
            reader.readMessage(value, proto.types.Name.deserializeBinaryFromReader);
            msg.setName(value);
            break;

          case 2:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setOwner(value);
            break;

          case 3:
            var value =
            /** @type {!Uint8Array} */
            reader.readBytes();
            msg.setDestination(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.NameInfo.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.NameInfo.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.NameInfo} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.NameInfo.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getName();

      if (f != null) {
        writer.writeMessage(1, f, proto.types.Name.serializeBinaryToWriter);
      }

      f = message.getOwner_asU8();

      if (f.length > 0) {
        writer.writeBytes(2, f);
      }

      f = message.getDestination_asU8();

      if (f.length > 0) {
        writer.writeBytes(3, f);
      }
    };
    /**
     * optional Name name = 1;
     * @return {?proto.types.Name}
     */


    proto.types.NameInfo.prototype.getName = function () {
      return (
        /** @type{?proto.types.Name} */
        googleProtobuf.Message.getWrapperField(this, proto.types.Name, 1)
      );
    };
    /** @param {?proto.types.Name|undefined} value */


    proto.types.NameInfo.prototype.setName = function (value) {
      googleProtobuf.Message.setWrapperField(this, 1, value);
    };

    proto.types.NameInfo.prototype.clearName = function () {
      this.setName(undefined);
    };
    /**
     * Returns whether this field is set.
     * @return {boolean}
     */


    proto.types.NameInfo.prototype.hasName = function () {
      return googleProtobuf.Message.getField(this, 1) != null;
    };
    /**
     * optional bytes owner = 2;
     * @return {!(string|Uint8Array)}
     */


    proto.types.NameInfo.prototype.getOwner = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 2, "")
      );
    };
    /**
     * optional bytes owner = 2;
     * This is a type-conversion wrapper around `getOwner()`
     * @return {string}
     */


    proto.types.NameInfo.prototype.getOwner_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getOwner())
      );
    };
    /**
     * optional bytes owner = 2;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getOwner()`
     * @return {!Uint8Array}
     */


    proto.types.NameInfo.prototype.getOwner_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getOwner())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.NameInfo.prototype.setOwner = function (value) {
      googleProtobuf.Message.setProto3BytesField(this, 2, value);
    };
    /**
     * optional bytes destination = 3;
     * @return {!(string|Uint8Array)}
     */


    proto.types.NameInfo.prototype.getDestination = function () {
      return (
        /** @type {!(string|Uint8Array)} */
        googleProtobuf.Message.getFieldWithDefault(this, 3, "")
      );
    };
    /**
     * optional bytes destination = 3;
     * This is a type-conversion wrapper around `getDestination()`
     * @return {string}
     */


    proto.types.NameInfo.prototype.getDestination_asB64 = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.bytesAsB64(this.getDestination())
      );
    };
    /**
     * optional bytes destination = 3;
     * Note that Uint8Array is not supported on all browsers.
     * @see http://caniuse.com/Uint8Array
     * This is a type-conversion wrapper around `getDestination()`
     * @return {!Uint8Array}
     */


    proto.types.NameInfo.prototype.getDestination_asU8 = function () {
      return (
        /** @type {!Uint8Array} */
        googleProtobuf.Message.bytesAsU8(this.getDestination())
      );
    };
    /** @param {!(string|Uint8Array)} value */


    proto.types.NameInfo.prototype.setDestination = function (value) {
      googleProtobuf.Message.setProto3BytesField(this, 3, value);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.PeersParams = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.PeersParams, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.PeersParams.displayName = 'proto.types.PeersParams';
    }

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.PeersParams.prototype.toObject = function (opt_includeInstance) {
        return proto.types.PeersParams.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.PeersParams} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.PeersParams.toObject = function (includeInstance, msg) {
        var obj = {
          nohidden: googleProtobuf.Message.getFieldWithDefault(msg, 1, false),
          showself: googleProtobuf.Message.getFieldWithDefault(msg, 2, false)
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.PeersParams}
     */


    proto.types.PeersParams.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.PeersParams();
      return proto.types.PeersParams.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.PeersParams} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.PeersParams}
     */


    proto.types.PeersParams.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {boolean} */
            reader.readBool();
            msg.setNohidden(value);
            break;

          case 2:
            var value =
            /** @type {boolean} */
            reader.readBool();
            msg.setShowself(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.PeersParams.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.PeersParams.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.PeersParams} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.PeersParams.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getNohidden();

      if (f) {
        writer.writeBool(1, f);
      }

      f = message.getShowself();

      if (f) {
        writer.writeBool(2, f);
      }
    };
    /**
     * optional bool noHidden = 1;
     * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
     * You should avoid comparisons like {@code val === true/false} in those cases.
     * @return {boolean}
     */


    proto.types.PeersParams.prototype.getNohidden = function () {
      return (
        /** @type {boolean} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, false)
      );
    };
    /** @param {boolean} value */


    proto.types.PeersParams.prototype.setNohidden = function (value) {
      googleProtobuf.Message.setProto3BooleanField(this, 1, value);
    };
    /**
     * optional bool showSelf = 2;
     * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
     * You should avoid comparisons like {@code val === true/false} in those cases.
     * @return {boolean}
     */


    proto.types.PeersParams.prototype.getShowself = function () {
      return (
        /** @type {boolean} */
        googleProtobuf.Message.getFieldWithDefault(this, 2, false)
      );
    };
    /** @param {boolean} value */


    proto.types.PeersParams.prototype.setShowself = function (value) {
      googleProtobuf.Message.setProto3BooleanField(this, 2, value);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.KeyParams = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, proto.types.KeyParams.repeatedFields_, null);
    };

    goog.inherits(proto.types.KeyParams, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.KeyParams.displayName = 'proto.types.KeyParams';
    }
    /**
     * List of repeated fields within this message type.
     * @private {!Array<number>}
     * @const
     */


    proto.types.KeyParams.repeatedFields_ = [1];

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.KeyParams.prototype.toObject = function (opt_includeInstance) {
        return proto.types.KeyParams.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.KeyParams} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.KeyParams.toObject = function (includeInstance, msg) {
        var obj = {
          keyList: googleProtobuf.Message.getRepeatedField(msg, 1)
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.KeyParams}
     */


    proto.types.KeyParams.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.KeyParams();
      return proto.types.KeyParams.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.KeyParams} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.KeyParams}
     */


    proto.types.KeyParams.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {string} */
            reader.readString();
            msg.addKey(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.KeyParams.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.KeyParams.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.KeyParams} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.KeyParams.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getKeyList();

      if (f.length > 0) {
        writer.writeRepeatedString(1, f);
      }
    };
    /**
     * repeated string key = 1;
     * @return {!Array<string>}
     */


    proto.types.KeyParams.prototype.getKeyList = function () {
      return (
        /** @type {!Array<string>} */
        googleProtobuf.Message.getRepeatedField(this, 1)
      );
    };
    /** @param {!Array<string>} value */


    proto.types.KeyParams.prototype.setKeyList = function (value) {
      googleProtobuf.Message.setField(this, 1, value || []);
    };
    /**
     * @param {string} value
     * @param {number=} opt_index
     */


    proto.types.KeyParams.prototype.addKey = function (value, opt_index) {
      googleProtobuf.Message.addToRepeatedField(this, 1, value, opt_index);
    };

    proto.types.KeyParams.prototype.clearKeyList = function () {
      this.setKeyList([]);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.ServerInfo = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.ServerInfo, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.ServerInfo.displayName = 'proto.types.ServerInfo';
    }

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.ServerInfo.prototype.toObject = function (opt_includeInstance) {
        return proto.types.ServerInfo.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.ServerInfo} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.ServerInfo.toObject = function (includeInstance, msg) {
        var f,
            obj = {
          statusMap: (f = msg.getStatusMap()) ? f.toObject(includeInstance, undefined) : [],
          configMap: (f = msg.getConfigMap()) ? f.toObject(includeInstance, proto.types.ConfigItem.toObject) : []
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.ServerInfo}
     */


    proto.types.ServerInfo.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.ServerInfo();
      return proto.types.ServerInfo.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.ServerInfo} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.ServerInfo}
     */


    proto.types.ServerInfo.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value = msg.getStatusMap();
            reader.readMessage(value, function (message, reader) {
              googleProtobuf.Map.deserializeBinary(message, reader, googleProtobuf.BinaryReader.prototype.readString, googleProtobuf.BinaryReader.prototype.readString, null, "");
            });
            break;

          case 2:
            var value = msg.getConfigMap();
            reader.readMessage(value, function (message, reader) {
              googleProtobuf.Map.deserializeBinary(message, reader, googleProtobuf.BinaryReader.prototype.readString, googleProtobuf.BinaryReader.prototype.readMessage, proto.types.ConfigItem.deserializeBinaryFromReader, "");
            });
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.ServerInfo.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.ServerInfo.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.ServerInfo} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.ServerInfo.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getStatusMap(true);

      if (f && f.getLength() > 0) {
        f.serializeBinary(1, writer, googleProtobuf.BinaryWriter.prototype.writeString, googleProtobuf.BinaryWriter.prototype.writeString);
      }

      f = message.getConfigMap(true);

      if (f && f.getLength() > 0) {
        f.serializeBinary(2, writer, googleProtobuf.BinaryWriter.prototype.writeString, googleProtobuf.BinaryWriter.prototype.writeMessage, proto.types.ConfigItem.serializeBinaryToWriter);
      }
    };
    /**
     * map<string, string> status = 1;
     * @param {boolean=} opt_noLazyCreate Do not create the map if
     * empty, instead returning `undefined`
     * @return {!jspb.Map<string,string>}
     */


    proto.types.ServerInfo.prototype.getStatusMap = function (opt_noLazyCreate) {
      return (
        /** @type {!jspb.Map<string,string>} */
        googleProtobuf.Message.getMapField(this, 1, opt_noLazyCreate, null)
      );
    };

    proto.types.ServerInfo.prototype.clearStatusMap = function () {
      this.getStatusMap().clear();
    };
    /**
     * map<string, ConfigItem> config = 2;
     * @param {boolean=} opt_noLazyCreate Do not create the map if
     * empty, instead returning `undefined`
     * @return {!jspb.Map<string,!proto.types.ConfigItem>}
     */


    proto.types.ServerInfo.prototype.getConfigMap = function (opt_noLazyCreate) {
      return (
        /** @type {!jspb.Map<string,!proto.types.ConfigItem>} */
        googleProtobuf.Message.getMapField(this, 2, opt_noLazyCreate, proto.types.ConfigItem)
      );
    };

    proto.types.ServerInfo.prototype.clearConfigMap = function () {
      this.getConfigMap().clear();
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.ConfigItem = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.ConfigItem, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.ConfigItem.displayName = 'proto.types.ConfigItem';
    }

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.ConfigItem.prototype.toObject = function (opt_includeInstance) {
        return proto.types.ConfigItem.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.ConfigItem} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.ConfigItem.toObject = function (includeInstance, msg) {
        var f,
            obj = {
          propsMap: (f = msg.getPropsMap()) ? f.toObject(includeInstance, undefined) : []
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.ConfigItem}
     */


    proto.types.ConfigItem.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.ConfigItem();
      return proto.types.ConfigItem.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.ConfigItem} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.ConfigItem}
     */


    proto.types.ConfigItem.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 2:
            var value = msg.getPropsMap();
            reader.readMessage(value, function (message, reader) {
              googleProtobuf.Map.deserializeBinary(message, reader, googleProtobuf.BinaryReader.prototype.readString, googleProtobuf.BinaryReader.prototype.readString, null, "");
            });
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.ConfigItem.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.ConfigItem.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.ConfigItem} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.ConfigItem.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getPropsMap(true);

      if (f && f.getLength() > 0) {
        f.serializeBinary(2, writer, googleProtobuf.BinaryWriter.prototype.writeString, googleProtobuf.BinaryWriter.prototype.writeString);
      }
    };
    /**
     * map<string, string> props = 2;
     * @param {boolean=} opt_noLazyCreate Do not create the map if
     * empty, instead returning `undefined`
     * @return {!jspb.Map<string,string>}
     */


    proto.types.ConfigItem.prototype.getPropsMap = function (opt_noLazyCreate) {
      return (
        /** @type {!jspb.Map<string,string>} */
        googleProtobuf.Message.getMapField(this, 2, opt_noLazyCreate, null)
      );
    };

    proto.types.ConfigItem.prototype.clearPropsMap = function () {
      this.getPropsMap().clear();
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.EventList = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, proto.types.EventList.repeatedFields_, null);
    };

    goog.inherits(proto.types.EventList, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.EventList.displayName = 'proto.types.EventList';
    }
    /**
     * List of repeated fields within this message type.
     * @private {!Array<number>}
     * @const
     */


    proto.types.EventList.repeatedFields_ = [1];

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.EventList.prototype.toObject = function (opt_includeInstance) {
        return proto.types.EventList.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.EventList} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.EventList.toObject = function (includeInstance, msg) {
        var obj = {
          eventsList: googleProtobuf.Message.toObjectList(msg.getEventsList(), blockchain_pb.Event.toObject, includeInstance)
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.EventList}
     */


    proto.types.EventList.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.EventList();
      return proto.types.EventList.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.EventList} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.EventList}
     */


    proto.types.EventList.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value = new blockchain_pb.Event();
            reader.readMessage(value, blockchain_pb.Event.deserializeBinaryFromReader);
            msg.addEvents(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.EventList.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.EventList.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.EventList} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.EventList.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getEventsList();

      if (f.length > 0) {
        writer.writeRepeatedMessage(1, f, blockchain_pb.Event.serializeBinaryToWriter);
      }
    };
    /**
     * repeated Event events = 1;
     * @return {!Array<!proto.types.Event>}
     */


    proto.types.EventList.prototype.getEventsList = function () {
      return (
        /** @type{!Array<!proto.types.Event>} */
        googleProtobuf.Message.getRepeatedWrapperField(this, blockchain_pb.Event, 1)
      );
    };
    /** @param {!Array<!proto.types.Event>} value */


    proto.types.EventList.prototype.setEventsList = function (value) {
      googleProtobuf.Message.setRepeatedWrapperField(this, 1, value);
    };
    /**
     * @param {!proto.types.Event=} opt_value
     * @param {number=} opt_index
     * @return {!proto.types.Event}
     */


    proto.types.EventList.prototype.addEvents = function (opt_value, opt_index) {
      return googleProtobuf.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.types.Event, opt_index);
    };

    proto.types.EventList.prototype.clearEventsList = function () {
      this.setEventsList([]);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.ConsensusInfo = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, proto.types.ConsensusInfo.repeatedFields_, null);
    };

    goog.inherits(proto.types.ConsensusInfo, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.ConsensusInfo.displayName = 'proto.types.ConsensusInfo';
    }
    /**
     * List of repeated fields within this message type.
     * @private {!Array<number>}
     * @const
     */


    proto.types.ConsensusInfo.repeatedFields_ = [3];

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.ConsensusInfo.prototype.toObject = function (opt_includeInstance) {
        return proto.types.ConsensusInfo.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.ConsensusInfo} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.ConsensusInfo.toObject = function (includeInstance, msg) {
        var obj = {
          type: googleProtobuf.Message.getFieldWithDefault(msg, 1, ""),
          info: googleProtobuf.Message.getFieldWithDefault(msg, 2, ""),
          bpsList: googleProtobuf.Message.getRepeatedField(msg, 3)
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.ConsensusInfo}
     */


    proto.types.ConsensusInfo.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.ConsensusInfo();
      return proto.types.ConsensusInfo.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.ConsensusInfo} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.ConsensusInfo}
     */


    proto.types.ConsensusInfo.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {string} */
            reader.readString();
            msg.setType(value);
            break;

          case 2:
            var value =
            /** @type {string} */
            reader.readString();
            msg.setInfo(value);
            break;

          case 3:
            var value =
            /** @type {string} */
            reader.readString();
            msg.addBps(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.ConsensusInfo.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.ConsensusInfo.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.ConsensusInfo} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.ConsensusInfo.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getType();

      if (f.length > 0) {
        writer.writeString(1, f);
      }

      f = message.getInfo();

      if (f.length > 0) {
        writer.writeString(2, f);
      }

      f = message.getBpsList();

      if (f.length > 0) {
        writer.writeRepeatedString(3, f);
      }
    };
    /**
     * optional string type = 1;
     * @return {string}
     */


    proto.types.ConsensusInfo.prototype.getType = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, "")
      );
    };
    /** @param {string} value */


    proto.types.ConsensusInfo.prototype.setType = function (value) {
      googleProtobuf.Message.setProto3StringField(this, 1, value);
    };
    /**
     * optional string info = 2;
     * @return {string}
     */


    proto.types.ConsensusInfo.prototype.getInfo = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.getFieldWithDefault(this, 2, "")
      );
    };
    /** @param {string} value */


    proto.types.ConsensusInfo.prototype.setInfo = function (value) {
      googleProtobuf.Message.setProto3StringField(this, 2, value);
    };
    /**
     * repeated string bps = 3;
     * @return {!Array<string>}
     */


    proto.types.ConsensusInfo.prototype.getBpsList = function () {
      return (
        /** @type {!Array<string>} */
        googleProtobuf.Message.getRepeatedField(this, 3)
      );
    };
    /** @param {!Array<string>} value */


    proto.types.ConsensusInfo.prototype.setBpsList = function (value) {
      googleProtobuf.Message.setField(this, 3, value || []);
    };
    /**
     * @param {string} value
     * @param {number=} opt_index
     */


    proto.types.ConsensusInfo.prototype.addBps = function (value, opt_index) {
      googleProtobuf.Message.addToRepeatedField(this, 3, value, opt_index);
    };

    proto.types.ConsensusInfo.prototype.clearBpsList = function () {
      this.setBpsList([]);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.EnterpriseConfigKey = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
    };

    goog.inherits(proto.types.EnterpriseConfigKey, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.EnterpriseConfigKey.displayName = 'proto.types.EnterpriseConfigKey';
    }

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.EnterpriseConfigKey.prototype.toObject = function (opt_includeInstance) {
        return proto.types.EnterpriseConfigKey.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.EnterpriseConfigKey} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.EnterpriseConfigKey.toObject = function (includeInstance, msg) {
        var obj = {
          key: googleProtobuf.Message.getFieldWithDefault(msg, 1, "")
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.EnterpriseConfigKey}
     */


    proto.types.EnterpriseConfigKey.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.EnterpriseConfigKey();
      return proto.types.EnterpriseConfigKey.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.EnterpriseConfigKey} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.EnterpriseConfigKey}
     */


    proto.types.EnterpriseConfigKey.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {string} */
            reader.readString();
            msg.setKey(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.EnterpriseConfigKey.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.EnterpriseConfigKey.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.EnterpriseConfigKey} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.EnterpriseConfigKey.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getKey();

      if (f.length > 0) {
        writer.writeString(1, f);
      }
    };
    /**
     * optional string key = 1;
     * @return {string}
     */


    proto.types.EnterpriseConfigKey.prototype.getKey = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, "")
      );
    };
    /** @param {string} value */


    proto.types.EnterpriseConfigKey.prototype.setKey = function (value) {
      googleProtobuf.Message.setProto3StringField(this, 1, value);
    };
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */


    proto.types.EnterpriseConfig = function (opt_data) {
      googleProtobuf.Message.initialize(this, opt_data, 0, -1, proto.types.EnterpriseConfig.repeatedFields_, null);
    };

    goog.inherits(proto.types.EnterpriseConfig, googleProtobuf.Message);

    if (goog.DEBUG && !COMPILED) {
      proto.types.EnterpriseConfig.displayName = 'proto.types.EnterpriseConfig';
    }
    /**
     * List of repeated fields within this message type.
     * @private {!Array<number>}
     * @const
     */


    proto.types.EnterpriseConfig.repeatedFields_ = [3];

    if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
      /**
       * Creates an object representation of this proto suitable for use in Soy templates.
       * Field names that are reserved in JavaScript and will be renamed to pb_name.
       * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
       * For the list of reserved names please see:
       *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
       * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
       *     for transitional soy proto support: http://goto/soy-param-migration
       * @return {!Object}
       */
      proto.types.EnterpriseConfig.prototype.toObject = function (opt_includeInstance) {
        return proto.types.EnterpriseConfig.toObject(opt_includeInstance, this);
      };
      /**
       * Static version of the {@see toObject} method.
       * @param {boolean|undefined} includeInstance Whether to include the JSPB
       *     instance for transitional soy proto support:
       *     http://goto/soy-param-migration
       * @param {!proto.types.EnterpriseConfig} msg The msg instance to transform.
       * @return {!Object}
       * @suppress {unusedLocalVariables} f is only used for nested messages
       */


      proto.types.EnterpriseConfig.toObject = function (includeInstance, msg) {
        var obj = {
          key: googleProtobuf.Message.getFieldWithDefault(msg, 1, ""),
          on: googleProtobuf.Message.getFieldWithDefault(msg, 2, false),
          valuesList: googleProtobuf.Message.getRepeatedField(msg, 3)
        };

        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }

        return obj;
      };
    }
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!proto.types.EnterpriseConfig}
     */


    proto.types.EnterpriseConfig.deserializeBinary = function (bytes) {
      var reader = new googleProtobuf.BinaryReader(bytes);
      var msg = new proto.types.EnterpriseConfig();
      return proto.types.EnterpriseConfig.deserializeBinaryFromReader(msg, reader);
    };
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!proto.types.EnterpriseConfig} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!proto.types.EnterpriseConfig}
     */


    proto.types.EnterpriseConfig.deserializeBinaryFromReader = function (msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }

        var field = reader.getFieldNumber();

        switch (field) {
          case 1:
            var value =
            /** @type {string} */
            reader.readString();
            msg.setKey(value);
            break;

          case 2:
            var value =
            /** @type {boolean} */
            reader.readBool();
            msg.setOn(value);
            break;

          case 3:
            var value =
            /** @type {string} */
            reader.readString();
            msg.addValues(value);
            break;

          default:
            reader.skipField();
            break;
        }
      }

      return msg;
    };
    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @return {!Uint8Array}
     */


    proto.types.EnterpriseConfig.prototype.serializeBinary = function () {
      var writer = new googleProtobuf.BinaryWriter();
      proto.types.EnterpriseConfig.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!proto.types.EnterpriseConfig} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */


    proto.types.EnterpriseConfig.serializeBinaryToWriter = function (message, writer) {
      var f = undefined;
      f = message.getKey();

      if (f.length > 0) {
        writer.writeString(1, f);
      }

      f = message.getOn();

      if (f) {
        writer.writeBool(2, f);
      }

      f = message.getValuesList();

      if (f.length > 0) {
        writer.writeRepeatedString(3, f);
      }
    };
    /**
     * optional string key = 1;
     * @return {string}
     */


    proto.types.EnterpriseConfig.prototype.getKey = function () {
      return (
        /** @type {string} */
        googleProtobuf.Message.getFieldWithDefault(this, 1, "")
      );
    };
    /** @param {string} value */


    proto.types.EnterpriseConfig.prototype.setKey = function (value) {
      googleProtobuf.Message.setProto3StringField(this, 1, value);
    };
    /**
     * optional bool on = 2;
     * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
     * You should avoid comparisons like {@code val === true/false} in those cases.
     * @return {boolean}
     */


    proto.types.EnterpriseConfig.prototype.getOn = function () {
      return (
        /** @type {boolean} */
        googleProtobuf.Message.getFieldWithDefault(this, 2, false)
      );
    };
    /** @param {boolean} value */


    proto.types.EnterpriseConfig.prototype.setOn = function (value) {
      googleProtobuf.Message.setProto3BooleanField(this, 2, value);
    };
    /**
     * repeated string values = 3;
     * @return {!Array<string>}
     */


    proto.types.EnterpriseConfig.prototype.getValuesList = function () {
      return (
        /** @type {!Array<string>} */
        googleProtobuf.Message.getRepeatedField(this, 3)
      );
    };
    /** @param {!Array<string>} value */


    proto.types.EnterpriseConfig.prototype.setValuesList = function (value) {
      googleProtobuf.Message.setField(this, 3, value || []);
    };
    /**
     * @param {string} value
     * @param {number=} opt_index
     */


    proto.types.EnterpriseConfig.prototype.addValues = function (value, opt_index) {
      googleProtobuf.Message.addToRepeatedField(this, 3, value, opt_index);
    };

    proto.types.EnterpriseConfig.prototype.clearValuesList = function () {
      this.setValuesList([]);
    };
    /**
     * @enum {number}
     */


    proto.types.CommitStatus = {
      TX_OK: 0,
      TX_NONCE_TOO_LOW: 1,
      TX_ALREADY_EXISTS: 2,
      TX_INVALID_HASH: 3,
      TX_INVALID_SIGN: 4,
      TX_INVALID_FORMAT: 5,
      TX_INSUFFICIENT_BALANCE: 6,
      TX_HAS_SAME_NONCE: 7,
      TX_INTERNAL_ERROR: 9
    };
    /**
     * @enum {number}
     */

    proto.types.VerifyStatus = {
      VERIFY_STATUS_OK: 0,
      VERIFY_STATUS_SIGN_NOT_MATCH: 1,
      VERIFY_STATUS_INVALID_HASH: 2
    };
    goog.object.extend(exports, proto.types);
  });
  var rpc_pb_1 = rpc_pb.AccountAddress;
  var rpc_pb_2 = rpc_pb.Empty;
  var rpc_pb_3 = rpc_pb.Personal;
  var rpc_pb_4 = rpc_pb.SingleBytes;
  var rpc_pb_5 = rpc_pb.TxList;
  var rpc_pb_6 = rpc_pb.TxBody;
  var rpc_pb_7 = rpc_pb.Tx;
  var rpc_pb_8 = rpc_pb.CommitStatus;
  var rpc_pb_9 = rpc_pb.ListParams;
  var rpc_pb_10 = rpc_pb.Query;
  var rpc_pb_11 = rpc_pb.Name;
  var rpc_pb_12 = rpc_pb.PeersParams;
  var rpc_pb_13 = rpc_pb.VoteParams;
  var rpc_pb_14 = rpc_pb.NodeReq;
  var rpc_pb_15 = rpc_pb.KeyParams;
  var rpc_pb_16 = rpc_pb.BlockMetadata;
  var rpc_pb_17 = rpc_pb.PageParams;
  var rpc_pb_18 = rpc_pb.BlockBodyParams;

  var errorMessageForCode = function errorMessageForCode(code) {
    var errorMessage = 'UNDEFINED_ERROR';

    if (code && code < Object.values(rpc_pb_8).length) {
      errorMessage = Object.keys(rpc_pb_8)[Object.values(rpc_pb_8).indexOf(code)];
    }

    return errorMessage;
  };
  function waterfall(fns) {
    return (
      /*#__PURE__*/
      function () {
        var _ref2 = _asyncToGenerator(function* (input) {
          var result = input;
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = undefined;

          try {
            for (var _iterator = fns[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var fn = _step.value;
              result = yield fn(result);
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator["return"] != null) {
                _iterator["return"]();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }

          return result;
        });

        return function (_x2) {
          return _ref2.apply(this, arguments);
        };
      }()
    );
  }

  var inherits_browser = createCommonjsModule(function (module) {
    if (typeof Object.create === 'function') {
      // implementation from standard node.js 'util' module
      module.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          ctor.prototype = Object.create(superCtor.prototype, {
            constructor: {
              value: ctor,
              enumerable: false,
              writable: true,
              configurable: true
            }
          });
        }
      };
    } else {
      // old school shim for old browsers
      module.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;

          var TempCtor = function TempCtor() {};

          TempCtor.prototype = superCtor.prototype;
          ctor.prototype = new TempCtor();
          ctor.prototype.constructor = ctor;
        }
      };
    }
  });

  var safeBuffer = createCommonjsModule(function (module, exports) {
    /* eslint-disable node/no-deprecated-api */
    var Buffer = bufferEs6.Buffer; // alternative to using Object.keys for old browsers

    function copyProps(src, dst) {
      for (var key in src) {
        dst[key] = src[key];
      }
    }

    if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
      module.exports = bufferEs6;
    } else {
      // Copy properties from require('buffer')
      copyProps(bufferEs6, exports);
      exports.Buffer = SafeBuffer;
    }

    function SafeBuffer(arg, encodingOrOffset, length) {
      return Buffer(arg, encodingOrOffset, length);
    } // Copy static methods from Buffer


    copyProps(Buffer, SafeBuffer);

    SafeBuffer.from = function (arg, encodingOrOffset, length) {
      if (typeof arg === 'number') {
        throw new TypeError('Argument must not be a number');
      }

      return Buffer(arg, encodingOrOffset, length);
    };

    SafeBuffer.alloc = function (size, fill, encoding) {
      if (typeof size !== 'number') {
        throw new TypeError('Argument must be a number');
      }

      var buf = Buffer(size);

      if (fill !== undefined) {
        if (typeof encoding === 'string') {
          buf.fill(fill, encoding);
        } else {
          buf.fill(fill);
        }
      } else {
        buf.fill(0);
      }

      return buf;
    };

    SafeBuffer.allocUnsafe = function (size) {
      if (typeof size !== 'number') {
        throw new TypeError('Argument must be a number');
      }

      return Buffer(size);
    };

    SafeBuffer.allocUnsafeSlow = function (size) {
      if (typeof size !== 'number') {
        throw new TypeError('Argument must be a number');
      }

      return bufferEs6.SlowBuffer(size);
    };
  });
  var safeBuffer_1 = safeBuffer.Buffer;

  var domain; // This constructor is used to store event handlers. Instantiating this is
  // faster than explicitly calling `Object.create(null)` to get a "clean" empty
  // object (tested with v8 v4.9).

  function EventHandlers() {}

  EventHandlers.prototype = Object.create(null);

  function EventEmitter() {
    EventEmitter.init.call(this);
  }
  // require('events') === require('events').EventEmitter

  EventEmitter.EventEmitter = EventEmitter;
  EventEmitter.usingDomains = false;
  EventEmitter.prototype.domain = undefined;
  EventEmitter.prototype._events = undefined;
  EventEmitter.prototype._maxListeners = undefined; // By default EventEmitters will print a warning if more than 10 listeners are
  // added to it. This is a useful default which helps finding memory leaks.

  EventEmitter.defaultMaxListeners = 10;

  EventEmitter.init = function () {
    this.domain = null;

    if (EventEmitter.usingDomains) {
      // if there is an active domain, then attach to it.
      if (domain.active ) ;
    }

    if (!this._events || this._events === Object.getPrototypeOf(this)._events) {
      this._events = new EventHandlers();
      this._eventsCount = 0;
    }

    this._maxListeners = this._maxListeners || undefined;
  }; // Obviously not all Emitters should be limited to 10. This function allows
  // that to be increased. Set to zero for unlimited.


  EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
    if (typeof n !== 'number' || n < 0 || isNaN(n)) throw new TypeError('"n" argument must be a positive number');
    this._maxListeners = n;
    return this;
  };

  function $getMaxListeners(that) {
    if (that._maxListeners === undefined) return EventEmitter.defaultMaxListeners;
    return that._maxListeners;
  }

  EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
    return $getMaxListeners(this);
  }; // These standalone emit* functions are used to optimize calling of event
  // handlers for fast cases because emit() itself often has a variable number of
  // arguments and can be deoptimized because of that. These functions always have
  // the same number of arguments and thus do not get deoptimized, so the code
  // inside them can execute faster.


  function emitNone(handler, isFn, self) {
    if (isFn) handler.call(self);else {
      var len = handler.length;
      var listeners = arrayClone(handler, len);

      for (var i = 0; i < len; ++i) {
        listeners[i].call(self);
      }
    }
  }

  function emitOne(handler, isFn, self, arg1) {
    if (isFn) handler.call(self, arg1);else {
      var len = handler.length;
      var listeners = arrayClone(handler, len);

      for (var i = 0; i < len; ++i) {
        listeners[i].call(self, arg1);
      }
    }
  }

  function emitTwo(handler, isFn, self, arg1, arg2) {
    if (isFn) handler.call(self, arg1, arg2);else {
      var len = handler.length;
      var listeners = arrayClone(handler, len);

      for (var i = 0; i < len; ++i) {
        listeners[i].call(self, arg1, arg2);
      }
    }
  }

  function emitThree(handler, isFn, self, arg1, arg2, arg3) {
    if (isFn) handler.call(self, arg1, arg2, arg3);else {
      var len = handler.length;
      var listeners = arrayClone(handler, len);

      for (var i = 0; i < len; ++i) {
        listeners[i].call(self, arg1, arg2, arg3);
      }
    }
  }

  function emitMany(handler, isFn, self, args) {
    if (isFn) handler.apply(self, args);else {
      var len = handler.length;
      var listeners = arrayClone(handler, len);

      for (var i = 0; i < len; ++i) {
        listeners[i].apply(self, args);
      }
    }
  }

  EventEmitter.prototype.emit = function emit(type) {
    var er, handler, len, args, i, events, domain;
    var doError = type === 'error';
    events = this._events;
    if (events) doError = doError && events.error == null;else if (!doError) return false;
    domain = this.domain; // If there is no 'error' event listener then throw.

    if (doError) {
      er = arguments[1];

      if (domain) {
        if (!er) er = new Error('Uncaught, unspecified "error" event');
        er.domainEmitter = this;
        er.domain = domain;
        er.domainThrown = false;
        domain.emit('error', er);
      } else if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      } else {
        // At least give some kind of context to the user
        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
        err.context = er;
        throw err;
      }

      return false;
    }

    handler = events[type];
    if (!handler) return false;
    var isFn = typeof handler === 'function';
    len = arguments.length;

    switch (len) {
      // fast cases
      case 1:
        emitNone(handler, isFn, this);
        break;

      case 2:
        emitOne(handler, isFn, this, arguments[1]);
        break;

      case 3:
        emitTwo(handler, isFn, this, arguments[1], arguments[2]);
        break;

      case 4:
        emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);
        break;
      // slower

      default:
        args = new Array(len - 1);

        for (i = 1; i < len; i++) {
          args[i - 1] = arguments[i];
        }

        emitMany(handler, isFn, this, args);
    }
    return true;
  };

  function _addListener(target, type, listener, prepend) {
    var m;
    var events;
    var existing;
    if (typeof listener !== 'function') throw new TypeError('"listener" argument must be a function');
    events = target._events;

    if (!events) {
      events = target._events = new EventHandlers();
      target._eventsCount = 0;
    } else {
      // To avoid recursion in the case that type === "newListener"! Before
      // adding it to the listeners, first emit "newListener".
      if (events.newListener) {
        target.emit('newListener', type, listener.listener ? listener.listener : listener); // Re-assign `events` because a newListener handler could have caused the
        // this._events to be assigned to a new object

        events = target._events;
      }

      existing = events[type];
    }

    if (!existing) {
      // Optimize the case of one listener. Don't need the extra array object.
      existing = events[type] = listener;
      ++target._eventsCount;
    } else {
      if (typeof existing === 'function') {
        // Adding the second element, need to change to array.
        existing = events[type] = prepend ? [listener, existing] : [existing, listener];
      } else {
        // If we've already got an array, just append.
        if (prepend) {
          existing.unshift(listener);
        } else {
          existing.push(listener);
        }
      } // Check for listener leak


      if (!existing.warned) {
        m = $getMaxListeners(target);

        if (m && m > 0 && existing.length > m) {
          existing.warned = true;
          var w = new Error('Possible EventEmitter memory leak detected. ' + existing.length + ' ' + type + ' listeners added. ' + 'Use emitter.setMaxListeners() to increase limit');
          w.name = 'MaxListenersExceededWarning';
          w.emitter = target;
          w.type = type;
          w.count = existing.length;
          emitWarning(w);
        }
      }
    }

    return target;
  }

  function emitWarning(e) {
    typeof console.warn === 'function' ? console.warn(e) : console.log(e);
  }

  EventEmitter.prototype.addListener = function addListener(type, listener) {
    return _addListener(this, type, listener, false);
  };

  EventEmitter.prototype.on = EventEmitter.prototype.addListener;

  EventEmitter.prototype.prependListener = function prependListener(type, listener) {
    return _addListener(this, type, listener, true);
  };

  function _onceWrap(target, type, listener) {
    var fired = false;

    function g() {
      target.removeListener(type, g);

      if (!fired) {
        fired = true;
        listener.apply(target, arguments);
      }
    }

    g.listener = listener;
    return g;
  }

  EventEmitter.prototype.once = function once(type, listener) {
    if (typeof listener !== 'function') throw new TypeError('"listener" argument must be a function');
    this.on(type, _onceWrap(this, type, listener));
    return this;
  };

  EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
    if (typeof listener !== 'function') throw new TypeError('"listener" argument must be a function');
    this.prependListener(type, _onceWrap(this, type, listener));
    return this;
  }; // emits a 'removeListener' event iff the listener was removed


  EventEmitter.prototype.removeListener = function removeListener(type, listener) {
    var list, events, position, i, originalListener;
    if (typeof listener !== 'function') throw new TypeError('"listener" argument must be a function');
    events = this._events;
    if (!events) return this;
    list = events[type];
    if (!list) return this;

    if (list === listener || list.listener && list.listener === listener) {
      if (--this._eventsCount === 0) this._events = new EventHandlers();else {
        delete events[type];
        if (events.removeListener) this.emit('removeListener', type, list.listener || listener);
      }
    } else if (typeof list !== 'function') {
      position = -1;

      for (i = list.length; i-- > 0;) {
        if (list[i] === listener || list[i].listener && list[i].listener === listener) {
          originalListener = list[i].listener;
          position = i;
          break;
        }
      }

      if (position < 0) return this;

      if (list.length === 1) {
        list[0] = undefined;

        if (--this._eventsCount === 0) {
          this._events = new EventHandlers();
          return this;
        } else {
          delete events[type];
        }
      } else {
        spliceOne(list, position);
      }

      if (events.removeListener) this.emit('removeListener', type, originalListener || listener);
    }

    return this;
  };

  EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
    var listeners, events;
    events = this._events;
    if (!events) return this; // not listening for removeListener, no need to emit

    if (!events.removeListener) {
      if (arguments.length === 0) {
        this._events = new EventHandlers();
        this._eventsCount = 0;
      } else if (events[type]) {
        if (--this._eventsCount === 0) this._events = new EventHandlers();else delete events[type];
      }

      return this;
    } // emit removeListener for all listeners on all events


    if (arguments.length === 0) {
      var keys = Object.keys(events);

      for (var i = 0, key; i < keys.length; ++i) {
        key = keys[i];
        if (key === 'removeListener') continue;
        this.removeAllListeners(key);
      }

      this.removeAllListeners('removeListener');
      this._events = new EventHandlers();
      this._eventsCount = 0;
      return this;
    }

    listeners = events[type];

    if (typeof listeners === 'function') {
      this.removeListener(type, listeners);
    } else if (listeners) {
      // LIFO order
      do {
        this.removeListener(type, listeners[listeners.length - 1]);
      } while (listeners[0]);
    }

    return this;
  };

  EventEmitter.prototype.listeners = function listeners(type) {
    var evlistener;
    var ret;
    var events = this._events;
    if (!events) ret = [];else {
      evlistener = events[type];
      if (!evlistener) ret = [];else if (typeof evlistener === 'function') ret = [evlistener.listener || evlistener];else ret = unwrapListeners(evlistener);
    }
    return ret;
  };

  EventEmitter.listenerCount = function (emitter, type) {
    if (typeof emitter.listenerCount === 'function') {
      return emitter.listenerCount(type);
    } else {
      return listenerCount.call(emitter, type);
    }
  };

  EventEmitter.prototype.listenerCount = listenerCount;

  function listenerCount(type) {
    var events = this._events;

    if (events) {
      var evlistener = events[type];

      if (typeof evlistener === 'function') {
        return 1;
      } else if (evlistener) {
        return evlistener.length;
      }
    }

    return 0;
  }

  EventEmitter.prototype.eventNames = function eventNames() {
    return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];
  }; // About 1.5x faster than the two-arg version of Array#splice().


  function spliceOne(list, index) {
    for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1) {
      list[i] = list[k];
    }

    list.pop();
  }

  function arrayClone(arr, i) {
    var copy = new Array(i);

    while (i--) {
      copy[i] = arr[i];
    }

    return copy;
  }

  function unwrapListeners(arr) {
    var ret = new Array(arr.length);

    for (var i = 0; i < ret.length; ++i) {
      ret[i] = arr[i].listener || arr[i];
    }

    return ret;
  }

  // shim for using process in browser
  // based off https://github.com/defunctzombie/node-process/blob/master/browser.js
  function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
  }

  function defaultClearTimeout() {
    throw new Error('clearTimeout has not been defined');
  }

  var cachedSetTimeout = defaultSetTimout;
  var cachedClearTimeout = defaultClearTimeout;

  if (typeof global$1.setTimeout === 'function') {
    cachedSetTimeout = setTimeout;
  }

  if (typeof global$1.clearTimeout === 'function') {
    cachedClearTimeout = clearTimeout;
  }

  function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
      //normal enviroments in sane situations
      return setTimeout(fun, 0);
    } // if setTimeout wasn't available but was latter defined


    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
      cachedSetTimeout = setTimeout;
      return setTimeout(fun, 0);
    }

    try {
      // when when somebody has screwed with setTimeout but no I.E. maddness
      return cachedSetTimeout(fun, 0);
    } catch (e) {
      try {
        // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
        return cachedSetTimeout.call(null, fun, 0);
      } catch (e) {
        // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
        return cachedSetTimeout.call(this, fun, 0);
      }
    }
  }

  function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
      //normal enviroments in sane situations
      return clearTimeout(marker);
    } // if clearTimeout wasn't available but was latter defined


    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
      cachedClearTimeout = clearTimeout;
      return clearTimeout(marker);
    }

    try {
      // when when somebody has screwed with setTimeout but no I.E. maddness
      return cachedClearTimeout(marker);
    } catch (e) {
      try {
        // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
        return cachedClearTimeout.call(null, marker);
      } catch (e) {
        // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
        // Some versions of I.E. have different rules for clearTimeout vs setTimeout
        return cachedClearTimeout.call(this, marker);
      }
    }
  }

  var queue = [];
  var draining = false;
  var currentQueue;
  var queueIndex = -1;

  function cleanUpNextTick() {
    if (!draining || !currentQueue) {
      return;
    }

    draining = false;

    if (currentQueue.length) {
      queue = currentQueue.concat(queue);
    } else {
      queueIndex = -1;
    }

    if (queue.length) {
      drainQueue();
    }
  }

  function drainQueue() {
    if (draining) {
      return;
    }

    var timeout = runTimeout(cleanUpNextTick);
    draining = true;
    var len = queue.length;

    while (len) {
      currentQueue = queue;
      queue = [];

      while (++queueIndex < len) {
        if (currentQueue) {
          currentQueue[queueIndex].run();
        }
      }

      queueIndex = -1;
      len = queue.length;
    }

    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
  }

  function nextTick(fun) {
    var args = new Array(arguments.length - 1);

    if (arguments.length > 1) {
      for (var i = 1; i < arguments.length; i++) {
        args[i - 1] = arguments[i];
      }
    }

    queue.push(new Item(fun, args));

    if (queue.length === 1 && !draining) {
      runTimeout(drainQueue);
    }
  } // v8 likes predictible objects

  function Item(fun, array) {
    this.fun = fun;
    this.array = array;
  }

  Item.prototype.run = function () {
    this.fun.apply(null, this.array);
  };

  var performance = global$1.performance || {};

  var performanceNow = performance.now || performance.mozNow || performance.msNow || performance.oNow || performance.webkitNow || function () {
    return new Date().getTime();
  }; // generate timestamp or delta

  var inherits$1;

  if (typeof Object.create === 'function') {
    inherits$1 = function inherits(ctor, superCtor) {
      // implementation from standard node.js 'util' module
      ctor.super_ = superCtor;
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
    };
  } else {
    inherits$1 = function inherits(ctor, superCtor) {
      ctor.super_ = superCtor;

      var TempCtor = function TempCtor() {};

      TempCtor.prototype = superCtor.prototype;
      ctor.prototype = new TempCtor();
      ctor.prototype.constructor = ctor;
    };
  }

  var inherits$2 = inherits$1;

  var formatRegExp = /%[sdj%]/g;
  function format(f) {
    if (!isString(f)) {
      var objects = [];

      for (var i = 0; i < arguments.length; i++) {
        objects.push(inspect(arguments[i]));
      }

      return objects.join(' ');
    }

    var i = 1;
    var args = arguments;
    var len = args.length;
    var str = String(f).replace(formatRegExp, function (x) {
      if (x === '%%') return '%';
      if (i >= len) return x;

      switch (x) {
        case '%s':
          return String(args[i++]);

        case '%d':
          return Number(args[i++]);

        case '%j':
          try {
            return JSON.stringify(args[i++]);
          } catch (_) {
            return '[Circular]';
          }

        default:
          return x;
      }
    });

    for (var x = args[i]; i < len; x = args[++i]) {
      if (isNull(x) || !isObject(x)) {
        str += ' ' + x;
      } else {
        str += ' ' + inspect(x);
      }
    }

    return str;
  }
  // Returns a modified function which warns once by default.
  // If --no-deprecation is set, then it is a no-op.

  function deprecate(fn, msg) {
    // Allow for deprecating things in the process of starting up.
    if (isUndefined(global$1.process)) {
      return function () {
        return deprecate(fn, msg).apply(this, arguments);
      };
    }

    var warned = false;

    function deprecated() {
      if (!warned) {
        {
          console.error(msg);
        }

        warned = true;
      }

      return fn.apply(this, arguments);
    }

    return deprecated;
  }
  var debugs = {};
  var debugEnviron;
  function debuglog(set) {
    if (isUndefined(debugEnviron)) debugEnviron =  '';
    set = set.toUpperCase();

    if (!debugs[set]) {
      if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
        var pid = 0;

        debugs[set] = function () {
          var msg = format.apply(null, arguments);
          console.error('%s %d: %s', set, pid, msg);
        };
      } else {
        debugs[set] = function () {};
      }
    }

    return debugs[set];
  }
  /**
   * Echos the value of a value. Trys to print the value out
   * in the best way possible given the different types.
   *
   * @param {Object} obj The object to print out.
   * @param {Object} opts Optional options object that alters the output.
   */

  /* legacy: obj, showHidden, depth, colors*/

  function inspect(obj, opts) {
    // default options
    var ctx = {
      seen: [],
      stylize: stylizeNoColor
    }; // legacy...

    if (arguments.length >= 3) ctx.depth = arguments[2];
    if (arguments.length >= 4) ctx.colors = arguments[3];

    if (isBoolean(opts)) {
      // legacy...
      ctx.showHidden = opts;
    } else if (opts) {
      // got an "options" object
      _extend(ctx, opts);
    } // set default options


    if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
    if (isUndefined(ctx.depth)) ctx.depth = 2;
    if (isUndefined(ctx.colors)) ctx.colors = false;
    if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
    if (ctx.colors) ctx.stylize = stylizeWithColor;
    return formatValue(ctx, obj, ctx.depth);
  } // http://en.wikipedia.org/wiki/ANSI_escape_code#graphics

  inspect.colors = {
    'bold': [1, 22],
    'italic': [3, 23],
    'underline': [4, 24],
    'inverse': [7, 27],
    'white': [37, 39],
    'grey': [90, 39],
    'black': [30, 39],
    'blue': [34, 39],
    'cyan': [36, 39],
    'green': [32, 39],
    'magenta': [35, 39],
    'red': [31, 39],
    'yellow': [33, 39]
  }; // Don't use 'blue' not visible on cmd.exe

  inspect.styles = {
    'special': 'cyan',
    'number': 'yellow',
    'boolean': 'yellow',
    'undefined': 'grey',
    'null': 'bold',
    'string': 'green',
    'date': 'magenta',
    // "name": intentionally not styling
    'regexp': 'red'
  };

  function stylizeWithColor(str, styleType) {
    var style = inspect.styles[styleType];

    if (style) {
      return "\x1B[" + inspect.colors[style][0] + 'm' + str + "\x1B[" + inspect.colors[style][1] + 'm';
    } else {
      return str;
    }
  }

  function stylizeNoColor(str, styleType) {
    return str;
  }

  function arrayToHash(array) {
    var hash = {};
    array.forEach(function (val, idx) {
      hash[val] = true;
    });
    return hash;
  }

  function formatValue(ctx, value, recurseTimes) {
    // Provide a hook for user-specified inspect functions.
    // Check that value is an object with an inspect function on it
    if (ctx.customInspect && value && isFunction(value.inspect) && // Filter out the util module, it's inspect function is special
    value.inspect !== inspect && // Also filter out any prototype objects using the circular check.
    !(value.constructor && value.constructor.prototype === value)) {
      var ret = value.inspect(recurseTimes, ctx);

      if (!isString(ret)) {
        ret = formatValue(ctx, ret, recurseTimes);
      }

      return ret;
    } // Primitive types cannot have properties


    var primitive = formatPrimitive(ctx, value);

    if (primitive) {
      return primitive;
    } // Look up the keys of the object.


    var keys = Object.keys(value);
    var visibleKeys = arrayToHash(keys);

    if (ctx.showHidden) {
      keys = Object.getOwnPropertyNames(value);
    } // IE doesn't make error fields non-enumerable
    // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx


    if (isError(value) && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
      return formatError(value);
    } // Some type of object without properties can be shortcutted.


    if (keys.length === 0) {
      if (isFunction(value)) {
        var name = value.name ? ': ' + value.name : '';
        return ctx.stylize('[Function' + name + ']', 'special');
      }

      if (isRegExp(value)) {
        return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
      }

      if (isDate(value)) {
        return ctx.stylize(Date.prototype.toString.call(value), 'date');
      }

      if (isError(value)) {
        return formatError(value);
      }
    }

    var base = '',
        array = false,
        braces = ['{', '}']; // Make Array say that they are Array

    if (isArray$1(value)) {
      array = true;
      braces = ['[', ']'];
    } // Make functions say that they are functions


    if (isFunction(value)) {
      var n = value.name ? ': ' + value.name : '';
      base = ' [Function' + n + ']';
    } // Make RegExps say that they are RegExps


    if (isRegExp(value)) {
      base = ' ' + RegExp.prototype.toString.call(value);
    } // Make dates with properties first say the date


    if (isDate(value)) {
      base = ' ' + Date.prototype.toUTCString.call(value);
    } // Make error with message first say the error


    if (isError(value)) {
      base = ' ' + formatError(value);
    }

    if (keys.length === 0 && (!array || value.length == 0)) {
      return braces[0] + base + braces[1];
    }

    if (recurseTimes < 0) {
      if (isRegExp(value)) {
        return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
      } else {
        return ctx.stylize('[Object]', 'special');
      }
    }

    ctx.seen.push(value);
    var output;

    if (array) {
      output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
    } else {
      output = keys.map(function (key) {
        return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
      });
    }

    ctx.seen.pop();
    return reduceToSingleString(output, base, braces);
  }

  function formatPrimitive(ctx, value) {
    if (isUndefined(value)) return ctx.stylize('undefined', 'undefined');

    if (isString(value)) {
      var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '').replace(/'/g, "\\'").replace(/\\"/g, '"') + '\'';
      return ctx.stylize(simple, 'string');
    }

    if (isNumber(value)) return ctx.stylize('' + value, 'number');
    if (isBoolean(value)) return ctx.stylize('' + value, 'boolean'); // For some reason typeof null is "object", so special case here.

    if (isNull(value)) return ctx.stylize('null', 'null');
  }

  function formatError(value) {
    return '[' + Error.prototype.toString.call(value) + ']';
  }

  function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
    var output = [];

    for (var i = 0, l = value.length; i < l; ++i) {
      if (hasOwnProperty(value, String(i))) {
        output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));
      } else {
        output.push('');
      }
    }

    keys.forEach(function (key) {
      if (!key.match(/^\d+$/)) {
        output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));
      }
    });
    return output;
  }

  function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
    var name, str, desc;
    desc = Object.getOwnPropertyDescriptor(value, key) || {
      value: value[key]
    };

    if (desc.get) {
      if (desc.set) {
        str = ctx.stylize('[Getter/Setter]', 'special');
      } else {
        str = ctx.stylize('[Getter]', 'special');
      }
    } else {
      if (desc.set) {
        str = ctx.stylize('[Setter]', 'special');
      }
    }

    if (!hasOwnProperty(visibleKeys, key)) {
      name = '[' + key + ']';
    }

    if (!str) {
      if (ctx.seen.indexOf(desc.value) < 0) {
        if (isNull(recurseTimes)) {
          str = formatValue(ctx, desc.value, null);
        } else {
          str = formatValue(ctx, desc.value, recurseTimes - 1);
        }

        if (str.indexOf('\n') > -1) {
          if (array) {
            str = str.split('\n').map(function (line) {
              return '  ' + line;
            }).join('\n').substr(2);
          } else {
            str = '\n' + str.split('\n').map(function (line) {
              return '   ' + line;
            }).join('\n');
          }
        }
      } else {
        str = ctx.stylize('[Circular]', 'special');
      }
    }

    if (isUndefined(name)) {
      if (array && key.match(/^\d+$/)) {
        return str;
      }

      name = JSON.stringify('' + key);

      if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
        name = name.substr(1, name.length - 2);
        name = ctx.stylize(name, 'name');
      } else {
        name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
        name = ctx.stylize(name, 'string');
      }
    }

    return name + ': ' + str;
  }

  function reduceToSingleString(output, base, braces) {
    var length = output.reduce(function (prev, cur) {
      if (cur.indexOf('\n') >= 0) ;
      return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
    }, 0);

    if (length > 60) {
      return braces[0] + (base === '' ? '' : base + '\n ') + ' ' + output.join(',\n  ') + ' ' + braces[1];
    }

    return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
  } // NOTE: These type checking functions intentionally don't use `instanceof`
  // because it is fragile and can be easily faked with `Object.create()`.


  function isArray$1(ar) {
    return Array.isArray(ar);
  }
  function isBoolean(arg) {
    return typeof arg === 'boolean';
  }
  function isNull(arg) {
    return arg === null;
  }
  function isNumber(arg) {
    return typeof arg === 'number';
  }
  function isString(arg) {
    return typeof arg === 'string';
  }
  function isUndefined(arg) {
    return arg === void 0;
  }
  function isRegExp(re) {
    return isObject(re) && objectToString(re) === '[object RegExp]';
  }
  function isObject(arg) {
    return _typeof(arg) === 'object' && arg !== null;
  }
  function isDate(d) {
    return isObject(d) && objectToString(d) === '[object Date]';
  }
  function isError(e) {
    return isObject(e) && (objectToString(e) === '[object Error]' || e instanceof Error);
  }
  function isFunction(arg) {
    return typeof arg === 'function';
  }

  function objectToString(o) {
    return Object.prototype.toString.call(o);
  }
  function _extend(origin, add) {
    // Don't do anything if add isn't an object
    if (!add || !isObject(add)) return origin;
    var keys = Object.keys(add);
    var i = keys.length;

    while (i--) {
      origin[keys[i]] = add[keys[i]];
    }

    return origin;
  }

  function hasOwnProperty(obj, prop) {
    return Object.prototype.hasOwnProperty.call(obj, prop);
  }

  function BufferList() {
    this.head = null;
    this.tail = null;
    this.length = 0;
  }

  BufferList.prototype.push = function (v) {
    var entry = {
      data: v,
      next: null
    };
    if (this.length > 0) this.tail.next = entry;else this.head = entry;
    this.tail = entry;
    ++this.length;
  };

  BufferList.prototype.unshift = function (v) {
    var entry = {
      data: v,
      next: this.head
    };
    if (this.length === 0) this.tail = entry;
    this.head = entry;
    ++this.length;
  };

  BufferList.prototype.shift = function () {
    if (this.length === 0) return;
    var ret = this.head.data;
    if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
    --this.length;
    return ret;
  };

  BufferList.prototype.clear = function () {
    this.head = this.tail = null;
    this.length = 0;
  };

  BufferList.prototype.join = function (s) {
    if (this.length === 0) return '';
    var p = this.head;
    var ret = '' + p.data;

    while (p = p.next) {
      ret += s + p.data;
    }

    return ret;
  };

  BufferList.prototype.concat = function (n) {
    if (this.length === 0) return Buffer$1.alloc(0);
    if (this.length === 1) return this.head.data;
    var ret = Buffer$1.allocUnsafe(n >>> 0);
    var p = this.head;
    var i = 0;

    while (p) {
      p.data.copy(ret, i);
      i += p.data.length;
      p = p.next;
    }

    return ret;
  };

  // Copyright Joyent, Inc. and other Node contributors.

  var isBufferEncoding = Buffer$1.isEncoding || function (encoding) {
    switch (encoding && encoding.toLowerCase()) {
      case 'hex':
      case 'utf8':
      case 'utf-8':
      case 'ascii':
      case 'binary':
      case 'base64':
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
      case 'raw':
        return true;

      default:
        return false;
    }
  };

  function assertEncoding(encoding) {
    if (encoding && !isBufferEncoding(encoding)) {
      throw new Error('Unknown encoding: ' + encoding);
    }
  } // StringDecoder provides an interface for efficiently splitting a series of
  // buffers into a series of JS strings without breaking apart multi-byte
  // characters. CESU-8 is handled as part of the UTF-8 encoding.
  //
  // @TODO Handling all encodings inside a single object makes it very difficult
  // to reason about this code, so it should be split up in the future.
  // @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
  // points as used by CESU-8.


  function StringDecoder(encoding) {
    this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
    assertEncoding(encoding);

    switch (this.encoding) {
      case 'utf8':
        // CESU-8 represents each of Surrogate Pair by 3-bytes
        this.surrogateSize = 3;
        break;

      case 'ucs2':
      case 'utf16le':
        // UTF-16 represents each of Surrogate Pair by 2-bytes
        this.surrogateSize = 2;
        this.detectIncompleteChar = utf16DetectIncompleteChar;
        break;

      case 'base64':
        // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
        this.surrogateSize = 3;
        this.detectIncompleteChar = base64DetectIncompleteChar;
        break;

      default:
        this.write = passThroughWrite;
        return;
    } // Enough space to store all bytes of a single character. UTF-8 needs 4
    // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).


    this.charBuffer = new Buffer$1(6); // Number of bytes received for the current incomplete multi-byte character.

    this.charReceived = 0; // Number of bytes expected for the current incomplete multi-byte character.

    this.charLength = 0;
  }
  // guaranteed to not contain any partial multi-byte characters. Any partial
  // character found at the end of the buffer is buffered up, and will be
  // returned when calling write again with the remaining bytes.
  //
  // Note: Converting a Buffer containing an orphan surrogate to a String
  // currently works, but converting a String to a Buffer (via `new Buffer`, or
  // Buffer#write) will replace incomplete surrogates with the unicode
  // replacement character. See https://codereview.chromium.org/121173009/ .

  StringDecoder.prototype.write = function (buffer) {
    var charStr = ''; // if our last write ended with an incomplete multibyte character

    while (this.charLength) {
      // determine how many remaining bytes this buffer has to offer for this char
      var available = buffer.length >= this.charLength - this.charReceived ? this.charLength - this.charReceived : buffer.length; // add the new bytes to the char buffer

      buffer.copy(this.charBuffer, this.charReceived, 0, available);
      this.charReceived += available;

      if (this.charReceived < this.charLength) {
        // still not enough chars in this buffer? wait for more ...
        return '';
      } // remove bytes belonging to the current character from the buffer


      buffer = buffer.slice(available, buffer.length); // get the character that was split

      charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding); // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character

      var charCode = charStr.charCodeAt(charStr.length - 1);

      if (charCode >= 0xD800 && charCode <= 0xDBFF) {
        this.charLength += this.surrogateSize;
        charStr = '';
        continue;
      }

      this.charReceived = this.charLength = 0; // if there are no more bytes in this buffer, just emit our char

      if (buffer.length === 0) {
        return charStr;
      }

      break;
    } // determine and set charLength / charReceived


    this.detectIncompleteChar(buffer);
    var end = buffer.length;

    if (this.charLength) {
      // buffer the incomplete character bytes we got
      buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
      end -= this.charReceived;
    }

    charStr += buffer.toString(this.encoding, 0, end);
    var end = charStr.length - 1;
    var charCode = charStr.charCodeAt(end); // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character

    if (charCode >= 0xD800 && charCode <= 0xDBFF) {
      var size = this.surrogateSize;
      this.charLength += size;
      this.charReceived += size;
      this.charBuffer.copy(this.charBuffer, size, 0, size);
      buffer.copy(this.charBuffer, 0, 0, size);
      return charStr.substring(0, end);
    } // or just emit the charStr


    return charStr;
  }; // detectIncompleteChar determines if there is an incomplete UTF-8 character at
  // the end of the given buffer. If so, it sets this.charLength to the byte
  // length that character, and sets this.charReceived to the number of bytes
  // that are available for this character.


  StringDecoder.prototype.detectIncompleteChar = function (buffer) {
    // determine how many bytes we have to check at the end of this buffer
    var i = buffer.length >= 3 ? 3 : buffer.length; // Figure out if one of the last i bytes of our buffer announces an
    // incomplete char.

    for (; i > 0; i--) {
      var c = buffer[buffer.length - i]; // See http://en.wikipedia.org/wiki/UTF-8#Description
      // 110XXXXX

      if (i == 1 && c >> 5 == 0x06) {
        this.charLength = 2;
        break;
      } // 1110XXXX


      if (i <= 2 && c >> 4 == 0x0E) {
        this.charLength = 3;
        break;
      } // 11110XXX


      if (i <= 3 && c >> 3 == 0x1E) {
        this.charLength = 4;
        break;
      }
    }

    this.charReceived = i;
  };

  StringDecoder.prototype.end = function (buffer) {
    var res = '';
    if (buffer && buffer.length) res = this.write(buffer);

    if (this.charReceived) {
      var cr = this.charReceived;
      var buf = this.charBuffer;
      var enc = this.encoding;
      res += buf.slice(0, cr).toString(enc);
    }

    return res;
  };

  function passThroughWrite(buffer) {
    return buffer.toString(this.encoding);
  }

  function utf16DetectIncompleteChar(buffer) {
    this.charReceived = buffer.length % 2;
    this.charLength = this.charReceived ? 2 : 0;
  }

  function base64DetectIncompleteChar(buffer) {
    this.charReceived = buffer.length % 3;
    this.charLength = this.charReceived ? 3 : 0;
  }

  var stringDecoder = /*#__PURE__*/Object.freeze({
    __proto__: null,
    StringDecoder: StringDecoder
  });

  Readable.ReadableState = ReadableState;
  var debug = debuglog('stream');
  inherits$2(Readable, EventEmitter);

  function prependListener(emitter, event, fn) {
    // Sadly this is not cacheable as some libraries bundle their own
    // event emitter implementation with them.
    if (typeof emitter.prependListener === 'function') {
      return emitter.prependListener(event, fn);
    } else {
      // This is a hack to make sure that our error handler is attached before any
      // userland ones.  NEVER DO THIS. This is here only because this code needs
      // to continue to work with older versions of Node.js that do not include
      // the prependListener() method. The goal is to eventually remove this hack.
      if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
    }
  }

  function listenerCount$1(emitter, type) {
    return emitter.listeners(type).length;
  }

  function ReadableState(options, stream) {
    options = options || {}; // object stream flag. Used to make read(n) ignore n and to
    // make all the buffer merging and length checks go away

    this.objectMode = !!options.objectMode;
    if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer
    // Note: 0 is a valid value, means "don't call _read preemptively ever"

    var hwm = options.highWaterMark;
    var defaultHwm = this.objectMode ? 16 : 16 * 1024;
    this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm; // cast to ints.

    this.highWaterMark = ~~this.highWaterMark; // A linked list is used to store data chunks instead of an array because the
    // linked list can remove elements from the beginning faster than
    // array.shift()

    this.buffer = new BufferList();
    this.length = 0;
    this.pipes = null;
    this.pipesCount = 0;
    this.flowing = null;
    this.ended = false;
    this.endEmitted = false;
    this.reading = false; // a flag to be able to tell if the onwrite cb is called immediately,
    // or on a later tick.  We set this to true at first, because any
    // actions that shouldn't happen until "later" should generally also
    // not happen before the first write call.

    this.sync = true; // whenever we return null, then we set a flag to say
    // that we're awaiting a 'readable' event emission.

    this.needReadable = false;
    this.emittedReadable = false;
    this.readableListening = false;
    this.resumeScheduled = false; // Crypto is kind of old and crusty.  Historically, its default string
    // encoding is 'binary' so we have to make this configurable.
    // Everything else in the universe uses 'utf8', though.

    this.defaultEncoding = options.defaultEncoding || 'utf8'; // when piping, we only care about 'readable' events that happen
    // after read()ing all the bytes and not getting any pushback.

    this.ranOut = false; // the number of writers that are awaiting a drain event in .pipe()s

    this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled

    this.readingMore = false;
    this.decoder = null;
    this.encoding = null;

    if (options.encoding) {
      this.decoder = new StringDecoder(options.encoding);
      this.encoding = options.encoding;
    }
  }
  function Readable(options) {
    if (!(this instanceof Readable)) return new Readable(options);
    this._readableState = new ReadableState(options, this); // legacy

    this.readable = true;
    if (options && typeof options.read === 'function') this._read = options.read;
    EventEmitter.call(this);
  } // Manually shove something into the read() buffer.
  // This returns true if the highWaterMark has not been hit yet,
  // similar to how Writable.write() returns true if you should
  // write() some more.

  Readable.prototype.push = function (chunk, encoding) {
    var state = this._readableState;

    if (!state.objectMode && typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;

      if (encoding !== state.encoding) {
        chunk = Buffer$1.from(chunk, encoding);
        encoding = '';
      }
    }

    return readableAddChunk(this, state, chunk, encoding, false);
  }; // Unshift should *always* be something directly out of read()


  Readable.prototype.unshift = function (chunk) {
    var state = this._readableState;
    return readableAddChunk(this, state, chunk, '', true);
  };

  Readable.prototype.isPaused = function () {
    return this._readableState.flowing === false;
  };

  function readableAddChunk(stream, state, chunk, encoding, addToFront) {
    var er = chunkInvalid(state, chunk);

    if (er) {
      stream.emit('error', er);
    } else if (chunk === null) {
      state.reading = false;
      onEofChunk(stream, state);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (state.ended && !addToFront) {
        var e = new Error('stream.push() after EOF');
        stream.emit('error', e);
      } else if (state.endEmitted && addToFront) {
        var _e = new Error('stream.unshift() after end event');

        stream.emit('error', _e);
      } else {
        var skipAdd;

        if (state.decoder && !addToFront && !encoding) {
          chunk = state.decoder.write(chunk);
          skipAdd = !state.objectMode && chunk.length === 0;
        }

        if (!addToFront) state.reading = false; // Don't add to the buffer if we've decoded to an empty string chunk and
        // we're not in object mode

        if (!skipAdd) {
          // if we want the data now, just emit it.
          if (state.flowing && state.length === 0 && !state.sync) {
            stream.emit('data', chunk);
            stream.read(0);
          } else {
            // update the buffer info.
            state.length += state.objectMode ? 1 : chunk.length;
            if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);
            if (state.needReadable) emitReadable(stream);
          }
        }

        maybeReadMore(stream, state);
      }
    } else if (!addToFront) {
      state.reading = false;
    }

    return needMoreData(state);
  } // if it's past the high water mark, we can push in some more.
  // Also, if we have no data yet, we can stand some
  // more bytes.  This is to work around cases where hwm=0,
  // such as the repl.  Also, if the push() triggered a
  // readable event, and the user called read(largeNumber) such that
  // needReadable was set, then we ought to push more, so that another
  // 'readable' event will be triggered.


  function needMoreData(state) {
    return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
  } // backwards compatibility.


  Readable.prototype.setEncoding = function (enc) {
    this._readableState.decoder = new StringDecoder(enc);
    this._readableState.encoding = enc;
    return this;
  }; // Don't raise the hwm > 8MB


  var MAX_HWM = 0x800000;

  function computeNewHighWaterMark(n) {
    if (n >= MAX_HWM) {
      n = MAX_HWM;
    } else {
      // Get the next highest power of 2 to prevent increasing hwm excessively in
      // tiny amounts
      n--;
      n |= n >>> 1;
      n |= n >>> 2;
      n |= n >>> 4;
      n |= n >>> 8;
      n |= n >>> 16;
      n++;
    }

    return n;
  } // This function is designed to be inlinable, so please take care when making
  // changes to the function body.


  function howMuchToRead(n, state) {
    if (n <= 0 || state.length === 0 && state.ended) return 0;
    if (state.objectMode) return 1;

    if (n !== n) {
      // Only flow one buffer at a time
      if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
    } // If we're asking for more than the current hwm, then raise the hwm.


    if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
    if (n <= state.length) return n; // Don't have enough

    if (!state.ended) {
      state.needReadable = true;
      return 0;
    }

    return state.length;
  } // you can override either this method, or the async _read(n) below.


  Readable.prototype.read = function (n) {
    debug('read', n);
    n = parseInt(n, 10);
    var state = this._readableState;
    var nOrig = n;
    if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we
    // already have a bunch of data in the buffer, then just trigger
    // the 'readable' event and move on.

    if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
      debug('read: emitReadable', state.length, state.ended);
      if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
      return null;
    }

    n = howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.

    if (n === 0 && state.ended) {
      if (state.length === 0) endReadable(this);
      return null;
    } // All the actual chunk generation logic needs to be
    // *below* the call to _read.  The reason is that in certain
    // synthetic stream cases, such as passthrough streams, _read
    // may be a completely synchronous operation which may change
    // the state of the read buffer, providing enough data when
    // before there was *not* enough.
    //
    // So, the steps are:
    // 1. Figure out what the state of things will be after we do
    // a read from the buffer.
    //
    // 2. If that resulting state will trigger a _read, then call _read.
    // Note that this may be asynchronous, or synchronous.  Yes, it is
    // deeply ugly to write APIs this way, but that still doesn't mean
    // that the Readable class should behave improperly, as streams are
    // designed to be sync/async agnostic.
    // Take note if the _read call is sync or async (ie, if the read call
    // has returned yet), so that we know whether or not it's safe to emit
    // 'readable' etc.
    //
    // 3. Actually pull the requested chunks out of the buffer and return.
    // if we need a readable event, then we need to do some reading.


    var doRead = state.needReadable;
    debug('need readable', doRead); // if we currently have less than the highWaterMark, then also read some

    if (state.length === 0 || state.length - n < state.highWaterMark) {
      doRead = true;
      debug('length less than watermark', doRead);
    } // however, if we've ended, then there's no point, and if we're already
    // reading, then it's unnecessary.


    if (state.ended || state.reading) {
      doRead = false;
      debug('reading or ended', doRead);
    } else if (doRead) {
      debug('do read');
      state.reading = true;
      state.sync = true; // if the length is currently zero, then we *need* a readable event.

      if (state.length === 0) state.needReadable = true; // call internal read method

      this._read(state.highWaterMark);

      state.sync = false; // If _read pushed data synchronously, then `reading` will be false,
      // and we need to re-evaluate how much data we can return to the user.

      if (!state.reading) n = howMuchToRead(nOrig, state);
    }

    var ret;
    if (n > 0) ret = fromList(n, state);else ret = null;

    if (ret === null) {
      state.needReadable = true;
      n = 0;
    } else {
      state.length -= n;
    }

    if (state.length === 0) {
      // If we have nothing in the buffer, then we want to know
      // as soon as we *do* get something into the buffer.
      if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.

      if (nOrig !== n && state.ended) endReadable(this);
    }

    if (ret !== null) this.emit('data', ret);
    return ret;
  };

  function chunkInvalid(state, chunk) {
    var er = null;

    if (!isBuffer(chunk) && typeof chunk !== 'string' && chunk !== null && chunk !== undefined && !state.objectMode) {
      er = new TypeError('Invalid non-string/buffer chunk');
    }

    return er;
  }

  function onEofChunk(stream, state) {
    if (state.ended) return;

    if (state.decoder) {
      var chunk = state.decoder.end();

      if (chunk && chunk.length) {
        state.buffer.push(chunk);
        state.length += state.objectMode ? 1 : chunk.length;
      }
    }

    state.ended = true; // emit 'readable' now to make sure it gets picked up.

    emitReadable(stream);
  } // Don't emit readable right away in sync mode, because this can trigger
  // another read() call => stack overflow.  This way, it might trigger
  // a nextTick recursion warning, but that's not so bad.


  function emitReadable(stream) {
    var state = stream._readableState;
    state.needReadable = false;

    if (!state.emittedReadable) {
      debug('emitReadable', state.flowing);
      state.emittedReadable = true;
      if (state.sync) nextTick(emitReadable_, stream);else emitReadable_(stream);
    }
  }

  function emitReadable_(stream) {
    debug('emit readable');
    stream.emit('readable');
    flow(stream);
  } // at this point, the user has presumably seen the 'readable' event,
  // and called read() to consume some data.  that may have triggered
  // in turn another _read(n) call, in which case reading = true if
  // it's in progress.
  // However, if we're not ended, or reading, and the length < hwm,
  // then go ahead and try to read some more preemptively.


  function maybeReadMore(stream, state) {
    if (!state.readingMore) {
      state.readingMore = true;
      nextTick(maybeReadMore_, stream, state);
    }
  }

  function maybeReadMore_(stream, state) {
    var len = state.length;

    while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
      debug('maybeReadMore read 0');
      stream.read(0);
      if (len === state.length) // didn't get any data, stop spinning.
        break;else len = state.length;
    }

    state.readingMore = false;
  } // abstract method.  to be overridden in specific implementation classes.
  // call cb(er, data) where data is <= n in length.
  // for virtual (non-string, non-buffer) streams, "length" is somewhat
  // arbitrary, and perhaps not very meaningful.


  Readable.prototype._read = function (n) {
    this.emit('error', new Error('not implemented'));
  };

  Readable.prototype.pipe = function (dest, pipeOpts) {
    var src = this;
    var state = this._readableState;

    switch (state.pipesCount) {
      case 0:
        state.pipes = dest;
        break;

      case 1:
        state.pipes = [state.pipes, dest];
        break;

      default:
        state.pipes.push(dest);
        break;
    }

    state.pipesCount += 1;
    debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
    var doEnd = !pipeOpts || pipeOpts.end !== false;
    var endFn = doEnd ? onend : cleanup;
    if (state.endEmitted) nextTick(endFn);else src.once('end', endFn);
    dest.on('unpipe', onunpipe);

    function onunpipe(readable) {
      debug('onunpipe');

      if (readable === src) {
        cleanup();
      }
    }

    function onend() {
      debug('onend');
      dest.end();
    } // when the dest drains, it reduces the awaitDrain counter
    // on the source.  This would be more elegant with a .once()
    // handler in flow(), but adding and removing repeatedly is
    // too slow.


    var ondrain = pipeOnDrain(src);
    dest.on('drain', ondrain);
    var cleanedUp = false;

    function cleanup() {
      debug('cleanup'); // cleanup event handlers once the pipe is broken

      dest.removeListener('close', onclose);
      dest.removeListener('finish', onfinish);
      dest.removeListener('drain', ondrain);
      dest.removeListener('error', onerror);
      dest.removeListener('unpipe', onunpipe);
      src.removeListener('end', onend);
      src.removeListener('end', cleanup);
      src.removeListener('data', ondata);
      cleanedUp = true; // if the reader is waiting for a drain event from this
      // specific writer, then it would cause it to never start
      // flowing again.
      // So, if this is awaiting a drain, then we just call it now.
      // If we don't know, then assume that we are waiting for one.

      if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
    } // If the user pushes more data while we're writing to dest then we'll end up
    // in ondata again. However, we only want to increase awaitDrain once because
    // dest will only emit one 'drain' event for the multiple writes.
    // => Introduce a guard on increasing awaitDrain.


    var increasedAwaitDrain = false;
    src.on('data', ondata);

    function ondata(chunk) {
      debug('ondata');
      increasedAwaitDrain = false;
      var ret = dest.write(chunk);

      if (false === ret && !increasedAwaitDrain) {
        // If the user unpiped during `dest.write()`, it is possible
        // to get stuck in a permanently paused state if that write
        // also returned false.
        // => Check whether `dest` is still a piping destination.
        if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
          debug('false write response, pause', src._readableState.awaitDrain);
          src._readableState.awaitDrain++;
          increasedAwaitDrain = true;
        }

        src.pause();
      }
    } // if the dest has an error, then stop piping into it.
    // however, don't suppress the throwing behavior for this.


    function onerror(er) {
      debug('onerror', er);
      unpipe();
      dest.removeListener('error', onerror);
      if (listenerCount$1(dest, 'error') === 0) dest.emit('error', er);
    } // Make sure our error handler is attached before userland ones.


    prependListener(dest, 'error', onerror); // Both close and finish should trigger unpipe, but only once.

    function onclose() {
      dest.removeListener('finish', onfinish);
      unpipe();
    }

    dest.once('close', onclose);

    function onfinish() {
      debug('onfinish');
      dest.removeListener('close', onclose);
      unpipe();
    }

    dest.once('finish', onfinish);

    function unpipe() {
      debug('unpipe');
      src.unpipe(dest);
    } // tell the dest that it's being piped to


    dest.emit('pipe', src); // start the flow if it hasn't been started already.

    if (!state.flowing) {
      debug('pipe resume');
      src.resume();
    }

    return dest;
  };

  function pipeOnDrain(src) {
    return function () {
      var state = src._readableState;
      debug('pipeOnDrain', state.awaitDrain);
      if (state.awaitDrain) state.awaitDrain--;

      if (state.awaitDrain === 0 && src.listeners('data').length) {
        state.flowing = true;
        flow(src);
      }
    };
  }

  Readable.prototype.unpipe = function (dest) {
    var state = this._readableState; // if we're not piping anywhere, then do nothing.

    if (state.pipesCount === 0) return this; // just one destination.  most common case.

    if (state.pipesCount === 1) {
      // passed in one, but it's not the right one.
      if (dest && dest !== state.pipes) return this;
      if (!dest) dest = state.pipes; // got a match.

      state.pipes = null;
      state.pipesCount = 0;
      state.flowing = false;
      if (dest) dest.emit('unpipe', this);
      return this;
    } // slow case. multiple pipe destinations.


    if (!dest) {
      // remove all.
      var dests = state.pipes;
      var len = state.pipesCount;
      state.pipes = null;
      state.pipesCount = 0;
      state.flowing = false;

      for (var _i = 0; _i < len; _i++) {
        dests[_i].emit('unpipe', this);
      }

      return this;
    } // try to find the right one.


    var i = indexOf(state.pipes, dest);
    if (i === -1) return this;
    state.pipes.splice(i, 1);
    state.pipesCount -= 1;
    if (state.pipesCount === 1) state.pipes = state.pipes[0];
    dest.emit('unpipe', this);
    return this;
  }; // set up data events if they are asked for
  // Ensure readable listeners eventually get something


  Readable.prototype.on = function (ev, fn) {
    var res = EventEmitter.prototype.on.call(this, ev, fn);

    if (ev === 'data') {
      // Start flowing on next tick if stream isn't explicitly paused
      if (this._readableState.flowing !== false) this.resume();
    } else if (ev === 'readable') {
      var state = this._readableState;

      if (!state.endEmitted && !state.readableListening) {
        state.readableListening = state.needReadable = true;
        state.emittedReadable = false;

        if (!state.reading) {
          nextTick(nReadingNextTick, this);
        } else if (state.length) {
          emitReadable(this);
        }
      }
    }

    return res;
  };

  Readable.prototype.addListener = Readable.prototype.on;

  function nReadingNextTick(self) {
    debug('readable nexttick read 0');
    self.read(0);
  } // pause() and resume() are remnants of the legacy readable stream API
  // If the user uses them, then switch into old mode.


  Readable.prototype.resume = function () {
    var state = this._readableState;

    if (!state.flowing) {
      debug('resume');
      state.flowing = true;
      resume(this, state);
    }

    return this;
  };

  function resume(stream, state) {
    if (!state.resumeScheduled) {
      state.resumeScheduled = true;
      nextTick(resume_, stream, state);
    }
  }

  function resume_(stream, state) {
    if (!state.reading) {
      debug('resume read 0');
      stream.read(0);
    }

    state.resumeScheduled = false;
    state.awaitDrain = 0;
    stream.emit('resume');
    flow(stream);
    if (state.flowing && !state.reading) stream.read(0);
  }

  Readable.prototype.pause = function () {
    debug('call pause flowing=%j', this._readableState.flowing);

    if (false !== this._readableState.flowing) {
      debug('pause');
      this._readableState.flowing = false;
      this.emit('pause');
    }

    return this;
  };

  function flow(stream) {
    var state = stream._readableState;
    debug('flow', state.flowing);

    while (state.flowing && stream.read() !== null) {}
  } // wrap an old-style stream as the async data source.
  // This is *not* part of the readable stream interface.
  // It is an ugly unfortunate mess of history.


  Readable.prototype.wrap = function (stream) {
    var state = this._readableState;
    var paused = false;
    var self = this;
    stream.on('end', function () {
      debug('wrapped end');

      if (state.decoder && !state.ended) {
        var chunk = state.decoder.end();
        if (chunk && chunk.length) self.push(chunk);
      }

      self.push(null);
    });
    stream.on('data', function (chunk) {
      debug('wrapped data');
      if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode

      if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;
      var ret = self.push(chunk);

      if (!ret) {
        paused = true;
        stream.pause();
      }
    }); // proxy all the other methods.
    // important when wrapping filters and duplexes.

    for (var i in stream) {
      if (this[i] === undefined && typeof stream[i] === 'function') {
        this[i] = function (method) {
          return function () {
            return stream[method].apply(stream, arguments);
          };
        }(i);
      }
    } // proxy certain important events.


    var events = ['error', 'close', 'destroy', 'pause', 'resume'];
    forEach(events, function (ev) {
      stream.on(ev, self.emit.bind(self, ev));
    }); // when we try to consume some more bytes, simply unpause the
    // underlying stream.

    self._read = function (n) {
      debug('wrapped _read', n);

      if (paused) {
        paused = false;
        stream.resume();
      }
    };

    return self;
  }; // exposed for testing purposes only.


  Readable._fromList = fromList; // Pluck off n bytes from an array of buffers.
  // Length is the combined lengths of all the buffers in the list.
  // This function is designed to be inlinable, so please take care when making
  // changes to the function body.

  function fromList(n, state) {
    // nothing buffered
    if (state.length === 0) return null;
    var ret;
    if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
      // read it all, truncate the list
      if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
      state.buffer.clear();
    } else {
      // read part of list
      ret = fromListPartial(n, state.buffer, state.decoder);
    }
    return ret;
  } // Extracts only enough buffered data to satisfy the amount requested.
  // This function is designed to be inlinable, so please take care when making
  // changes to the function body.


  function fromListPartial(n, list, hasStrings) {
    var ret;

    if (n < list.head.data.length) {
      // slice is the same for buffers and strings
      ret = list.head.data.slice(0, n);
      list.head.data = list.head.data.slice(n);
    } else if (n === list.head.data.length) {
      // first chunk is a perfect match
      ret = list.shift();
    } else {
      // result spans more than one buffer
      ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
    }

    return ret;
  } // Copies a specified amount of characters from the list of buffered data
  // chunks.
  // This function is designed to be inlinable, so please take care when making
  // changes to the function body.


  function copyFromBufferString(n, list) {
    var p = list.head;
    var c = 1;
    var ret = p.data;
    n -= ret.length;

    while (p = p.next) {
      var str = p.data;
      var nb = n > str.length ? str.length : n;
      if (nb === str.length) ret += str;else ret += str.slice(0, n);
      n -= nb;

      if (n === 0) {
        if (nb === str.length) {
          ++c;
          if (p.next) list.head = p.next;else list.head = list.tail = null;
        } else {
          list.head = p;
          p.data = str.slice(nb);
        }

        break;
      }

      ++c;
    }

    list.length -= c;
    return ret;
  } // Copies a specified amount of bytes from the list of buffered data chunks.
  // This function is designed to be inlinable, so please take care when making
  // changes to the function body.


  function copyFromBuffer(n, list) {
    var ret = Buffer$1.allocUnsafe(n);
    var p = list.head;
    var c = 1;
    p.data.copy(ret);
    n -= p.data.length;

    while (p = p.next) {
      var buf = p.data;
      var nb = n > buf.length ? buf.length : n;
      buf.copy(ret, ret.length - n, 0, nb);
      n -= nb;

      if (n === 0) {
        if (nb === buf.length) {
          ++c;
          if (p.next) list.head = p.next;else list.head = list.tail = null;
        } else {
          list.head = p;
          p.data = buf.slice(nb);
        }

        break;
      }

      ++c;
    }

    list.length -= c;
    return ret;
  }

  function endReadable(stream) {
    var state = stream._readableState; // If we get here before consuming all the bytes, then that is a
    // bug in node.  Should never happen.

    if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

    if (!state.endEmitted) {
      state.ended = true;
      nextTick(endReadableNT, state, stream);
    }
  }

  function endReadableNT(state, stream) {
    // Check that we didn't get one last unshift.
    if (!state.endEmitted && state.length === 0) {
      state.endEmitted = true;
      stream.readable = false;
      stream.emit('end');
    }
  }

  function forEach(xs, f) {
    for (var i = 0, l = xs.length; i < l; i++) {
      f(xs[i], i);
    }
  }

  function indexOf(xs, x) {
    for (var i = 0, l = xs.length; i < l; i++) {
      if (xs[i] === x) return i;
    }

    return -1;
  }

  // A bit simpler than readable streams.
  Writable.WritableState = WritableState;
  inherits$2(Writable, EventEmitter);

  function nop() {}

  function WriteReq(chunk, encoding, cb) {
    this.chunk = chunk;
    this.encoding = encoding;
    this.callback = cb;
    this.next = null;
  }

  function WritableState(options, stream) {
    Object.defineProperty(this, 'buffer', {
      get: deprecate(function () {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.')
    });
    options = options || {}; // object stream flag to indicate whether or not this stream
    // contains buffers or objects.

    this.objectMode = !!options.objectMode;
    if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false
    // Note: 0 is a valid value, means that we always return false if
    // the entire buffer is not flushed immediately on write()

    var hwm = options.highWaterMark;
    var defaultHwm = this.objectMode ? 16 : 16 * 1024;
    this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm; // cast to ints.

    this.highWaterMark = ~~this.highWaterMark;
    this.needDrain = false; // at the start of calling end()

    this.ending = false; // when end() has been called, and returned

    this.ended = false; // when 'finish' is emitted

    this.finished = false; // should we decode strings into buffers before passing to _write?
    // this is here so that some node-core streams can optimize string
    // handling at a lower level.

    var noDecode = options.decodeStrings === false;
    this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string
    // encoding is 'binary' so we have to make this configurable.
    // Everything else in the universe uses 'utf8', though.

    this.defaultEncoding = options.defaultEncoding || 'utf8'; // not an actual buffer we keep track of, but a measurement
    // of how much we're waiting to get pushed to some underlying
    // socket or file.

    this.length = 0; // a flag to see when we're in the middle of a write.

    this.writing = false; // when true all writes will be buffered until .uncork() call

    this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,
    // or on a later tick.  We set this to true at first, because any
    // actions that shouldn't happen until "later" should generally also
    // not happen before the first write call.

    this.sync = true; // a flag to know if we're processing previously buffered items, which
    // may call the _write() callback in the same tick, so that we don't
    // end up in an overlapped onwrite situation.

    this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)

    this.onwrite = function (er) {
      onwrite(stream, er);
    }; // the callback that the user supplies to write(chunk,encoding,cb)


    this.writecb = null; // the amount that is being written when _write is called.

    this.writelen = 0;
    this.bufferedRequest = null;
    this.lastBufferedRequest = null; // number of pending user-supplied write callbacks
    // this must be 0 before 'finish' can be emitted

    this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs
    // This is relevant for synchronous Transform streams

    this.prefinished = false; // True if the error was already emitted and should not be thrown again

    this.errorEmitted = false; // count buffered requests

    this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always
    // one allocated and free to use, and we maintain at most two

    this.corkedRequestsFree = new CorkedRequest(this);
  }

  WritableState.prototype.getBuffer = function writableStateGetBuffer() {
    var current = this.bufferedRequest;
    var out = [];

    while (current) {
      out.push(current);
      current = current.next;
    }

    return out;
  };
  function Writable(options) {
    // Writable ctor is applied to Duplexes, though they're not
    // instanceof Writable, they're instanceof Readable.
    if (!(this instanceof Writable) && !(this instanceof Duplex)) return new Writable(options);
    this._writableState = new WritableState(options, this); // legacy.

    this.writable = true;

    if (options) {
      if (typeof options.write === 'function') this._write = options.write;
      if (typeof options.writev === 'function') this._writev = options.writev;
    }

    EventEmitter.call(this);
  } // Otherwise people can pipe Writable streams, which is just wrong.

  Writable.prototype.pipe = function () {
    this.emit('error', new Error('Cannot pipe, not readable'));
  };

  function writeAfterEnd(stream, cb) {
    var er = new Error('write after end'); // TODO: defer error events consistently everywhere, not just the cb

    stream.emit('error', er);
    nextTick(cb, er);
  } // If we get something that is not a buffer, string, null, or undefined,
  // and we're not in objectMode, then that's an error.
  // Otherwise stream chunks are all considered to be of length=1, and the
  // watermarks determine how many objects to keep in the buffer, rather than
  // how many bytes or characters.


  function validChunk(stream, state, chunk, cb) {
    var valid = true;
    var er = false; // Always throw error if a null is written
    // if we are not in object mode then throw
    // if it is not a buffer, string, or undefined.

    if (chunk === null) {
      er = new TypeError('May not write null values to stream');
    } else if (!Buffer$1.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
      er = new TypeError('Invalid non-string/buffer chunk');
    }

    if (er) {
      stream.emit('error', er);
      nextTick(cb, er);
      valid = false;
    }

    return valid;
  }

  Writable.prototype.write = function (chunk, encoding, cb) {
    var state = this._writableState;
    var ret = false;

    if (typeof encoding === 'function') {
      cb = encoding;
      encoding = null;
    }

    if (Buffer$1.isBuffer(chunk)) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;
    if (typeof cb !== 'function') cb = nop;
    if (state.ended) writeAfterEnd(this, cb);else if (validChunk(this, state, chunk, cb)) {
      state.pendingcb++;
      ret = writeOrBuffer(this, state, chunk, encoding, cb);
    }
    return ret;
  };

  Writable.prototype.cork = function () {
    var state = this._writableState;
    state.corked++;
  };

  Writable.prototype.uncork = function () {
    var state = this._writableState;

    if (state.corked) {
      state.corked--;
      if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
    }
  };

  Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
    // node::ParseEncoding() requires lower case.
    if (typeof encoding === 'string') encoding = encoding.toLowerCase();
    if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
    this._writableState.defaultEncoding = encoding;
    return this;
  };

  function decodeChunk(state, chunk, encoding) {
    if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
      chunk = Buffer$1.from(chunk, encoding);
    }

    return chunk;
  } // if we're already writing something, then just put this
  // in the queue, and wait our turn.  Otherwise, call _write
  // If we return false, then we need a drain event, so set that flag.


  function writeOrBuffer(stream, state, chunk, encoding, cb) {
    chunk = decodeChunk(state, chunk, encoding);
    if (Buffer$1.isBuffer(chunk)) encoding = 'buffer';
    var len = state.objectMode ? 1 : chunk.length;
    state.length += len;
    var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.

    if (!ret) state.needDrain = true;

    if (state.writing || state.corked) {
      var last = state.lastBufferedRequest;
      state.lastBufferedRequest = new WriteReq(chunk, encoding, cb);

      if (last) {
        last.next = state.lastBufferedRequest;
      } else {
        state.bufferedRequest = state.lastBufferedRequest;
      }

      state.bufferedRequestCount += 1;
    } else {
      doWrite(stream, state, false, len, chunk, encoding, cb);
    }

    return ret;
  }

  function doWrite(stream, state, writev, len, chunk, encoding, cb) {
    state.writelen = len;
    state.writecb = cb;
    state.writing = true;
    state.sync = true;
    if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
    state.sync = false;
  }

  function onwriteError(stream, state, sync, er, cb) {
    --state.pendingcb;
    if (sync) nextTick(cb, er);else cb(er);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
  }

  function onwriteStateUpdate(state) {
    state.writing = false;
    state.writecb = null;
    state.length -= state.writelen;
    state.writelen = 0;
  }

  function onwrite(stream, er) {
    var state = stream._writableState;
    var sync = state.sync;
    var cb = state.writecb;
    onwriteStateUpdate(state);
    if (er) onwriteError(stream, state, sync, er, cb);else {
      // Check if we're actually ready to finish, but don't emit yet
      var finished = needFinish(state);

      if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
        clearBuffer(stream, state);
      }

      if (sync) {
        /*<replacement>*/
        nextTick(afterWrite, stream, state, finished, cb);
        /*</replacement>*/
      } else {
        afterWrite(stream, state, finished, cb);
      }
    }
  }

  function afterWrite(stream, state, finished, cb) {
    if (!finished) onwriteDrain(stream, state);
    state.pendingcb--;
    cb();
    finishMaybe(stream, state);
  } // Must force callback to be called on nextTick, so that we don't
  // emit 'drain' before the write() consumer gets the 'false' return
  // value, and has a chance to attach a 'drain' listener.


  function onwriteDrain(stream, state) {
    if (state.length === 0 && state.needDrain) {
      state.needDrain = false;
      stream.emit('drain');
    }
  } // if there's something in the buffer waiting, then process it


  function clearBuffer(stream, state) {
    state.bufferProcessing = true;
    var entry = state.bufferedRequest;

    if (stream._writev && entry && entry.next) {
      // Fast case, write everything using _writev()
      var l = state.bufferedRequestCount;
      var buffer = new Array(l);
      var holder = state.corkedRequestsFree;
      holder.entry = entry;
      var count = 0;

      while (entry) {
        buffer[count] = entry;
        entry = entry.next;
        count += 1;
      }

      doWrite(stream, state, true, state.length, buffer, '', holder.finish); // doWrite is almost always async, defer these to save a bit of time
      // as the hot path ends with doWrite

      state.pendingcb++;
      state.lastBufferedRequest = null;

      if (holder.next) {
        state.corkedRequestsFree = holder.next;
        holder.next = null;
      } else {
        state.corkedRequestsFree = new CorkedRequest(state);
      }
    } else {
      // Slow case, write chunks one-by-one
      while (entry) {
        var chunk = entry.chunk;
        var encoding = entry.encoding;
        var cb = entry.callback;
        var len = state.objectMode ? 1 : chunk.length;
        doWrite(stream, state, false, len, chunk, encoding, cb);
        entry = entry.next; // if we didn't call the onwrite immediately, then
        // it means that we need to wait until it does.
        // also, that means that the chunk and cb are currently
        // being processed, so move the buffer counter past them.

        if (state.writing) {
          break;
        }
      }

      if (entry === null) state.lastBufferedRequest = null;
    }

    state.bufferedRequestCount = 0;
    state.bufferedRequest = entry;
    state.bufferProcessing = false;
  }

  Writable.prototype._write = function (chunk, encoding, cb) {
    cb(new Error('not implemented'));
  };

  Writable.prototype._writev = null;

  Writable.prototype.end = function (chunk, encoding, cb) {
    var state = this._writableState;

    if (typeof chunk === 'function') {
      cb = chunk;
      chunk = null;
      encoding = null;
    } else if (typeof encoding === 'function') {
      cb = encoding;
      encoding = null;
    }

    if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks

    if (state.corked) {
      state.corked = 1;
      this.uncork();
    } // ignore unnecessary end() calls.


    if (!state.ending && !state.finished) endWritable(this, state, cb);
  };

  function needFinish(state) {
    return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
  }

  function prefinish(stream, state) {
    if (!state.prefinished) {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }

  function finishMaybe(stream, state) {
    var need = needFinish(state);

    if (need) {
      if (state.pendingcb === 0) {
        prefinish(stream, state);
        state.finished = true;
        stream.emit('finish');
      } else {
        prefinish(stream, state);
      }
    }

    return need;
  }

  function endWritable(stream, state, cb) {
    state.ending = true;
    finishMaybe(stream, state);

    if (cb) {
      if (state.finished) nextTick(cb);else stream.once('finish', cb);
    }

    state.ended = true;
    stream.writable = false;
  } // It seems a linked list but it is not
  // there will be only 2 of these for each stream


  function CorkedRequest(state) {
    var _this = this;

    this.next = null;
    this.entry = null;

    this.finish = function (err) {
      var entry = _this.entry;
      _this.entry = null;

      while (entry) {
        var cb = entry.callback;
        state.pendingcb--;
        cb(err);
        entry = entry.next;
      }

      if (state.corkedRequestsFree) {
        state.corkedRequestsFree.next = _this;
      } else {
        state.corkedRequestsFree = _this;
      }
    };
  }

  inherits$2(Duplex, Readable);
  var keys = Object.keys(Writable.prototype);

  for (var v = 0; v < keys.length; v++) {
    var method = keys[v];
    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
  }
  function Duplex(options) {
    if (!(this instanceof Duplex)) return new Duplex(options);
    Readable.call(this, options);
    Writable.call(this, options);
    if (options && options.readable === false) this.readable = false;
    if (options && options.writable === false) this.writable = false;
    this.allowHalfOpen = true;
    if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;
    this.once('end', onend);
  } // the no-half-open enforcer

  function onend() {
    // if we allow half-open state, or if the writable side ended,
    // then we're ok.
    if (this.allowHalfOpen || this._writableState.ended) return; // no more data can be written.
    // But allow more writes to happen in this tick.

    nextTick(onEndNT, this);
  }

  function onEndNT(self) {
    self.end();
  }

  // a transform stream is a readable/writable stream where you do
  inherits$2(Transform, Duplex);

  function TransformState(stream) {
    this.afterTransform = function (er, data) {
      return afterTransform(stream, er, data);
    };

    this.needTransform = false;
    this.transforming = false;
    this.writecb = null;
    this.writechunk = null;
    this.writeencoding = null;
  }

  function afterTransform(stream, er, data) {
    var ts = stream._transformState;
    ts.transforming = false;
    var cb = ts.writecb;
    if (!cb) return stream.emit('error', new Error('no writecb in Transform class'));
    ts.writechunk = null;
    ts.writecb = null;
    if (data !== null && data !== undefined) stream.push(data);
    cb(er);
    var rs = stream._readableState;
    rs.reading = false;

    if (rs.needReadable || rs.length < rs.highWaterMark) {
      stream._read(rs.highWaterMark);
    }
  }
  function Transform(options) {
    if (!(this instanceof Transform)) return new Transform(options);
    Duplex.call(this, options);
    this._transformState = new TransformState(this); // when the writable side finishes, then flush out anything remaining.

    var stream = this; // start out asking for a readable event once data is transformed.

    this._readableState.needReadable = true; // we have implemented the _read method, and done the other things
    // that Readable wants before the first _read call, so unset the
    // sync guard flag.

    this._readableState.sync = false;

    if (options) {
      if (typeof options.transform === 'function') this._transform = options.transform;
      if (typeof options.flush === 'function') this._flush = options.flush;
    }

    this.once('prefinish', function () {
      if (typeof this._flush === 'function') this._flush(function (er) {
        done(stream, er);
      });else done(stream);
    });
  }

  Transform.prototype.push = function (chunk, encoding) {
    this._transformState.needTransform = false;
    return Duplex.prototype.push.call(this, chunk, encoding);
  }; // This is the part where you do stuff!
  // override this function in implementation classes.
  // 'chunk' is an input chunk.
  //
  // Call `push(newChunk)` to pass along transformed output
  // to the readable side.  You may call 'push' zero or more times.
  //
  // Call `cb(err)` when you are done with this chunk.  If you pass
  // an error, then that'll put the hurt on the whole operation.  If you
  // never call cb(), then you'll never get another chunk.


  Transform.prototype._transform = function (chunk, encoding, cb) {
    throw new Error('Not implemented');
  };

  Transform.prototype._write = function (chunk, encoding, cb) {
    var ts = this._transformState;
    ts.writecb = cb;
    ts.writechunk = chunk;
    ts.writeencoding = encoding;

    if (!ts.transforming) {
      var rs = this._readableState;
      if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
    }
  }; // Doesn't matter what the args are here.
  // _transform does all the work.
  // That we got here means that the readable side wants more data.


  Transform.prototype._read = function (n) {
    var ts = this._transformState;

    if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
      ts.transforming = true;

      this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
    } else {
      // mark that we need a transform, so that any data that comes in
      // will get processed, now that we've asked for it.
      ts.needTransform = true;
    }
  };

  function done(stream, er) {
    if (er) return stream.emit('error', er); // if there's nothing in the write buffer, then that means
    // that nothing more will ever be provided

    var ws = stream._writableState;
    var ts = stream._transformState;
    if (ws.length) throw new Error('Calling transform done when ws.length != 0');
    if (ts.transforming) throw new Error('Calling transform done when still transforming');
    return stream.push(null);
  }

  inherits$2(PassThrough, Transform);
  function PassThrough(options) {
    if (!(this instanceof PassThrough)) return new PassThrough(options);
    Transform.call(this, options);
  }

  PassThrough.prototype._transform = function (chunk, encoding, cb) {
    cb(null, chunk);
  };

  inherits$2(Stream, EventEmitter);
  Stream.Readable = Readable;
  Stream.Writable = Writable;
  Stream.Duplex = Duplex;
  Stream.Transform = Transform;
  Stream.PassThrough = PassThrough; // Backwards-compat with node 0.4.x

  Stream.Stream = Stream;
  // part of this class) is overridden in the Readable class.

  function Stream() {
    EventEmitter.call(this);
  }

  Stream.prototype.pipe = function (dest, options) {
    var source = this;

    function ondata(chunk) {
      if (dest.writable) {
        if (false === dest.write(chunk) && source.pause) {
          source.pause();
        }
      }
    }

    source.on('data', ondata);

    function ondrain() {
      if (source.readable && source.resume) {
        source.resume();
      }
    }

    dest.on('drain', ondrain); // If the 'end' option is not supplied, dest.end() will be called when
    // source gets the 'end' or 'close' events.  Only dest.end() once.

    if (!dest._isStdio && (!options || options.end !== false)) {
      source.on('end', onend);
      source.on('close', onclose);
    }

    var didOnEnd = false;

    function onend() {
      if (didOnEnd) return;
      didOnEnd = true;
      dest.end();
    }

    function onclose() {
      if (didOnEnd) return;
      didOnEnd = true;
      if (typeof dest.destroy === 'function') dest.destroy();
    } // don't leave dangling pipes when there are errors.


    function onerror(er) {
      cleanup();

      if (EventEmitter.listenerCount(this, 'error') === 0) {
        throw er; // Unhandled stream error in pipe.
      }
    }

    source.on('error', onerror);
    dest.on('error', onerror); // remove all the event listeners that were added.

    function cleanup() {
      source.removeListener('data', ondata);
      dest.removeListener('drain', ondrain);
      source.removeListener('end', onend);
      source.removeListener('close', onclose);
      source.removeListener('error', onerror);
      dest.removeListener('error', onerror);
      source.removeListener('end', cleanup);
      source.removeListener('close', cleanup);
      dest.removeListener('close', cleanup);
    }

    source.on('end', cleanup);
    source.on('close', cleanup);
    dest.on('close', cleanup);
    dest.emit('pipe', source); // Allow for unix-like usage: A.pipe(B).pipe(C)

    return dest;
  };

  var Buffer$2 = safeBuffer.Buffer;
  var Transform$1 = Stream.Transform;

  function throwIfNotStringOrBuffer(val, prefix) {
    if (!Buffer$2.isBuffer(val) && typeof val !== 'string') {
      throw new TypeError(prefix + ' must be a string or a buffer');
    }
  }

  function HashBase(blockSize) {
    Transform$1.call(this);
    this._block = Buffer$2.allocUnsafe(blockSize);
    this._blockSize = blockSize;
    this._blockOffset = 0;
    this._length = [0, 0, 0, 0];
    this._finalized = false;
  }

  inherits_browser(HashBase, Transform$1);

  HashBase.prototype._transform = function (chunk, encoding, callback) {
    var error = null;

    try {
      this.update(chunk, encoding);
    } catch (err) {
      error = err;
    }

    callback(error);
  };

  HashBase.prototype._flush = function (callback) {
    var error = null;

    try {
      this.push(this.digest());
    } catch (err) {
      error = err;
    }

    callback(error);
  };

  HashBase.prototype.update = function (data, encoding) {
    throwIfNotStringOrBuffer(data, 'Data');
    if (this._finalized) throw new Error('Digest already called');
    if (!Buffer$2.isBuffer(data)) data = Buffer$2.from(data, encoding); // consume data

    var block = this._block;
    var offset = 0;

    while (this._blockOffset + data.length - offset >= this._blockSize) {
      for (var i = this._blockOffset; i < this._blockSize;) {
        block[i++] = data[offset++];
      }

      this._update();

      this._blockOffset = 0;
    }

    while (offset < data.length) {
      block[this._blockOffset++] = data[offset++];
    } // update length


    for (var j = 0, carry = data.length * 8; carry > 0; ++j) {
      this._length[j] += carry;
      carry = this._length[j] / 0x0100000000 | 0;
      if (carry > 0) this._length[j] -= 0x0100000000 * carry;
    }

    return this;
  };

  HashBase.prototype._update = function () {
    throw new Error('_update is not implemented');
  };

  HashBase.prototype.digest = function (encoding) {
    if (this._finalized) throw new Error('Digest already called');
    this._finalized = true;

    var digest = this._digest();

    if (encoding !== undefined) digest = digest.toString(encoding); // reset state

    this._block.fill(0);

    this._blockOffset = 0;

    for (var i = 0; i < 4; ++i) {
      this._length[i] = 0;
    }

    return digest;
  };

  HashBase.prototype._digest = function () {
    throw new Error('_digest is not implemented');
  };

  var hashBase = HashBase;

  var Buffer$3 = safeBuffer.Buffer;
  var ARRAY16 = new Array(16);

  function MD5() {
    hashBase.call(this, 64); // state

    this._a = 0x67452301;
    this._b = 0xefcdab89;
    this._c = 0x98badcfe;
    this._d = 0x10325476;
  }

  inherits_browser(MD5, hashBase);

  MD5.prototype._update = function () {
    var M = ARRAY16;

    for (var i = 0; i < 16; ++i) {
      M[i] = this._block.readInt32LE(i * 4);
    }

    var a = this._a;
    var b = this._b;
    var c = this._c;
    var d = this._d;
    a = fnF(a, b, c, d, M[0], 0xd76aa478, 7);
    d = fnF(d, a, b, c, M[1], 0xe8c7b756, 12);
    c = fnF(c, d, a, b, M[2], 0x242070db, 17);
    b = fnF(b, c, d, a, M[3], 0xc1bdceee, 22);
    a = fnF(a, b, c, d, M[4], 0xf57c0faf, 7);
    d = fnF(d, a, b, c, M[5], 0x4787c62a, 12);
    c = fnF(c, d, a, b, M[6], 0xa8304613, 17);
    b = fnF(b, c, d, a, M[7], 0xfd469501, 22);
    a = fnF(a, b, c, d, M[8], 0x698098d8, 7);
    d = fnF(d, a, b, c, M[9], 0x8b44f7af, 12);
    c = fnF(c, d, a, b, M[10], 0xffff5bb1, 17);
    b = fnF(b, c, d, a, M[11], 0x895cd7be, 22);
    a = fnF(a, b, c, d, M[12], 0x6b901122, 7);
    d = fnF(d, a, b, c, M[13], 0xfd987193, 12);
    c = fnF(c, d, a, b, M[14], 0xa679438e, 17);
    b = fnF(b, c, d, a, M[15], 0x49b40821, 22);
    a = fnG(a, b, c, d, M[1], 0xf61e2562, 5);
    d = fnG(d, a, b, c, M[6], 0xc040b340, 9);
    c = fnG(c, d, a, b, M[11], 0x265e5a51, 14);
    b = fnG(b, c, d, a, M[0], 0xe9b6c7aa, 20);
    a = fnG(a, b, c, d, M[5], 0xd62f105d, 5);
    d = fnG(d, a, b, c, M[10], 0x02441453, 9);
    c = fnG(c, d, a, b, M[15], 0xd8a1e681, 14);
    b = fnG(b, c, d, a, M[4], 0xe7d3fbc8, 20);
    a = fnG(a, b, c, d, M[9], 0x21e1cde6, 5);
    d = fnG(d, a, b, c, M[14], 0xc33707d6, 9);
    c = fnG(c, d, a, b, M[3], 0xf4d50d87, 14);
    b = fnG(b, c, d, a, M[8], 0x455a14ed, 20);
    a = fnG(a, b, c, d, M[13], 0xa9e3e905, 5);
    d = fnG(d, a, b, c, M[2], 0xfcefa3f8, 9);
    c = fnG(c, d, a, b, M[7], 0x676f02d9, 14);
    b = fnG(b, c, d, a, M[12], 0x8d2a4c8a, 20);
    a = fnH(a, b, c, d, M[5], 0xfffa3942, 4);
    d = fnH(d, a, b, c, M[8], 0x8771f681, 11);
    c = fnH(c, d, a, b, M[11], 0x6d9d6122, 16);
    b = fnH(b, c, d, a, M[14], 0xfde5380c, 23);
    a = fnH(a, b, c, d, M[1], 0xa4beea44, 4);
    d = fnH(d, a, b, c, M[4], 0x4bdecfa9, 11);
    c = fnH(c, d, a, b, M[7], 0xf6bb4b60, 16);
    b = fnH(b, c, d, a, M[10], 0xbebfbc70, 23);
    a = fnH(a, b, c, d, M[13], 0x289b7ec6, 4);
    d = fnH(d, a, b, c, M[0], 0xeaa127fa, 11);
    c = fnH(c, d, a, b, M[3], 0xd4ef3085, 16);
    b = fnH(b, c, d, a, M[6], 0x04881d05, 23);
    a = fnH(a, b, c, d, M[9], 0xd9d4d039, 4);
    d = fnH(d, a, b, c, M[12], 0xe6db99e5, 11);
    c = fnH(c, d, a, b, M[15], 0x1fa27cf8, 16);
    b = fnH(b, c, d, a, M[2], 0xc4ac5665, 23);
    a = fnI(a, b, c, d, M[0], 0xf4292244, 6);
    d = fnI(d, a, b, c, M[7], 0x432aff97, 10);
    c = fnI(c, d, a, b, M[14], 0xab9423a7, 15);
    b = fnI(b, c, d, a, M[5], 0xfc93a039, 21);
    a = fnI(a, b, c, d, M[12], 0x655b59c3, 6);
    d = fnI(d, a, b, c, M[3], 0x8f0ccc92, 10);
    c = fnI(c, d, a, b, M[10], 0xffeff47d, 15);
    b = fnI(b, c, d, a, M[1], 0x85845dd1, 21);
    a = fnI(a, b, c, d, M[8], 0x6fa87e4f, 6);
    d = fnI(d, a, b, c, M[15], 0xfe2ce6e0, 10);
    c = fnI(c, d, a, b, M[6], 0xa3014314, 15);
    b = fnI(b, c, d, a, M[13], 0x4e0811a1, 21);
    a = fnI(a, b, c, d, M[4], 0xf7537e82, 6);
    d = fnI(d, a, b, c, M[11], 0xbd3af235, 10);
    c = fnI(c, d, a, b, M[2], 0x2ad7d2bb, 15);
    b = fnI(b, c, d, a, M[9], 0xeb86d391, 21);
    this._a = this._a + a | 0;
    this._b = this._b + b | 0;
    this._c = this._c + c | 0;
    this._d = this._d + d | 0;
  };

  MD5.prototype._digest = function () {
    // create padding and handle blocks
    this._block[this._blockOffset++] = 0x80;

    if (this._blockOffset > 56) {
      this._block.fill(0, this._blockOffset, 64);

      this._update();

      this._blockOffset = 0;
    }

    this._block.fill(0, this._blockOffset, 56);

    this._block.writeUInt32LE(this._length[0], 56);

    this._block.writeUInt32LE(this._length[1], 60);

    this._update(); // produce result


    var buffer = Buffer$3.allocUnsafe(16);
    buffer.writeInt32LE(this._a, 0);
    buffer.writeInt32LE(this._b, 4);
    buffer.writeInt32LE(this._c, 8);
    buffer.writeInt32LE(this._d, 12);
    return buffer;
  };

  function rotl(x, n) {
    return x << n | x >>> 32 - n;
  }

  function fnF(a, b, c, d, m, k, s) {
    return rotl(a + (b & c | ~b & d) + m + k | 0, s) + b | 0;
  }

  function fnG(a, b, c, d, m, k, s) {
    return rotl(a + (b & d | c & ~d) + m + k | 0, s) + b | 0;
  }

  function fnH(a, b, c, d, m, k, s) {
    return rotl(a + (b ^ c ^ d) + m + k | 0, s) + b | 0;
  }

  function fnI(a, b, c, d, m, k, s) {
    return rotl(a + (c ^ (b | ~d)) + m + k | 0, s) + b | 0;
  }

  var md5_js = MD5;

  var Buffer$4 = bufferEs6.Buffer;
  var ARRAY16$1 = new Array(16);
  var zl = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13];
  var zr = [5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11];
  var sl = [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6];
  var sr = [8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11];
  var hl = [0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e];
  var hr = [0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000];

  function RIPEMD160() {
    hashBase.call(this, 64); // state

    this._a = 0x67452301;
    this._b = 0xefcdab89;
    this._c = 0x98badcfe;
    this._d = 0x10325476;
    this._e = 0xc3d2e1f0;
  }

  inherits_browser(RIPEMD160, hashBase);

  RIPEMD160.prototype._update = function () {
    var words = ARRAY16$1;

    for (var j = 0; j < 16; ++j) {
      words[j] = this._block.readInt32LE(j * 4);
    }

    var al = this._a | 0;
    var bl = this._b | 0;
    var cl = this._c | 0;
    var dl = this._d | 0;
    var el = this._e | 0;
    var ar = this._a | 0;
    var br = this._b | 0;
    var cr = this._c | 0;
    var dr = this._d | 0;
    var er = this._e | 0; // computation

    for (var i = 0; i < 80; i += 1) {
      var tl;
      var tr;

      if (i < 16) {
        tl = fn1(al, bl, cl, dl, el, words[zl[i]], hl[0], sl[i]);
        tr = fn5(ar, br, cr, dr, er, words[zr[i]], hr[0], sr[i]);
      } else if (i < 32) {
        tl = fn2(al, bl, cl, dl, el, words[zl[i]], hl[1], sl[i]);
        tr = fn4(ar, br, cr, dr, er, words[zr[i]], hr[1], sr[i]);
      } else if (i < 48) {
        tl = fn3(al, bl, cl, dl, el, words[zl[i]], hl[2], sl[i]);
        tr = fn3(ar, br, cr, dr, er, words[zr[i]], hr[2], sr[i]);
      } else if (i < 64) {
        tl = fn4(al, bl, cl, dl, el, words[zl[i]], hl[3], sl[i]);
        tr = fn2(ar, br, cr, dr, er, words[zr[i]], hr[3], sr[i]);
      } else {
        // if (i<80) {
        tl = fn5(al, bl, cl, dl, el, words[zl[i]], hl[4], sl[i]);
        tr = fn1(ar, br, cr, dr, er, words[zr[i]], hr[4], sr[i]);
      }

      al = el;
      el = dl;
      dl = rotl$1(cl, 10);
      cl = bl;
      bl = tl;
      ar = er;
      er = dr;
      dr = rotl$1(cr, 10);
      cr = br;
      br = tr;
    } // update state


    var t = this._b + cl + dr | 0;
    this._b = this._c + dl + er | 0;
    this._c = this._d + el + ar | 0;
    this._d = this._e + al + br | 0;
    this._e = this._a + bl + cr | 0;
    this._a = t;
  };

  RIPEMD160.prototype._digest = function () {
    // create padding and handle blocks
    this._block[this._blockOffset++] = 0x80;

    if (this._blockOffset > 56) {
      this._block.fill(0, this._blockOffset, 64);

      this._update();

      this._blockOffset = 0;
    }

    this._block.fill(0, this._blockOffset, 56);

    this._block.writeUInt32LE(this._length[0], 56);

    this._block.writeUInt32LE(this._length[1], 60);

    this._update(); // produce result


    var buffer = Buffer$4.alloc ? Buffer$4.alloc(20) : new Buffer$4(20);
    buffer.writeInt32LE(this._a, 0);
    buffer.writeInt32LE(this._b, 4);
    buffer.writeInt32LE(this._c, 8);
    buffer.writeInt32LE(this._d, 12);
    buffer.writeInt32LE(this._e, 16);
    return buffer;
  };

  function rotl$1(x, n) {
    return x << n | x >>> 32 - n;
  }

  function fn1(a, b, c, d, e, m, k, s) {
    return rotl$1(a + (b ^ c ^ d) + m + k | 0, s) + e | 0;
  }

  function fn2(a, b, c, d, e, m, k, s) {
    return rotl$1(a + (b & c | ~b & d) + m + k | 0, s) + e | 0;
  }

  function fn3(a, b, c, d, e, m, k, s) {
    return rotl$1(a + ((b | ~c) ^ d) + m + k | 0, s) + e | 0;
  }

  function fn4(a, b, c, d, e, m, k, s) {
    return rotl$1(a + (b & d | c & ~d) + m + k | 0, s) + e | 0;
  }

  function fn5(a, b, c, d, e, m, k, s) {
    return rotl$1(a + (b ^ (c | ~d)) + m + k | 0, s) + e | 0;
  }

  var ripemd160 = RIPEMD160;

  var Buffer$5 = safeBuffer.Buffer; // prototype class for hash functions

  function Hash(blockSize, finalSize) {
    this._block = Buffer$5.alloc(blockSize);
    this._finalSize = finalSize;
    this._blockSize = blockSize;
    this._len = 0;
  }

  Hash.prototype.update = function (data, enc) {
    if (typeof data === 'string') {
      enc = enc || 'utf8';
      data = Buffer$5.from(data, enc);
    }

    var block = this._block;
    var blockSize = this._blockSize;
    var length = data.length;
    var accum = this._len;

    for (var offset = 0; offset < length;) {
      var assigned = accum % blockSize;
      var remainder = Math.min(length - offset, blockSize - assigned);

      for (var i = 0; i < remainder; i++) {
        block[assigned + i] = data[offset + i];
      }

      accum += remainder;
      offset += remainder;

      if (accum % blockSize === 0) {
        this._update(block);
      }
    }

    this._len += length;
    return this;
  };

  Hash.prototype.digest = function (enc) {
    var rem = this._len % this._blockSize;
    this._block[rem] = 0x80; // zero (rem + 1) trailing bits, where (rem + 1) is the smallest
    // non-negative solution to the equation (length + 1 + (rem + 1)) === finalSize mod blockSize

    this._block.fill(0, rem + 1);

    if (rem >= this._finalSize) {
      this._update(this._block);

      this._block.fill(0);
    }

    var bits = this._len * 8; // uint32

    if (bits <= 0xffffffff) {
      this._block.writeUInt32BE(bits, this._blockSize - 4); // uint64

    } else {
      var lowBits = (bits & 0xffffffff) >>> 0;
      var highBits = (bits - lowBits) / 0x100000000;

      this._block.writeUInt32BE(highBits, this._blockSize - 8);

      this._block.writeUInt32BE(lowBits, this._blockSize - 4);
    }

    this._update(this._block);

    var hash = this._hash();

    return enc ? hash.toString(enc) : hash;
  };

  Hash.prototype._update = function () {
    throw new Error('_update must be implemented by subclass');
  };

  var hash = Hash;

  /*
   * A JavaScript implementation of the Secure Hash Algorithm, SHA-0, as defined
   * in FIPS PUB 180-1
   * This source code is derived from sha1.js of the same repository.
   * The difference between SHA-0 and SHA-1 is just a bitwise rotate left
   * operation was added.
   */

  var Buffer$6 = safeBuffer.Buffer;
  var K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0];
  var W = new Array(80);

  function Sha() {
    this.init();
    this._w = W;
    hash.call(this, 64, 56);
  }

  inherits_browser(Sha, hash);

  Sha.prototype.init = function () {
    this._a = 0x67452301;
    this._b = 0xefcdab89;
    this._c = 0x98badcfe;
    this._d = 0x10325476;
    this._e = 0xc3d2e1f0;
    return this;
  };

  function rotl5(num) {
    return num << 5 | num >>> 27;
  }

  function rotl30(num) {
    return num << 30 | num >>> 2;
  }

  function ft(s, b, c, d) {
    if (s === 0) return b & c | ~b & d;
    if (s === 2) return b & c | b & d | c & d;
    return b ^ c ^ d;
  }

  Sha.prototype._update = function (M) {
    var W = this._w;
    var a = this._a | 0;
    var b = this._b | 0;
    var c = this._c | 0;
    var d = this._d | 0;
    var e = this._e | 0;

    for (var i = 0; i < 16; ++i) {
      W[i] = M.readInt32BE(i * 4);
    }

    for (; i < 80; ++i) {
      W[i] = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
    }

    for (var j = 0; j < 80; ++j) {
      var s = ~~(j / 20);
      var t = rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s] | 0;
      e = d;
      d = c;
      c = rotl30(b);
      b = a;
      a = t;
    }

    this._a = a + this._a | 0;
    this._b = b + this._b | 0;
    this._c = c + this._c | 0;
    this._d = d + this._d | 0;
    this._e = e + this._e | 0;
  };

  Sha.prototype._hash = function () {
    var H = Buffer$6.allocUnsafe(20);
    H.writeInt32BE(this._a | 0, 0);
    H.writeInt32BE(this._b | 0, 4);
    H.writeInt32BE(this._c | 0, 8);
    H.writeInt32BE(this._d | 0, 12);
    H.writeInt32BE(this._e | 0, 16);
    return H;
  };

  var sha = Sha;

  /*
   * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
   * in FIPS PUB 180-1
   * Version 2.1a Copyright Paul Johnston 2000 - 2002.
   * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
   * Distributed under the BSD License
   * See http://pajhome.org.uk/crypt/md5 for details.
   */

  var Buffer$7 = safeBuffer.Buffer;
  var K$1 = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0];
  var W$1 = new Array(80);

  function Sha1() {
    this.init();
    this._w = W$1;
    hash.call(this, 64, 56);
  }

  inherits_browser(Sha1, hash);

  Sha1.prototype.init = function () {
    this._a = 0x67452301;
    this._b = 0xefcdab89;
    this._c = 0x98badcfe;
    this._d = 0x10325476;
    this._e = 0xc3d2e1f0;
    return this;
  };

  function rotl1(num) {
    return num << 1 | num >>> 31;
  }

  function rotl5$1(num) {
    return num << 5 | num >>> 27;
  }

  function rotl30$1(num) {
    return num << 30 | num >>> 2;
  }

  function ft$1(s, b, c, d) {
    if (s === 0) return b & c | ~b & d;
    if (s === 2) return b & c | b & d | c & d;
    return b ^ c ^ d;
  }

  Sha1.prototype._update = function (M) {
    var W = this._w;
    var a = this._a | 0;
    var b = this._b | 0;
    var c = this._c | 0;
    var d = this._d | 0;
    var e = this._e | 0;

    for (var i = 0; i < 16; ++i) {
      W[i] = M.readInt32BE(i * 4);
    }

    for (; i < 80; ++i) {
      W[i] = rotl1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16]);
    }

    for (var j = 0; j < 80; ++j) {
      var s = ~~(j / 20);
      var t = rotl5$1(a) + ft$1(s, b, c, d) + e + W[j] + K$1[s] | 0;
      e = d;
      d = c;
      c = rotl30$1(b);
      b = a;
      a = t;
    }

    this._a = a + this._a | 0;
    this._b = b + this._b | 0;
    this._c = c + this._c | 0;
    this._d = d + this._d | 0;
    this._e = e + this._e | 0;
  };

  Sha1.prototype._hash = function () {
    var H = Buffer$7.allocUnsafe(20);
    H.writeInt32BE(this._a | 0, 0);
    H.writeInt32BE(this._b | 0, 4);
    H.writeInt32BE(this._c | 0, 8);
    H.writeInt32BE(this._d | 0, 12);
    H.writeInt32BE(this._e | 0, 16);
    return H;
  };

  var sha1 = Sha1;

  /**
   * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
   * in FIPS 180-2
   * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
   * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
   *
   */

  var Buffer$8 = safeBuffer.Buffer;
  var K$2 = [0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5, 0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5, 0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3, 0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174, 0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC, 0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA, 0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7, 0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967, 0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13, 0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85, 0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3, 0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070, 0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5, 0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3, 0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208, 0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2];
  var W$2 = new Array(64);

  function Sha256() {
    this.init();
    this._w = W$2; // new Array(64)

    hash.call(this, 64, 56);
  }

  inherits_browser(Sha256, hash);

  Sha256.prototype.init = function () {
    this._a = 0x6a09e667;
    this._b = 0xbb67ae85;
    this._c = 0x3c6ef372;
    this._d = 0xa54ff53a;
    this._e = 0x510e527f;
    this._f = 0x9b05688c;
    this._g = 0x1f83d9ab;
    this._h = 0x5be0cd19;
    return this;
  };

  function ch(x, y, z) {
    return z ^ x & (y ^ z);
  }

  function maj(x, y, z) {
    return x & y | z & (x | y);
  }

  function sigma0(x) {
    return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10);
  }

  function sigma1(x) {
    return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7);
  }

  function gamma0(x) {
    return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ x >>> 3;
  }

  function gamma1(x) {
    return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ x >>> 10;
  }

  Sha256.prototype._update = function (M) {
    var W = this._w;
    var a = this._a | 0;
    var b = this._b | 0;
    var c = this._c | 0;
    var d = this._d | 0;
    var e = this._e | 0;
    var f = this._f | 0;
    var g = this._g | 0;
    var h = this._h | 0;

    for (var i = 0; i < 16; ++i) {
      W[i] = M.readInt32BE(i * 4);
    }

    for (; i < 64; ++i) {
      W[i] = gamma1(W[i - 2]) + W[i - 7] + gamma0(W[i - 15]) + W[i - 16] | 0;
    }

    for (var j = 0; j < 64; ++j) {
      var T1 = h + sigma1(e) + ch(e, f, g) + K$2[j] + W[j] | 0;
      var T2 = sigma0(a) + maj(a, b, c) | 0;
      h = g;
      g = f;
      f = e;
      e = d + T1 | 0;
      d = c;
      c = b;
      b = a;
      a = T1 + T2 | 0;
    }

    this._a = a + this._a | 0;
    this._b = b + this._b | 0;
    this._c = c + this._c | 0;
    this._d = d + this._d | 0;
    this._e = e + this._e | 0;
    this._f = f + this._f | 0;
    this._g = g + this._g | 0;
    this._h = h + this._h | 0;
  };

  Sha256.prototype._hash = function () {
    var H = Buffer$8.allocUnsafe(32);
    H.writeInt32BE(this._a, 0);
    H.writeInt32BE(this._b, 4);
    H.writeInt32BE(this._c, 8);
    H.writeInt32BE(this._d, 12);
    H.writeInt32BE(this._e, 16);
    H.writeInt32BE(this._f, 20);
    H.writeInt32BE(this._g, 24);
    H.writeInt32BE(this._h, 28);
    return H;
  };

  var sha256 = Sha256;

  /**
   * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
   * in FIPS 180-2
   * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
   * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
   *
   */

  var Buffer$9 = safeBuffer.Buffer;
  var W$3 = new Array(64);

  function Sha224() {
    this.init();
    this._w = W$3; // new Array(64)

    hash.call(this, 64, 56);
  }

  inherits_browser(Sha224, sha256);

  Sha224.prototype.init = function () {
    this._a = 0xc1059ed8;
    this._b = 0x367cd507;
    this._c = 0x3070dd17;
    this._d = 0xf70e5939;
    this._e = 0xffc00b31;
    this._f = 0x68581511;
    this._g = 0x64f98fa7;
    this._h = 0xbefa4fa4;
    return this;
  };

  Sha224.prototype._hash = function () {
    var H = Buffer$9.allocUnsafe(28);
    H.writeInt32BE(this._a, 0);
    H.writeInt32BE(this._b, 4);
    H.writeInt32BE(this._c, 8);
    H.writeInt32BE(this._d, 12);
    H.writeInt32BE(this._e, 16);
    H.writeInt32BE(this._f, 20);
    H.writeInt32BE(this._g, 24);
    return H;
  };

  var sha224 = Sha224;

  var Buffer$a = safeBuffer.Buffer;
  var K$3 = [0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd, 0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc, 0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019, 0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118, 0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe, 0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2, 0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1, 0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694, 0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3, 0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65, 0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483, 0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5, 0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210, 0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4, 0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725, 0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70, 0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926, 0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df, 0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8, 0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b, 0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001, 0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30, 0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910, 0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8, 0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53, 0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8, 0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb, 0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3, 0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60, 0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec, 0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9, 0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b, 0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207, 0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178, 0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6, 0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b, 0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493, 0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c, 0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a, 0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817];
  var W$4 = new Array(160);

  function Sha512() {
    this.init();
    this._w = W$4;
    hash.call(this, 128, 112);
  }

  inherits_browser(Sha512, hash);

  Sha512.prototype.init = function () {
    this._ah = 0x6a09e667;
    this._bh = 0xbb67ae85;
    this._ch = 0x3c6ef372;
    this._dh = 0xa54ff53a;
    this._eh = 0x510e527f;
    this._fh = 0x9b05688c;
    this._gh = 0x1f83d9ab;
    this._hh = 0x5be0cd19;
    this._al = 0xf3bcc908;
    this._bl = 0x84caa73b;
    this._cl = 0xfe94f82b;
    this._dl = 0x5f1d36f1;
    this._el = 0xade682d1;
    this._fl = 0x2b3e6c1f;
    this._gl = 0xfb41bd6b;
    this._hl = 0x137e2179;
    return this;
  };

  function Ch(x, y, z) {
    return z ^ x & (y ^ z);
  }

  function maj$1(x, y, z) {
    return x & y | z & (x | y);
  }

  function sigma0$1(x, xl) {
    return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25);
  }

  function sigma1$1(x, xl) {
    return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23);
  }

  function Gamma0(x, xl) {
    return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ x >>> 7;
  }

  function Gamma0l(x, xl) {
    return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25);
  }

  function Gamma1(x, xl) {
    return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ x >>> 6;
  }

  function Gamma1l(x, xl) {
    return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26);
  }

  function getCarry(a, b) {
    return a >>> 0 < b >>> 0 ? 1 : 0;
  }

  Sha512.prototype._update = function (M) {
    var W = this._w;
    var ah = this._ah | 0;
    var bh = this._bh | 0;
    var ch = this._ch | 0;
    var dh = this._dh | 0;
    var eh = this._eh | 0;
    var fh = this._fh | 0;
    var gh = this._gh | 0;
    var hh = this._hh | 0;
    var al = this._al | 0;
    var bl = this._bl | 0;
    var cl = this._cl | 0;
    var dl = this._dl | 0;
    var el = this._el | 0;
    var fl = this._fl | 0;
    var gl = this._gl | 0;
    var hl = this._hl | 0;

    for (var i = 0; i < 32; i += 2) {
      W[i] = M.readInt32BE(i * 4);
      W[i + 1] = M.readInt32BE(i * 4 + 4);
    }

    for (; i < 160; i += 2) {
      var xh = W[i - 15 * 2];
      var xl = W[i - 15 * 2 + 1];
      var gamma0 = Gamma0(xh, xl);
      var gamma0l = Gamma0l(xl, xh);
      xh = W[i - 2 * 2];
      xl = W[i - 2 * 2 + 1];
      var gamma1 = Gamma1(xh, xl);
      var gamma1l = Gamma1l(xl, xh); // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]

      var Wi7h = W[i - 7 * 2];
      var Wi7l = W[i - 7 * 2 + 1];
      var Wi16h = W[i - 16 * 2];
      var Wi16l = W[i - 16 * 2 + 1];
      var Wil = gamma0l + Wi7l | 0;
      var Wih = gamma0 + Wi7h + getCarry(Wil, gamma0l) | 0;
      Wil = Wil + gamma1l | 0;
      Wih = Wih + gamma1 + getCarry(Wil, gamma1l) | 0;
      Wil = Wil + Wi16l | 0;
      Wih = Wih + Wi16h + getCarry(Wil, Wi16l) | 0;
      W[i] = Wih;
      W[i + 1] = Wil;
    }

    for (var j = 0; j < 160; j += 2) {
      Wih = W[j];
      Wil = W[j + 1];
      var majh = maj$1(ah, bh, ch);
      var majl = maj$1(al, bl, cl);
      var sigma0h = sigma0$1(ah, al);
      var sigma0l = sigma0$1(al, ah);
      var sigma1h = sigma1$1(eh, el);
      var sigma1l = sigma1$1(el, eh); // t1 = h + sigma1 + ch + K[j] + W[j]

      var Kih = K$3[j];
      var Kil = K$3[j + 1];
      var chh = Ch(eh, fh, gh);
      var chl = Ch(el, fl, gl);
      var t1l = hl + sigma1l | 0;
      var t1h = hh + sigma1h + getCarry(t1l, hl) | 0;
      t1l = t1l + chl | 0;
      t1h = t1h + chh + getCarry(t1l, chl) | 0;
      t1l = t1l + Kil | 0;
      t1h = t1h + Kih + getCarry(t1l, Kil) | 0;
      t1l = t1l + Wil | 0;
      t1h = t1h + Wih + getCarry(t1l, Wil) | 0; // t2 = sigma0 + maj

      var t2l = sigma0l + majl | 0;
      var t2h = sigma0h + majh + getCarry(t2l, sigma0l) | 0;
      hh = gh;
      hl = gl;
      gh = fh;
      gl = fl;
      fh = eh;
      fl = el;
      el = dl + t1l | 0;
      eh = dh + t1h + getCarry(el, dl) | 0;
      dh = ch;
      dl = cl;
      ch = bh;
      cl = bl;
      bh = ah;
      bl = al;
      al = t1l + t2l | 0;
      ah = t1h + t2h + getCarry(al, t1l) | 0;
    }

    this._al = this._al + al | 0;
    this._bl = this._bl + bl | 0;
    this._cl = this._cl + cl | 0;
    this._dl = this._dl + dl | 0;
    this._el = this._el + el | 0;
    this._fl = this._fl + fl | 0;
    this._gl = this._gl + gl | 0;
    this._hl = this._hl + hl | 0;
    this._ah = this._ah + ah + getCarry(this._al, al) | 0;
    this._bh = this._bh + bh + getCarry(this._bl, bl) | 0;
    this._ch = this._ch + ch + getCarry(this._cl, cl) | 0;
    this._dh = this._dh + dh + getCarry(this._dl, dl) | 0;
    this._eh = this._eh + eh + getCarry(this._el, el) | 0;
    this._fh = this._fh + fh + getCarry(this._fl, fl) | 0;
    this._gh = this._gh + gh + getCarry(this._gl, gl) | 0;
    this._hh = this._hh + hh + getCarry(this._hl, hl) | 0;
  };

  Sha512.prototype._hash = function () {
    var H = Buffer$a.allocUnsafe(64);

    function writeInt64BE(h, l, offset) {
      H.writeInt32BE(h, offset);
      H.writeInt32BE(l, offset + 4);
    }

    writeInt64BE(this._ah, this._al, 0);
    writeInt64BE(this._bh, this._bl, 8);
    writeInt64BE(this._ch, this._cl, 16);
    writeInt64BE(this._dh, this._dl, 24);
    writeInt64BE(this._eh, this._el, 32);
    writeInt64BE(this._fh, this._fl, 40);
    writeInt64BE(this._gh, this._gl, 48);
    writeInt64BE(this._hh, this._hl, 56);
    return H;
  };

  var sha512 = Sha512;

  var Buffer$b = safeBuffer.Buffer;
  var W$5 = new Array(160);

  function Sha384() {
    this.init();
    this._w = W$5;
    hash.call(this, 128, 112);
  }

  inherits_browser(Sha384, sha512);

  Sha384.prototype.init = function () {
    this._ah = 0xcbbb9d5d;
    this._bh = 0x629a292a;
    this._ch = 0x9159015a;
    this._dh = 0x152fecd8;
    this._eh = 0x67332667;
    this._fh = 0x8eb44a87;
    this._gh = 0xdb0c2e0d;
    this._hh = 0x47b5481d;
    this._al = 0xc1059ed8;
    this._bl = 0x367cd507;
    this._cl = 0x3070dd17;
    this._dl = 0xf70e5939;
    this._el = 0xffc00b31;
    this._fl = 0x68581511;
    this._gl = 0x64f98fa7;
    this._hl = 0xbefa4fa4;
    return this;
  };

  Sha384.prototype._hash = function () {
    var H = Buffer$b.allocUnsafe(48);

    function writeInt64BE(h, l, offset) {
      H.writeInt32BE(h, offset);
      H.writeInt32BE(l, offset + 4);
    }

    writeInt64BE(this._ah, this._al, 0);
    writeInt64BE(this._bh, this._bl, 8);
    writeInt64BE(this._ch, this._cl, 16);
    writeInt64BE(this._dh, this._dl, 24);
    writeInt64BE(this._eh, this._el, 32);
    writeInt64BE(this._fh, this._fl, 40);
    return H;
  };

  var sha384 = Sha384;

  var sha_js = createCommonjsModule(function (module) {
    var exports = module.exports = function SHA(algorithm) {
      algorithm = algorithm.toLowerCase();
      var Algorithm = exports[algorithm];
      if (!Algorithm) throw new Error(algorithm + ' is not supported (we accept pull requests)');
      return new Algorithm();
    };

    exports.sha = sha;
    exports.sha1 = sha1;
    exports.sha224 = sha224;
    exports.sha256 = sha256;
    exports.sha384 = sha384;
    exports.sha512 = sha512;
  });

  var Buffer$c = safeBuffer.Buffer;
  var Transform$2 = Stream.Transform;
  var StringDecoder$1 = stringDecoder.StringDecoder;

  function CipherBase(hashMode) {
    Transform$2.call(this);
    this.hashMode = typeof hashMode === 'string';

    if (this.hashMode) {
      this[hashMode] = this._finalOrDigest;
    } else {
      this["final"] = this._finalOrDigest;
    }

    if (this._final) {
      this.__final = this._final;
      this._final = null;
    }

    this._decoder = null;
    this._encoding = null;
  }

  inherits_browser(CipherBase, Transform$2);

  CipherBase.prototype.update = function (data, inputEnc, outputEnc) {
    if (typeof data === 'string') {
      data = Buffer$c.from(data, inputEnc);
    }

    var outData = this._update(data);

    if (this.hashMode) return this;

    if (outputEnc) {
      outData = this._toString(outData, outputEnc);
    }

    return outData;
  };

  CipherBase.prototype.setAutoPadding = function () {};

  CipherBase.prototype.getAuthTag = function () {
    throw new Error('trying to get auth tag in unsupported state');
  };

  CipherBase.prototype.setAuthTag = function () {
    throw new Error('trying to set auth tag in unsupported state');
  };

  CipherBase.prototype.setAAD = function () {
    throw new Error('trying to set aad in unsupported state');
  };

  CipherBase.prototype._transform = function (data, _, next) {
    var err;

    try {
      if (this.hashMode) {
        this._update(data);
      } else {
        this.push(this._update(data));
      }
    } catch (e) {
      err = e;
    } finally {
      next(err);
    }
  };

  CipherBase.prototype._flush = function (done) {
    var err;

    try {
      this.push(this.__final());
    } catch (e) {
      err = e;
    }

    done(err);
  };

  CipherBase.prototype._finalOrDigest = function (outputEnc) {
    var outData = this.__final() || Buffer$c.alloc(0);

    if (outputEnc) {
      outData = this._toString(outData, outputEnc, true);
    }

    return outData;
  };

  CipherBase.prototype._toString = function (value, enc, fin) {
    if (!this._decoder) {
      this._decoder = new StringDecoder$1(enc);
      this._encoding = enc;
    }

    if (this._encoding !== enc) throw new Error('can\'t switch encodings');

    var out = this._decoder.write(value);

    if (fin) {
      out += this._decoder.end();
    }

    return out;
  };

  var cipherBase = CipherBase;

  function Hash$1(hash) {
    cipherBase.call(this, 'digest');
    this._hash = hash;
  }

  inherits_browser(Hash$1, cipherBase);

  Hash$1.prototype._update = function (data) {
    this._hash.update(data);
  };

  Hash$1.prototype._final = function () {
    return this._hash.digest();
  };

  var browser = function createHash(alg) {
    alg = alg.toLowerCase();
    if (alg === 'md5') return new md5_js();
    if (alg === 'rmd160' || alg === 'ripemd160') return new ripemd160();
    return new Hash$1(sha_js(alg));
  };

  var jsbiUmd = createCommonjsModule(function (module, exports) {
    (function (e, i) {
       module.exports = i() ;
    })(commonjsGlobal, function () {

      function e(i) {
        return e = "function" == typeof Symbol && "symbol" == _typeof(Symbol.iterator) ? function (e) {
          return _typeof(e);
        } : function (e) {
          return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : _typeof(e);
        }, e(i);
      }

      function i(e, i) {
        if (!(e instanceof i)) throw new TypeError("Cannot call a class as a function");
      }

      function t(e, t) {
        for (var _, n = 0; n < t.length; n++) {
          _ = t[n], _.enumerable = _.enumerable || !1, _.configurable = !0, "value" in _ && (_.writable = !0), Object.defineProperty(e, _.key, _);
        }
      }

      function _(e, i, _) {
        return i && t(e.prototype, i), _ && t(e, _), e;
      }

      function n(e, i) {
        if ("function" != typeof i && null !== i) throw new TypeError("Super expression must either be null or a function");
        e.prototype = Object.create(i && i.prototype, {
          constructor: {
            value: e,
            writable: !0,
            configurable: !0
          }
        }), i && l(e, i);
      }

      function g(e) {
        return g = Object.setPrototypeOf ? Object.getPrototypeOf : function (e) {
          return e.__proto__ || Object.getPrototypeOf(e);
        }, g(e);
      }

      function l(e, i) {
        return l = Object.setPrototypeOf || function (e, i) {
          return e.__proto__ = i, e;
        }, l(e, i);
      }

      function o() {
        if ("undefined" == typeof Reflect || !Reflect.construct) return !1;
        if (Reflect.construct.sham) return !1;
        if ("function" == typeof Proxy) return !0;

        try {
          return Date.prototype.toString.call(Reflect.construct(Date, [], function () {})), !0;
        } catch (i) {
          return !1;
        }
      }

      function a() {
        return a = o() ? Reflect.construct : function (e, i, t) {
          var _ = [null];

          _.push.apply(_, i);

          var n = Function.bind.apply(e, _),
              g = new n();
          return t && l(g, t.prototype), g;
        }, a.apply(null, arguments);
      }

      function s(e) {
        return -1 !== Function.toString.call(e).indexOf("[native code]");
      }

      function u(e) {
        var i = "function" == typeof Map ? new Map() : void 0;
        return u = function u(e) {
          function t() {
            return a(e, arguments, g(this).constructor);
          }

          if (null === e || !s(e)) return e;
          if ("function" != typeof e) throw new TypeError("Super expression must either be null or a function");

          if ("undefined" != typeof i) {
            if (i.has(e)) return i.get(e);
            i.set(e, t);
          }

          return t.prototype = Object.create(e.prototype, {
            constructor: {
              value: t,
              enumerable: !1,
              writable: !0,
              configurable: !0
            }
          }), l(t, e);
        }, u(e);
      }

      function r(e) {
        if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return e;
      }

      function d(e, i) {
        return i && ("object" == _typeof(i) || "function" == typeof i) ? i : r(e);
      }

      var h = function (t) {
        var o = Math.abs,
            a = Math.max,
            s = Math.imul,
            u = Math.clz32;

        function l(e, t) {
          var _;

          if (i(this, l), e > l.__kMaxLength) throw new RangeError("Maximum BigInt size exceeded");
          return _ = d(this, g(l).call(this, e)), _.sign = t, _;
        }

        return n(l, t), _(l, [{
          key: "toDebugString",
          value: function value() {
            var e = ["BigInt["],
                i = !0,
                t = !1,
                _ = void 0;

            try {
              for (var n, g, l = this[Symbol.iterator](); !(i = (n = l.next()).done); i = !0) {
                g = n.value, e.push((g ? (g >>> 0).toString(16) : g) + ", ");
              }
            } catch (e) {
              t = !0, _ = e;
            } finally {
              try {
                i || null == l["return"] || l["return"]();
              } finally {
                if (t) throw _;
              }
            }

            return e.push("]"), e.join("");
          }
        }, {
          key: "toString",
          value: function value() {
            var e = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : 10;
            if (2 > e || 36 < e) throw new RangeError("toString() radix argument must be between 2 and 36");
            return 0 === this.length ? "0" : 0 == (e & e - 1) ? l.__toStringBasePowerOfTwo(this, e) : l.__toStringGeneric(this, e, !1);
          }
        }, {
          key: "__copy",
          value: function value() {
            for (var e = new l(this.length, this.sign), t = 0; t < this.length; t++) {
              e[t] = this[t];
            }

            return e;
          }
        }, {
          key: "__trim",
          value: function value() {
            for (var e = this.length, i = this[e - 1]; 0 === i;) {
              e--, i = this[e - 1], this.pop();
            }

            return 0 === e && (this.sign = !1), this;
          }
        }, {
          key: "__initializeDigits",
          value: function value() {
            for (var e = 0; e < this.length; e++) {
              this[e] = 0;
            }
          }
        }, {
          key: "__clzmsd",
          value: function value() {
            return u(this[this.length - 1]);
          }
        }, {
          key: "__inplaceMultiplyAdd",
          value: function value(e, t, _) {
            _ > this.length && (_ = this.length);

            for (var n = 65535 & e, g = e >>> 16, l = 0, o = 65535 & t, a = t >>> 16, u = 0; u < _; u++) {
              var r = this.__digit(u),
                  d = 65535 & r,
                  h = r >>> 16,
                  b = s(d, n),
                  m = s(d, g),
                  c = s(h, n),
                  v = s(h, g),
                  y = o + (65535 & b),
                  f = a + l + (y >>> 16) + (b >>> 16) + (65535 & m) + (65535 & c);

              o = (m >>> 16) + (c >>> 16) + (65535 & v) + (f >>> 16), l = o >>> 16, o &= 65535, a = v >>> 16;

              this.__setDigit(u, 65535 & y | f << 16);
            }

            if (0 !== l || 0 !== o || 0 !== a) throw new Error("implementation bug");
          }
        }, {
          key: "__inplaceAdd",
          value: function value(e, t, _) {
            for (var n, g = 0, l = 0; l < _; l++) {
              n = this.__halfDigit(t + l) + e.__halfDigit(l) + g, g = n >>> 16, this.__setHalfDigit(t + l, n);
            }

            return g;
          }
        }, {
          key: "__inplaceSub",
          value: function value(e, t, _) {
            var n = 0;

            if (1 & t) {
              t >>= 1;

              for (var g = this.__digit(t), l = 65535 & g, o = 0; o < _ - 1 >>> 1; o++) {
                var a = e.__digit(o),
                    s = (g >>> 16) - (65535 & a) - n;

                n = 1 & s >>> 16, this.__setDigit(t + o, s << 16 | 65535 & l), g = this.__digit(t + o + 1), l = (65535 & g) - (a >>> 16) - n, n = 1 & l >>> 16;
              }

              var u = e.__digit(o),
                  r = (g >>> 16) - (65535 & u) - n;

              n = 1 & r >>> 16, this.__setDigit(t + o, r << 16 | 65535 & l);
              if (t + o + 1 >= this.length) throw new RangeError("out of bounds");
              0 == (1 & _) && (g = this.__digit(t + o + 1), l = (65535 & g) - (u >>> 16) - n, n = 1 & l >>> 16, this.__setDigit(t + e.length, 4294901760 & g | 65535 & l));
            } else {
              t >>= 1;

              for (var d = 0; d < e.length - 1; d++) {
                var h = this.__digit(t + d),
                    b = e.__digit(d),
                    m = (65535 & h) - (65535 & b) - n;

                n = 1 & m >>> 16;
                var c = (h >>> 16) - (b >>> 16) - n;
                n = 1 & c >>> 16, this.__setDigit(t + d, c << 16 | 65535 & m);
              }

              var v = this.__digit(t + d),
                  y = e.__digit(d),
                  f = (65535 & v) - (65535 & y) - n;

              n = 1 & f >>> 16;
              var D = 0;
              0 == (1 & _) && (D = (v >>> 16) - (y >>> 16) - n, n = 1 & D >>> 16), this.__setDigit(t + d, D << 16 | 65535 & f);
            }

            return n;
          }
        }, {
          key: "__inplaceRightShift",
          value: function value(e) {
            if (0 !== e) {
              for (var t, _ = this.__digit(0) >>> e, n = this.length - 1, g = 0; g < n; g++) {
                t = this.__digit(g + 1), this.__setDigit(g, t << 32 - e | _), _ = t >>> e;
              }

              this.__setDigit(n, _);
            }
          }
        }, {
          key: "__digit",
          value: function value(e) {
            return this[e];
          }
        }, {
          key: "__unsignedDigit",
          value: function value(e) {
            return this[e] >>> 0;
          }
        }, {
          key: "__setDigit",
          value: function value(e, i) {
            this[e] = 0 | i;
          }
        }, {
          key: "__setDigitGrow",
          value: function value(e, i) {
            this[e] = 0 | i;
          }
        }, {
          key: "__halfDigitLength",
          value: function value() {
            var e = this.length;
            return 65535 >= this.__unsignedDigit(e - 1) ? 2 * e - 1 : 2 * e;
          }
        }, {
          key: "__halfDigit",
          value: function value(e) {
            return 65535 & this[e >>> 1] >>> ((1 & e) << 4);
          }
        }, {
          key: "__setHalfDigit",
          value: function value(e, i) {
            var t = e >>> 1,
                _ = this.__digit(t),
                n = 1 & e ? 65535 & _ | i << 16 : 4294901760 & _ | 65535 & i;

            this.__setDigit(t, n);
          }
        }], [{
          key: "BigInt",
          value: function value(i) {
            var t = Math.floor,
                _ = Number.isFinite;

            if ("number" == typeof i) {
              if (0 === i) return l.__zero();
              if ((0 | i) === i) return 0 > i ? l.__oneDigit(-i, !0) : l.__oneDigit(i, !1);
              if (!_(i) || t(i) !== i) throw new RangeError("The number " + i + " cannot be converted to BigInt because it is not an integer");
              return l.__fromDouble(i);
            }

            if ("string" == typeof i) {
              var n = l.__fromString(i);

              if (null === n) throw new SyntaxError("Cannot convert " + i + " to a BigInt");
              return n;
            }

            if ("boolean" == typeof i) return !0 === i ? l.__oneDigit(1, !1) : l.__zero();

            if ("object" === e(i)) {
              if (i.constructor === l) return i;

              var g = l.__toPrimitive(i);

              return l.BigInt(g);
            }

            throw new TypeError("Cannot convert " + i + " to a BigInt");
          }
        }, {
          key: "toNumber",
          value: function value(e) {
            var i = e.length;
            if (0 === i) return 0;

            if (1 === i) {
              var t = e.__unsignedDigit(0);

              return e.sign ? -t : t;
            }

            var _ = e.__digit(i - 1),
                n = u(_),
                g = 32 * i - n;

            if (1024 < g) return e.sign ? -Infinity : 1 / 0;
            var o = g - 1,
                a = _,
                s = i - 1,
                r = n + 1,
                d = 32 === r ? 0 : a << r;
            d >>>= 12;
            var h = r - 12,
                b = 12 <= r ? 0 : a << 20 + r,
                m = 20 + r;
            0 < h && 0 < s && (s--, a = e.__digit(s), d |= a >>> 32 - h, b = a << h, m = h), 0 < m && 0 < s && (s--, a = e.__digit(s), b |= a >>> 32 - m, m -= 32);

            var c = l.__decideRounding(e, m, s, a);

            if ((1 === c || 0 === c && 1 == (1 & b)) && (b = b + 1 >>> 0, 0 === b && (d++, 0 != d >>> 20 && (d = 0, o++, 1023 < o)))) return e.sign ? -Infinity : 1 / 0;
            var v = e.sign ? -2147483648 : 0;
            return o = o + 1023 << 20, l.__kBitConversionInts[1] = v | o | d, l.__kBitConversionInts[0] = b, l.__kBitConversionDouble[0];
          }
        }, {
          key: "unaryMinus",
          value: function value(e) {
            if (0 === e.length) return e;

            var i = e.__copy();

            return i.sign = !e.sign, i;
          }
        }, {
          key: "bitwiseNot",
          value: function value(e) {
            return e.sign ? l.__absoluteSubOne(e).__trim() : l.__absoluteAddOne(e, !0);
          }
        }, {
          key: "exponentiate",
          value: function value(e, i) {
            if (i.sign) throw new RangeError("Exponent must be positive");
            if (0 === i.length) return l.__oneDigit(1, !1);
            if (0 === e.length) return e;
            if (1 === e.length && 1 === e.__digit(0)) return e.sign && 0 == (1 & i.__digit(0)) ? l.unaryMinus(e) : e;
            if (1 < i.length) throw new RangeError("BigInt too big");

            var t = i.__unsignedDigit(0);

            if (1 === t) return e;
            if (t >= l.__kMaxLengthBits) throw new RangeError("BigInt too big");

            if (1 === e.length && 2 === e.__digit(0)) {
              var _ = 1 + (t >>> 5),
                  n = e.sign && 0 != (1 & t),
                  g = new l(_, n);

              g.__initializeDigits();

              var o = 1 << (31 & t);
              return g.__setDigit(_ - 1, o), g;
            }

            var a = null,
                s = e;

            for (0 != (1 & t) && (a = e), t >>= 1; 0 !== t; t >>= 1) {
              s = l.multiply(s, s), 0 != (1 & t) && (null === a ? a = s : a = l.multiply(a, s));
            }

            return a;
          }
        }, {
          key: "multiply",
          value: function value(e, t) {
            if (0 === e.length) return e;
            if (0 === t.length) return t;

            var _ = e.length + t.length;

            32 <= e.__clzmsd() + t.__clzmsd() && _--;
            var n = new l(_, e.sign !== t.sign);

            n.__initializeDigits();

            for (var g = 0; g < e.length; g++) {
              l.__multiplyAccumulate(t, e.__digit(g), n, g);
            }

            return n.__trim();
          }
        }, {
          key: "divide",
          value: function value(e, i) {
            if (0 === i.length) throw new RangeError("Division by zero");
            if (0 > l.__absoluteCompare(e, i)) return l.__zero();

            var t,
                _ = e.sign !== i.sign,
                n = i.__unsignedDigit(0);

            if (1 === i.length && 65535 >= n) {
              if (1 === n) return _ === e.sign ? e : l.unaryMinus(e);
              t = l.__absoluteDivSmall(e, n, null);
            } else t = l.__absoluteDivLarge(e, i, !0, !1);

            return t.sign = _, t.__trim();
          }
        }, {
          key: "remainder",
          value: function e(i, t) {
            if (0 === t.length) throw new RangeError("Division by zero");
            if (0 > l.__absoluteCompare(i, t)) return i;

            var _ = t.__unsignedDigit(0);

            if (1 === t.length && 65535 >= _) {
              if (1 === _) return l.__zero();

              var n = l.__absoluteModSmall(i, _);

              return 0 === n ? l.__zero() : l.__oneDigit(n, i.sign);
            }

            var e = l.__absoluteDivLarge(i, t, !1, !0);

            return e.sign = i.sign, e.__trim();
          }
        }, {
          key: "add",
          value: function value(e, i) {
            var t = e.sign;
            return t === i.sign ? l.__absoluteAdd(e, i, t) : 0 <= l.__absoluteCompare(e, i) ? l.__absoluteSub(e, i, t) : l.__absoluteSub(i, e, !t);
          }
        }, {
          key: "subtract",
          value: function value(e, i) {
            var t = e.sign;
            return t === i.sign ? 0 <= l.__absoluteCompare(e, i) ? l.__absoluteSub(e, i, t) : l.__absoluteSub(i, e, !t) : l.__absoluteAdd(e, i, t);
          }
        }, {
          key: "leftShift",
          value: function value(e, i) {
            return 0 === i.length || 0 === e.length ? e : i.sign ? l.__rightShiftByAbsolute(e, i) : l.__leftShiftByAbsolute(e, i);
          }
        }, {
          key: "signedRightShift",
          value: function value(e, i) {
            return 0 === i.length || 0 === e.length ? e : i.sign ? l.__leftShiftByAbsolute(e, i) : l.__rightShiftByAbsolute(e, i);
          }
        }, {
          key: "unsignedRightShift",
          value: function value() {
            throw new TypeError("BigInts have no unsigned right shift; use >> instead");
          }
        }, {
          key: "lessThan",
          value: function value(e, i) {
            return 0 > l.__compareToBigInt(e, i);
          }
        }, {
          key: "lessThanOrEqual",
          value: function value(e, i) {
            return 0 >= l.__compareToBigInt(e, i);
          }
        }, {
          key: "greaterThan",
          value: function value(e, i) {
            return 0 < l.__compareToBigInt(e, i);
          }
        }, {
          key: "greaterThanOrEqual",
          value: function value(e, i) {
            return 0 <= l.__compareToBigInt(e, i);
          }
        }, {
          key: "equal",
          value: function value(e, t) {
            if (e.sign !== t.sign) return !1;
            if (e.length !== t.length) return !1;

            for (var _ = 0; _ < e.length; _++) {
              if (e.__digit(_) !== t.__digit(_)) return !1;
            }

            return !0;
          }
        }, {
          key: "bitwiseAnd",
          value: function value(e, i) {
            if (!e.sign && !i.sign) return l.__absoluteAnd(e, i).__trim();

            if (e.sign && i.sign) {
              var t = a(e.length, i.length) + 1,
                  _ = l.__absoluteSubOne(e, t),
                  n = l.__absoluteSubOne(i);

              return _ = l.__absoluteOr(_, n, _), l.__absoluteAddOne(_, !0, _).__trim();
            }

            if (e.sign) {
              var g = [i, e];
              e = g[0], i = g[1];
            }

            return l.__absoluteAndNot(e, l.__absoluteSubOne(i)).__trim();
          }
        }, {
          key: "bitwiseXor",
          value: function value(e, i) {
            if (!e.sign && !i.sign) return l.__absoluteXor(e, i).__trim();

            if (e.sign && i.sign) {
              var t = a(e.length, i.length),
                  _ = l.__absoluteSubOne(e, t),
                  n = l.__absoluteSubOne(i);

              return l.__absoluteXor(_, n, _).__trim();
            }

            var g = a(e.length, i.length) + 1;

            if (e.sign) {
              var o = [i, e];
              e = o[0], i = o[1];
            }

            var s = l.__absoluteSubOne(i, g);

            return s = l.__absoluteXor(s, e, s), l.__absoluteAddOne(s, !0, s).__trim();
          }
        }, {
          key: "bitwiseOr",
          value: function value(e, i) {
            var t = a(e.length, i.length);
            if (!e.sign && !i.sign) return l.__absoluteOr(e, i).__trim();

            if (e.sign && i.sign) {
              var _ = l.__absoluteSubOne(e, t),
                  n = l.__absoluteSubOne(i);

              return _ = l.__absoluteAnd(_, n, _), l.__absoluteAddOne(_, !0, _).__trim();
            }

            if (e.sign) {
              var g = [i, e];
              e = g[0], i = g[1];
            }

            var o = l.__absoluteSubOne(i, t);

            return o = l.__absoluteAndNot(o, e, o), l.__absoluteAddOne(o, !0, o).__trim();
          }
        }, {
          key: "ADD",
          value: function value(e, i) {
            if (e = l.__toPrimitive(e), i = l.__toPrimitive(i), "string" == typeof e) return "string" != typeof i && (i = i.toString()), e + i;
            if ("string" == typeof i) return e.toString() + i;
            if (e = l.__toNumeric(e), i = l.__toNumeric(i), l.__isBigInt(e) && l.__isBigInt(i)) return l.add(e, i);
            if ("number" == typeof e && "number" == typeof i) return e + i;
            throw new TypeError("Cannot mix BigInt and other types, use explicit conversions");
          }
        }, {
          key: "LT",
          value: function value(e, i) {
            return l.__compare(e, i, 0);
          }
        }, {
          key: "LE",
          value: function value(e, i) {
            return l.__compare(e, i, 1);
          }
        }, {
          key: "GT",
          value: function value(e, i) {
            return l.__compare(e, i, 2);
          }
        }, {
          key: "GE",
          value: function value(e, i) {
            return l.__compare(e, i, 3);
          }
        }, {
          key: "EQ",
          value: function value(i, t) {
            for (;;) {
              if (l.__isBigInt(i)) return l.__isBigInt(t) ? l.equal(i, t) : l.EQ(t, i);

              if ("number" == typeof i) {
                if (l.__isBigInt(t)) return l.__equalToNumber(t, i);
                if ("object" !== e(t)) return i == t;
                t = l.__toPrimitive(t);
              } else if ("string" == typeof i) {
                if (l.__isBigInt(t)) return i = l.__fromString(i), null !== i && l.equal(i, t);
                if ("object" !== e(t)) return i == t;
                t = l.__toPrimitive(t);
              } else if ("boolean" == typeof i) {
                if (l.__isBigInt(t)) return l.__equalToNumber(t, +i);
                if ("object" !== e(t)) return i == t;
                t = l.__toPrimitive(t);
              } else if ("symbol" === e(i)) {
                if (l.__isBigInt(t)) return !1;
                if ("object" !== e(t)) return i == t;
                t = l.__toPrimitive(t);
              } else if ("object" === e(i)) {
                if ("object" === e(t) && t.constructor !== l) return i == t;
                i = l.__toPrimitive(i);
              } else return i == t;
            }
          }
        }, {
          key: "__zero",
          value: function value() {
            return new l(0, !1);
          }
        }, {
          key: "__oneDigit",
          value: function value(e, i) {
            var t = new l(1, i);
            return t.__setDigit(0, e), t;
          }
        }, {
          key: "__decideRounding",
          value: function value(e, i, t, _) {
            if (0 < i) return -1;
            var n;
            if (0 > i) n = -i - 1;else {
              if (0 === t) return -1;
              t--, _ = e.__digit(t), n = 31;
            }
            var g = 1 << n;
            if (0 == (_ & g)) return -1;
            if (g -= 1, 0 != (_ & g)) return 1;

            for (; 0 < t;) {
              if (t--, 0 !== e.__digit(t)) return 1;
            }

            return 0;
          }
        }, {
          key: "__fromDouble",
          value: function value(e) {
            l.__kBitConversionDouble[0] = e;

            var i,
                t = 2047 & l.__kBitConversionInts[1] >>> 20,
                _ = t - 1023,
                n = (_ >>> 5) + 1,
                g = new l(n, 0 > e),
                o = 1048575 & l.__kBitConversionInts[1] | 1048576,
                a = l.__kBitConversionInts[0],
                s = 20,
                u = 31 & _,
                r = 0;

            if (u < s) {
              var d = s - u;
              r = d + 32, i = o >>> d, o = o << 32 - d | a >>> d, a <<= 32 - d;
            } else if (u === s) r = 32, i = o, o = a;else {
              var h = u - s;
              r = 32 - h, i = o << h | a >>> 32 - h, o = a << h;
            }

            g.__setDigit(n - 1, i);

            for (var b = n - 2; 0 <= b; b--) {
              0 < r ? (r -= 32, i = o, o = a) : i = 0, g.__setDigit(b, i);
            }

            return g.__trim();
          }
        }, {
          key: "__isWhitespace",
          value: function value(e) {
            return !!(13 >= e && 9 <= e) || (159 >= e ? 32 == e : 131071 >= e ? 160 == e || 5760 == e : 196607 >= e ? (e &= 131071, 10 >= e || 40 == e || 41 == e || 47 == e || 95 == e || 4096 == e) : 65279 == e);
          }
        }, {
          key: "__fromString",
          value: function value(e) {
            var i = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : 0,
                t = 0,
                _ = e.length,
                n = 0;
            if (n === _) return l.__zero();

            for (var g = e.charCodeAt(n); l.__isWhitespace(g);) {
              if (++n === _) return l.__zero();
              g = e.charCodeAt(n);
            }

            if (43 === g) {
              if (++n === _) return null;
              g = e.charCodeAt(n), t = 1;
            } else if (45 === g) {
              if (++n === _) return null;
              g = e.charCodeAt(n), t = -1;
            }

            if (0 === i) {
              if (i = 10, 48 === g) {
                if (++n === _) return l.__zero();

                if (g = e.charCodeAt(n), 88 === g || 120 === g) {
                  if (i = 16, ++n === _) return null;
                  g = e.charCodeAt(n);
                } else if (79 === g || 111 === g) {
                  if (i = 8, ++n === _) return null;
                  g = e.charCodeAt(n);
                } else if (66 === g || 98 === g) {
                  if (i = 2, ++n === _) return null;
                  g = e.charCodeAt(n);
                }
              }
            } else if (16 === i && 48 === g) {
              if (++n === _) return l.__zero();

              if (g = e.charCodeAt(n), 88 === g || 120 === g) {
                if (++n === _) return null;
                g = e.charCodeAt(n);
              }
            }

            for (; 48 === g;) {
              if (++n === _) return l.__zero();
              g = e.charCodeAt(n);
            }

            var o = _ - n,
                a = l.__kMaxBitsPerChar[i],
                s = l.__kBitsPerCharTableMultiplier - 1;
            if (o > 1073741824 / a) return null;
            var u = a * o + s >>> l.__kBitsPerCharTableShift,
                r = new l(u + 31 >>> 5, !1),
                h = 10 > i ? i : 10,
                b = 10 < i ? i - 10 : 0;

            if (0 == (i & i - 1)) {
              a >>= l.__kBitsPerCharTableShift;
              var c = [],
                  v = [],
                  y = !1;

              do {
                for (var f, D = 0, k = 0;;) {
                  if (f = void 0, g - 48 >>> 0 < h) f = g - 48;else if ((32 | g) - 97 >>> 0 < b) f = (32 | g) - 87;else {
                    y = !0;
                    break;
                  }

                  if (k += a, D = D << a | f, ++n === _) {
                    y = !0;
                    break;
                  }

                  if (g = e.charCodeAt(n), 32 < k + a) break;
                }

                c.push(D), v.push(k);
              } while (!y);

              l.__fillFromParts(r, c, v);
            } else {
              r.__initializeDigits();

              var p = !1,
                  B = 0;

              do {
                for (var S, C = 0, A = 1;;) {
                  if (S = void 0, g - 48 >>> 0 < h) S = g - 48;else if ((32 | g) - 97 >>> 0 < b) S = (32 | g) - 87;else {
                    p = !0;
                    break;
                  }
                  var I = A * i;
                  if (4294967295 < I) break;

                  if (A = I, C = C * i + S, B++, ++n === _) {
                    p = !0;
                    break;
                  }

                  g = e.charCodeAt(n);
                }

                s = 32 * l.__kBitsPerCharTableMultiplier - 1;
                var m = a * B + s >>> l.__kBitsPerCharTableShift + 5;

                r.__inplaceMultiplyAdd(A, C, m);
              } while (!p);
            }

            for (; n !== _;) {
              if (!l.__isWhitespace(g)) return null;
              g = e.charCodeAt(n++);
            }

            return 0 !== t && 10 !== i ? null : (r.sign = -1 === t, r.__trim());
          }
        }, {
          key: "__fillFromParts",
          value: function value(e, t, _) {
            for (var n = 0, g = 0, l = 0, o = t.length - 1; 0 <= o; o--) {
              var a = t[o],
                  s = _[o];
              g |= a << l, l += s, 32 === l ? (e.__setDigit(n++, g), l = 0, g = 0) : 32 < l && (e.__setDigit(n++, g), l -= 32, g = a >>> s - l);
            }

            if (0 !== g) {
              if (n >= e.length) throw new Error("implementation bug");

              e.__setDigit(n++, g);
            }

            for (; n < e.length; n++) {
              e.__setDigit(n, 0);
            }
          }
        }, {
          key: "__toStringBasePowerOfTwo",
          value: function value(e, t) {
            var _ = e.length,
                n = t - 1;
            n = (85 & n >>> 1) + (85 & n), n = (51 & n >>> 2) + (51 & n), n = (15 & n >>> 4) + (15 & n);

            var g = n,
                o = t - 1,
                a = e.__digit(_ - 1),
                s = u(a),
                r = 0 | (32 * _ - s + g - 1) / g;

            if (e.sign && r++, 268435456 < r) throw new Error("string too long");

            for (var d = Array(r), h = r - 1, b = 0, m = 0, c = 0; c < _ - 1; c++) {
              var v = e.__digit(c),
                  y = (b | v << m) & o;

              d[h--] = l.__kConversionChars[y];
              var f = g - m;

              for (b = v >>> f, m = 32 - f; m >= g;) {
                d[h--] = l.__kConversionChars[b & o], b >>>= g, m -= g;
              }
            }

            var D = (b | a << m) & o;

            for (d[h--] = l.__kConversionChars[D], b = a >>> g - m; 0 !== b;) {
              d[h--] = l.__kConversionChars[b & o], b >>>= g;
            }

            if (e.sign && (d[h--] = "-"), -1 !== h) throw new Error("implementation bug");
            return d.join("");
          }
        }, {
          key: "__toStringGeneric",
          value: function value(e, t, _) {
            var n = e.length;
            if (0 === n) return "";

            if (1 === n) {
              var g = e.__unsignedDigit(0).toString(t);

              return !1 === _ && e.sign && (g = "-" + g), g;
            }

            var o = 32 * n - u(e.__digit(n - 1)),
                a = l.__kMaxBitsPerChar[t],
                s = a - 1,
                r = o * l.__kBitsPerCharTableMultiplier;
            r += s - 1, r = 0 | r / s;

            var d,
                h,
                b = r + 1 >> 1,
                m = l.exponentiate(l.__oneDigit(t, !1), l.__oneDigit(b, !1)),
                c = m.__unsignedDigit(0);

            if (1 === m.length && 65535 >= c) {
              d = new l(e.length, !1), d.__initializeDigits();

              for (var v, y = 0, f = 2 * e.length - 1; 0 <= f; f--) {
                v = y << 16 | e.__halfDigit(f), d.__setHalfDigit(f, 0 | v / c), y = 0 | v % c;
              }

              h = y.toString(t);
            } else {
              var D = l.__absoluteDivLarge(e, m, !0, !0);

              d = D.quotient;

              var k = D.remainder.__trim();

              h = l.__toStringGeneric(k, t, !0);
            }

            d.__trim();

            for (var p = l.__toStringGeneric(d, t, !0); h.length < b;) {
              h = "0" + h;
            }

            return !1 === _ && e.sign && (p = "-" + p), p + h;
          }
        }, {
          key: "__unequalSign",
          value: function value(e) {
            return e ? -1 : 1;
          }
        }, {
          key: "__absoluteGreater",
          value: function value(e) {
            return e ? -1 : 1;
          }
        }, {
          key: "__absoluteLess",
          value: function value(e) {
            return e ? 1 : -1;
          }
        }, {
          key: "__compareToBigInt",
          value: function value(e, i) {
            var t = e.sign;
            if (t !== i.sign) return l.__unequalSign(t);

            var _ = l.__absoluteCompare(e, i);

            return 0 < _ ? l.__absoluteGreater(t) : 0 > _ ? l.__absoluteLess(t) : 0;
          }
        }, {
          key: "__compareToNumber",
          value: function value(e, i) {
            if (!0 | i) {
              var t = e.sign,
                  _ = 0 > i;

              if (t !== _) return l.__unequalSign(t);

              if (0 === e.length) {
                if (_) throw new Error("implementation bug");
                return 0 === i ? 0 : -1;
              }

              if (1 < e.length) return l.__absoluteGreater(t);

              var n = o(i),
                  g = e.__unsignedDigit(0);

              return g > n ? l.__absoluteGreater(t) : g < n ? l.__absoluteLess(t) : 0;
            }

            return l.__compareToDouble(e, i);
          }
        }, {
          key: "__compareToDouble",
          value: function value(e, i) {
            if (i !== i) return i;
            if (i === 1 / 0) return -1;
            if (i === -Infinity) return 1;
            var t = e.sign;
            if (t !== 0 > i) return l.__unequalSign(t);
            if (0 === i) throw new Error("implementation bug: should be handled elsewhere");
            if (0 === e.length) return -1;
            l.__kBitConversionDouble[0] = i;

            var _ = 2047 & l.__kBitConversionInts[1] >>> 20;

            if (2047 == _) throw new Error("implementation bug: handled elsewhere");
            var n = _ - 1023;
            if (0 > n) return l.__absoluteGreater(t);

            var g = e.length,
                o = e.__digit(g - 1),
                a = u(o),
                s = 32 * g - a,
                r = n + 1;

            if (s < r) return l.__absoluteLess(t);
            if (s > r) return l.__absoluteGreater(t);
            var d = 1048576 | 1048575 & l.__kBitConversionInts[1],
                h = l.__kBitConversionInts[0],
                b = 20,
                m = 31 - a;
            if (m !== (s - 1) % 31) throw new Error("implementation bug");
            var c,
                v = 0;

            if (m < b) {
              var y = b - m;
              v = y + 32, c = d >>> y, d = d << 32 - y | h >>> y, h <<= 32 - y;
            } else if (m === b) v = 32, c = d, d = h;else {
              var f = m - b;
              v = 32 - f, c = d << f | h >>> 32 - f, d = h << f;
            }

            if (o >>>= 0, c >>>= 0, o > c) return l.__absoluteGreater(t);
            if (o < c) return l.__absoluteLess(t);

            for (var D = g - 2; 0 <= D; D--) {
              0 < v ? (v -= 32, c = d >>> 0, d = h, h = 0) : c = 0;

              var k = e.__unsignedDigit(D);

              if (k > c) return l.__absoluteGreater(t);
              if (k < c) return l.__absoluteLess(t);
            }

            if (0 !== d || 0 !== h) {
              if (0 === v) throw new Error("implementation bug");
              return l.__absoluteLess(t);
            }

            return 0;
          }
        }, {
          key: "__equalToNumber",
          value: function value(e, i) {
            return i | 0 === i ? 0 === i ? 0 === e.length : 1 === e.length && e.sign === 0 > i && e.__unsignedDigit(0) === o(i) : 0 === l.__compareToDouble(e, i);
          }
        }, {
          key: "__comparisonResultToBool",
          value: function value(e, i) {
            switch (i) {
              case 0:
                return 0 > e;

              case 1:
                return 0 >= e;

              case 2:
                return 0 < e;

              case 3:
                return 0 <= e;
            }

            throw new Error("unreachable");
          }
        }, {
          key: "__compare",
          value: function value(e, i, t) {
            if (e = l.__toPrimitive(e), i = l.__toPrimitive(i), "string" == typeof e && "string" == typeof i) switch (t) {
              case 0:
                return e < i;

              case 1:
                return e <= i;

              case 2:
                return e > i;

              case 3:
                return e >= i;
            }
            if (l.__isBigInt(e) && "string" == typeof i) return i = l.__fromString(i), null !== i && l.__comparisonResultToBool(l.__compareToBigInt(e, i), t);
            if ("string" == typeof e && l.__isBigInt(i)) return e = l.__fromString(e), null !== e && l.__comparisonResultToBool(l.__compareToBigInt(e, i), t);

            if (e = l.__toNumeric(e), i = l.__toNumeric(i), l.__isBigInt(e)) {
              if (l.__isBigInt(i)) return l.__comparisonResultToBool(l.__compareToBigInt(e, i), t);
              if ("number" != typeof i) throw new Error("implementation bug");
              return l.__comparisonResultToBool(l.__compareToNumber(e, i), t);
            }

            if ("number" != typeof e) throw new Error("implementation bug");
            if (l.__isBigInt(i)) return l.__comparisonResultToBool(l.__compareToNumber(i, e), 2 ^ t);
            if ("number" != typeof i) throw new Error("implementation bug");
            return 0 === t ? e < i : 1 === t ? e <= i : 2 === t ? e > i : 3 === t ? e >= i : void 0;
          }
        }, {
          key: "__absoluteAdd",
          value: function value(e, t, _) {
            if (e.length < t.length) return l.__absoluteAdd(t, e, _);
            if (0 === e.length) return e;
            if (0 === t.length) return e.sign === _ ? e : l.unaryMinus(e);
            var n = e.length;
            (0 === e.__clzmsd() || t.length === e.length && 0 === t.__clzmsd()) && n++;

            for (var g = new l(n, _), o = 0, a = 0; a < t.length; a++) {
              var s = t.__digit(a),
                  u = e.__digit(a),
                  r = (65535 & u) + (65535 & s) + o,
                  d = (u >>> 16) + (s >>> 16) + (r >>> 16);

              o = d >>> 16, g.__setDigit(a, 65535 & r | d << 16);
            }

            for (; a < e.length; a++) {
              var h = e.__digit(a),
                  b = (65535 & h) + o,
                  m = (h >>> 16) + (b >>> 16);

              o = m >>> 16, g.__setDigit(a, 65535 & b | m << 16);
            }

            return a < g.length && g.__setDigit(a, o), g.__trim();
          }
        }, {
          key: "__absoluteSub",
          value: function value(e, t, _) {
            if (0 === e.length) return e;
            if (0 === t.length) return e.sign === _ ? e : l.unaryMinus(e);

            for (var n = new l(e.length, _), g = 0, o = 0; o < t.length; o++) {
              var a = e.__digit(o),
                  s = t.__digit(o),
                  u = (65535 & a) - (65535 & s) - g;

              g = 1 & u >>> 16;
              var r = (a >>> 16) - (s >>> 16) - g;
              g = 1 & r >>> 16, n.__setDigit(o, 65535 & u | r << 16);
            }

            for (; o < e.length; o++) {
              var d = e.__digit(o),
                  h = (65535 & d) - g;

              g = 1 & h >>> 16;
              var b = (d >>> 16) - g;
              g = 1 & b >>> 16, n.__setDigit(o, 65535 & h | b << 16);
            }

            return n.__trim();
          }
        }, {
          key: "__absoluteAddOne",
          value: function value(e, t) {
            var _ = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null,
                n = e.length;

            null === _ ? _ = new l(n, t) : _.sign = t;

            for (var g = !0, o = 0; o < n; o++) {
              var a = e.__digit(o),
                  s = -1 === a;

              g && (a = 0 | a + 1), g = s, _.__setDigit(o, a);
            }

            return g && _.__setDigitGrow(n, 1), _;
          }
        }, {
          key: "__absoluteSubOne",
          value: function value(e, t) {
            var _ = e.length;
            t = t || _;

            for (var n = new l(t, !1), g = !0, o = 0; o < _; o++) {
              var a = e.__digit(o),
                  s = 0 === a;

              g && (a = 0 | a - 1), g = s, n.__setDigit(o, a);
            }

            for (var u = _; u < t; u++) {
              n.__setDigit(u, 0);
            }

            return n;
          }
        }, {
          key: "__absoluteAnd",
          value: function value(e, t) {
            var _ = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null,
                n = e.length,
                g = t.length,
                o = g;

            if (n < g) {
              o = n;
              var a = e,
                  s = n;
              e = t, n = g, t = a, g = s;
            }

            var u = o;
            null === _ ? _ = new l(u, !1) : u = _.length;

            for (var r = 0; r < o; r++) {
              _.__setDigit(r, e.__digit(r) & t.__digit(r));
            }

            for (; r < u; r++) {
              _.__setDigit(r, 0);
            }

            return _;
          }
        }, {
          key: "__absoluteAndNot",
          value: function value(e, t) {
            var _ = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null,
                n = e.length,
                g = t.length,
                o = g;

            n < g && (o = n);
            var a = n;
            null === _ ? _ = new l(a, !1) : a = _.length;

            for (var s = 0; s < o; s++) {
              _.__setDigit(s, e.__digit(s) & ~t.__digit(s));
            }

            for (; s < n; s++) {
              _.__setDigit(s, e.__digit(s));
            }

            for (; s < a; s++) {
              _.__setDigit(s, 0);
            }

            return _;
          }
        }, {
          key: "__absoluteOr",
          value: function value(e, t) {
            var _ = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null,
                n = e.length,
                g = t.length,
                o = g;

            if (n < g) {
              o = n;
              var a = e,
                  s = n;
              e = t, n = g, t = a, g = s;
            }

            var u = n;
            null === _ ? _ = new l(u, !1) : u = _.length;

            for (var r = 0; r < o; r++) {
              _.__setDigit(r, e.__digit(r) | t.__digit(r));
            }

            for (; r < n; r++) {
              _.__setDigit(r, e.__digit(r));
            }

            for (; r < u; r++) {
              _.__setDigit(r, 0);
            }

            return _;
          }
        }, {
          key: "__absoluteXor",
          value: function value(e, t) {
            var _ = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null,
                n = e.length,
                g = t.length,
                o = g;

            if (n < g) {
              o = n;
              var a = e,
                  s = n;
              e = t, n = g, t = a, g = s;
            }

            var u = n;
            null === _ ? _ = new l(u, !1) : u = _.length;

            for (var r = 0; r < o; r++) {
              _.__setDigit(r, e.__digit(r) ^ t.__digit(r));
            }

            for (; r < n; r++) {
              _.__setDigit(r, e.__digit(r));
            }

            for (; r < u; r++) {
              _.__setDigit(r, 0);
            }

            return _;
          }
        }, {
          key: "__absoluteCompare",
          value: function value(e, t) {
            var _ = e.length - t.length;

            if (0 != _) return _;

            for (var n = e.length - 1; 0 <= n && e.__digit(n) === t.__digit(n);) {
              n--;
            }

            return 0 > n ? 0 : e.__unsignedDigit(n) > t.__unsignedDigit(n) ? 1 : -1;
          }
        }, {
          key: "__multiplyAccumulate",
          value: function value(e, t, _, n) {
            if (0 !== t) {
              for (var g = 65535 & t, l = t >>> 16, o = 0, a = 0, u = 0, r = 0; r < e.length; r++, n++) {
                var d = _.__digit(n),
                    h = 65535 & d,
                    b = d >>> 16,
                    m = e.__digit(r),
                    c = 65535 & m,
                    v = m >>> 16,
                    y = s(c, g),
                    f = s(c, l),
                    D = s(v, g),
                    k = s(v, l);

                h += a + (65535 & y), b += u + o + (h >>> 16) + (y >>> 16) + (65535 & f) + (65535 & D), o = b >>> 16, a = (f >>> 16) + (D >>> 16) + (65535 & k) + o, o = a >>> 16, a &= 65535, u = k >>> 16, d = 65535 & h | b << 16, _.__setDigit(n, d);
              }

              for (; 0 !== o || 0 !== a || 0 !== u; n++) {
                var p = _.__digit(n),
                    B = (65535 & p) + a,
                    S = (p >>> 16) + (B >>> 16) + u + o;

                a = 0, u = 0, o = S >>> 16, p = 65535 & B | S << 16, _.__setDigit(n, p);
              }
            }
          }
        }, {
          key: "__internalMultiplyAdd",
          value: function value(e, t, _, g, l) {
            for (var o = _, a = 0, u = 0; u < g; u++) {
              var r = e.__digit(u),
                  d = s(65535 & r, t),
                  h = (65535 & d) + a + o;

              o = h >>> 16;
              var b = s(r >>> 16, t),
                  m = (65535 & b) + (d >>> 16) + o;
              o = m >>> 16, a = b >>> 16, l.__setDigit(u, m << 16 | 65535 & h);
            }

            if (l.length > g) for (l.__setDigit(g++, o + a); g < l.length;) {
              l.__setDigit(g++, 0);
            } else if (0 !== o + a) throw new Error("implementation bug");
          }
        }, {
          key: "__absoluteDivSmall",
          value: function value(e, t, _) {
            null === _ && (_ = new l(e.length, !1));

            for (var n = 0, g = 2 * e.length - 1; 0 <= g; g -= 2) {
              var o = (n << 16 | e.__halfDigit(g)) >>> 0,
                  a = 0 | o / t;
              n = 0 | o % t, o = (n << 16 | e.__halfDigit(g - 1)) >>> 0;
              var s = 0 | o / t;
              n = 0 | o % t, _.__setDigit(g >>> 1, a << 16 | s);
            }

            return _;
          }
        }, {
          key: "__absoluteModSmall",
          value: function value(e, t) {
            for (var _, n = 0, g = 2 * e.length - 1; 0 <= g; g--) {
              _ = (n << 16 | e.__halfDigit(g)) >>> 0, n = 0 | _ % t;
            }

            return n;
          }
        }, {
          key: "__absoluteDivLarge",
          value: function value(e, i, t, _) {
            var g = i.__halfDigitLength(),
                n = i.length,
                o = e.__halfDigitLength() - g,
                a = null;

            t && (a = new l(o + 2 >>> 1, !1), a.__initializeDigits());
            var r = new l(g + 2 >>> 1, !1);

            r.__initializeDigits();

            var d = l.__clz16(i.__halfDigit(g - 1));

            0 < d && (i = l.__specialLeftShift(i, d, 0));

            for (var h = l.__specialLeftShift(e, d, 1), u = i.__halfDigit(g - 1), b = 0, m = o; 0 <= m; m--) {
              var v = 65535,
                  y = h.__halfDigit(m + g);

              if (y !== u) {
                var f = (y << 16 | h.__halfDigit(m + g - 1)) >>> 0;
                v = 0 | f / u;

                for (var D = 0 | f % u, k = i.__halfDigit(g - 2), p = h.__halfDigit(m + g - 2); s(v, k) >>> 0 > (D << 16 | p) >>> 0 && (v--, D += u, !(65535 < D));) {
                }
              }

              l.__internalMultiplyAdd(i, v, 0, n, r);

              var B = h.__inplaceSub(r, m, g + 1);

              0 !== B && (B = h.__inplaceAdd(i, m, g), h.__setHalfDigit(m + g, h.__halfDigit(m + g) + B), v--), t && (1 & m ? b = v << 16 : a.__setDigit(m >>> 1, b | v));
            }

            return _ ? (h.__inplaceRightShift(d), t ? {
              quotient: a,
              remainder: h
            } : h) : t ? a : void 0;
          }
        }, {
          key: "__clz16",
          value: function value(e) {
            return u(e) - 16;
          }
        }, {
          key: "__specialLeftShift",
          value: function value(e, t, _) {
            var g = e.length,
                n = new l(g + _, !1);

            if (0 === t) {
              for (var o = 0; o < g; o++) {
                n.__setDigit(o, e.__digit(o));
              }

              return 0 < _ && n.__setDigit(g, 0), n;
            }

            for (var a, s = 0, u = 0; u < g; u++) {
              a = e.__digit(u), n.__setDigit(u, a << t | s), s = a >>> 32 - t;
            }

            return 0 < _ && n.__setDigit(g, s), n;
          }
        }, {
          key: "__leftShiftByAbsolute",
          value: function value(e, t) {
            var _ = l.__toShiftAmount(t);

            if (0 > _) throw new RangeError("BigInt too big");
            var n = _ >>> 5,
                g = 31 & _,
                o = e.length,
                a = 0 !== g && 0 != e.__digit(o - 1) >>> 32 - g,
                s = o + n + (a ? 1 : 0),
                u = new l(s, e.sign);

            if (0 === g) {
              for (var r = 0; r < n; r++) {
                u.__setDigit(r, 0);
              }

              for (; r < s; r++) {
                u.__setDigit(r, e.__digit(r - n));
              }
            } else {
              for (var h = 0, b = 0; b < n; b++) {
                u.__setDigit(b, 0);
              }

              for (var m, c = 0; c < o; c++) {
                m = e.__digit(c), u.__setDigit(c + n, m << g | h), h = m >>> 32 - g;
              }

              if (a) u.__setDigit(o + n, h);else if (0 !== h) throw new Error("implementation bug");
            }

            return u.__trim();
          }
        }, {
          key: "__rightShiftByAbsolute",
          value: function value(e, t) {
            var _ = e.length,
                n = e.sign,
                g = l.__toShiftAmount(t);

            if (0 > g) return l.__rightShiftByMaximum(n);
            var o = g >>> 5,
                a = 31 & g,
                s = _ - o;
            if (0 >= s) return l.__rightShiftByMaximum(n);
            var u = !1;

            if (n) {
              if (0 != (e.__digit(o) & (1 << a) - 1)) u = !0;else for (var r = 0; r < o; r++) {
                if (0 !== e.__digit(r)) {
                  u = !0;
                  break;
                }
              }
            }

            if (u && 0 === a) {
              var h = e.__digit(_ - 1);

              0 == ~h && s++;
            }

            var b = new l(s, n);
            if (0 === a) for (var m = o; m < _; m++) {
              b.__setDigit(m - o, e.__digit(m));
            } else {
              for (var c, v = e.__digit(o) >>> a, y = _ - o - 1, f = 0; f < y; f++) {
                c = e.__digit(f + o + 1), b.__setDigit(f, c << 32 - a | v), v = c >>> a;
              }

              b.__setDigit(y, v);
            }
            return u && (b = l.__absoluteAddOne(b, !0, b)), b.__trim();
          }
        }, {
          key: "__rightShiftByMaximum",
          value: function value(e) {
            return e ? l.__oneDigit(1, !0) : l.__zero();
          }
        }, {
          key: "__toShiftAmount",
          value: function value(e) {
            if (1 < e.length) return -1;

            var i = e.__unsignedDigit(0);

            return i > l.__kMaxLengthBits ? -1 : i;
          }
        }, {
          key: "__toPrimitive",
          value: function value(i) {
            var t = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : "default";
            if ("object" !== e(i)) return i;
            if (i.constructor === l) return i;
            var _ = i[Symbol.toPrimitive];

            if (_) {
              var n = _(t);

              if ("object" !== e(n)) return n;
              throw new TypeError("Cannot convert object to primitive value");
            }

            var g = i.valueOf;

            if (g) {
              var o = g.call(i);
              if ("object" !== e(o)) return o;
            }

            var a = i.toString;

            if (a) {
              var s = a.call(i);
              if ("object" !== e(s)) return s;
            }

            throw new TypeError("Cannot convert object to primitive value");
          }
        }, {
          key: "__toNumeric",
          value: function value(e) {
            return l.__isBigInt(e) ? e : +e;
          }
        }, {
          key: "__isBigInt",
          value: function value(i) {
            return "object" === e(i) && i.constructor === l;
          }
        }, {
          key: "__digitPow",
          value: function value(e, i) {
            for (var t = 1; 0 < i;) {
              1 & i && (t *= e), i >>>= 1, e *= e;
            }

            return t;
          }
        }]), l;
      }(u(Array));

      return h.__kMaxLength = 33554432, h.__kMaxLengthBits = h.__kMaxLength << 5, h.__kMaxBitsPerChar = [0, 0, 32, 51, 64, 75, 83, 90, 96, 102, 107, 111, 115, 119, 122, 126, 128, 131, 134, 136, 139, 141, 143, 145, 147, 149, 151, 153, 154, 156, 158, 159, 160, 162, 163, 165, 166], h.__kBitsPerCharTableShift = 5, h.__kBitsPerCharTableMultiplier = 1 << h.__kBitsPerCharTableShift, h.__kConversionChars = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"], h.__kBitConversionBuffer = new ArrayBuffer(8), h.__kBitConversionDouble = new Float64Array(h.__kBitConversionBuffer), h.__kBitConversionInts = new Int32Array(h.__kBitConversionBuffer), h;
    });
  });

  /**
   * This is a Typescript port of the base-x package
   */

  function base(ALPHABET) {
    if (ALPHABET.length >= 255) throw new TypeError('Alphabet too long');
    var BASE_MAP = new Uint8Array(256);
    BASE_MAP.fill(255);

    for (var i = 0; i < ALPHABET.length; i++) {
      var x = ALPHABET.charAt(i);
      var xc = x.charCodeAt(0);
      if (BASE_MAP[xc] !== 255) throw new TypeError(x + ' is ambiguous');
      BASE_MAP[xc] = i;
    }

    var BASE = ALPHABET.length;
    var LEADER = ALPHABET.charAt(0);
    var FACTOR = Math.log(BASE) / Math.log(256); // log(BASE) / log(256), rounded up

    var iFACTOR = Math.log(256) / Math.log(BASE); // log(256) / log(BASE), rounded up

    function encode(source) {
      if (!Buffer$1.isBuffer(source)) throw new TypeError('Expected Buffer');
      if (source.length === 0) return ''; // Skip & count leading zeroes.

      var zeroes = 0;
      var length = 0;
      var pbegin = 0;
      var pend = source.length;

      while (pbegin !== pend && source[pbegin] === 0) {
        pbegin++;
        zeroes++;
      } // Allocate enough space in big-endian base58 representation.


      var size = (pend - pbegin) * iFACTOR + 1 >>> 0;
      var b58 = new Uint8Array(size); // Process the bytes.

      while (pbegin !== pend) {
        var carry = source[pbegin]; // Apply "b58 = b58 * 256 + ch".

        var _i = 0;

        for (var _it = size - 1; (carry !== 0 || _i < length) && _it !== -1; _it--, _i++) {
          carry += 256 * b58[_it] >>> 0;
          b58[_it] = carry % BASE >>> 0;
          carry = carry / BASE >>> 0;
        }

        if (carry !== 0) throw new Error('Non-zero carry');
        length = _i;
        pbegin++;
      } // Skip leading zeroes in base58 result.


      var it = size - length;

      while (it !== size && b58[it] === 0) {
        it++;
      } // Translate the result into a string.


      var str = LEADER.repeat(zeroes);

      for (; it < size; ++it) {
        str += ALPHABET.charAt(b58[it]);
      }

      return str;
    }

    function decodeUnsafe(source) {
      if (typeof source !== 'string') throw new TypeError('Expected String');
      if (source.length === 0) return Buffer$1.alloc(0);
      var psz = 0; // Skip leading spaces.

      if (source[psz] === ' ') return; // Skip and count leading '1's.

      var zeroes = 0;
      var length = 0;

      while (source[psz] === LEADER) {
        zeroes++;
        psz++;
      } // Allocate enough space in big-endian base256 representation.


      var size = (source.length - psz) * FACTOR + 1 >>> 0; // log(58) / log(256), rounded up.

      var b256 = new Uint8Array(size); // Process the characters.

      while (source[psz]) {
        // Decode character
        var carry = BASE_MAP[source.charCodeAt(psz)]; // Invalid character

        if (carry === 255) return;
        var _i2 = 0;

        for (var _it2 = size - 1; (carry !== 0 || _i2 < length) && _it2 !== -1; _it2--, _i2++) {
          carry += BASE * b256[_it2] >>> 0;
          b256[_it2] = carry % 256 >>> 0;
          carry = carry / 256 >>> 0;
        }

        if (carry !== 0) throw new Error('Non-zero carry');
        length = _i2;
        psz++;
      } // Skip trailing spaces.


      if (source[psz] === ' ') return; // Skip leading zeroes in b256.

      var it = size - length;

      while (it !== size && b256[it] === 0) {
        it++;
      }

      var vch = Buffer$1.allocUnsafe(zeroes + (size - it));
      vch.fill(0x00, 0, zeroes);
      var j = zeroes;

      while (it !== size) {
        vch[j++] = b256[it++];
      }

      return vch;
    }

    function decode(source) {
      var buffer = decodeUnsafe(source);
      if (buffer) return buffer;
      throw new Error('Non-base' + BASE + ' character');
    }

    return {
      encode: encode,
      decodeUnsafe: decodeUnsafe,
      decode: decode
    };
  }

  var ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';
  var base58 = base(ALPHABET);

  function encodeBuffer(val) {
    var enc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'base58';

    if (enc === 'base58') {
      return base58.encode(Buffer$1.from(val));
    }

    return Buffer$1.from(val).toString(enc);
  }
  /**
   * @param bytes anything to a hex string that has an iterable that returns numbers and a reduce method, e.g. number[], Uint8Array, Buffer
   * @param format add the string '0x' in front of the output
   */


  var toHexString = function toHexString(bytes) {
    var format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    var result = bytes.reduce(function (str, _byte) {
      return str + _byte.toString(16).padStart(2, '0');
    }, '');
    if (!format) return result;
    if (result === '00' || result === '') return '0x0';
    return '0x' + result;
  };

  var fromHexString = function fromHexString(hexString) {
    if (hexString.length === 0) return Uint8Array.from([]);
    if (hexString.length % 2 === 1) hexString = '0' + hexString;
    var match = hexString.match(/.{1,2}/g);
    if (!match) throw new Error('cannot parse string as hex');
    return new Uint8Array(match.map(function (_byte2) {
      return parseInt(_byte2, 16);
    }));
  };
  /**
   * Convert number to Uint8Array
   * @param d 
   * @param length 
   */


  var fromNumber = function fromNumber(d) {
    var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 8;

    if (d >= Math.pow(2, length * 8)) {
      throw new Error('Number exeeds range');
    }

    var arr = new Uint8Array(length);

    for (var i = 0, j = 1; i < 8; i++, j *= 0x100) {
      arr[i] = d / j & 0xff;
    }

    return arr;
  };
  /**
   * This is a Typescript port of the bs58check package
   */


  function bs58checkBase(checksumFn) {
    // Encode a buffer as a base58-check encoded string
    function encode(payload) {
      var checksum = checksumFn(payload);
      return base58.encode(Buffer$1.concat([payload, checksum], payload.length + 4));
    }

    function decodeRaw(buffer) {
      var payload = buffer.slice(0, -4);
      var checksum = buffer.slice(-4);
      var newChecksum = checksumFn(payload);
      if (checksum[0] ^ newChecksum[0] | checksum[1] ^ newChecksum[1] | checksum[2] ^ newChecksum[2] | checksum[3] ^ newChecksum[3]) return;
      return payload;
    } // Decode a base58-check encoded string to a buffer, no result if checksum is wrong


    function decodeUnsafe(string) {
      var buffer = base58.decodeUnsafe(string);
      if (!buffer) return;
      return decodeRaw(buffer);
    }

    function decode(string) {
      var buffer = base58.decode(string);
      var payload = decodeRaw(buffer);
      if (!payload) throw new Error('Invalid checksum');
      return payload;
    }

    return {
      encode: encode,
      decode: decode,
      decodeUnsafe: decodeUnsafe
    };
  } // SHA256(SHA256(buffer))


  function sha256x2(buffer) {
    var tmp = browser('sha256').update(buffer).digest();
    return browser('sha256').update(tmp).digest();
  }

  var bs58check = bs58checkBase(sha256x2);

  function _typeof$1(obj) {
    if (typeof Symbol === "function" && _typeof(Symbol.iterator) === "symbol") {
      _typeof$1 = function _typeof$1(obj) {
        return _typeof(obj);
      };
    } else {
      _typeof$1 = function _typeof$1(obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof(obj);
      };
    }

    return _typeof$1(obj);
  }

  function _classCallCheck$1(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties$1(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass$1(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties$1(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties$1(Constructor, staticProps);
    return Constructor;
  }

  function _defineProperty$1(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function _slicedToArray$1(arr, i) {
    return _arrayWithHoles$1(arr) || _iterableToArrayLimit$1(arr, i) || _nonIterableRest$1();
  }

  function _toConsumableArray$1(arr) {
    return _arrayWithoutHoles$1(arr) || _iterableToArray$1(arr) || _nonIterableSpread$1();
  }

  function _arrayWithoutHoles$1(arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
        arr2[i] = arr[i];
      }

      return arr2;
    }
  }

  function _arrayWithHoles$1(arr) {
    if (Array.isArray(arr)) return arr;
  }

  function _iterableToArray$1(iter) {
    if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
  }

  function _iterableToArrayLimit$1(arr, i) {
    if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) {
      return;
    }

    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  function _nonIterableSpread$1() {
    throw new TypeError("Invalid attempt to spread non-iterable instance");
  }

  function _nonIterableRest$1() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance");
  }
  /**
   * Returns the next interval to use for exponential backoff.
   * This curve yields every value 4 times before doubling in the next step.
   * The function is :code:`multiplier * 2**Math.floor(n/4)`.
   * By default (multiplier = 1s), the intervals reach ca. 1 minute (total time elapsed ca. 4 minutes) after step 24,
   * so it is advised to declare a timeout after a certain number of steps.
   * @param n step on the interval curve
   * @param multiplier multiplier, default 1000 (1s)
   */


  function backoffIntervalStep(n) {
    var multiplier = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1000;
    return multiplier * Math.pow(2, Math.floor(n / 4));
  }
  /**
   * A promisified version of setTimeout
   * @param ms 
   */


  function waitFor(ms) {
    return new Promise(function (resolve) {
      setTimeout(resolve, ms);
    });
  }

  var ADDRESS_PREFIXES = {
    ACCOUNT: 0x42,
    CONTRACT: 0xC0,
    PRIVATE_KEY: 0xAA
  };
  var ACCOUNT_NAME_LENGTH = 12;
  var SYSTEM_ADDRESSES = ['aergo.system', 'aergo.name', 'aergo.enterprise', 'aergo.vault'];
  var UNITS = {
    NATIVE_TOKEN: {
      baseLabel: 'Aergo',
      baseDigits: 18,
      subUnits: [{
        e: 0,
        label: 'aer'
      }, {
        e: 18,
        label: 'aergo'
      }],
      unitSize: {
        'aergo': 18,
        'gaer': 9,
        'aer': 0
      }
    }
  };
  var BIP44_ID = 441;
  var WALLET_HDPATH = "m/44'/".concat(BIP44_ID, "'/0'/0/");
  var constants = {
    ADDRESS_PREFIXES: ADDRESS_PREFIXES,
    UNITS: UNITS,
    ACCOUNT_NAME_LENGTH: ACCOUNT_NAME_LENGTH,
    BIP44_ID: BIP44_ID,
    WALLET_HDPATH: WALLET_HDPATH,
    SYSTEM_ADDRESSES: SYSTEM_ADDRESSES
  };
  var DEFAULT_USER_UNIT = 'aergo';
  var DEFAULT_NETWORK_UNIT = 'aer';

  function getUnitPrecision(unit) {
    var units = UNITS.NATIVE_TOKEN.unitSize;

    function isValidUnit(unit) {
      return unit in units;
    }

    if (!isValidUnit(unit)) {
      throw new TypeError("unrecognized unit: ".concat(unit));
    }

    return units[unit];
  }
  /**
   * A wrapper around amounts with units.
   * Over the network, amounts are sent as raw bytes.
   * In the client, they are exposed as BigInts, but also compatible with plain strings or numbers (if smaller than 2^31-1)
   * Uses 'aergo' as default unit when passing strings or numbers.
   * Uses 'aer' as default unit when passing BigInts, buffers or byte arrays.
   * Whenever you pass amounts to other functions, they will try to coerce them to BigInt using this class.
   */


  var Amount =
  /*#__PURE__*/
  function () {
    _createClass$1(Amount, null, [{
      key: "_valueFromString",
      // value in base unit
      // unit for displaying
      value: function _valueFromString(value) {
        var unit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

        if (unit === '') {
          unit = DEFAULT_USER_UNIT;
        }

        var prec = getUnitPrecision(unit);

        if (prec > 0) {
          value = Amount.moveDecimalPoint(value, prec);
        }

        return jsbiUmd.BigInt(value);
      }
    }]);

    function Amount(value) {
      var unit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
      var newUnit = arguments.length > 2 ? arguments[2] : undefined;

      _classCallCheck$1(this, Amount);

      _defineProperty$1(this, "value", void 0);

      _defineProperty$1(this, "unit", void 0);

      if (value instanceof Amount) {
        return value;
      }

      if (typeof value === 'string') {
        var _value$split = value.split(' ', 2),
            _value$split2 = _slicedToArray$1(_value$split, 2),
            amount = _value$split2[0],
            _unit = _value$split2[1];

        unit = unit || _unit;
        this.value = Amount._valueFromString(amount, unit);
      } else if (typeof value === 'number') {
        this.value = Amount._valueFromString('' + value, unit);
      } else if (value instanceof jsbiUmd) {
        if (typeof unit === 'undefined' || unit === '') {
          unit = DEFAULT_NETWORK_UNIT;
        }

        this.value = jsbiUmd.BigInt(value);
      } else if (value instanceof Buffer$1 || value instanceof Uint8Array) {
        if (typeof unit === 'undefined' || unit === '') {
          unit = DEFAULT_NETWORK_UNIT;
        }

        this.value = jsbiUmd.BigInt(toHexString(value, true));
      } else {
        throw new Error("Instantiate Amount with JSBI|number|string|Buffer|Uint8Array, not ".concat(value, " (").concat(_typeof$1(value), ")"));
      }

      this.unit = unit;

      if (typeof this.unit === 'undefined' || this.unit === '') {
        this.unit = DEFAULT_USER_UNIT;
      } // Set new unit for displaying


      if (typeof newUnit !== 'undefined') {
        this.unit = newUnit;
      } // Freeze value. Otherwise some libraries mess this up since it is actually an Array subclass with a custom propery


      this.value = Object.freeze(this.value);
    }
    /**
     * Returns value as byte buffer
     */


    _createClass$1(Amount, [{
      key: "asBytes",
      value: function asBytes() {
        return Buffer$1.from(fromHexString(this.value.toString(16)));
      }
      /**
       * JSON.stringifes to string with unit aer, which can be easily deserialized by new Amount(x)
       */

    }, {
      key: "toJSON",
      value: function toJSON() {
        return this.toUnit('aer').toString();
      }
      /**
       * Returns formatted string including unit
       */

    }, {
      key: "toString",
      value: function toString() {
        if (this.unit) {
          return "".concat(this.formatNumber(), " ").concat(this.unit);
        }

        return "".concat(this.formatNumber());
      }
      /**
       * Move decimal point in string by digits, positive to the right, negative to the left.
       * This extends the string if necessary.
       * Example: ("0.0001", 4 => "1"), ("0.0001", -4 => "0.00000001")
       * @param str 
       * @param digits 
       */

    }, {
      key: "formatNumber",
      value: function formatNumber() {
        var unit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
        if (unit === '') unit = this.unit;
        if (unit === '') return this.value.toString();
        var prec = getUnitPrecision(unit);
        return Amount.moveDecimalPoint(this.value.toString(), -prec);
      }
      /**
       * Convert to another unit
       * @param unit string (aer, gaer, aergo)
       */

    }, {
      key: "toUnit",
      value: function toUnit(unit) {
        return new Amount(this.value, '', unit);
      }
      /**
       * Convert arg into JSBI value
       * Can optionally provide a defaultUnit that is used if arg does not contain a unit.
       */

    }, {
      key: "compare",

      /**
       * Compare this amount with other amount.
       * If otherAmount has no unit, assumes unit of this amount.
       * this >  other -> +1
       * this  < other -> -1
       * this == other -> 0
       * @param otherAmount 
       */
      value: function compare(otherAmount) {
        var a = this.value;
        var b = Amount.toJSBI(otherAmount, this.unit);
        return jsbiUmd.equal(a, b) ? 0 : jsbiUmd.lessThan(a, b) ? -1 : 1;
      }
      /**
       * Return true if otherAmount is equal to this amount.
       * @param otherAmount 
       */

    }, {
      key: "equal",
      value: function equal(otherAmount) {
        return this.compare(otherAmount) === 0;
      }
      /**
       * Add another amount to amount.
       * If otherAmount has no unit, assumes unit of this amount.
       * 10 aergo + 10 = 20 aergo
       * 10 aer + 10 = 20 aer
       * 10 aergo + 10 aer = 10.00000000000000001 aergo
       * @param otherAmount 
       */

    }, {
      key: "add",
      value: function add(otherAmount) {
        var sum = jsbiUmd.add(this.value, Amount.toJSBI(otherAmount, this.unit));
        return new Amount(sum, this.unit);
      }
      /**
       * Subtract another amount from amount.
       * If otherAmount has no unit, assumes unit of this amount.
       * 10 aergo - 5 = 5 aergo
       * 10 aer - 5 = 5 aer
       * 1 aer - 1 aergo = -999999999999999999 aer
       * @param otherAmount 
       */

    }, {
      key: "sub",
      value: function sub(otherAmount) {
        var sum = jsbiUmd.subtract(this.value, Amount.toJSBI(otherAmount, this.unit));
        return new Amount(sum, this.unit);
      }
      /**
       * Divide amount by another amount.
       * Warning: double check your units. The division is based on the aer value, so
       * if your otherAmount has a unit, it will be converted to aer.
       * This function tries to do the right thing in regards to dividing units:
       * 10 aergo / 10 = 1 aergo  (keep unit)
       * 10 aergo / 10 aergo = 1  (unit-less)
       * 1 aer / 2 aer = 0  (truncation of sub 1 aer amount)
       * @param otherAmount 
       */

    }, {
      key: "div",
      value: function div(otherAmount) {
        var newUnit;
        var sum = jsbiUmd.divide(this.value, Amount.toJSBI(otherAmount, 'aer')); // if both amounts had units, the result should be unit-less

        var otherHasUnit = otherAmount instanceof Amount && Boolean(otherAmount.unit);

        if (!otherHasUnit && typeof otherAmount === 'string') {
          var _$split = "".concat(otherAmount).split(' ', 2),
              _$split2 = _slicedToArray$1(_$split, 2),
              _unit = _$split2[1];

          otherHasUnit = Boolean(_unit);
        }

        if (otherHasUnit) {
          newUnit = '';
        }

        return new Amount(sum, this.unit, newUnit);
      }
      /**
       * Multiply amount by another amount.
       * Warning: double check your units. The multiplication is based on the aer value, so
       * if your otherAmount has a unit, it will be converted to aer.
       * However, while the value is correct, there's no way to display unit^2.
       * 10 aergo * 10 aergo = 10 * 10^18 aer * 10 * 10^18 aer = 100 * 10^36 aer = 100 * 10^18 aergo
       * 10 aergo * 10 = 10 * 10^18 aer * 10 = 100 * 10^18 aer = 100 aergo
       * @param otherAmount 
       */

    }, {
      key: "mul",
      value: function mul(otherAmount) {
        var sum = jsbiUmd.multiply(this.value, Amount.toJSBI(otherAmount, 'aer'));
        return new Amount(sum, this.unit);
      }
    }], [{
      key: "moveDecimalPoint",
      value: function moveDecimalPoint(str, digits) {
        if (digits === 0 || str === '0') return str;

        if (str.indexOf('.') === -1) {
          str = str + '.';
        }

        var idx = str.indexOf('.'); // Extend string to have enough space to move decimal point

        if (digits > str.length - idx) {
          str = str.padEnd(digits + idx + 1, '0');
        }

        if (digits < -idx) {
          str = str.padStart(str.length - idx - digits, '0');
        } // remove decimal point and reinsert at new location


        idx = str.indexOf('.');
        str = str.replace('.', '');
        str = str.substr(0, idx + digits) + '.' + str.substr(idx + digits); // remove trailing 0 and .

        str = str.replace(/\.?0*$/, ''); // remove leading 0

        str = str.replace(/^0+/, ''); // add leading 0 before .

        str = str.replace(/^\./, '0.');
        return str;
      }
    }, {
      key: "toJSBI",
      value: function toJSBI(arg) {
        var defaultUnit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

        if (!(arg instanceof Amount)) {
          var _$split3 = "".concat(arg).split(' ', 2),
              _$split4 = _slicedToArray$1(_$split3, 2),
              amount = _$split4[0],
              _unit = _$split4[1];

          var unit = _unit || defaultUnit;
          arg = new Amount(amount, unit);
        }

        return jsbiUmd.BigInt(arg.value);
      }
    }]);

    return Amount;
  }();

  var systemAddresses = _toConsumableArray$1(SYSTEM_ADDRESSES);
  /**
   * A wrapper around addresses. Internally addresses are stored and sent as raw bytes,
   * but client-side they are displayed as base58-check encoded strings.
   * The encoding requires some computation, so you should only convert address objects to strings when needed.
   */


  var Address =
  /*#__PURE__*/
  function () {
    function Address(address) {
      _classCallCheck$1(this, Address);

      _defineProperty$1(this, "value", void 0);

      _defineProperty$1(this, "encoded", void 0);

      _defineProperty$1(this, "isName", void 0);

      this.isName = false;

      if (address instanceof Address) {
        // Just copy buffer
        this.value = Buffer$1.from(address.value);
      } else if (typeof address === 'string') {
        // Parse string
        if (address.length <= ACCOUNT_NAME_LENGTH || Address.isSystemName(address)) {
          this.value = Buffer$1.from(address);
          this.isName = true;
        } else {
          try {
            this.value = Address.decode(address);
          } catch (e) {
            throw new Error("Address \"".concat(address, "\" could not be parsed as a base58-check encoded string and is not a valid name. ").concat(e));
          }
        }

        this.encoded = address;
      } else if (address instanceof Buffer$1) {
        this.value = address;
      } else if (address instanceof Uint8Array) {
        // Treat array-like as buffer
        this.value = Buffer$1.from(address);
      } else {
        throw new Error("Instantiate Address with raw bytes, a string in base58-check encoding, or a valid name, not ".concat(address));
      } // Check for name encoded as bytes


      if (!this.isName) {
        var arrValue = Array.from(this.value); // Remove trailing 0s

        while (arrValue[arrValue.length - 1] === 0) {
          arrValue.pop();
        }

        var buf = Buffer$1.from(arrValue);

        if (buf.length <= ACCOUNT_NAME_LENGTH || Address.isSystemName(buf.toString())) {
          this.isName = true;
          this.value = buf;
        }
      }
    }

    _createClass$1(Address, [{
      key: "asBytes",
      value: function asBytes() {
        return new Uint8Array(this.value);
      }
    }, {
      key: "toJSON",
      value: function toJSON() {
        return this.toString();
      }
    }, {
      key: "toString",
      value: function toString() {
        if (typeof this.encoded !== 'undefined' && this.encoded !== null) {
          return this.encoded;
        }

        if (this.isName) {
          this.encoded = Buffer$1.from(this.value).toString();
        } else {
          this.encoded = Address.encode(this.value);
        }

        return this.encoded;
      }
      /**
       * Decode bs58check string into bytes
       */

    }, {
      key: "equal",
      value: function equal(_otherAddress) {
        var otherAddress = _otherAddress instanceof Address ? _otherAddress : new Address(_otherAddress);
        return Address.valueEqual(this.value, otherAddress.value);
      }
      /**
       * Returns true if the address is empty, i.e. '' or empty buffer
       */

    }, {
      key: "isEmpty",
      value: function isEmpty() {
        return this.value.length === 0;
      }
    }, {
      key: "isSystemAddress",
      value: function isSystemAddress() {
        return this.isName && Address.isSystemName(this.toString());
      }
    }, {
      key: "bytes",
      get: function get() {
        return this.asBytes();
      }
    }, {
      key: "length",
      get: function get() {
        return this.value.length;
      }
    }], [{
      key: "decode",
      value: function decode(bs58string) {
        var decoded = bs58check.decode(bs58string);
        if (decoded[0] !== ADDRESS_PREFIXES.ACCOUNT) throw new Error("invalid address prefix (".concat(decoded[0], ")"));
        if (decoded.length !== 33 + 1) throw new Error("invalid address length (".concat(decoded.length - 1, ")"));
        return Buffer$1.from(decoded.slice(1));
      }
      /**
       * Encode bytes into bs58check string
       */

    }, {
      key: "encode",
      value: function encode(byteArray) {
        if (!byteArray || byteArray.length === 0) return ''; // return empty string for null address

        var buf = Buffer$1.from([ADDRESS_PREFIXES.ACCOUNT].concat(_toConsumableArray$1(byteArray)));
        return bs58check.encode(buf);
      }
    }, {
      key: "isSystemName",
      value: function isSystemName(name) {
        return systemAddresses.indexOf(name) !== -1;
      }
    }, {
      key: "setSystemAddresses",
      value: function setSystemAddresses(addresses) {
        systemAddresses = addresses;
      }
    }, {
      key: "valueEqual",
      value: function valueEqual(a, b) {
        return a.length == b.length && a.every(function (aElem, i) {
          return aElem === b[i];
        });
      }
    }]);

    return Address;
  }();

  var TxTypes;
  /**
   * This interface defines a type for user provided tx data.
   * Internal functions can use different types but this is the publicly facing API.
   */

  (function (TxTypes) {
    TxTypes[TxTypes["Normal"] = 0] = "Normal";
    TxTypes[TxTypes["Governance"] = 1] = "Governance";
    TxTypes[TxTypes["Redeploy"] = 2] = "Redeploy";
    TxTypes[TxTypes["FeeDelegation"] = 3] = "FeeDelegation";
    TxTypes[TxTypes["Transfer"] = 4] = "Transfer";
    TxTypes[TxTypes["Call"] = 5] = "Call";
    TxTypes[TxTypes["Deploy"] = 6] = "Deploy";
  })(TxTypes || (TxTypes = {}));

  function encodeTxHash(bytes) {
    return base58.encode(Buffer$1.from(bytes));
  }
  function decodeTxHash(bs58string) {
    return base58.decode(bs58string);
  }

  var TransactionError =
  /*#__PURE__*/
  function (_Error) {
    _inherits(TransactionError, _Error);

    function TransactionError() {
      _classCallCheck(this, TransactionError);

      return _possibleConstructorReturn(this, _getPrototypeOf(TransactionError).apply(this, arguments));
    }

    return TransactionError;
  }(_wrapNativeSuper(Error));

  function bufferOrB58(input) {
    if (typeof input === 'string') {
      return Uint8Array.from(decodeTxHash(input));
    } else {
      return Uint8Array.from(Buffer$1.from(input));
    }
  }
  /**
   * Class for converting transaction data to and from network representation.
   * You usually don't need to interact with this class manually, you can pass simple JSON objects.
   * This class is used when passing transaction data to client methods.
   */


  var Tx =
  /*#__PURE__*/
  function () {
    /**
     * Map of tx types.
     * Use as Tx.Type.NORMAL, Tx.Type.GOVERNANCE, Tx.Type.REDEPLOY, Tx.Type.FEEDELEGATION
     */
    function Tx(data) {
      _classCallCheck(this, Tx);

      _defineProperty(this, "hash", void 0);

      _defineProperty(this, "nonce", void 0);

      _defineProperty(this, "from", void 0);

      _defineProperty(this, "to", void 0);

      _defineProperty(this, "amount", void 0);

      _defineProperty(this, "payload", void 0);

      _defineProperty(this, "sign", void 0);

      _defineProperty(this, "type", void 0);

      _defineProperty(this, "limit", void 0);

      _defineProperty(this, "price", void 0);

      _defineProperty(this, "chainIdHash", void 0);

      Object.assign(this, data);
      this.amount = new Amount(this.amount || 0);
      this.price = new Amount(this.price || 0);

      if (!this.type) {
        this.type = this.inferType();
      }
    }

    _createClass(Tx, [{
      key: "inferType",

      /**
       * Infer a tx type based on body. Can be overriden by exlicitly passing type.
       */
      value: function inferType() {
        if (!this.to) {
          return Tx.Type.DEPLOY;
        }

        if ("".concat(this.to) === 'aergo.system' || "".concat(this.to) === 'aergo.enterprise') {
          return Tx.Type.GOVERNANCE;
        }

        return Tx.Type.NORMAL;
      }
    }, {
      key: "toGrpc",
      value: function toGrpc() {
        var msgtxbody = new blockchain_pb_2();
        msgtxbody.setType(this.type ? this.type : 0);
        msgtxbody.setNonce(this.nonce);

        if (typeof this.from === 'undefined' || !this.from) {
          throw new Error('Missing required transaction parameter \'from\'');
        }

        msgtxbody.setAccount(new Address(this.from).asBytes());

        if (typeof this.to !== 'undefined' && this.to !== null) {
          msgtxbody.setRecipient(new Address(this.to).asBytes());
        }

        msgtxbody.setAmount(Uint8Array.from(this.amount.asBytes()));

        if (typeof this.price !== 'undefined') {
          msgtxbody.setGasprice(Uint8Array.from(this.price.asBytes()));
        }

        msgtxbody.setGaslimit(this.limit || 0);

        if (this.payload != null) {
          msgtxbody.setPayload(Buffer$1.from(this.payload));
        }

        if (typeof this.sign === 'string') {
          msgtxbody.setSign(Buffer$1.from(this.sign, 'base64'));
        } else if (this.sign) {
          msgtxbody.setSign(this.sign);
        }

        if (typeof this.chainIdHash === 'undefined' || !this.chainIdHash) {
          var msg = 'Missing required transaction parameter \'chainIdHash\'. ' + 'Use aergoClient.getChainIdHash() to retrieve from connected node, ' + 'or hard-code for increased security and performance.';
          throw new Error(msg);
        }

        msgtxbody.setChainidhash(bufferOrB58(this.chainIdHash));
        var msgtx = new blockchain_pb_3();

        if (this.hash != null) {
          msgtx.setHash(bufferOrB58(this.hash));
        }

        msgtx.setBody(msgtxbody);
        return msgtx;
      }
    }], [{
      key: "encodeHash",
      value: function encodeHash(buf) {
        return encodeTxHash(buf);
      }
    }, {
      key: "fromGrpc",
      value: function fromGrpc(grpcObject) {
        var body = grpcObject.getBody();
        var hash = Tx.encodeHash(grpcObject.getHash_asU8());
        if (!body) throw new Error('tx missing body');
        return new Tx({
          hash: hash,
          nonce: body.getNonce(),
          from: new Address(body.getAccount_asU8()),
          to: new Address(body.getRecipient_asU8()),
          amount: new Amount(body.getAmount_asU8()),
          payload: body.getPayload_asU8(),
          sign: body.getSign_asB64(),
          type: body.getType(),
          limit: body.getGaslimit(),
          price: new Amount(body.getGasprice_asU8()),
          chainIdHash: Tx.encodeHash(body.getChainidhash_asU8())
        });
      }
    }]);

    return Tx;
  }();

  _defineProperty(Tx, "Type", blockchain_pb_4);
  var SignedTx =
  /*#__PURE__*/
  function (_Tx) {
    _inherits(SignedTx, _Tx);

    function SignedTx() {
      var _getPrototypeOf2;

      var _this;

      _classCallCheck(this, SignedTx);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(SignedTx)).call.apply(_getPrototypeOf2, [this].concat(args)));

      _defineProperty(_assertThisInitialized(_this), "sign", void 0);

      _defineProperty(_assertThisInitialized(_this), "hash", void 0);

      return _this;
    }

    return SignedTx;
  }(Tx);

  /**
   * Accounts controller. It is exposed at `aergoClient.accounts`.
   */
  var Accounts =
  /*#__PURE__*/
  function () {
    function Accounts(aergo) {
      _classCallCheck(this, Accounts);

      _defineProperty(this, "client", void 0);

      _defineProperty(this, "aergo", void 0);

      this.client = aergo.client;
      this.aergo = aergo;
    }
    /**
     * Create a new account in the node.
     * @param {string} passphrase 
     * @returns {Promise<Address>} newly created account address
     */


    _createClass(Accounts, [{
      key: "create",
      value: function create(passphrase) {
        var _this = this;

        return new Promise(function (resolve, reject) {
          var personal = new rpc_pb_3();
          personal.setPassphrase(passphrase);

          try {
            _this.client.client.createAccount(personal, function (err, rsp) {
              if (err) {
                reject(err);
              } else {
                var createdAddress = rsp.getAddress_asU8();
                resolve(new Address(createdAddress));
              }
            });
          } catch (exception) {
            reject(exception);
          }
        });
      }
      /**
       * Get list of accounts.
       * @returns {Promise<Address[]>} list of account addresses
       */

    }, {
      key: "get",
      value: function get() {
        var _this2 = this;

        return new Promise(function (resolve, reject) {
          var empty = new rpc_pb_2();

          try {
            _this2.client.client.getAccounts(empty, function (err, rsp) {
              if (err) {
                reject(err);
              } else {
                var accounts = rsp.getAccountsList();
                var addresses = accounts.map(function (account) {
                  return new Address(account.getAddress_asU8());
                });
                resolve(addresses);
              }
            });
          } catch (exception) {
            reject(exception);
          }
        });
      }
      /**
       * Unlock account.
       * @param {Address|string} address 
       * @param {Address|string} passphrase 
       * @returns {Promise<Address>} unlocked account address
       */

    }, {
      key: "unlock",
      value: function unlock(address, passphrase) {
        var _this3 = this;

        return new Promise(function (resolve, reject) {
          var account = new account_pb_1();
          account.setAddress(new Address(address).asBytes());
          var personal = new rpc_pb_3();
          personal.setPassphrase(passphrase);
          personal.setAccount(account);

          try {
            _this3.client.client.unlockAccount(personal, function (err, rsp) {
              if (err) {
                reject(err);
              } else {
                var createdAddress = rsp.getAddress_asU8();
                resolve(new Address(createdAddress));
              }
            });
          } catch (exception) {
            reject(exception);
          }
        });
      }
      /**
       * Lock account.
       * @param {Address|string} address 
       * @param {Address|string} passphrase 
       * @returns {Promise<Address>} locked account address
       */

    }, {
      key: "lock",
      value: function lock(address, passphrase) {
        var _this4 = this;

        return new Promise(function (resolve, reject) {
          var account = new account_pb_1();
          account.setAddress(new Address(address).asBytes());
          var personal = new rpc_pb_3();
          personal.setPassphrase(passphrase);
          personal.setAccount(account);

          try {
            _this4.client.client.lockAccount(personal, function (err, rsp) {
              if (err) {
                reject(err);
              } else {
                var createdAddress = rsp.getAddress_asU8();
                resolve(new Address(createdAddress));
              }
            });
          } catch (exception) {
            reject(exception);
          }
        });
      }
      /**
       * Convenience method to send transaction from account.
       * This method automatically retrieves the nonce, signs the transaction, and sends it to the network.
       * @param {Tx} tx transaction data
       * @returns {Promise<string>} transaction hash
       */

    }, {
      key: "sendTransaction",
      value: function sendTransaction(_tx) {
        var tx = _tx instanceof Tx ? _tx : new Tx(_tx);

        if (typeof tx.limit === 'undefined' && this.aergo.defaultLimit) {
          tx.limit = this.aergo.defaultLimit;
        }

        return promisify(this.client.client.sendTX, this.client.client)(tx.toGrpc()).then(function (result) {
          var obj = result.toObject();

          if (obj.error && obj.detail) {
            throw new Error(errorMessageForCode(obj.error) + ': ' + obj.detail);
          }

          return encodeTxHash(result.getHash_asU8());
        });
      }
      /**
       * Sign transaction.
       * @param {Tx} tx transaction data
       * @returns {Promise<Tx>} transaction data including signature
       */

    }, {
      key: "signTransaction",
      value: function signTransaction(_tx) {
        var tx = _tx instanceof Tx ? _tx : new Tx(_tx);

        if (typeof tx.limit === 'undefined' && this.aergo.defaultLimit) {
          tx.limit = this.aergo.defaultLimit;
        }

        return promisify(this.client.client.signTX, this.client.client)(tx.toGrpc()).then(function (signedtx) {
          return Tx.fromGrpc(signedtx);
        });
      }
    }]);

    return Accounts;
  }();

  var Block =
  /*#__PURE__*/
  function () {
    function Block(data) {
      _classCallCheck(this, Block);

      _defineProperty(this, "hash", void 0);

      _defineProperty(this, "header", void 0);

      _defineProperty(this, "body", void 0);

      Object.assign(this, data);
    }

    _createClass(Block, [{
      key: "toGrpc",
      value: function toGrpc() {
        throw new Error('Not implemented');
      }
    }, {
      key: "voteReward",
      get: function get() {
        return Block.getVoteReward(this);
      }
    }], [{
      key: "fromGrpc",
      value: function fromGrpc(grpcObject) {
        var obj = grpcObject.toObject();
        var txsList = [];
        var body = grpcObject.getBody();

        if (obj.body && body) {
          txsList = body.getTxsList().map(function (tx) {
            return SignedTx.fromGrpc(tx);
          });
        }

        var header = grpcObject.getHeader();
        return new Block({
          hash: Block.encodeHash(grpcObject.getHash_asU8()),
          header: header ? _objectSpread2({}, obj.header, {
            blockno: header.getBlockno(),
            timestamp: header.getTimestamp(),
            confirms: header.getConfirms(),
            sign: header.getSign(),
            chainid: Buffer$1.from(header.getChainid_asU8()).toString('utf8'),
            prevblockhash: Block.encodeHash(header.getPrevblockhash_asU8()),
            blocksroothash: Block.encodeHash(header.getBlocksroothash_asU8()),
            txsroothash: Block.encodeHash(header.getTxsroothash_asU8()),
            receiptsroothash: Block.encodeHash(header.getReceiptsroothash_asU8()),
            coinbaseaccount: new Address(header.getCoinbaseaccount_asU8()),
            pubkey: Block.encodeHash(header.getPubkey_asU8()),
            rewardaccount: new Address(header.getConsensus_asU8())
          }) : undefined,
          body: {
            txsList: txsList
          }
        });
      }
    }, {
      key: "encodeHash",
      value: function encodeHash(bytes) {
        return base58.encode(Buffer$1.from(bytes));
      }
    }, {
      key: "decodeHash",
      value: function decodeHash(bs58string) {
        return base58.decode(bs58string);
      }
    }, {
      key: "getVoteReward",
      value: function getVoteReward(block) {
        if (block.header && !block.header.rewardaccount.isEmpty()) {
          return new Amount('0.16 aergo');
        }

        return new Amount(0);
      }
    }]);

    return Block;
  }();

  var BlockMetadata =
  /*#__PURE__*/
  function () {
    function BlockMetadata(data) {
      _classCallCheck(this, BlockMetadata);

      _defineProperty(this, "hash", void 0);

      _defineProperty(this, "header", void 0);

      _defineProperty(this, "txcount", void 0);

      _defineProperty(this, "size", void 0);

      Object.assign(this, data);
    }

    _createClass(BlockMetadata, [{
      key: "toGrpc",
      value: function toGrpc() {
        throw new Error('Not implemented');
      }
    }, {
      key: "voteReward",
      get: function get() {
        return Block.getVoteReward(this);
      }
    }], [{
      key: "fromGrpc",
      value: function fromGrpc(grpcObject) {
        var obj = grpcObject.toObject();
        var header = grpcObject.getHeader();
        return new BlockMetadata({
          hash: Block.encodeHash(grpcObject.getHash_asU8()),
          header: header ? _objectSpread2({}, obj.header, {
            blockno: header.getBlockno(),
            timestamp: header.getTimestamp(),
            confirms: header.getConfirms(),
            sign: header.getSign(),
            chainid: Buffer$1.from(header.getChainid_asU8()).toString('utf8'),
            prevblockhash: Block.encodeHash(header.getPrevblockhash_asU8()),
            blocksroothash: Block.encodeHash(header.getBlocksroothash_asU8()),
            txsroothash: Block.encodeHash(header.getTxsroothash_asU8()),
            receiptsroothash: Block.encodeHash(header.getReceiptsroothash_asU8()),
            coinbaseaccount: new Address(header.getCoinbaseaccount_asU8()),
            pubkey: Block.encodeHash(header.getPubkey_asU8()),
            rewardaccount: new Address(header.getConsensus_asU8())
          }) : undefined,
          txcount: obj.txcount,
          size: obj.size
        });
      }
    }]);

    return BlockMetadata;
  }();

  var ChainInfo =
  /*#__PURE__*/
  function () {
    function ChainInfo(data) {
      _classCallCheck(this, ChainInfo);

      _defineProperty(this, "chainid", void 0);

      _defineProperty(this, "bpnumber", void 0);

      _defineProperty(this, "maxblocksize", void 0);

      _defineProperty(this, "maxtokens", void 0);

      _defineProperty(this, "stakingminimum", void 0);

      _defineProperty(this, "stakingtotal", void 0);

      _defineProperty(this, "gasprice", void 0);

      _defineProperty(this, "nameprice", void 0);

      _defineProperty(this, "totalvotingpower", void 0);

      _defineProperty(this, "votingreward", void 0);

      Object.assign(this, data);
    }

    _createClass(ChainInfo, [{
      key: "toGrpc",
      value: function toGrpc() {
        throw new Error('Not implemented');
      }
    }], [{
      key: "fromGrpc",
      value: function fromGrpc(grpcObject) {
        var chainid = grpcObject.getId();
        return new ChainInfo({
          chainid: chainid ? {
            magic: chainid.getMagic(),
            "public": chainid.getPublic(),
            mainnet: chainid.getMainnet(),
            consensus: chainid.getConsensus(),
            version: chainid.getVersion()
          } : {
            magic: 'unknown',
            "public": false,
            mainnet: false,
            consensus: 'unknown',
            version: 0
          },
          bpnumber: grpcObject.getBpnumber(),
          maxblocksize: grpcObject.getMaxblocksize(),
          maxtokens: new Amount(grpcObject.getMaxtokens_asU8()),
          stakingminimum: new Amount(grpcObject.getStakingminimum_asU8()),
          stakingtotal: new Amount(grpcObject.getTotalstaking_asU8()),
          gasprice: new Amount(grpcObject.getGasprice_asU8()),
          nameprice: new Amount(grpcObject.getNameprice_asU8()),
          totalvotingpower: new Amount(grpcObject.getTotalvotingpower_asU8()),
          votingreward: new Amount(grpcObject.getVotingreward_asU8())
        });
      }
    }]);

    return ChainInfo;
  }();

  var minimalisticAssert = assert;

  function assert(val, msg) {
    if (!val) throw new Error(msg || 'Assertion failed');
  }

  assert.equal = function assertEqual(l, r, msg) {
    if (l != r) throw new Error(msg || 'Assertion failed: ' + l + ' != ' + r);
  };

  var inherits_1 = inherits_browser;

  function isSurrogatePair(msg, i) {
    if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {
      return false;
    }

    if (i < 0 || i + 1 >= msg.length) {
      return false;
    }

    return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;
  }

  function toArray(msg, enc) {
    if (Array.isArray(msg)) return msg.slice();
    if (!msg) return [];
    var res = [];

    if (typeof msg === 'string') {
      if (!enc) {
        // Inspired by stringToUtf8ByteArray() in closure-library by Google
        // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143
        // Apache License 2.0
        // https://github.com/google/closure-library/blob/master/LICENSE
        var p = 0;

        for (var i = 0; i < msg.length; i++) {
          var c = msg.charCodeAt(i);

          if (c < 128) {
            res[p++] = c;
          } else if (c < 2048) {
            res[p++] = c >> 6 | 192;
            res[p++] = c & 63 | 128;
          } else if (isSurrogatePair(msg, i)) {
            c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);
            res[p++] = c >> 18 | 240;
            res[p++] = c >> 12 & 63 | 128;
            res[p++] = c >> 6 & 63 | 128;
            res[p++] = c & 63 | 128;
          } else {
            res[p++] = c >> 12 | 224;
            res[p++] = c >> 6 & 63 | 128;
            res[p++] = c & 63 | 128;
          }
        }
      } else if (enc === 'hex') {
        msg = msg.replace(/[^a-z0-9]+/ig, '');
        if (msg.length % 2 !== 0) msg = '0' + msg;

        for (i = 0; i < msg.length; i += 2) {
          res.push(parseInt(msg[i] + msg[i + 1], 16));
        }
      }
    } else {
      for (i = 0; i < msg.length; i++) {
        res[i] = msg[i] | 0;
      }
    }

    return res;
  }

  var toArray_1 = toArray;

  function toHex$1(msg) {
    var res = '';

    for (var i = 0; i < msg.length; i++) {
      res += zero2(msg[i].toString(16));
    }

    return res;
  }

  var toHex_1 = toHex$1;

  function htonl(w) {
    var res = w >>> 24 | w >>> 8 & 0xff00 | w << 8 & 0xff0000 | (w & 0xff) << 24;
    return res >>> 0;
  }

  var htonl_1 = htonl;

  function toHex32(msg, endian) {
    var res = '';

    for (var i = 0; i < msg.length; i++) {
      var w = msg[i];
      if (endian === 'little') w = htonl(w);
      res += zero8(w.toString(16));
    }

    return res;
  }

  var toHex32_1 = toHex32;

  function zero2(word) {
    if (word.length === 1) return '0' + word;else return word;
  }

  var zero2_1 = zero2;

  function zero8(word) {
    if (word.length === 7) return '0' + word;else if (word.length === 6) return '00' + word;else if (word.length === 5) return '000' + word;else if (word.length === 4) return '0000' + word;else if (word.length === 3) return '00000' + word;else if (word.length === 2) return '000000' + word;else if (word.length === 1) return '0000000' + word;else return word;
  }

  var zero8_1 = zero8;

  function join32(msg, start, end, endian) {
    var len = end - start;
    minimalisticAssert(len % 4 === 0);
    var res = new Array(len / 4);

    for (var i = 0, k = start; i < res.length; i++, k += 4) {
      var w;
      if (endian === 'big') w = msg[k] << 24 | msg[k + 1] << 16 | msg[k + 2] << 8 | msg[k + 3];else w = msg[k + 3] << 24 | msg[k + 2] << 16 | msg[k + 1] << 8 | msg[k];
      res[i] = w >>> 0;
    }

    return res;
  }

  var join32_1 = join32;

  function split32(msg, endian) {
    var res = new Array(msg.length * 4);

    for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
      var m = msg[i];

      if (endian === 'big') {
        res[k] = m >>> 24;
        res[k + 1] = m >>> 16 & 0xff;
        res[k + 2] = m >>> 8 & 0xff;
        res[k + 3] = m & 0xff;
      } else {
        res[k + 3] = m >>> 24;
        res[k + 2] = m >>> 16 & 0xff;
        res[k + 1] = m >>> 8 & 0xff;
        res[k] = m & 0xff;
      }
    }

    return res;
  }

  var split32_1 = split32;

  function rotr32(w, b) {
    return w >>> b | w << 32 - b;
  }

  var rotr32_1 = rotr32;

  function rotl32(w, b) {
    return w << b | w >>> 32 - b;
  }

  var rotl32_1 = rotl32;

  function sum32(a, b) {
    return a + b >>> 0;
  }

  var sum32_1 = sum32;

  function sum32_3(a, b, c) {
    return a + b + c >>> 0;
  }

  var sum32_3_1 = sum32_3;

  function sum32_4(a, b, c, d) {
    return a + b + c + d >>> 0;
  }

  var sum32_4_1 = sum32_4;

  function sum32_5(a, b, c, d, e) {
    return a + b + c + d + e >>> 0;
  }

  var sum32_5_1 = sum32_5;

  function sum64(buf, pos, ah, al) {
    var bh = buf[pos];
    var bl = buf[pos + 1];
    var lo = al + bl >>> 0;
    var hi = (lo < al ? 1 : 0) + ah + bh;
    buf[pos] = hi >>> 0;
    buf[pos + 1] = lo;
  }

  var sum64_1 = sum64;

  function sum64_hi(ah, al, bh, bl) {
    var lo = al + bl >>> 0;
    var hi = (lo < al ? 1 : 0) + ah + bh;
    return hi >>> 0;
  }

  var sum64_hi_1 = sum64_hi;

  function sum64_lo(ah, al, bh, bl) {
    var lo = al + bl;
    return lo >>> 0;
  }

  var sum64_lo_1 = sum64_lo;

  function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
    var carry = 0;
    var lo = al;
    lo = lo + bl >>> 0;
    carry += lo < al ? 1 : 0;
    lo = lo + cl >>> 0;
    carry += lo < cl ? 1 : 0;
    lo = lo + dl >>> 0;
    carry += lo < dl ? 1 : 0;
    var hi = ah + bh + ch + dh + carry;
    return hi >>> 0;
  }

  var sum64_4_hi_1 = sum64_4_hi;

  function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
    var lo = al + bl + cl + dl;
    return lo >>> 0;
  }

  var sum64_4_lo_1 = sum64_4_lo;

  function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
    var carry = 0;
    var lo = al;
    lo = lo + bl >>> 0;
    carry += lo < al ? 1 : 0;
    lo = lo + cl >>> 0;
    carry += lo < cl ? 1 : 0;
    lo = lo + dl >>> 0;
    carry += lo < dl ? 1 : 0;
    lo = lo + el >>> 0;
    carry += lo < el ? 1 : 0;
    var hi = ah + bh + ch + dh + eh + carry;
    return hi >>> 0;
  }

  var sum64_5_hi_1 = sum64_5_hi;

  function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
    var lo = al + bl + cl + dl + el;
    return lo >>> 0;
  }

  var sum64_5_lo_1 = sum64_5_lo;

  function rotr64_hi(ah, al, num) {
    var r = al << 32 - num | ah >>> num;
    return r >>> 0;
  }

  var rotr64_hi_1 = rotr64_hi;

  function rotr64_lo(ah, al, num) {
    var r = ah << 32 - num | al >>> num;
    return r >>> 0;
  }

  var rotr64_lo_1 = rotr64_lo;

  function shr64_hi(ah, al, num) {
    return ah >>> num;
  }

  var shr64_hi_1 = shr64_hi;

  function shr64_lo(ah, al, num) {
    var r = ah << 32 - num | al >>> num;
    return r >>> 0;
  }

  var shr64_lo_1 = shr64_lo;
  var utils = {
    inherits: inherits_1,
    toArray: toArray_1,
    toHex: toHex_1,
    htonl: htonl_1,
    toHex32: toHex32_1,
    zero2: zero2_1,
    zero8: zero8_1,
    join32: join32_1,
    split32: split32_1,
    rotr32: rotr32_1,
    rotl32: rotl32_1,
    sum32: sum32_1,
    sum32_3: sum32_3_1,
    sum32_4: sum32_4_1,
    sum32_5: sum32_5_1,
    sum64: sum64_1,
    sum64_hi: sum64_hi_1,
    sum64_lo: sum64_lo_1,
    sum64_4_hi: sum64_4_hi_1,
    sum64_4_lo: sum64_4_lo_1,
    sum64_5_hi: sum64_5_hi_1,
    sum64_5_lo: sum64_5_lo_1,
    rotr64_hi: rotr64_hi_1,
    rotr64_lo: rotr64_lo_1,
    shr64_hi: shr64_hi_1,
    shr64_lo: shr64_lo_1
  };

  function BlockHash() {
    this.pending = null;
    this.pendingTotal = 0;
    this.blockSize = this.constructor.blockSize;
    this.outSize = this.constructor.outSize;
    this.hmacStrength = this.constructor.hmacStrength;
    this.padLength = this.constructor.padLength / 8;
    this.endian = 'big';
    this._delta8 = this.blockSize / 8;
    this._delta32 = this.blockSize / 32;
  }

  var BlockHash_1 = BlockHash;

  BlockHash.prototype.update = function update(msg, enc) {
    // Convert message to array, pad it, and join into 32bit blocks
    msg = utils.toArray(msg, enc);
    if (!this.pending) this.pending = msg;else this.pending = this.pending.concat(msg);
    this.pendingTotal += msg.length; // Enough data, try updating

    if (this.pending.length >= this._delta8) {
      msg = this.pending; // Process pending data in blocks

      var r = msg.length % this._delta8;
      this.pending = msg.slice(msg.length - r, msg.length);
      if (this.pending.length === 0) this.pending = null;
      msg = utils.join32(msg, 0, msg.length - r, this.endian);

      for (var i = 0; i < msg.length; i += this._delta32) {
        this._update(msg, i, i + this._delta32);
      }
    }

    return this;
  };

  BlockHash.prototype.digest = function digest(enc) {
    this.update(this._pad());
    minimalisticAssert(this.pending === null);
    return this._digest(enc);
  };

  BlockHash.prototype._pad = function pad() {
    var len = this.pendingTotal;
    var bytes = this._delta8;
    var k = bytes - (len + this.padLength) % bytes;
    var res = new Array(k + this.padLength);
    res[0] = 0x80;

    for (var i = 1; i < k; i++) {
      res[i] = 0;
    } // Append length


    len <<= 3;

    if (this.endian === 'big') {
      for (var t = 8; t < this.padLength; t++) {
        res[i++] = 0;
      }

      res[i++] = 0;
      res[i++] = 0;
      res[i++] = 0;
      res[i++] = 0;
      res[i++] = len >>> 24 & 0xff;
      res[i++] = len >>> 16 & 0xff;
      res[i++] = len >>> 8 & 0xff;
      res[i++] = len & 0xff;
    } else {
      res[i++] = len & 0xff;
      res[i++] = len >>> 8 & 0xff;
      res[i++] = len >>> 16 & 0xff;
      res[i++] = len >>> 24 & 0xff;
      res[i++] = 0;
      res[i++] = 0;
      res[i++] = 0;
      res[i++] = 0;

      for (t = 8; t < this.padLength; t++) {
        res[i++] = 0;
      }
    }

    return res;
  };

  var common = {
    BlockHash: BlockHash_1
  };

  var rotr32$1 = utils.rotr32;

  function ft_1(s, x, y, z) {
    if (s === 0) return ch32(x, y, z);
    if (s === 1 || s === 3) return p32(x, y, z);
    if (s === 2) return maj32(x, y, z);
  }

  var ft_1_1 = ft_1;

  function ch32(x, y, z) {
    return x & y ^ ~x & z;
  }

  var ch32_1 = ch32;

  function maj32(x, y, z) {
    return x & y ^ x & z ^ y & z;
  }

  var maj32_1 = maj32;

  function p32(x, y, z) {
    return x ^ y ^ z;
  }

  var p32_1 = p32;

  function s0_256(x) {
    return rotr32$1(x, 2) ^ rotr32$1(x, 13) ^ rotr32$1(x, 22);
  }

  var s0_256_1 = s0_256;

  function s1_256(x) {
    return rotr32$1(x, 6) ^ rotr32$1(x, 11) ^ rotr32$1(x, 25);
  }

  var s1_256_1 = s1_256;

  function g0_256(x) {
    return rotr32$1(x, 7) ^ rotr32$1(x, 18) ^ x >>> 3;
  }

  var g0_256_1 = g0_256;

  function g1_256(x) {
    return rotr32$1(x, 17) ^ rotr32$1(x, 19) ^ x >>> 10;
  }

  var g1_256_1 = g1_256;
  var common$1 = {
    ft_1: ft_1_1,
    ch32: ch32_1,
    maj32: maj32_1,
    p32: p32_1,
    s0_256: s0_256_1,
    s1_256: s1_256_1,
    g0_256: g0_256_1,
    g1_256: g1_256_1
  };

  var sum32$1 = utils.sum32;
  var sum32_4$1 = utils.sum32_4;
  var sum32_5$1 = utils.sum32_5;
  var ch32$1 = common$1.ch32;
  var maj32$1 = common$1.maj32;
  var s0_256$1 = common$1.s0_256;
  var s1_256$1 = common$1.s1_256;
  var g0_256$1 = common$1.g0_256;
  var g1_256$1 = common$1.g1_256;
  var BlockHash$1 = common.BlockHash;
  var sha256_K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];

  function SHA256() {
    if (!(this instanceof SHA256)) return new SHA256();
    BlockHash$1.call(this);
    this.h = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];
    this.k = sha256_K;
    this.W = new Array(64);
  }

  utils.inherits(SHA256, BlockHash$1);
  var _256 = SHA256;
  SHA256.blockSize = 512;
  SHA256.outSize = 256;
  SHA256.hmacStrength = 192;
  SHA256.padLength = 64;

  SHA256.prototype._update = function _update(msg, start) {
    var W = this.W;

    for (var i = 0; i < 16; i++) {
      W[i] = msg[start + i];
    }

    for (; i < W.length; i++) {
      W[i] = sum32_4$1(g1_256$1(W[i - 2]), W[i - 7], g0_256$1(W[i - 15]), W[i - 16]);
    }

    var a = this.h[0];
    var b = this.h[1];
    var c = this.h[2];
    var d = this.h[3];
    var e = this.h[4];
    var f = this.h[5];
    var g = this.h[6];
    var h = this.h[7];
    minimalisticAssert(this.k.length === W.length);

    for (i = 0; i < W.length; i++) {
      var T1 = sum32_5$1(h, s1_256$1(e), ch32$1(e, f, g), this.k[i], W[i]);
      var T2 = sum32$1(s0_256$1(a), maj32$1(a, b, c));
      h = g;
      g = f;
      f = e;
      e = sum32$1(d, T1);
      d = c;
      c = b;
      b = a;
      a = sum32$1(T1, T2);
    }

    this.h[0] = sum32$1(this.h[0], a);
    this.h[1] = sum32$1(this.h[1], b);
    this.h[2] = sum32$1(this.h[2], c);
    this.h[3] = sum32$1(this.h[3], d);
    this.h[4] = sum32$1(this.h[4], e);
    this.h[5] = sum32$1(this.h[5], f);
    this.h[6] = sum32$1(this.h[6], g);
    this.h[7] = sum32$1(this.h[7], h);
  };

  SHA256.prototype._digest = function digest(enc) {
    if (enc === 'hex') return utils.toHex32(this.h, 'big');else return utils.split32(this.h, 'big');
  };

  /**
   * Data structure for contract function calls.
   * You should not need to build these yourself, they are returned from contract instance functions and
   * can be passed to the client.
   */
  var FunctionCall =
  /*#__PURE__*/
  function () {
    function FunctionCall(contractInstance, definition, args) {
      _classCallCheck(this, FunctionCall);

      _defineProperty(this, "definition", void 0);

      _defineProperty(this, "args", void 0);

      _defineProperty(this, "contractInstance", void 0);

      this.definition = definition;
      this.args = args;
      this.contractInstance = contractInstance;
    }
    /**
     * Generate transaction object that can be passed to :meth:`aergoClient.accounts.sendTrasaction`
     * 
     * .. code-block:: javascript
     * 
     *     import { Contract } from '@herajs/client';
     *     const contract = Contract.fromAbi(abi).atAddress(address);
     *     const functionCall = contract.someAbiFunction();
     *     aergo.accounts.sendTransaction(functionCall.asTransaction({
     *         from: myAddress
     *     })).then(result => {
     *         console.log(result);
     *     })
     * @param {obj} extraArgs
     * @param {string} extraArgs.from set from address for the transaction
     * @return {obj} transaction data
     */


    _createClass(FunctionCall, [{
      key: "asTransaction",
      value: function asTransaction(extraArgs) {
        var payload = JSON.stringify({
          Name: this.definition.name,
          Args: this.args
        });
        if (!this.contractInstance.address) throw new Error('Set address of contract before creating transactions');

        if (typeof extraArgs === 'undefined' || !extraArgs.from || extraArgs.from.length === 0) {
          throw new Error('Missing required transaction parameter \'from\'. Call with asTransaction({from: ...})');
        }

        return _objectSpread2({
          to: this.contractInstance.address,
          payload: payload,
          amount: new Amount('0 aer'),
          type: Tx.Type.CALL
        }, extraArgs);
      }
      /**
       * Generate query info that can be passed to the API.
       * You usually do not need to call this function yourself, :meth:`AergoClient.queryContract` takes care of that.
       * 
       * .. code-block:: javascript
       * 
       *     import { Contract } from '@herajs/client';
       *     const contract = Contract.fromAbi(abi).atAddress(address);
       *     const functionCall = contract.someAbiFunction();
       *     aergo.queryContract(functionCall).then(result => {
       *         console.log(result);
       *     })
       * 
       * @return {obj} queryInfo data
       */

    }, {
      key: "asQueryInfo",
      value: function asQueryInfo() {
        return {
          Name: this.definition.name,
          Args: this.args
        };
      }
    }, {
      key: "toGrpc",
      value: function toGrpc() {
        var q = new blockchain_pb_6();

        if (!this.contractInstance.address) {
          throw new Error('set contract address before creating state query');
        }

        q.setContractaddress(Uint8Array.from(new Address(this.contractInstance.address).asBytes()));
        q.setQueryinfo(Uint8Array.from(Buffer.from(JSON.stringify(this.asQueryInfo()))));
        return q;
      }
    }]);

    return FunctionCall;
  }();
  /**
   * Query contract state directlty without using ABI methods.
   * 
   * .. code-block:: javascript
   * 
   *     import { Contract } from '@herajs/client';
   *     const contract = Contract.fromAbi(abi).atAddress(address);
   *     const query = contract.queryState('stateVariableName');
   *     aergo.queryContractState(query).then(result => {
   *         console.log(result);
   *     })
   */

  var StateQuery =
  /*#__PURE__*/
  function () {
    function StateQuery(contractInstance, storageKeys, compressed, root) {
      _classCallCheck(this, StateQuery);

      _defineProperty(this, "contractInstance", void 0);

      _defineProperty(this, "storageKeys", void 0);

      _defineProperty(this, "root", void 0);

      _defineProperty(this, "compressed", void 0);

      this.contractInstance = contractInstance;
      this.storageKeys = storageKeys;
      this.compressed = compressed || false;
      this.root = root;
    }

    _createClass(StateQuery, [{
      key: "toGrpc",
      value: function toGrpc() {
        var q = new blockchain_pb_7();

        if (!this.contractInstance.address) {
          throw new Error('set contract address before creating state query');
        }

        q.setContractaddress(this.contractInstance.address.asBytes());
        var storageKeys = this.storageKeys.map(function (key) {
          var buf = typeof key === 'string' ? Buffer.from(key) : key;
          return Uint8Array.from(_256().update(buf).digest());
        });
        q.setStoragekeysList(storageKeys);
        q.setCompressed(this.compressed);

        if (this.root) {
          q.setRoot(Uint8Array.from(this.root));
        }

        return q;
      }
    }]);

    return StateQuery;
  }();
  /**
   * Smart contract interface.
   * You usually instantiante this class by using one of the static methods.
   * Most of the instance methods return the contract so they can be chained.
   * When an ABI is loaded, its functions will be added to the instance and can be called directly.
   * ABI functions return `FunctionCall` objects that can be queried or called.
   * 
   * .. code-block:: javascript
   * 
   *     import { Contract } from '@herajs/client';
   *     const contract = Contract.fromAbi(abi).setAddress(address);
   *     aergo.queryContract(contract.someAbiFunction()).then(result => {
   *         console.log(result);
   *     })
   * 
   */

  var Contract =
  /*#__PURE__*/
  function () {
    function Contract(data) {
      _classCallCheck(this, Contract);

      _defineProperty(this, "code", void 0);

      _defineProperty(this, "address", void 0);

      _defineProperty(this, "functions", void 0);

      Object.assign(this, data);
      this.functions = {};

      function isNotProxied(obj, field) {
        return field in obj;
      } // This class acts as a proxy that passes ABI method calls


      return new Proxy(this, {
        get: function get(obj, field) {
          if (isNotProxied(obj, field)) return obj[field];
          if (field in obj.functions) return obj.functions[field];
          return undefined;
        }
      });
    }
    /**
     * Create contract instance from code
     * @param {string} bs58checkCode base58-check encoded code
     * @return {Contract} contract instance
     */


    _createClass(Contract, [{
      key: "setAddress",

      /**
       * Set address of contract instance
       * @param {Address|string} address 
       * @return {Contract} contract instance
       */
      value: function setAddress(address) {
        this.address = new Address(address);
        return this;
      }
      /**
       * Load contract ABI
       * @param {obj} abi parsed JSON ABI
       * @return {Contract} contract instance
       */

    }, {
      key: "loadAbi",
      value: function loadAbi(abi) {
        var _this = this;

        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          var _loop = function _loop() {
            var definition = _step.value;

            _this.functions[definition.name] = function () {
              for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
              }

              return new FunctionCall(_this, definition, args);
            };
          };

          for (var _iterator = abi.functions[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            _loop();
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator["return"] != null) {
              _iterator["return"]();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        return this;
      }
      /**
       * Return contract code as payload for transaction
       * @param {args}
       * @return {Buffer} a byte buffer
       */

    }, {
      key: "asPayload",
      value: function asPayload(args) {
        if (!this.code || !this.code.length) {
          throw new Error('Code is required to generate payload');
        } // First 4 bytes are the length of code (incl. ABI)


        var len = Buffer.from(fromNumber(4 + this.code.length, 4));

        if (typeof args !== 'undefined') {
          var argsDecoded = Buffer.from(JSON.stringify(args));
          return Buffer.concat([len, this.code, argsDecoded]);
        }

        return Buffer.concat([len, this.code]);
      }
      /**
       * Create query object to query contract state.
       * @param keys list of keys, either strings or Buffer-like byte arrays
       * @param compressed return compressed proof (default: false)
       * @param root root hash
       */

    }, {
      key: "queryState",
      value: function queryState(keys, compressed, root) {
        function isBufferLike(arr) {
          return keys instanceof Buffer || keys instanceof Uint8Array || arr.length > 0 && typeof arr[0] === 'number';
        }

        var keyArray = typeof keys === 'string' || isBufferLike(keys) ? [keys] : keys; // `as any` is needed b/c https://github.com/microsoft/TypeScript/issues/14107#issuecomment-483995795

        return new StateQuery(this, keyArray, compressed, root);
      }
    }], [{
      key: "fromCode",
      value: function fromCode(bs58checkCode) {
        var decoded = Contract.decodeCode(bs58checkCode);
        return new Contract({
          code: decoded
        });
      }
      /**
       * Create contract instance and set address
       * @param {Address} address 
       * @return {Contract} contract instance 
       */

    }, {
      key: "fromSourceCode",
      value: function fromSourceCode(sourceCode) {
        return new Contract({
          code: Buffer.from(sourceCode)
        });
      }
      /**
       * Create contract instance and set address
       * @param {Address} address 
       * @return {Contract} contract instance 
       */

    }, {
      key: "atAddress",
      value: function atAddress(address) {
        var contract = new Contract({});
        contract.setAddress(address);
        return contract;
      }
      /**
       * Create contract instance from ABI
       * @param {obj} abi parsed JSON ABI
       * @return {Contract} contract instance
       */

    }, {
      key: "fromAbi",
      value: function fromAbi(abi) {
        var contract = new Contract({});
        contract.loadAbi(abi);
        return contract;
      }
    }, {
      key: "encodeCode",
      value: function encodeCode(byteArray) {
        var buf = Buffer.from([constants.ADDRESS_PREFIXES.CONTRACT].concat(_toConsumableArray(byteArray)));
        return bs58check.encode(buf);
      }
    }, {
      key: "decodeCode",
      value: function decodeCode(bs58checkCode) {
        return bs58check.decode(bs58checkCode).slice(1);
      }
    }]);

    return Contract;
  }();

  var Event =
  /*#__PURE__*/
  function () {
    function Event(data) {
      _classCallCheck(this, Event);

      _defineProperty(this, "address", void 0);

      _defineProperty(this, "args", void 0);

      _defineProperty(this, "eventName", void 0);

      _defineProperty(this, "eventidx", void 0);

      _defineProperty(this, "blockhash", void 0);

      _defineProperty(this, "txhash", void 0);

      _defineProperty(this, "blockno", void 0);

      _defineProperty(this, "txidx", void 0);

      Object.assign(this, data);
      this.address = new Address(this.address);
    }

    _createClass(Event, [{
      key: "toGrpc",
      value: function toGrpc() {
        throw new Error('Not implemented');
      }
    }], [{
      key: "fromGrpc",
      value: function fromGrpc(grpcObject) {
        return new Event({
          args: JSON.parse(grpcObject.getJsonargs()),
          address: new Address(grpcObject.getContractaddress_asU8()),
          eventName: grpcObject.getEventname(),
          blockhash: Block.encodeHash(grpcObject.getBlockhash_asU8()),
          txhash: Block.encodeHash(grpcObject.getTxhash_asU8()),
          txidx: grpcObject.getTxindex(),
          eventidx: grpcObject.getEventidx(),
          blockno: grpcObject.getBlockno()
        });
      }
    }]);

    return Event;
  }();

  function isArgMap(obj) {
    return obj instanceof Map;
  }

  var FilterInfo =
  /*#__PURE__*/
  function () {
    function FilterInfo(data) {
      _classCallCheck(this, FilterInfo);

      _defineProperty(this, "address", void 0);

      _defineProperty(this, "args", void 0);

      _defineProperty(this, "eventName", void 0);

      _defineProperty(this, "blockfrom", 0);

      _defineProperty(this, "blockto", 0);

      _defineProperty(this, "desc", true);

      Object.assign(this, data);
    }

    _createClass(FilterInfo, [{
      key: "toGrpc",
      value: function toGrpc() {
        var fi = new blockchain_pb_8();
        fi.setContractaddress(new Address(this.address).asBytes());

        if (this.args) {
          // The RPC handler only understands maps, not simple arrays
          // The advantage of this is that you can query positional arguments directly
          // Herajs supports both, so pass args either as a Map([[idx, value]]) or 0-indexed array [value]
          var argsAsObj;
          var argsObj = {};

          if (isArgMap(this.args)) {
            argsAsObj = Array.from(this.args).reduce(function (obj, _ref) {
              var _ref2 = _slicedToArray(_ref, 2),
                  idx = _ref2[0],
                  value = _ref2[1];

              obj['' + idx] = value;
              return obj;
            }, argsObj);
          } else {
            argsAsObj = this.args.reduce(function (obj, value, idx) {
              obj['' + idx] = value;
              return obj;
            }, argsObj);
          }

          var argsAsJson = JSON.stringify(argsAsObj);
          fi.setArgfilter(Buffer$1.from(argsAsJson));
        }

        if (this.eventName) {
          fi.setEventname(this.eventName);
        }

        if (this.blockfrom) {
          fi.setBlockfrom(this.blockfrom);
        }

        if (this.blockto) {
          fi.setBlockto(this.blockto);
        }

        if (this.desc) {
          fi.setDesc(this.desc);
        }

        return fi;
      }
    }], [{
      key: "fromGrpc",
      value: function fromGrpc(grpcObject) {
        return new FilterInfo({
          args: JSON.parse(Buffer$1.from(grpcObject.getArgfilter_asU8()).toString()),
          address: new Address(grpcObject.getContractaddress_asU8()),
          eventName: grpcObject.getEventname(),
          blockfrom: grpcObject.getBlockfrom(),
          blockto: grpcObject.getBlockto(),
          desc: grpcObject.getDesc()
        });
      }
    }]);

    return FilterInfo;
  }();

  function keys$1(o) {
    return Object.keys(o);
  }

  var Peer =
  /*#__PURE__*/
  function () {
    function Peer(data) {
      _classCallCheck(this, Peer);

      _defineProperty(this, "acceptedrole", void 0);

      Object.assign(this, data);
    }

    _createClass(Peer, [{
      key: "toGrpc",
      value: function toGrpc() {
        throw new Error('Not implemented');
      }
    }, {
      key: "acceptedroleLabel",
      get: function get() {
        var _this = this;

        var roles = Peer.Role;
        var key = keys$1(roles).find(function (key) {
          return roles[key] === _this.acceptedrole;
        });
        return key || '';
      }
    }], [{
      key: "fromGrpc",
      value: function fromGrpc(grpcObject) {
        var obj = grpcObject.toObject();
        var bestblock = grpcObject.getBestblock();

        if (bestblock && obj.bestblock) {
          obj.bestblock.blockhash = Block.encodeHash(bestblock.getBlockhash_asU8());
        }

        var address = grpcObject.getAddress();

        if (address) {
          // @ts-ignore
          obj.address = _objectSpread2({}, obj.address, {
            peerid: base58.encode(Buffer.from(address.getPeerid_asU8()))
          });
        }

        return new Peer(obj);
      }
    }]);

    return Peer;
  }();

  _defineProperty(Peer, "Role", node_pb_1);

  var State =
  /*#__PURE__*/
  function () {
    function State(data) {
      _classCallCheck(this, State);

      _defineProperty(this, "nonce", void 0);

      _defineProperty(this, "balance", void 0);

      _defineProperty(this, "codehash", void 0);

      _defineProperty(this, "storageroot", void 0);

      _defineProperty(this, "sqlrecoverypoint", void 0);

      Object.assign(this, data);
    }

    _createClass(State, [{
      key: "toGrpc",
      value: function toGrpc() {
        throw new Error('not implemented');
      }
    }], [{
      key: "fromGrpc",
      value: function fromGrpc(grpcObject) {
        return new State({
          nonce: grpcObject.getNonce(),
          balance: new Amount(grpcObject.getBalance_asU8()),
          codehash: grpcObject.getCodehash_asB64(),
          storageroot: grpcObject.getStorageroot_asB64(),
          sqlrecoverypoint: grpcObject.getSqlrecoverypoint()
        });
      }
    }]);

    return State;
  }();

  var ContractVarProof =
  /*#__PURE__*/
  function () {
    function ContractVarProof(data) {
      _classCallCheck(this, ContractVarProof);

      _defineProperty(this, "inclusion", void 0);

      _defineProperty(this, "key", void 0);

      _defineProperty(this, "value", void 0);

      _defineProperty(this, "proofKey", void 0);

      _defineProperty(this, "proofVal", void 0);

      _defineProperty(this, "bitmap", void 0);

      _defineProperty(this, "height", void 0);

      _defineProperty(this, "auditPath", void 0);

      Object.assign(this, data);
    }

    _createClass(ContractVarProof, [{
      key: "toGrpc",
      value: function toGrpc() {
        throw new Error('Not implemented');
      }
    }], [{
      key: "fromGrpc",
      value: function fromGrpc(grpcObject) {
        var valueRaw = grpcObject.getValue_asU8();
        var value = undefined;

        if (grpcObject.getInclusion()) {
          if (valueRaw.length > 0) {
            value = JSON.parse(Buffer.from(valueRaw).toString());
          } else {
            value = null;
          }
        }

        return new ContractVarProof({
          inclusion: grpcObject.getInclusion(),
          key: grpcObject.getKey_asU8(),
          value: value,
          proofKey: grpcObject.getProofkey_asU8(),
          proofVal: grpcObject.getProofval_asU8(),
          bitmap: grpcObject.getBitmap_asU8(),
          height: grpcObject.getHeight(),
          auditPath: grpcObject.getAuditpathList_asU8()
        });
      }
    }]);

    return ContractVarProof;
  }();

  var AccountProof =
  /*#__PURE__*/
  function () {
    function AccountProof(data) {
      _classCallCheck(this, AccountProof);

      _defineProperty(this, "state", void 0);

      _defineProperty(this, "inclusion", void 0);

      _defineProperty(this, "key", void 0);

      _defineProperty(this, "proofKey", void 0);

      _defineProperty(this, "proofVal", void 0);

      _defineProperty(this, "bitmap", void 0);

      _defineProperty(this, "height", void 0);

      _defineProperty(this, "auditPath", void 0);

      Object.assign(this, data);
    }

    _createClass(AccountProof, [{
      key: "toGrpc",
      value: function toGrpc() {
        throw new Error('Not implemented');
      }
    }], [{
      key: "fromGrpc",
      value: function fromGrpc(grpcObject) {
        var state = grpcObject.getState();
        return new AccountProof({
          state: state ? State.fromGrpc(state) : undefined,
          inclusion: grpcObject.getInclusion(),
          key: grpcObject.getKey_asU8(),
          proofKey: grpcObject.getProofkey_asU8(),
          proofVal: grpcObject.getProofval_asU8(),
          bitmap: grpcObject.getBitmap_asU8(),
          height: grpcObject.getHeight(),
          auditPath: grpcObject.getAuditpathList_asU8()
        });
      }
    }]);

    return AccountProof;
  }();

  var StateQueryProof =
  /*#__PURE__*/
  function () {
    function StateQueryProof(data) {
      _classCallCheck(this, StateQueryProof);

      _defineProperty(this, "contractProof", void 0);

      _defineProperty(this, "varProofs", void 0);

      Object.assign(this, data);
    }

    _createClass(StateQueryProof, [{
      key: "toGrpc",
      value: function toGrpc() {
        throw new Error('Not implemented');
      }
    }], [{
      key: "fromGrpc",
      value: function fromGrpc(grpcObject) {
        var contractProof = grpcObject.getContractproof();
        return new StateQueryProof({
          contractProof: contractProof ? AccountProof.fromGrpc(contractProof) : undefined,
          varProofs: grpcObject.getVarproofsList().map(function (grpcObject) {
            return ContractVarProof.fromGrpc(grpcObject);
          })
        });
      }
    }]);

    return StateQueryProof;
  }();

  function marshalEmpty() {
    return _marshalEmpty.apply(this, arguments);
  }

  function _marshalEmpty() {
    _marshalEmpty = _asyncToGenerator(function* () {
      return new rpc_pb_2();
    });
    return _marshalEmpty.apply(this, arguments);
  }

  function marshalHashOrNumberToSingleBytes(_x) {
    return _marshalHashOrNumberToSingleBytes.apply(this, arguments);
  }
  /**
   * Main aergo client controller.
   */


  function _marshalHashOrNumberToSingleBytes() {
    _marshalHashOrNumberToSingleBytes = _asyncToGenerator(function* (hashOrNumber) {
      if (typeof hashOrNumber === 'undefined') {
        throw new Error('Missing argument block hash or number');
      }

      var input;

      if (typeof hashOrNumber === 'string') {
        input = Block.decodeHash(hashOrNumber);
      } else if (typeof hashOrNumber === 'number') {
        input = fromNumber(hashOrNumber);
      }

      if (input.length != 32 && input.length != 8) {
        throw new Error('Invalid block hash. Must be 32 byte encoded in bs58. Did you mean to pass a block number?');
      }

      var singleBytes = new rpc_pb_4();
      singleBytes.setValue(Uint8Array.from(input));
      return singleBytes;
    });
    return _marshalHashOrNumberToSingleBytes.apply(this, arguments);
  }

  var AergoClient =
  /*#__PURE__*/
  function () {
    // @ts-ignore

    /**
     * Create a new auto-configured client with:
     * 
     * .. code-block:: javascript
     * 
     *     import AergoClient from '@herajs/client';
     *     const aergo = new AergoClient();
     * 
     * @param [object] configuration. Unused at the moment.
     * @param [Provider] custom configured provider. By default a provider is configured automatically depending on the environment.
     */
    function AergoClient() {
      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var provider = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

      _classCallCheck(this, AergoClient);

      _defineProperty(this, "config", void 0);

      _defineProperty(this, "client", void 0);

      _defineProperty(this, "accounts", void 0);

      _defineProperty(this, "target", void 0);

      _defineProperty(this, "chainIdHash", void 0);

      _defineProperty(this, "defaultLimit", void 0);

      this.config = _objectSpread2({}, config);
      this.client = provider || this.defaultProvider();
      this.accounts = new Accounts(this);
    }

    _createClass(AergoClient, [{
      key: "defaultProvider",
      value: function defaultProvider() {
        // returns a new instance of defaultProviderClass
        // which will be overriden during build according to platform
        return new AergoClient.defaultProviderClass();
      }
      /**
       * Set a new provider
       * @param {Provider} provider
       */

    }, {
      key: "setProvider",
      value: function setProvider(provider) {
        this.client = provider;
        this.chainIdHash = undefined;
      }
    }, {
      key: "getConfig",
      value: function getConfig() {
        return this.config;
      }
    }, {
      key: "isConnected",
      value: function isConnected() {
        // Legacy code for backwards compatability
        return false;
      }
    }, {
      key: "grpcMethod",
      value: function grpcMethod(method) {
        var _this2 = this;

        return function (request) {
          return promisify(method, _this2.client.client)(request);
        };
      }
      /**
       * Set the chain id hash to use for subsequent transactions.
       * @param hash string (base58 encoded) or byte array
       */

    }, {
      key: "setChainIdHash",
      value: function setChainIdHash(hash) {
        if (typeof hash === 'string') {
          this.chainIdHash = base58.decode(hash);
        } else {
          this.chainIdHash = hash;
        }
      }
      /**
       * Set the default gas limit to use for transactions that do not define their own.
       */

    }, {
      key: "setDefaultLimit",
      value: function setDefaultLimit(limit) {
        this.defaultLimit = limit;
      }
      /**
       * Request chain id hash. This automatically gathers the chain id hash
       * from the current node if not specified.
       * @param enc set to 'base58' to retrieve the hash encoded in base58. Otherwise returns a Uint8Array.
       * @returns {Promise<Uint8Array | string>} Uint8Array by default, base58 encoded string if enc = 'base58'.
       */
      //async getChainIdHash(enc?: 'base58'): Promise<string>;
      //async getChainIdHash(enc?: '' | undefined): Promise<Uint8Array>;

    }, {
      key: "getChainIdHash",
      value: function () {
        var _getChainIdHash = _asyncToGenerator(function* (enc) {
          if (typeof this.chainIdHash === 'undefined') {
            // Fetch blockchain data to set chainIdHash
            yield this.blockchain();
          }

          return encodeBuffer(this.chainIdHash, enc);
        });

        function getChainIdHash(_x2) {
          return _getChainIdHash.apply(this, arguments);
        }

        return getChainIdHash;
      }()
      /**
       * Request current status of blockchain.
       * @returns {Promise<object>} an object detailing the current status
       */

    }, {
      key: "blockchain",
      value: function blockchain() {
        var _this = this;

        return waterfall([marshalEmpty, this.grpcMethod(this.client.client.blockchain),
        /*#__PURE__*/
        function () {
          var _unmarshal = _asyncToGenerator(function* (response) {
            if (typeof _this.chainIdHash === 'undefined') {
              // set chainIdHash automatically
              _this.setChainIdHash(Buffer$1.from(response.getBestChainIdHash_asU8()));
            }

            return {
              bestHeight: response.getBestHeight(),
              bestBlockHash: Block.encodeHash(response.getBestBlockHash_asU8()),
              bestChainIdHash: Block.encodeHash(response.getBestChainIdHash_asU8()),
              chainInfo: ChainInfo.fromGrpc(response.getChainInfo()),
              consensusInfo: JSON.parse(response.getConsensusInfo())
            };
          });

          function unmarshal(_x3) {
            return _unmarshal.apply(this, arguments);
          }

          return unmarshal;
        }()])(null);
      }
      /**
       * Request current status of blockchain.
       * @returns {Promise<object>} an object detailing the current status
       */

    }, {
      key: "getChainInfo",
      value: function getChainInfo() {
        return waterfall([marshalEmpty, this.grpcMethod(this.client.client.getChainInfo),
        /*#__PURE__*/
        function () {
          var _unmarshal2 = _asyncToGenerator(function* (response) {
            return ChainInfo.fromGrpc(response);
          });

          function unmarshal(_x4) {
            return _unmarshal2.apply(this, arguments);
          }

          return unmarshal;
        }()])(null);
      }
      /**
       * Request current status of node.
       * @returns {Promise<any>} an object detailing the state of various node components
       */

    }, {
      key: "getNodeState",
      value: function getNodeState(component) {
        var timeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 5;
        return waterfall([
        /*#__PURE__*/
        function () {
          var _marshal = _asyncToGenerator(function* (component) {
            var params = new rpc_pb_14();
            params.setTimeout(fromNumber(timeout));

            if (typeof component !== 'undefined') {
              params.setComponent(Buffer$1.from(component));
            }

            return params;
          });

          function marshal(_x5) {
            return _marshal.apply(this, arguments);
          }

          return marshal;
        }(), this.grpcMethod(this.client.client.nodeState),
        /*#__PURE__*/
        function () {
          var _unmarshal3 = _asyncToGenerator(function* (response) {
            return JSON.parse(Buffer$1.from(response.getValue_asU8()).toString());
          });

          function unmarshal(_x6) {
            return _unmarshal3.apply(this, arguments);
          }

          return unmarshal;
        }()])(component);
      }
      /**
       * Get transaction information in the aergo node. 
       * If transaction is in the block return result with block hash and index.
       * @param {string} txhash transaction hash
       * @returns {Promise<object>} transaction details, object of tx: <Tx> and block: { hash, idx }
       */

    }, {
      key: "getTransaction",
      value: function getTransaction(txhash) {
        var _this3 = this;

        var singleBytes = new rpc_pb_4();
        singleBytes.setValue(Uint8Array.from(decodeTxHash(txhash)));
        return new Promise(function (resolve, reject) {
          _this3.client.client.getBlockTX(singleBytes, function (err, result) {
            if (err) {
              _this3.client.client.getTX(singleBytes, function (err, result) {
                if (err) {
                  reject(err);
                } else {
                  var res = {
                    tx: SignedTx.fromGrpc(result)
                  };
                  resolve(res);
                }
              });
            } else {
              var res = {
                block: {
                  hash: Block.encodeHash(result.getTxidx().getBlockhash_asU8()),
                  idx: result.getTxidx().getIdx()
                },
                tx: SignedTx.fromGrpc(result.getTx())
              };
              resolve(res);
            }
          });
        });
      }
      /**
       * Retrieve information about a block.
       * 
       * @param hashOrNumber either 32-byte block hash encoded as a bs58 string or block height as a number.
       * @returns block details
       */

    }, {
      key: "getBlock",
      value: function getBlock(hashOrNumber) {
        return waterfall([marshalHashOrNumberToSingleBytes, this.grpcMethod(this.client.client.getBlock),
        /*#__PURE__*/
        function () {
          var _unmarshal4 = _asyncToGenerator(function* (response) {
            return Block.fromGrpc(response);
          });

          function unmarshal(_x7) {
            return _unmarshal4.apply(this, arguments);
          }

          return unmarshal;
        }()])(hashOrNumber);
      }
      /**
       * Retrieve block metadata (excluding body).
       * 
       * @param hashOrNumber either 32-byte block hash encoded as a bs58 string or block height as a number.
       * @returns block metadata
       */

    }, {
      key: "getBlockMetadata",
      value: function getBlockMetadata(hashOrNumber) {
        return waterfall([marshalHashOrNumberToSingleBytes, this.grpcMethod(this.client.client.getBlockMetadata),
        /*#__PURE__*/
        function () {
          var _unmarshal5 = _asyncToGenerator(function* (response) {
            return BlockMetadata.fromGrpc(response);
          });

          function unmarshal(_x8) {
            return _unmarshal5.apply(this, arguments);
          }

          return unmarshal;
        }()])(hashOrNumber);
      }
      /**
       * Retrieve the last n blocks, beginning from given block
       * 
       * @param {string|number} hashOrNumber either 32-byte block hash encoded as a bs58 string or block height as a number.
       * @param {number} size number of blocks to return
       * @param {number} offset number of blocks to skip
       * @param {boolean} desc order of blocks
       * @returns {Promise<Block[]>} list of block headers (blocks without body)
       */

    }, {
      key: "getBlockHeaders",
      value: function getBlockHeaders(hashOrNumber) {
        var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;
        var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
        var desc = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
        var params = new rpc_pb_9();

        if (typeof hashOrNumber === 'string') {
          var decodedHash = Block.decodeHash(hashOrNumber);

          if (decodedHash.length != 32) {
            throw new Error('Invalid block hash. Must be 32 byte encoded in bs58. Did you mean to pass a block number?');
          }

          params.setHash(Uint8Array.from(decodedHash));
        } else if (typeof hashOrNumber === 'number') {
          params.setHeight(hashOrNumber);
        } else {
          throw new Error('Block hash or number required.');
        }

        params.setSize(size);
        params.setOffset(offset);
        params.setAsc(!desc);
        return promisify(this.client.client.listBlockHeaders, this.client.client)(params).then(function (result) {
          return result.getBlocksList().map(function (item) {
            return Block.fromGrpc(item);
          });
        });
      }
    }, {
      key: "getBlockStream",
      value: function getBlockStream() {
        var empty = new rpc_pb_2();
        var stream = this.client.client.listBlockStream(empty);

        try {
          stream.on('error', function (error) {
            if (error.code === 1) {
              // grpc.status.CANCELLED
              return;
            }
          });
        } catch (e) {// ignore. 'error' does not work on grpc-web implementation
        }

        var ret = {
          _stream: stream,
          on: function on(ev, callback) {
            return stream.on(ev, function (data) {
              return callback(Block.fromGrpc(data));
            });
          },
          cancel: function cancel() {
            return stream.cancel();
          }
        };
        return ret;
      }
      /**
       * Returns a stream of block metadata
       */

    }, {
      key: "getBlockMetadataStream",
      value: function getBlockMetadataStream() {
        var empty = new rpc_pb_2();
        var stream = this.client.client.listBlockMetadataStream(empty);

        try {
          stream.on('error', function (error) {
            if (error.code === 1) {
              // grpc.status.CANCELLED
              return;
            }
          });
        } catch (e) {// ignore. 'error' does not work on grpc-web implementation
        }

        var ret = {
          _stream: stream,
          on: function on(ev, callback) {
            return stream.on(ev, function (data) {
              return callback(BlockMetadata.fromGrpc(data));
            });
          },
          cancel: function cancel() {
            return stream.cancel();
          }
        };
        return ret;
      }
      /**
       * Get the transactions of a block in a paged manner
       * @param hash 
       * @param offset 
       * @param size 
       */

    }, {
      key: "getBlockBody",
      value: function () {
        var _getBlockBody = _asyncToGenerator(function* (hashOrNumber) {
          var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
          var size = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 10;
          var paging = new rpc_pb_17();
          paging.setOffset(offset);
          paging.setSize(size);
          var params = new rpc_pb_18();
          params.setHashornumber((yield marshalHashOrNumberToSingleBytes(hashOrNumber)).getValue());
          params.setPaging(paging);
          return yield promisify(this.client.client.getBlockBody, this.client.client)(params).then(function (grpcObject) {
            var obj = grpcObject.toObject();

            if (obj.body && obj.body.txsList) {
              // @ts-ignore
              obj.body.txsList = grpcObject.getBody().getTxsList().map(function (tx) {
                return Tx.fromGrpc(tx);
              });
            }

            return obj;
          });
        });

        function getBlockBody(_x9) {
          return _getBlockBody.apply(this, arguments);
        }

        return getBlockBody;
      }()
      /**
       * Returns a stream that yields new events matching the specified filter in real-time.
       * 
       * .. code-block:: javascript
       * 
       *      const stream = aergo.getEventStream({
       *          address: 'Am....'
       *      });
       *      stream.on('data', (event) => {
       *         console.log(event);
       *         stream.cancel();
       *      });
       * 
       * @param {FilterInfo} filter :class:`FilterInfo`
       * @returns {Stream<Event>} event stream
       */

    }, {
      key: "getEventStream",
      value: function getEventStream(filter) {
        var fi = new FilterInfo(filter);
        var query = fi.toGrpc();
        var stream = this.client.client.listEventStream(query);

        try {
          stream.on('error', function (error) {
            if (error.code === 1) {
              // grpc.status.CANCELLED
              return;
            }
          });
        } catch (e) {// ignore. 'error' does not work on grpc-web implementation
        }

        var ret = {
          _stream: stream,
          on: function on(ev, callback) {
            return stream.on(ev, function (data) {
              return callback(Event.fromGrpc(data));
            });
          },
          cancel: function cancel() {
            return stream.cancel();
          }
        };
        return ret;
      }
      /**
       * Retrieve account state, including current balance and nonce.
       * @param {string} address Account address encoded in Base58check
       * @returns {Promise<object>} account state
       */

    }, {
      key: "getState",
      value: function getState(address) {
        var singleBytes = new rpc_pb_4();
        singleBytes.setValue(Uint8Array.from(new Address(address).asBytes()));
        return promisify(this.client.client.getState, this.client.client)(singleBytes).then(function (grpcObject) {
          return State.fromGrpc(grpcObject);
        });
      }
      /**
       * Retrieve account's most recenlty used nonce.
       * This is a shortcut function as the same information is also returned by getState.
       * @param {string} address Account address encoded in Base58check
       * @returns {Promise<object>} account state
       */

    }, {
      key: "getNonce",
      value: function getNonce(address) {
        var singleBytes = new rpc_pb_4();
        singleBytes.setValue(Uint8Array.from(new Address(address).asBytes()));
        return promisify(this.client.client.getState, this.client.client)(singleBytes).then(function (grpcObject) {
          return grpcObject.getNonce();
        });
      }
      /**
       * Send one or more signed transaction to the network.
       * @param {Tx} tx signed transaction or array of multiple signed transactions
       * @returns {Promise<string>} transaction hash
       */

    }, {
      key: "sendSignedTransaction",
      value: function sendSignedTransaction(tx) {
        var _this4 = this;

        return new Promise(function (resolve, reject) {
          var txList = new blockchain_pb_1();
          var txs = Array.isArray(tx) ? tx : [tx];
          var txCount = txs.length;
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = undefined;

          try {
            for (var _iterator = txs.entries()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var _step$value = _slicedToArray(_step.value, 2),
                  index = _step$value[0],
                  _tx = _step$value[1];

              var _tx2 = _tx instanceof Tx ? _tx : new Tx(_tx);

              txList.addTxs(_tx2.toGrpc(), index);
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator["return"] != null) {
                _iterator["return"]();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }

          _this4.client.client.commitTX(txList, function (err, result) {
            if (err == null && result.getResultsList()[0].getError() && txCount === 1) {
              var obj = result.getResultsList()[0].toObject();
              err = new TransactionError(errorMessageForCode(obj.error) + ': ' + obj.detail);
            }

            if (err) {
              reject(new TransactionError(err.message));
            } else {
              var hashes = result.getResultsList().map(function (res) {
                var error = res.getError();

                if (error) {
                  return {
                    error: errorMessageForCode(error) + ': ' + res.getDetail()
                  };
                }

                return {
                  hash: encodeTxHash(res.getHash_asU8())
                };
              });

              if (txCount === 1) {
                resolve(hashes[0].hash);
              } else {
                resolve(hashes);
              }
            }
          });
        });
      }
      /**
       * Return the top {count} result for a vote
       * @param count number
       * @param id vote identifier, default: voteBP
       */

    }, {
      key: "getTopVotes",
      value: function getTopVotes(count) {
        var id = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'voteBP';
        var params = new rpc_pb_13();
        params.setCount(count);
        params.setId(id);
        return promisify(this.client.client.getVotes, this.client.client)(params).then(function (state) {
          return state.getVotesList().map(function (item) {
            return {
              amount: new Amount(item.getAmount_asU8()),
              candidate: id === 'voteBP' ? base58.encode(Buffer$1.from(item.getCandidate_asU8())) : Buffer$1.from(item.getCandidate_asU8()).toString()
            };
          });
        });
      }
      /**
       * Return the top voted-for block producer or system parameter
       * @param address string
       */

    }, {
      key: "getAccountVotes",
      value: function getAccountVotes(address) {
        var accountAddress = new rpc_pb_1();
        accountAddress.setValue(Uint8Array.from(new Address(address).asBytes()));
        return promisify(this.client.client.getAccountVotes, this.client.client)(accountAddress);
      }
      /**
       * Return information for account name
       * @param {string} address Account address encoded in Base58check
       */

    }, {
      key: "getStaking",
      value: function getStaking(address) {
        var singleBytes = new rpc_pb_4();
        singleBytes.setValue(Uint8Array.from(new Address(address).asBytes()));
        return promisify(this.client.client.getStaking, this.client.client)(singleBytes).then(function (grpcObject) {
          return {
            amount: new Amount(grpcObject.getAmount_asU8()),
            when: grpcObject.getWhen()
          };
        });
      }
      /**
       * Retrieve the transaction receipt for a transaction
       * @param {string} txhash transaction hash
       * @return {Promise<object>} transaction receipt
       */

    }, {
      key: "getTransactionReceipt",
      value: function getTransactionReceipt(txhash) {
        var singleBytes = new rpc_pb_4();
        singleBytes.setValue(Uint8Array.from(decodeTxHash(txhash)));
        return promisify(this.client.client.getReceipt, this.client.client)(singleBytes).then(function (grpcObject) {
          var obj = grpcObject.toObject();
          var ret = {
            contractaddress: new Address(grpcObject.getContractaddress_asU8()),
            result: obj.ret,
            status: obj.status,
            fee: new Amount(grpcObject.getFeeused_asU8()),
            cumulativefee: new Amount(grpcObject.getCumulativefeeused_asU8()),
            blockno: obj.blockno,
            blockhash: Block.encodeHash(grpcObject.getBlockhash_asU8()),
            feeDelegation: obj.feedelegation,
            gasused: obj.gasused
          };
          return ret;
        });
      }
      /**
       * Retrieve the transaction receipt for a transaction, but keep retrying if not available yet.
       * Uses expoinential backoff and a final timeout.
       * @param {string} txhash transaction hash
       * @param {number} timeout throws error when timeout is reached
       * @param {number} baseBackoffInterval base time for exponentail backoff
       * @return {Promise<object>} transaction receipt
       */

    }, {
      key: "waitForTransactionReceipt",
      value: function waitForTransactionReceipt(txhash) {
        var _this5 = this;

        var timeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        var baseBackoffInterval = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 500;
        var started = new Date();
        var retryCount = 0;

        var retryLoad =
        /*#__PURE__*/
        function () {
          var _ref = _asyncToGenerator(function* () {
            try {
              return yield _this5.getTransactionReceipt(txhash);
            } catch (e) {
              var details = "".concat(e.details || e.message);

              if (!details.match(/tx not found/)) {
                throw e;
              }

              var interval = backoffIntervalStep(retryCount++, baseBackoffInterval);

              if (timeout) {
                var elapsed = +new Date() - +started;

                if (elapsed + interval >= timeout) {
                  var unit = elapsed < 1000 ? 'ms' : 's';
                  var elapsedFormat = elapsed < 1000 ? elapsed : Math.round(elapsed / 100) / 10;
                  throw new Error("timeout after ".concat(elapsedFormat).concat(unit, ": tx not found"));
                }
              }

              yield waitFor(interval);
              return yield retryLoad();
            }
          });

          return function retryLoad() {
            return _ref.apply(this, arguments);
          };
        }();

        return retryLoad();
      }
      /**
       * Query contract ABI
       * @param {FunctionCall} functionCall call details
       * @returns {Promise<object>} result of query
       */

    }, {
      key: "queryContract",
      value: function queryContract(functionCall) {
        var query = functionCall.toGrpc();
        return promisify(this.client.client.queryContract, this.client.client)(query).then(function (grpcObject) {
          return JSON.parse(Buffer$1.from(grpcObject.getValue()).toString());
        });
      }
      /**
       * Query contract state.
       * This only works for variables explicitly defines as state variables.
       * Throws when contract do not exist, or when variable does not exist when requesting single key.
       * @param {StateQuery} stateQuery query details obtained from contract.queryState()
       * @returns {Promise<JsonData>} result of query: single value if requesting one key, list of values when requesting multiple keys.
       */

    }, {
      key: "queryContractState",
      value: function queryContractState(stateQuery) {
        var query = stateQuery.toGrpc();
        return promisify(this.client.client.queryContractState, this.client.client)(query).then(function (grpcObject) {
          var addr = new Address(query.getContractaddress_asU8());

          if (grpcObject.getContractproof().getInclusion() === false) {
            throw Error("contract does not exist at address ".concat(addr.toString()));
          }

          var list = grpcObject.getVarproofsList();

          if (list.length === 1) {
            var varProof = list[0];

            if (varProof.getInclusion() === false) {
              throw Error("queried variable 0x".concat(Buffer$1.from(stateQuery.storageKeys[0]).toString('hex'), " does not exist in state at address ").concat(addr.toString()));
            }

            var value = varProof.getValue_asU8();

            if (value.length > 0) {
              return JSON.parse(Buffer$1.from(value).toString());
            }
          }

          return list.map(function (varProof) {
            var value = varProof.getValue_asU8();

            if (value.length > 0) {
              return JSON.parse(Buffer$1.from(value).toString());
            }

            return void 0;
          });
        });
      }
      /**
       * Query contract state, including proofs.
       * This only works vor variables explicitly defines as state variables.
       * @param {StateQuery} stateQuery query details obtained from contract.queryState()
       * @returns {Promise<StateQueryProof>} result of query, including account and var proofs
       */

    }, {
      key: "queryContractStateProof",
      value: function queryContractStateProof(stateQuery) {
        var query = stateQuery.toGrpc();
        return promisify(this.client.client.queryContractState, this.client.client)(query).then(function (grpcObject) {
          return StateQueryProof.fromGrpc(grpcObject);
        });
      }
      /**
       * Query contract state
       * This only works vor variables explicitly defines as state variables.
       * @param {FilterInfo} filter :class:`FilterInfo`
       * @returns {Event[]} list of events
       */

    }, {
      key: "getEvents",
      value: function getEvents(filter) {
        var fi = new FilterInfo(filter);
        var query = fi.toGrpc();
        return promisify(this.client.client.listEvents, this.client.client)(query).then(function (grpcObject) {
          var list = grpcObject.getEventsList();
          return list.map(function (item) {
            return Event.fromGrpc(item);
          });
        });
      }
      /**
       * Query contract ABI
       * @param {string} address of contract
       * @returns {Promise<object>} abi
       */

    }, {
      key: "getABI",
      value: function getABI(address) {
        var singleBytes = new rpc_pb_4();
        singleBytes.setValue(Uint8Array.from(new Address(address).asBytes()));
        return promisify(this.client.client.getABI, this.client.client)(singleBytes).then(function (grpcObject) {
          var obj = grpcObject.toObject();
          return {
            language: obj.language,
            version: obj.version,
            functions: obj.functionsList.map(function (item) {
              return {
                name: item.name,
                arguments: item.argumentsList,
                view: item.view,
                payable: item.payable,
                feeDelegation: item.feeDelegation
              };
            }),
            'state_variables': obj.stateVariablesList
          };
        });
      }
      /**
       * Get list of peers of connected node
       */

    }, {
      key: "getPeers",
      value: function getPeers() {
        var showself = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
        var showhidden = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
        var query = new rpc_pb_12();
        query.setNohidden(!showhidden);
        query.setShowself(showself);
        return promisify(this.client.client.getPeers, this.client.client)(query).then(function (grpcObject) {
          return grpcObject.getPeersList().map(function (peer) {
            return Peer.fromGrpc(peer);
          });
        });
      }
      /**
       * Return information for account name
       * @param name 
       */

    }, {
      key: "getNameInfo",
      value: function getNameInfo(name) {
        var blockno = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        var nameObj = new rpc_pb_11();
        nameObj.setName(name);
        nameObj.setBlockno(blockno);
        return promisify(this.client.client.getNameInfo, this.client.client)(nameObj).then(function (grpcObject) {
          var obj = grpcObject.toObject();
          return {
            name: obj.name.name,
            owner: new Address(grpcObject.getOwner_asU8()),
            destination: new Address(grpcObject.getDestination_asU8())
          };
        });
      }
      /**
       * Return consensus info. The included fields can differ by consensus type.
       */

    }, {
      key: "getConsensusInfo",
      value: function getConsensusInfo() {
        return waterfall([marshalEmpty, this.grpcMethod(this.client.client.getConsensusInfo),
        /*#__PURE__*/
        function () {
          var _unmarshal6 = _asyncToGenerator(function* (response) {
            var obj = response.toObject();
            var result = {
              type: obj.type,
              info: obj.info ? JSON.parse(obj.info) : {},
              bpsList: obj.bpsList.map(function (info) {
                return JSON.parse(info);
              })
            };
            return result;
          });

          function unmarshal(_x10) {
            return _unmarshal6.apply(this, arguments);
          }

          return unmarshal;
        }()])(null);
      }
      /**
       * Return server info
       */

    }, {
      key: "getServerInfo",
      value: function getServerInfo(keys) {
        return waterfall([
        /*#__PURE__*/
        function () {
          var _marshal2 = _asyncToGenerator(function* (keys) {
            var params = new rpc_pb_15();

            if (typeof keys !== 'undefined') {
              params.setKeyList(keys);
            }

            return params;
          });

          function marshal(_x11) {
            return _marshal2.apply(this, arguments);
          }

          return marshal;
        }(), this.grpcMethod(this.client.client.getServerInfo),
        /*#__PURE__*/
        function () {
          var _unmarshal7 = _asyncToGenerator(function* (response) {
            var obj = response.toObject();
            var result = {
              configMap: new Map(),
              statusMap: new Map(obj.statusMap)
            };
            var configMap = new Map(obj.configMap);
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
              for (var _iterator2 = configMap[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                var _step2$value = _slicedToArray(_step2.value, 2),
                    key = _step2$value[0],
                    item = _step2$value[1];

                result.configMap.set(key, new Map(item.propsMap));
              }
            } catch (err) {
              _didIteratorError2 = true;
              _iteratorError2 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
                  _iterator2["return"]();
                }
              } finally {
                if (_didIteratorError2) {
                  throw _iteratorError2;
                }
              }
            }

            return result;
          });

          function unmarshal(_x12) {
            return _unmarshal7.apply(this, arguments);
          }

          return unmarshal;
        }()])(keys);
      }
    }]);

    return AergoClient;
  }();

  _defineProperty(AergoClient, "defaultProviderClass", void 0);

  _defineProperty(AergoClient, "platform", '');

  var grpcWebClient_umd = createCommonjsModule(function (module, exports) {
    !function (e, t) {
      module.exports = t();
    }(commonjsGlobal, function () {
      return function (e) {
        var t = {};

        function n(r) {
          if (t[r]) return t[r].exports;
          var o = t[r] = {
            i: r,
            l: !1,
            exports: {}
          };
          return e[r].call(o.exports, o, o.exports, n), o.l = !0, o.exports;
        }

        return n.m = e, n.c = t, n.d = function (e, t, r) {
          n.o(e, t) || Object.defineProperty(e, t, {
            enumerable: !0,
            get: r
          });
        }, n.r = function (e) {
          "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, {
            value: "Module"
          }), Object.defineProperty(e, "__esModule", {
            value: !0
          });
        }, n.t = function (e, t) {
          if (1 & t && (e = n(e)), 8 & t) return e;
          if (4 & t && "object" == _typeof(e) && e && e.__esModule) return e;
          var r = Object.create(null);
          if (n.r(r), Object.defineProperty(r, "default", {
            enumerable: !0,
            value: e
          }), 2 & t && "string" != typeof e) for (var o in e) {
            n.d(r, o, function (t) {
              return e[t];
            }.bind(null, o));
          }
          return r;
        }, n.n = function (e) {
          var t = e && e.__esModule ? function () {
            return e["default"];
          } : function () {
            return e;
          };
          return n.d(t, "a", t), t;
        }, n.o = function (e, t) {
          return Object.prototype.hasOwnProperty.call(e, t);
        }, n.p = "", n(n.s = 11);
      }([function (e, t, n) {

        Object.defineProperty(t, "__esModule", {
          value: !0
        });
        var r = n(4);
        t.Metadata = r.BrowserHeaders;
      }, function (e, t, n) {

        Object.defineProperty(t, "__esModule", {
          value: !0
        }), t.debug = function () {
          for (var e = [], t = 0; t < arguments.length; t++) {
            e[t] = arguments[t];
          }

          console.debug ? console.debug.apply(null, e) : console.log.apply(null, e);
        };
      }, function (e, t, n) {

        Object.defineProperty(t, "__esModule", {
          value: !0
        });
        var r = null;

        t["default"] = function (e) {
          null === r ? (r = [e], setTimeout(function () {
            !function e() {
              if (r) {
                var t = r;
                r = null;

                for (var n = 0; n < t.length; n++) {
                  try {
                    t[n]();
                  } catch (s) {
                    null === r && (r = [], setTimeout(function () {
                      e();
                    }, 0));

                    for (var o = t.length - 1; o > n; o--) {
                      r.unshift(t[o]);
                    }

                    throw s;
                  }
                }
              }
            }();
          }, 0)) : r.push(e);
        };
      }, function (e, t, n) {

        Object.defineProperty(t, "__esModule", {
          value: !0
        });
        var r = n(0),
            o = n(9),
            s = n(10),
            i = n(1),
            a = n(2),
            u = n(5),
            d = n(15);

        t.client = function (e, t) {
          return new c(e, t);
        };

        var c = function () {
          function e(e, t) {
            this.started = !1, this.sentFirstMessage = !1, this.completed = !1, this.closed = !1, this.finishedSending = !1, this.onHeadersCallbacks = [], this.onMessageCallbacks = [], this.onEndCallbacks = [], this.parser = new o.ChunkParser(), this.methodDefinition = e, this.props = t, this.createTransport();
          }

          return e.prototype.createTransport = function () {
            var e = this.props.host + "/" + this.methodDefinition.service.serviceName + "/" + this.methodDefinition.methodName,
                t = {
              methodDefinition: this.methodDefinition,
              debug: this.props.debug || !1,
              url: e,
              onHeaders: this.onTransportHeaders.bind(this),
              onChunk: this.onTransportChunk.bind(this),
              onEnd: this.onTransportEnd.bind(this)
            };
            this.props.transport ? this.transport = this.props.transport(t) : this.transport = u.makeDefaultTransport(t);
          }, e.prototype.onTransportHeaders = function (e, t) {
            if (this.props.debug && i.debug("onHeaders", e, t), this.closed) this.props.debug && i.debug("grpc.onHeaders received after request was closed - ignoring");else if (0 === t) ;else {
              this.responseHeaders = e, this.props.debug && i.debug("onHeaders.responseHeaders", JSON.stringify(this.responseHeaders, null, 2));
              var n = p(e);
              this.props.debug && i.debug("onHeaders.gRPCStatus", n);
              var r = n && n >= 0 ? n : s.httpStatusToCode(t);
              this.props.debug && i.debug("onHeaders.code", r);
              var o = e.get("grpc-message") || [];

              if (this.props.debug && i.debug("onHeaders.gRPCMessage", o), this.rawOnHeaders(e), r !== s.Code.OK) {
                var a = this.decodeGRPCStatus(o[0]);
                this.rawOnError(r, a, e);
              }
            }
          }, e.prototype.onTransportChunk = function (e) {
            var t = this;
            if (this.closed) this.props.debug && i.debug("grpc.onChunk received after request was closed - ignoring");else {
              var n = [];

              try {
                n = this.parser.parse(e);
              } catch (e) {
                return this.props.debug && i.debug("onChunk.parsing error", e, e.message), void this.rawOnError(s.Code.Internal, "parsing error: " + e.message);
              }

              n.forEach(function (e) {
                if (e.chunkType === o.ChunkType.MESSAGE) {
                  var n = t.methodDefinition.responseType.deserializeBinary(e.data);
                  t.rawOnMessage(n);
                } else e.chunkType === o.ChunkType.TRAILERS && (t.responseHeaders ? (t.responseTrailers = new r.Metadata(e.trailers), t.props.debug && i.debug("onChunk.trailers", t.responseTrailers)) : (t.responseHeaders = new r.Metadata(e.trailers), t.rawOnHeaders(t.responseHeaders)));
              });
            }
          }, e.prototype.onTransportEnd = function () {
            if (this.props.debug && i.debug("grpc.onEnd"), this.closed) this.props.debug && i.debug("grpc.onEnd received after request was closed - ignoring");else if (void 0 !== this.responseTrailers) {
              var e = p(this.responseTrailers);

              if (null !== e) {
                var t = this.responseTrailers.get("grpc-message"),
                    n = this.decodeGRPCStatus(t[0]);
                this.rawOnEnd(e, n, this.responseTrailers);
              } else this.rawOnError(s.Code.Internal, "Response closed without grpc-status (Trailers provided)");
            } else {
              if (void 0 === this.responseHeaders) return void this.rawOnError(s.Code.Unknown, "Response closed without headers");
              var r = p(this.responseHeaders),
                  o = this.responseHeaders.get("grpc-message");
              if (this.props.debug && i.debug("grpc.headers only response ", r, o), null === r) return void this.rawOnEnd(s.Code.Unknown, "Response closed without grpc-status (Headers only)", this.responseHeaders);
              var a = this.decodeGRPCStatus(o[0]);
              this.rawOnEnd(r, a, this.responseHeaders);
            }
          }, e.prototype.decodeGRPCStatus = function (e) {
            if (!e) return "";

            try {
              return decodeURIComponent(e);
            } catch (t) {
              return e;
            }
          }, e.prototype.rawOnEnd = function (e, t, n) {
            var r = this;
            this.props.debug && i.debug("rawOnEnd", e, t, n), this.completed || (this.completed = !0, this.onEndCallbacks.forEach(function (o) {
              a["default"](function () {
                r.closed || o(e, t, n);
              });
            }));
          }, e.prototype.rawOnHeaders = function (e) {
            this.props.debug && i.debug("rawOnHeaders", e), this.completed || this.onHeadersCallbacks.forEach(function (t) {
              a["default"](function () {
                t(e);
              });
            });
          }, e.prototype.rawOnError = function (e, t, n) {
            var o = this;
            void 0 === n && (n = new r.Metadata()), this.props.debug && i.debug("rawOnError", e, t), this.completed || (this.completed = !0, this.onEndCallbacks.forEach(function (r) {
              a["default"](function () {
                o.closed || r(e, t, n);
              });
            }));
          }, e.prototype.rawOnMessage = function (e) {
            var t = this;
            this.props.debug && i.debug("rawOnMessage", e.toObject()), this.completed || this.closed || this.onMessageCallbacks.forEach(function (n) {
              a["default"](function () {
                t.closed || n(e);
              });
            });
          }, e.prototype.onHeaders = function (e) {
            this.onHeadersCallbacks.push(e);
          }, e.prototype.onMessage = function (e) {
            this.onMessageCallbacks.push(e);
          }, e.prototype.onEnd = function (e) {
            this.onEndCallbacks.push(e);
          }, e.prototype.start = function (e) {
            if (this.started) throw new Error("Client already started - cannot .start()");
            this.started = !0;
            var t = new r.Metadata(e || {});
            t.set("content-type", "application/grpc-web+proto"), t.set("x-grpc-web", "1"), this.transport.start(t);
          }, e.prototype.send = function (e) {
            if (!this.started) throw new Error("Client not started - .start() must be called before .send()");
            if (this.closed) throw new Error("Client already closed - cannot .send()");
            if (this.finishedSending) throw new Error("Client already finished sending - cannot .send()");
            if (!this.methodDefinition.requestStream && this.sentFirstMessage) throw new Error("Message already sent for non-client-streaming method - cannot .send()");
            this.sentFirstMessage = !0;
            var t = d.frameRequest(e);
            this.transport.sendMessage(t);
          }, e.prototype.finishSend = function () {
            if (!this.started) throw new Error("Client not started - .finishSend() must be called before .close()");
            if (this.closed) throw new Error("Client already closed - cannot .send()");
            if (this.finishedSending) throw new Error("Client already finished sending - cannot .finishSend()");
            this.finishedSending = !0, this.transport.finishSend();
          }, e.prototype.close = function () {
            if (!this.started) throw new Error("Client not started - .start() must be called before .close()");
            if (this.closed) throw new Error("Client already closed - cannot .close()");
            this.closed = !0, this.props.debug && i.debug("request.abort aborting request"), this.transport.cancel();
          }, e;
        }();

        function p(e) {
          var t = e.get("grpc-status") || [];
          if (t.length > 0) try {
            var n = t[0];
            return parseInt(n, 10);
          } catch (e) {
            return null;
          }
          return null;
        }
      }, function (e, t, n) {
        var r;
        r = function r() {
          return function (e) {
            var t = {};

            function n(r) {
              if (t[r]) return t[r].exports;
              var o = t[r] = {
                i: r,
                l: !1,
                exports: {}
              };
              return e[r].call(o.exports, o, o.exports, n), o.l = !0, o.exports;
            }

            return n.m = e, n.c = t, n.i = function (e) {
              return e;
            }, n.d = function (e, t, r) {
              n.o(e, t) || Object.defineProperty(e, t, {
                configurable: !1,
                enumerable: !0,
                get: r
              });
            }, n.n = function (e) {
              var t = e && e.__esModule ? function () {
                return e["default"];
              } : function () {
                return e;
              };
              return n.d(t, "a", t), t;
            }, n.o = function (e, t) {
              return Object.prototype.hasOwnProperty.call(e, t);
            }, n.p = "", n(n.s = 1);
          }([function (e, t, n) {

            Object.defineProperty(t, "__esModule", {
              value: !0
            });
            var r = n(3);

            var o = function () {
              function e(e, t) {
                void 0 === e && (e = {}), void 0 === t && (t = {
                  splitValues: !1
                });
                var n,
                    o = this;
                if (this.headersMap = {}, e) if ("undefined" != typeof Headers && e instanceof Headers) r.getHeaderKeys(e).forEach(function (n) {
                  r.getHeaderValues(e, n).forEach(function (e) {
                    t.splitValues ? o.append(n, r.splitHeaderValue(e)) : o.append(n, e);
                  });
                });else if ("object" == _typeof(n = e) && "object" == _typeof(n.headersMap) && "function" == typeof n.forEach) e.forEach(function (e, t) {
                  o.append(e, t);
                });else if ("undefined" != typeof Map && e instanceof Map) {
                  e.forEach(function (e, t) {
                    o.append(t, e);
                  });
                } else "string" == typeof e ? this.appendFromString(e) : "object" == _typeof(e) && Object.getOwnPropertyNames(e).forEach(function (t) {
                  var n = e[t];
                  Array.isArray(n) ? n.forEach(function (e) {
                    o.append(t, e);
                  }) : o.append(t, n);
                });
              }

              return e.prototype.appendFromString = function (e) {
                for (var t = e.split("\r\n"), n = 0; n < t.length; n++) {
                  var r = t[n],
                      o = r.indexOf(":");

                  if (o > 0) {
                    var s = r.substring(0, o).trim(),
                        i = r.substring(o + 1).trim();
                    this.append(s, i);
                  }
                }
              }, e.prototype["delete"] = function (e, t) {
                var n = r.normalizeName(e);
                if (void 0 === t) delete this.headersMap[n];else {
                  var o = this.headersMap[n];

                  if (o) {
                    var s = o.indexOf(t);
                    s >= 0 && o.splice(s, 1), 0 === o.length && delete this.headersMap[n];
                  }
                }
              }, e.prototype.append = function (e, t) {
                var n = this,
                    o = r.normalizeName(e);
                Array.isArray(this.headersMap[o]) || (this.headersMap[o] = []), Array.isArray(t) ? t.forEach(function (e) {
                  n.headersMap[o].push(r.normalizeValue(e));
                }) : this.headersMap[o].push(r.normalizeValue(t));
              }, e.prototype.set = function (e, t) {
                var n = r.normalizeName(e);

                if (Array.isArray(t)) {
                  var o = [];
                  t.forEach(function (e) {
                    o.push(r.normalizeValue(e));
                  }), this.headersMap[n] = o;
                } else this.headersMap[n] = [r.normalizeValue(t)];
              }, e.prototype.has = function (e, t) {
                var n = this.headersMap[r.normalizeName(e)];
                if (!Array.isArray(n)) return !1;

                if (void 0 !== t) {
                  var o = r.normalizeValue(t);
                  return n.indexOf(o) >= 0;
                }

                return !0;
              }, e.prototype.get = function (e) {
                var t = this.headersMap[r.normalizeName(e)];
                return void 0 !== t ? t.concat() : [];
              }, e.prototype.forEach = function (e) {
                var t = this;
                Object.getOwnPropertyNames(this.headersMap).forEach(function (n) {
                  e(n, t.headersMap[n]);
                }, this);
              }, e.prototype.toHeaders = function () {
                if ("undefined" != typeof Headers) {
                  var e = new Headers();
                  return this.forEach(function (t, n) {
                    n.forEach(function (n) {
                      e.append(t, n);
                    });
                  }), e;
                }

                throw new Error("Headers class is not defined");
              }, e;
            }();

            t.BrowserHeaders = o;
          }, function (e, t, n) {

            Object.defineProperty(t, "__esModule", {
              value: !0
            });
            var r = n(0);
            t.BrowserHeaders = r.BrowserHeaders;
          }, function (e, t, n) {

            Object.defineProperty(t, "__esModule", {
              value: !0
            }), t.iterateHeaders = function (e, t) {
              for (var n = e[Symbol.iterator](), r = n.next(); !r.done;) {
                t(r.value[0]), r = n.next();
              }
            }, t.iterateHeadersKeys = function (e, t) {
              for (var n = e.keys(), r = n.next(); !r.done;) {
                t(r.value), r = n.next();
              }
            };
          }, function (e, t, n) {

            Object.defineProperty(t, "__esModule", {
              value: !0
            });
            var r = n(2);

            function o(e) {
              return e;
            }

            t.normalizeName = function (e) {
              if ("string" != typeof e && (e = String(e)), /[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(e)) throw new TypeError("Invalid character in header field name");
              return e.toLowerCase();
            }, t.normalizeValue = function (e) {
              return "string" != typeof e && (e = String(e)), e;
            }, t.getHeaderValues = function (e, t) {
              var n = o(e);
              if (n instanceof Headers && n.getAll) return n.getAll(t);
              var r = n.get(t);
              return r && "string" == typeof r ? [r] : r;
            }, t.getHeaderKeys = function (e) {
              var t = o(e),
                  n = {},
                  s = [];
              return t.keys ? r.iterateHeadersKeys(t, function (e) {
                n[e] || (n[e] = !0, s.push(e));
              }) : t.forEach ? t.forEach(function (e, t) {
                n[t] || (n[t] = !0, s.push(t));
              }) : r.iterateHeaders(t, function (e) {
                var t = e[0];
                n[t] || (n[t] = !0, s.push(t));
              }), s;
            }, t.splitHeaderValue = function (e) {
              var t = [];
              return e.split(", ").forEach(function (e) {
                e.split(",").forEach(function (e) {
                  t.push(e);
                });
              }), t;
            };
          }]);
        }, e.exports = r();
      }, function (e, t, n) {

        Object.defineProperty(t, "__esModule", {
          value: !0
        });

        var r = n(6),
            o = function o(e) {
          return r.CrossBrowserHttpTransport({
            withCredentials: !1
          })(e);
        };

        t.setDefaultTransportFactory = function (e) {
          o = e;
        }, t.makeDefaultTransport = function (e) {
          return o(e);
        };
      }, function (e, t, n) {

        Object.defineProperty(t, "__esModule", {
          value: !0
        });
        var r = n(7),
            o = n(8);

        t.CrossBrowserHttpTransport = function (e) {
          if (r.detectFetchSupport()) {
            var t = {
              credentials: e.withCredentials ? "include" : "same-origin"
            };
            return r.FetchReadableStreamTransport(t);
          }

          return o.XhrTransport({
            withCredentials: e.withCredentials
          });
        };
      }, function (e, t, n) {

        var r = this && this.__assign || function () {
          return (r = Object.assign || function (e) {
            for (var t, n = 1, r = arguments.length; n < r; n++) {
              for (var o in t = arguments[n]) {
                Object.prototype.hasOwnProperty.call(t, o) && (e[o] = t[o]);
              }
            }

            return e;
          }).apply(this, arguments);
        };

        Object.defineProperty(t, "__esModule", {
          value: !0
        });
        var o = n(0),
            s = n(1),
            i = n(2);

        t.FetchReadableStreamTransport = function (e) {
          return function (t) {
            return function (e, t) {
              return e.debug && s.debug("fetchRequest", e), new a(e, t);
            }(t, e);
          };
        };

        var a = function () {
          function e(e, t) {
            this.cancelled = !1, this.controller = self.AbortController && new AbortController(), this.options = e, this.init = t;
          }

          return e.prototype.pump = function (e, t) {
            var n = this;
            if (this.reader = e, this.cancelled) return this.options.debug && s.debug("Fetch.pump.cancel at first pump"), void this.reader.cancel();
            this.reader.read().then(function (e) {
              if (e.done) return i["default"](function () {
                n.options.onEnd();
              }), t;
              i["default"](function () {
                n.options.onChunk(e.value);
              }), n.pump(n.reader, t);
            })["catch"](function (e) {
              n.cancelled ? n.options.debug && s.debug("Fetch.catch - request cancelled") : (n.cancelled = !0, n.options.debug && s.debug("Fetch.catch", e.message), i["default"](function () {
                n.options.onEnd(e);
              }));
            });
          }, e.prototype.send = function (e) {
            var t = this;
            fetch(this.options.url, r({}, this.init, {
              headers: this.metadata.toHeaders(),
              method: "POST",
              body: e,
              signal: this.controller && this.controller.signal
            })).then(function (e) {
              if (t.options.debug && s.debug("Fetch.response", e), i["default"](function () {
                t.options.onHeaders(new o.Metadata(e.headers), e.status);
              }), !e.body) return e;
              t.pump(e.body.getReader(), e);
            })["catch"](function (e) {
              t.cancelled ? t.options.debug && s.debug("Fetch.catch - request cancelled") : (t.cancelled = !0, t.options.debug && s.debug("Fetch.catch", e.message), i["default"](function () {
                t.options.onEnd(e);
              }));
            });
          }, e.prototype.sendMessage = function (e) {
            this.send(e);
          }, e.prototype.finishSend = function () {}, e.prototype.start = function (e) {
            this.metadata = e;
          }, e.prototype.cancel = function () {
            this.cancelled ? this.options.debug && s.debug("Fetch.abort.cancel already cancelled") : (this.cancelled = !0, this.reader ? (this.options.debug && s.debug("Fetch.abort.cancel"), this.reader.cancel()) : this.options.debug && s.debug("Fetch.abort.cancel before reader"), this.controller && this.controller.abort());
          }, e;
        }();

        t.detectFetchSupport = function () {
          return "undefined" != typeof Response && Response.prototype.hasOwnProperty("body") && "function" == typeof Headers;
        };
      }, function (e, t, n) {

        var _r,
            o = this && this.__extends || (_r = function r(e, t) {
          return (_r = Object.setPrototypeOf || {
            __proto__: []
          } instanceof Array && function (e, t) {
            e.__proto__ = t;
          } || function (e, t) {
            for (var n in t) {
              t.hasOwnProperty(n) && (e[n] = t[n]);
            }
          })(e, t);
        }, function (e, t) {
          function n() {
            this.constructor = e;
          }

          _r(e, t), e.prototype = null === t ? Object.create(t) : (n.prototype = t.prototype, new n());
        });

        Object.defineProperty(t, "__esModule", {
          value: !0
        });
        var s = n(0),
            i = n(1),
            a = n(2),
            u = n(12);

        t.XhrTransport = function (e) {
          return function (t) {
            if (u.detectMozXHRSupport()) return new c(t, e);
            if (u.detectXHROverrideMimeTypeSupport()) return new d(t, e);
            throw new Error("This environment's XHR implementation cannot support binary transfer.");
          };
        };

        var d = function () {
          function e(e, t) {
            this.options = e, this.init = t;
          }

          return e.prototype.onProgressEvent = function () {
            var e = this;
            this.options.debug && i.debug("XHR.onProgressEvent.length: ", this.xhr.response.length);
            var t = this.xhr.response.substr(this.index);
            this.index = this.xhr.response.length;
            var n = f(t);
            a["default"](function () {
              e.options.onChunk(n);
            });
          }, e.prototype.onLoadEvent = function () {
            var e = this;
            this.options.debug && i.debug("XHR.onLoadEvent"), a["default"](function () {
              e.options.onEnd();
            });
          }, e.prototype.onStateChange = function () {
            var e = this;
            this.options.debug && i.debug("XHR.onStateChange", this.xhr.readyState), this.xhr.readyState === XMLHttpRequest.HEADERS_RECEIVED && a["default"](function () {
              e.options.onHeaders(new s.Metadata(e.xhr.getAllResponseHeaders()), e.xhr.status);
            });
          }, e.prototype.sendMessage = function (e) {
            this.xhr.send(e);
          }, e.prototype.finishSend = function () {}, e.prototype.start = function (e) {
            var t = this;
            this.metadata = e;
            var n = new XMLHttpRequest();
            this.xhr = n, n.open("POST", this.options.url), this.configureXhr(), this.metadata.forEach(function (e, t) {
              n.setRequestHeader(e, t.join(", "));
            }), n.withCredentials = Boolean(this.init.withCredentials), n.addEventListener("readystatechange", this.onStateChange.bind(this)), n.addEventListener("progress", this.onProgressEvent.bind(this)), n.addEventListener("loadend", this.onLoadEvent.bind(this)), n.addEventListener("error", function (e) {
              t.options.debug && i.debug("XHR.error", e), a["default"](function () {
                t.options.onEnd(e.error);
              });
            });
          }, e.prototype.configureXhr = function () {
            this.xhr.responseType = "text", this.xhr.overrideMimeType("text/plain; charset=x-user-defined");
          }, e.prototype.cancel = function () {
            this.options.debug && i.debug("XHR.abort"), this.xhr.abort();
          }, e;
        }();

        t.XHR = d;

        var c = function (e) {
          function t() {
            return null !== e && e.apply(this, arguments) || this;
          }

          return o(t, e), t.prototype.configureXhr = function () {
            this.options.debug && i.debug("MozXHR.configureXhr: setting responseType to 'moz-chunked-arraybuffer'"), this.xhr.responseType = "moz-chunked-arraybuffer";
          }, t.prototype.onProgressEvent = function () {
            var e = this,
                t = this.xhr.response;
            this.options.debug && i.debug("MozXHR.onProgressEvent: ", new Uint8Array(t)), a["default"](function () {
              e.options.onChunk(new Uint8Array(t));
            });
          }, t;
        }(d);

        function p(e, t) {
          var n = e.charCodeAt(t);

          if (n >= 55296 && n <= 56319) {
            var r = e.charCodeAt(t + 1);
            r >= 56320 && r <= 57343 && (n = 65536 + (n - 55296 << 10) + (r - 56320));
          }

          return n;
        }

        function f(e) {
          for (var t = new Uint8Array(e.length), n = 0, r = 0; r < e.length; r++) {
            var o = String.prototype.codePointAt ? e.codePointAt(r) : p(e, r);
            t[n++] = 255 & o;
          }

          return t;
        }

        t.MozChunkedArrayBufferXHR = c, t.stringToArrayBuffer = f;
      }, function (e, t, n) {

        Object.defineProperty(t, "__esModule", {
          value: !0
        });

        var r,
            o = n(0),
            s = function s(e) {
          return 9 === e || 10 === e || 13 === e;
        };

        function i(e) {
          return s(e) || e >= 32 && e <= 126;
        }

        function a(e) {
          for (var t = 0; t !== e.length; ++t) {
            if (!i(e[t])) throw new Error("Metadata is not valid (printable) ASCII");
          }

          return String.fromCharCode.apply(String, Array.prototype.slice.call(e));
        }

        function u(e) {
          return 128 == (128 & e.getUint8(0));
        }

        function d(e) {
          return e.getUint32(1, !1);
        }

        function c(e, t, n) {
          return e.byteLength - t >= n;
        }

        function p(e, t, n) {
          if (e.slice) return e.slice(t, n);
          var r = e.length;
          void 0 !== n && (r = n);

          for (var o = new Uint8Array(r - t), s = 0, i = t; i < r; i++) {
            o[s++] = e[i];
          }

          return o;
        }

        t.decodeASCII = a, t.encodeASCII = function (e) {
          for (var t = new Uint8Array(e.length), n = 0; n !== e.length; ++n) {
            var r = e.charCodeAt(n);
            if (!i(r)) throw new Error("Metadata contains invalid ASCII");
            t[n] = r;
          }

          return t;
        }, function (e) {
          e[e.MESSAGE = 1] = "MESSAGE", e[e.TRAILERS = 2] = "TRAILERS";
        }(r = t.ChunkType || (t.ChunkType = {}));

        var f = function () {
          function e() {
            this.buffer = null, this.position = 0;
          }

          return e.prototype.parse = function (e, t) {
            if (0 === e.length && t) return [];
            var n,
                s = [];
            if (null == this.buffer) this.buffer = e, this.position = 0;else if (this.position === this.buffer.byteLength) this.buffer = e, this.position = 0;else {
              var i = this.buffer.byteLength - this.position,
                  f = new Uint8Array(i + e.byteLength),
                  h = p(this.buffer, this.position);
              f.set(h, 0);
              var l = new Uint8Array(e);
              f.set(l, i), this.buffer = f, this.position = 0;
            }

            for (;;) {
              if (!c(this.buffer, this.position, 5)) return s;
              var g = p(this.buffer, this.position, this.position + 5),
                  b = new DataView(g.buffer, g.byteOffset, g.byteLength),
                  y = d(b);
              if (!c(this.buffer, this.position, 5 + y)) return s;
              var v = p(this.buffer, this.position + 5, this.position + 5 + y);
              if (this.position += 5 + y, u(b)) return s.push({
                chunkType: r.TRAILERS,
                trailers: (n = v, new o.Metadata(a(n)))
              }), s;
              s.push({
                chunkType: r.MESSAGE,
                data: v
              });
            }
          }, e;
        }();

        t.ChunkParser = f;
      }, function (e, t, n) {

        var r;
        Object.defineProperty(t, "__esModule", {
          value: !0
        }), function (e) {
          e[e.OK = 0] = "OK", e[e.Canceled = 1] = "Canceled", e[e.Unknown = 2] = "Unknown", e[e.InvalidArgument = 3] = "InvalidArgument", e[e.DeadlineExceeded = 4] = "DeadlineExceeded", e[e.NotFound = 5] = "NotFound", e[e.AlreadyExists = 6] = "AlreadyExists", e[e.PermissionDenied = 7] = "PermissionDenied", e[e.ResourceExhausted = 8] = "ResourceExhausted", e[e.FailedPrecondition = 9] = "FailedPrecondition", e[e.Aborted = 10] = "Aborted", e[e.OutOfRange = 11] = "OutOfRange", e[e.Unimplemented = 12] = "Unimplemented", e[e.Internal = 13] = "Internal", e[e.Unavailable = 14] = "Unavailable", e[e.DataLoss = 15] = "DataLoss", e[e.Unauthenticated = 16] = "Unauthenticated";
        }(r = t.Code || (t.Code = {})), t.httpStatusToCode = function (e) {
          switch (e) {
            case 0:
              return r.Internal;

            case 200:
              return r.OK;

            case 400:
              return r.InvalidArgument;

            case 401:
              return r.Unauthenticated;

            case 403:
              return r.PermissionDenied;

            case 404:
              return r.NotFound;

            case 409:
              return r.Aborted;

            case 412:
              return r.FailedPrecondition;

            case 429:
              return r.ResourceExhausted;

            case 499:
              return r.Canceled;

            case 500:
              return r.Unknown;

            case 501:
              return r.Unimplemented;

            case 503:
              return r.Unavailable;

            case 504:
              return r.DeadlineExceeded;

            default:
              return r.Unknown;
          }
        };
      }, function (e, t, n) {

        Object.defineProperty(t, "__esModule", {
          value: !0
        });
        var r = n(4),
            o = n(5),
            s = n(7),
            i = n(13),
            a = n(8),
            u = n(6),
            d = n(10),
            c = n(14),
            p = n(16),
            f = n(3);
        !function (e) {
          e.setDefaultTransport = o.setDefaultTransportFactory, e.CrossBrowserHttpTransport = u.CrossBrowserHttpTransport, e.FetchReadableStreamTransport = s.FetchReadableStreamTransport, e.XhrTransport = a.XhrTransport, e.WebsocketTransport = i.WebsocketTransport, e.Code = d.Code, e.Metadata = r.BrowserHeaders, e.client = function (e, t) {
            return f.client(e, t);
          }, e.invoke = c.invoke, e.unary = p.unary;
        }(t.grpc || (t.grpc = {}));
      }, function (e, t, n) {

        var r;

        function o() {
          if (void 0 !== r) return r;

          if (XMLHttpRequest) {
            r = new XMLHttpRequest();

            try {
              r.open("GET", "https://localhost");
            } catch (e) {}
          }

          return r;
        }

        function s(e) {
          var t = o();
          if (!t) return !1;

          try {
            return t.responseType = e, t.responseType === e;
          } catch (e) {}

          return !1;
        }

        Object.defineProperty(t, "__esModule", {
          value: !0
        }), t.xhrSupportsResponseType = s, t.detectMozXHRSupport = function () {
          return "undefined" != typeof XMLHttpRequest && s("moz-chunked-arraybuffer");
        }, t.detectXHROverrideMimeTypeSupport = function () {
          return "undefined" != typeof XMLHttpRequest && XMLHttpRequest.prototype.hasOwnProperty("overrideMimeType");
        };
      }, function (e, t, n) {

        Object.defineProperty(t, "__esModule", {
          value: !0
        });
        var r,
            o = n(1),
            s = n(2),
            i = n(9);
        !function (e) {
          e[e.FINISH_SEND = 1] = "FINISH_SEND";
        }(r || (r = {}));
        var a = new Uint8Array([1]);

        t.WebsocketTransport = function () {
          return function (e) {
            return function (e) {
              e.debug && o.debug("websocketRequest", e);

              var t,
                  n = function (e) {
                if ("https://" === e.substr(0, 8)) return "wss://" + e.substr(8);
                if ("http://" === e.substr(0, 7)) return "ws://" + e.substr(7);
                throw new Error("Websocket transport constructed with non-https:// or http:// host.");
              }(e.url),
                  u = [];

              function d(e) {
                if (e === r.FINISH_SEND) t.send(a);else {
                  var n = e,
                      o = new Int8Array(n.byteLength + 1);
                  o.set(new Uint8Array([0])), o.set(n, 1), t.send(o);
                }
              }

              return {
                sendMessage: function sendMessage(e) {
                  t && t.readyState !== t.CONNECTING ? d(e) : u.push(e);
                },
                finishSend: function finishSend() {
                  t && t.readyState !== t.CONNECTING ? d(r.FINISH_SEND) : u.push(r.FINISH_SEND);
                },
                start: function start(r) {
                  (t = new WebSocket(n, ["grpc-websockets"])).binaryType = "arraybuffer", t.onopen = function () {
                    var n;
                    e.debug && o.debug("websocketRequest.onopen"), t.send((n = "", r.forEach(function (e, t) {
                      n += e + ": " + t.join(", ") + "\r\n";
                    }), i.encodeASCII(n))), u.forEach(function (e) {
                      d(e);
                    });
                  }, t.onclose = function (t) {
                    e.debug && o.debug("websocketRequest.onclose", t), s["default"](function () {
                      e.onEnd();
                    });
                  }, t.onerror = function (t) {
                    e.debug && o.debug("websocketRequest.onerror", t);
                  }, t.onmessage = function (t) {
                    s["default"](function () {
                      e.onChunk(new Uint8Array(t.data));
                    });
                  };
                },
                cancel: function cancel() {
                  e.debug && o.debug("websocket.abort"), s["default"](function () {
                    t.close();
                  });
                }
              };
            }(e);
          };
        };
      }, function (e, t, n) {

        Object.defineProperty(t, "__esModule", {
          value: !0
        });
        var r = n(3);

        t.invoke = function (e, t) {
          if (e.requestStream) throw new Error(".invoke cannot be used with client-streaming methods. Use .client instead.");
          var n = r.client(e, {
            host: t.host,
            transport: t.transport,
            debug: t.debug
          });
          return t.onHeaders && n.onHeaders(t.onHeaders), t.onMessage && n.onMessage(t.onMessage), t.onEnd && n.onEnd(t.onEnd), n.start(t.metadata), n.send(t.request), n.finishSend(), {
            close: function close() {
              n.close();
            }
          };
        };
      }, function (e, t, n) {

        Object.defineProperty(t, "__esModule", {
          value: !0
        }), t.frameRequest = function (e) {
          var t = e.serializeBinary(),
              n = new ArrayBuffer(t.byteLength + 5);
          return new DataView(n, 1, 4).setUint32(0, t.length, !1), new Uint8Array(n, 5).set(t), new Uint8Array(n);
        };
      }, function (e, t, n) {

        Object.defineProperty(t, "__esModule", {
          value: !0
        });
        var r = n(0),
            o = n(3);

        t.unary = function (e, t) {
          if (e.responseStream) throw new Error(".unary cannot be used with server-streaming methods. Use .invoke or .client instead.");
          if (e.requestStream) throw new Error(".unary cannot be used with client-streaming methods. Use .client instead.");
          var n = null,
              s = null,
              i = o.client(e, {
            host: t.host,
            transport: t.transport,
            debug: t.debug
          });
          return i.onHeaders(function (e) {
            n = e;
          }), i.onMessage(function (e) {
            s = e;
          }), i.onEnd(function (e, o, i) {
            t.onEnd({
              status: e,
              statusMessage: o,
              headers: n || new r.Metadata(),
              message: s,
              trailers: i
            });
          }), i.start(t.metadata), i.send(t.request), i.finishSend(), {
            close: function close() {
              i.close();
            }
          };
        };
      }]);
    });
  });
  unwrapExports(grpcWebClient_umd);
  var grpcWebClient_umd_1 = grpcWebClient_umd.grpc;

  // file: rpc.proto

  var grpc = grpcWebClient_umd.grpc;

  var AergoRPCService = function () {
    function AergoRPCService() {}

    AergoRPCService.serviceName = "types.AergoRPCService";
    return AergoRPCService;
  }();

  AergoRPCService.NodeState = {
    methodName: "NodeState",
    service: AergoRPCService,
    requestStream: false,
    responseStream: false,
    requestType: rpc_pb.NodeReq,
    responseType: rpc_pb.SingleBytes
  };
  AergoRPCService.Metric = {
    methodName: "Metric",
    service: AergoRPCService,
    requestStream: false,
    responseStream: false,
    requestType: metric_pb.MetricsRequest,
    responseType: metric_pb.Metrics
  };
  AergoRPCService.Blockchain = {
    methodName: "Blockchain",
    service: AergoRPCService,
    requestStream: false,
    responseStream: false,
    requestType: rpc_pb.Empty,
    responseType: rpc_pb.BlockchainStatus
  };
  AergoRPCService.GetChainInfo = {
    methodName: "GetChainInfo",
    service: AergoRPCService,
    requestStream: false,
    responseStream: false,
    requestType: rpc_pb.Empty,
    responseType: rpc_pb.ChainInfo
  };
  AergoRPCService.ChainStat = {
    methodName: "ChainStat",
    service: AergoRPCService,
    requestStream: false,
    responseStream: false,
    requestType: rpc_pb.Empty,
    responseType: rpc_pb.ChainStats
  };
  AergoRPCService.ListBlockHeaders = {
    methodName: "ListBlockHeaders",
    service: AergoRPCService,
    requestStream: false,
    responseStream: false,
    requestType: rpc_pb.ListParams,
    responseType: rpc_pb.BlockHeaderList
  };
  AergoRPCService.ListBlockMetadata = {
    methodName: "ListBlockMetadata",
    service: AergoRPCService,
    requestStream: false,
    responseStream: false,
    requestType: rpc_pb.ListParams,
    responseType: rpc_pb.BlockMetadataList
  };
  AergoRPCService.ListBlockStream = {
    methodName: "ListBlockStream",
    service: AergoRPCService,
    requestStream: false,
    responseStream: true,
    requestType: rpc_pb.Empty,
    responseType: blockchain_pb.Block
  };
  AergoRPCService.ListBlockMetadataStream = {
    methodName: "ListBlockMetadataStream",
    service: AergoRPCService,
    requestStream: false,
    responseStream: true,
    requestType: rpc_pb.Empty,
    responseType: rpc_pb.BlockMetadata
  };
  AergoRPCService.GetBlock = {
    methodName: "GetBlock",
    service: AergoRPCService,
    requestStream: false,
    responseStream: false,
    requestType: rpc_pb.SingleBytes,
    responseType: blockchain_pb.Block
  };
  AergoRPCService.GetBlockMetadata = {
    methodName: "GetBlockMetadata",
    service: AergoRPCService,
    requestStream: false,
    responseStream: false,
    requestType: rpc_pb.SingleBytes,
    responseType: rpc_pb.BlockMetadata
  };
  AergoRPCService.GetBlockBody = {
    methodName: "GetBlockBody",
    service: AergoRPCService,
    requestStream: false,
    responseStream: false,
    requestType: rpc_pb.BlockBodyParams,
    responseType: rpc_pb.BlockBodyPaged
  };
  AergoRPCService.GetTX = {
    methodName: "GetTX",
    service: AergoRPCService,
    requestStream: false,
    responseStream: false,
    requestType: rpc_pb.SingleBytes,
    responseType: blockchain_pb.Tx
  };
  AergoRPCService.GetBlockTX = {
    methodName: "GetBlockTX",
    service: AergoRPCService,
    requestStream: false,
    responseStream: false,
    requestType: rpc_pb.SingleBytes,
    responseType: blockchain_pb.TxInBlock
  };
  AergoRPCService.GetReceipt = {
    methodName: "GetReceipt",
    service: AergoRPCService,
    requestStream: false,
    responseStream: false,
    requestType: rpc_pb.SingleBytes,
    responseType: blockchain_pb.Receipt
  };
  AergoRPCService.GetABI = {
    methodName: "GetABI",
    service: AergoRPCService,
    requestStream: false,
    responseStream: false,
    requestType: rpc_pb.SingleBytes,
    responseType: blockchain_pb.ABI
  };
  AergoRPCService.SendTX = {
    methodName: "SendTX",
    service: AergoRPCService,
    requestStream: false,
    responseStream: false,
    requestType: blockchain_pb.Tx,
    responseType: rpc_pb.CommitResult
  };
  AergoRPCService.SignTX = {
    methodName: "SignTX",
    service: AergoRPCService,
    requestStream: false,
    responseStream: false,
    requestType: blockchain_pb.Tx,
    responseType: blockchain_pb.Tx
  };
  AergoRPCService.VerifyTX = {
    methodName: "VerifyTX",
    service: AergoRPCService,
    requestStream: false,
    responseStream: false,
    requestType: blockchain_pb.Tx,
    responseType: rpc_pb.VerifyResult
  };
  AergoRPCService.CommitTX = {
    methodName: "CommitTX",
    service: AergoRPCService,
    requestStream: false,
    responseStream: false,
    requestType: blockchain_pb.TxList,
    responseType: rpc_pb.CommitResultList
  };
  AergoRPCService.GetState = {
    methodName: "GetState",
    service: AergoRPCService,
    requestStream: false,
    responseStream: false,
    requestType: rpc_pb.SingleBytes,
    responseType: blockchain_pb.State
  };
  AergoRPCService.GetStateAndProof = {
    methodName: "GetStateAndProof",
    service: AergoRPCService,
    requestStream: false,
    responseStream: false,
    requestType: rpc_pb.AccountAndRoot,
    responseType: blockchain_pb.AccountProof
  };
  AergoRPCService.CreateAccount = {
    methodName: "CreateAccount",
    service: AergoRPCService,
    requestStream: false,
    responseStream: false,
    requestType: rpc_pb.Personal,
    responseType: account_pb.Account
  };
  AergoRPCService.GetAccounts = {
    methodName: "GetAccounts",
    service: AergoRPCService,
    requestStream: false,
    responseStream: false,
    requestType: rpc_pb.Empty,
    responseType: account_pb.AccountList
  };
  AergoRPCService.LockAccount = {
    methodName: "LockAccount",
    service: AergoRPCService,
    requestStream: false,
    responseStream: false,
    requestType: rpc_pb.Personal,
    responseType: account_pb.Account
  };
  AergoRPCService.UnlockAccount = {
    methodName: "UnlockAccount",
    service: AergoRPCService,
    requestStream: false,
    responseStream: false,
    requestType: rpc_pb.Personal,
    responseType: account_pb.Account
  };
  AergoRPCService.ImportAccount = {
    methodName: "ImportAccount",
    service: AergoRPCService,
    requestStream: false,
    responseStream: false,
    requestType: rpc_pb.ImportFormat,
    responseType: account_pb.Account
  };
  AergoRPCService.ExportAccount = {
    methodName: "ExportAccount",
    service: AergoRPCService,
    requestStream: false,
    responseStream: false,
    requestType: rpc_pb.Personal,
    responseType: rpc_pb.SingleBytes
  };
  AergoRPCService.QueryContract = {
    methodName: "QueryContract",
    service: AergoRPCService,
    requestStream: false,
    responseStream: false,
    requestType: blockchain_pb.Query,
    responseType: rpc_pb.SingleBytes
  };
  AergoRPCService.QueryContractState = {
    methodName: "QueryContractState",
    service: AergoRPCService,
    requestStream: false,
    responseStream: false,
    requestType: blockchain_pb.StateQuery,
    responseType: blockchain_pb.StateQueryProof
  };
  AergoRPCService.GetPeers = {
    methodName: "GetPeers",
    service: AergoRPCService,
    requestStream: false,
    responseStream: false,
    requestType: rpc_pb.PeersParams,
    responseType: rpc_pb.PeerList
  };
  AergoRPCService.GetVotes = {
    methodName: "GetVotes",
    service: AergoRPCService,
    requestStream: false,
    responseStream: false,
    requestType: rpc_pb.VoteParams,
    responseType: rpc_pb.VoteList
  };
  AergoRPCService.GetAccountVotes = {
    methodName: "GetAccountVotes",
    service: AergoRPCService,
    requestStream: false,
    responseStream: false,
    requestType: rpc_pb.AccountAddress,
    responseType: rpc_pb.AccountVoteInfo
  };
  AergoRPCService.GetStaking = {
    methodName: "GetStaking",
    service: AergoRPCService,
    requestStream: false,
    responseStream: false,
    requestType: rpc_pb.AccountAddress,
    responseType: rpc_pb.Staking
  };
  AergoRPCService.GetNameInfo = {
    methodName: "GetNameInfo",
    service: AergoRPCService,
    requestStream: false,
    responseStream: false,
    requestType: rpc_pb.Name,
    responseType: rpc_pb.NameInfo
  };
  AergoRPCService.ListEventStream = {
    methodName: "ListEventStream",
    service: AergoRPCService,
    requestStream: false,
    responseStream: true,
    requestType: blockchain_pb.FilterInfo,
    responseType: blockchain_pb.Event
  };
  AergoRPCService.ListEvents = {
    methodName: "ListEvents",
    service: AergoRPCService,
    requestStream: false,
    responseStream: false,
    requestType: blockchain_pb.FilterInfo,
    responseType: rpc_pb.EventList
  };
  AergoRPCService.GetServerInfo = {
    methodName: "GetServerInfo",
    service: AergoRPCService,
    requestStream: false,
    responseStream: false,
    requestType: rpc_pb.KeyParams,
    responseType: rpc_pb.ServerInfo
  };
  AergoRPCService.GetConsensusInfo = {
    methodName: "GetConsensusInfo",
    service: AergoRPCService,
    requestStream: false,
    responseStream: false,
    requestType: rpc_pb.Empty,
    responseType: rpc_pb.ConsensusInfo
  };
  AergoRPCService.ChangeMembership = {
    methodName: "ChangeMembership",
    service: AergoRPCService,
    requestStream: false,
    responseStream: false,
    requestType: raft_pb.MembershipChange,
    responseType: raft_pb.MembershipChangeReply
  };
  AergoRPCService.GetEnterpriseConfig = {
    methodName: "GetEnterpriseConfig",
    service: AergoRPCService,
    requestStream: false,
    responseStream: false,
    requestType: rpc_pb.EnterpriseConfigKey,
    responseType: rpc_pb.EnterpriseConfig
  };
  AergoRPCService.GetConfChangeProgress = {
    methodName: "GetConfChangeProgress",
    service: AergoRPCService,
    requestStream: false,
    responseStream: false,
    requestType: rpc_pb.SingleBytes,
    responseType: raft_pb.ConfChangeProgress
  };

  function AergoRPCServiceClient(serviceHost, options) {
    this.serviceHost = serviceHost;
    this.options = options || {};
  }

  AergoRPCServiceClient.prototype.nodeState = function nodeState(requestMessage, metadata, callback) {
    if (arguments.length === 2) {
      callback = arguments[1];
    }

    var client = grpc.unary(AergoRPCService.NodeState, {
      request: requestMessage,
      host: this.serviceHost,
      metadata: metadata,
      transport: this.options.transport,
      debug: this.options.debug,
      onEnd: function onEnd(response) {
        if (callback) {
          if (response.status !== grpc.Code.OK) {
            var err = new Error(response.statusMessage);
            err.code = response.status;
            err.metadata = response.trailers;
            callback(err, null);
          } else {
            callback(null, response.message);
          }
        }
      }
    });
    return {
      cancel: function cancel() {
        callback = null;
        client.close();
      }
    };
  };

  AergoRPCServiceClient.prototype.metric = function metric(requestMessage, metadata, callback) {
    if (arguments.length === 2) {
      callback = arguments[1];
    }

    var client = grpc.unary(AergoRPCService.Metric, {
      request: requestMessage,
      host: this.serviceHost,
      metadata: metadata,
      transport: this.options.transport,
      debug: this.options.debug,
      onEnd: function onEnd(response) {
        if (callback) {
          if (response.status !== grpc.Code.OK) {
            var err = new Error(response.statusMessage);
            err.code = response.status;
            err.metadata = response.trailers;
            callback(err, null);
          } else {
            callback(null, response.message);
          }
        }
      }
    });
    return {
      cancel: function cancel() {
        callback = null;
        client.close();
      }
    };
  };

  AergoRPCServiceClient.prototype.blockchain = function blockchain(requestMessage, metadata, callback) {
    if (arguments.length === 2) {
      callback = arguments[1];
    }

    var client = grpc.unary(AergoRPCService.Blockchain, {
      request: requestMessage,
      host: this.serviceHost,
      metadata: metadata,
      transport: this.options.transport,
      debug: this.options.debug,
      onEnd: function onEnd(response) {
        if (callback) {
          if (response.status !== grpc.Code.OK) {
            var err = new Error(response.statusMessage);
            err.code = response.status;
            err.metadata = response.trailers;
            callback(err, null);
          } else {
            callback(null, response.message);
          }
        }
      }
    });
    return {
      cancel: function cancel() {
        callback = null;
        client.close();
      }
    };
  };

  AergoRPCServiceClient.prototype.getChainInfo = function getChainInfo(requestMessage, metadata, callback) {
    if (arguments.length === 2) {
      callback = arguments[1];
    }

    var client = grpc.unary(AergoRPCService.GetChainInfo, {
      request: requestMessage,
      host: this.serviceHost,
      metadata: metadata,
      transport: this.options.transport,
      debug: this.options.debug,
      onEnd: function onEnd(response) {
        if (callback) {
          if (response.status !== grpc.Code.OK) {
            var err = new Error(response.statusMessage);
            err.code = response.status;
            err.metadata = response.trailers;
            callback(err, null);
          } else {
            callback(null, response.message);
          }
        }
      }
    });
    return {
      cancel: function cancel() {
        callback = null;
        client.close();
      }
    };
  };

  AergoRPCServiceClient.prototype.chainStat = function chainStat(requestMessage, metadata, callback) {
    if (arguments.length === 2) {
      callback = arguments[1];
    }

    var client = grpc.unary(AergoRPCService.ChainStat, {
      request: requestMessage,
      host: this.serviceHost,
      metadata: metadata,
      transport: this.options.transport,
      debug: this.options.debug,
      onEnd: function onEnd(response) {
        if (callback) {
          if (response.status !== grpc.Code.OK) {
            var err = new Error(response.statusMessage);
            err.code = response.status;
            err.metadata = response.trailers;
            callback(err, null);
          } else {
            callback(null, response.message);
          }
        }
      }
    });
    return {
      cancel: function cancel() {
        callback = null;
        client.close();
      }
    };
  };

  AergoRPCServiceClient.prototype.listBlockHeaders = function listBlockHeaders(requestMessage, metadata, callback) {
    if (arguments.length === 2) {
      callback = arguments[1];
    }

    var client = grpc.unary(AergoRPCService.ListBlockHeaders, {
      request: requestMessage,
      host: this.serviceHost,
      metadata: metadata,
      transport: this.options.transport,
      debug: this.options.debug,
      onEnd: function onEnd(response) {
        if (callback) {
          if (response.status !== grpc.Code.OK) {
            var err = new Error(response.statusMessage);
            err.code = response.status;
            err.metadata = response.trailers;
            callback(err, null);
          } else {
            callback(null, response.message);
          }
        }
      }
    });
    return {
      cancel: function cancel() {
        callback = null;
        client.close();
      }
    };
  };

  AergoRPCServiceClient.prototype.listBlockMetadata = function listBlockMetadata(requestMessage, metadata, callback) {
    if (arguments.length === 2) {
      callback = arguments[1];
    }

    var client = grpc.unary(AergoRPCService.ListBlockMetadata, {
      request: requestMessage,
      host: this.serviceHost,
      metadata: metadata,
      transport: this.options.transport,
      debug: this.options.debug,
      onEnd: function onEnd(response) {
        if (callback) {
          if (response.status !== grpc.Code.OK) {
            var err = new Error(response.statusMessage);
            err.code = response.status;
            err.metadata = response.trailers;
            callback(err, null);
          } else {
            callback(null, response.message);
          }
        }
      }
    });
    return {
      cancel: function cancel() {
        callback = null;
        client.close();
      }
    };
  };

  AergoRPCServiceClient.prototype.listBlockStream = function listBlockStream(requestMessage, metadata) {
    var listeners = {
      data: [],
      end: [],
      status: []
    };
    var client = grpc.invoke(AergoRPCService.ListBlockStream, {
      request: requestMessage,
      host: this.serviceHost,
      metadata: metadata,
      transport: this.options.transport,
      debug: this.options.debug,
      onMessage: function onMessage(responseMessage) {
        listeners.data.forEach(function (handler) {
          handler(responseMessage);
        });
      },
      onEnd: function onEnd(status, statusMessage, trailers) {
        listeners.status.forEach(function (handler) {
          handler({
            code: status,
            details: statusMessage,
            metadata: trailers
          });
        });
        listeners.end.forEach(function (handler) {
          handler({
            code: status,
            details: statusMessage,
            metadata: trailers
          });
        });
        listeners = null;
      }
    });
    return {
      on: function on(type, handler) {
        listeners[type].push(handler);
        return this;
      },
      cancel: function cancel() {
        listeners = null;
        client.close();
      }
    };
  };

  AergoRPCServiceClient.prototype.listBlockMetadataStream = function listBlockMetadataStream(requestMessage, metadata) {
    var listeners = {
      data: [],
      end: [],
      status: []
    };
    var client = grpc.invoke(AergoRPCService.ListBlockMetadataStream, {
      request: requestMessage,
      host: this.serviceHost,
      metadata: metadata,
      transport: this.options.transport,
      debug: this.options.debug,
      onMessage: function onMessage(responseMessage) {
        listeners.data.forEach(function (handler) {
          handler(responseMessage);
        });
      },
      onEnd: function onEnd(status, statusMessage, trailers) {
        listeners.status.forEach(function (handler) {
          handler({
            code: status,
            details: statusMessage,
            metadata: trailers
          });
        });
        listeners.end.forEach(function (handler) {
          handler({
            code: status,
            details: statusMessage,
            metadata: trailers
          });
        });
        listeners = null;
      }
    });
    return {
      on: function on(type, handler) {
        listeners[type].push(handler);
        return this;
      },
      cancel: function cancel() {
        listeners = null;
        client.close();
      }
    };
  };

  AergoRPCServiceClient.prototype.getBlock = function getBlock(requestMessage, metadata, callback) {
    if (arguments.length === 2) {
      callback = arguments[1];
    }

    var client = grpc.unary(AergoRPCService.GetBlock, {
      request: requestMessage,
      host: this.serviceHost,
      metadata: metadata,
      transport: this.options.transport,
      debug: this.options.debug,
      onEnd: function onEnd(response) {
        if (callback) {
          if (response.status !== grpc.Code.OK) {
            var err = new Error(response.statusMessage);
            err.code = response.status;
            err.metadata = response.trailers;
            callback(err, null);
          } else {
            callback(null, response.message);
          }
        }
      }
    });
    return {
      cancel: function cancel() {
        callback = null;
        client.close();
      }
    };
  };

  AergoRPCServiceClient.prototype.getBlockMetadata = function getBlockMetadata(requestMessage, metadata, callback) {
    if (arguments.length === 2) {
      callback = arguments[1];
    }

    var client = grpc.unary(AergoRPCService.GetBlockMetadata, {
      request: requestMessage,
      host: this.serviceHost,
      metadata: metadata,
      transport: this.options.transport,
      debug: this.options.debug,
      onEnd: function onEnd(response) {
        if (callback) {
          if (response.status !== grpc.Code.OK) {
            var err = new Error(response.statusMessage);
            err.code = response.status;
            err.metadata = response.trailers;
            callback(err, null);
          } else {
            callback(null, response.message);
          }
        }
      }
    });
    return {
      cancel: function cancel() {
        callback = null;
        client.close();
      }
    };
  };

  AergoRPCServiceClient.prototype.getBlockBody = function getBlockBody(requestMessage, metadata, callback) {
    if (arguments.length === 2) {
      callback = arguments[1];
    }

    var client = grpc.unary(AergoRPCService.GetBlockBody, {
      request: requestMessage,
      host: this.serviceHost,
      metadata: metadata,
      transport: this.options.transport,
      debug: this.options.debug,
      onEnd: function onEnd(response) {
        if (callback) {
          if (response.status !== grpc.Code.OK) {
            var err = new Error(response.statusMessage);
            err.code = response.status;
            err.metadata = response.trailers;
            callback(err, null);
          } else {
            callback(null, response.message);
          }
        }
      }
    });
    return {
      cancel: function cancel() {
        callback = null;
        client.close();
      }
    };
  };

  AergoRPCServiceClient.prototype.getTX = function getTX(requestMessage, metadata, callback) {
    if (arguments.length === 2) {
      callback = arguments[1];
    }

    var client = grpc.unary(AergoRPCService.GetTX, {
      request: requestMessage,
      host: this.serviceHost,
      metadata: metadata,
      transport: this.options.transport,
      debug: this.options.debug,
      onEnd: function onEnd(response) {
        if (callback) {
          if (response.status !== grpc.Code.OK) {
            var err = new Error(response.statusMessage);
            err.code = response.status;
            err.metadata = response.trailers;
            callback(err, null);
          } else {
            callback(null, response.message);
          }
        }
      }
    });
    return {
      cancel: function cancel() {
        callback = null;
        client.close();
      }
    };
  };

  AergoRPCServiceClient.prototype.getBlockTX = function getBlockTX(requestMessage, metadata, callback) {
    if (arguments.length === 2) {
      callback = arguments[1];
    }

    var client = grpc.unary(AergoRPCService.GetBlockTX, {
      request: requestMessage,
      host: this.serviceHost,
      metadata: metadata,
      transport: this.options.transport,
      debug: this.options.debug,
      onEnd: function onEnd(response) {
        if (callback) {
          if (response.status !== grpc.Code.OK) {
            var err = new Error(response.statusMessage);
            err.code = response.status;
            err.metadata = response.trailers;
            callback(err, null);
          } else {
            callback(null, response.message);
          }
        }
      }
    });
    return {
      cancel: function cancel() {
        callback = null;
        client.close();
      }
    };
  };

  AergoRPCServiceClient.prototype.getReceipt = function getReceipt(requestMessage, metadata, callback) {
    if (arguments.length === 2) {
      callback = arguments[1];
    }

    var client = grpc.unary(AergoRPCService.GetReceipt, {
      request: requestMessage,
      host: this.serviceHost,
      metadata: metadata,
      transport: this.options.transport,
      debug: this.options.debug,
      onEnd: function onEnd(response) {
        if (callback) {
          if (response.status !== grpc.Code.OK) {
            var err = new Error(response.statusMessage);
            err.code = response.status;
            err.metadata = response.trailers;
            callback(err, null);
          } else {
            callback(null, response.message);
          }
        }
      }
    });
    return {
      cancel: function cancel() {
        callback = null;
        client.close();
      }
    };
  };

  AergoRPCServiceClient.prototype.getABI = function getABI(requestMessage, metadata, callback) {
    if (arguments.length === 2) {
      callback = arguments[1];
    }

    var client = grpc.unary(AergoRPCService.GetABI, {
      request: requestMessage,
      host: this.serviceHost,
      metadata: metadata,
      transport: this.options.transport,
      debug: this.options.debug,
      onEnd: function onEnd(response) {
        if (callback) {
          if (response.status !== grpc.Code.OK) {
            var err = new Error(response.statusMessage);
            err.code = response.status;
            err.metadata = response.trailers;
            callback(err, null);
          } else {
            callback(null, response.message);
          }
        }
      }
    });
    return {
      cancel: function cancel() {
        callback = null;
        client.close();
      }
    };
  };

  AergoRPCServiceClient.prototype.sendTX = function sendTX(requestMessage, metadata, callback) {
    if (arguments.length === 2) {
      callback = arguments[1];
    }

    var client = grpc.unary(AergoRPCService.SendTX, {
      request: requestMessage,
      host: this.serviceHost,
      metadata: metadata,
      transport: this.options.transport,
      debug: this.options.debug,
      onEnd: function onEnd(response) {
        if (callback) {
          if (response.status !== grpc.Code.OK) {
            var err = new Error(response.statusMessage);
            err.code = response.status;
            err.metadata = response.trailers;
            callback(err, null);
          } else {
            callback(null, response.message);
          }
        }
      }
    });
    return {
      cancel: function cancel() {
        callback = null;
        client.close();
      }
    };
  };

  AergoRPCServiceClient.prototype.signTX = function signTX(requestMessage, metadata, callback) {
    if (arguments.length === 2) {
      callback = arguments[1];
    }

    var client = grpc.unary(AergoRPCService.SignTX, {
      request: requestMessage,
      host: this.serviceHost,
      metadata: metadata,
      transport: this.options.transport,
      debug: this.options.debug,
      onEnd: function onEnd(response) {
        if (callback) {
          if (response.status !== grpc.Code.OK) {
            var err = new Error(response.statusMessage);
            err.code = response.status;
            err.metadata = response.trailers;
            callback(err, null);
          } else {
            callback(null, response.message);
          }
        }
      }
    });
    return {
      cancel: function cancel() {
        callback = null;
        client.close();
      }
    };
  };

  AergoRPCServiceClient.prototype.verifyTX = function verifyTX(requestMessage, metadata, callback) {
    if (arguments.length === 2) {
      callback = arguments[1];
    }

    var client = grpc.unary(AergoRPCService.VerifyTX, {
      request: requestMessage,
      host: this.serviceHost,
      metadata: metadata,
      transport: this.options.transport,
      debug: this.options.debug,
      onEnd: function onEnd(response) {
        if (callback) {
          if (response.status !== grpc.Code.OK) {
            var err = new Error(response.statusMessage);
            err.code = response.status;
            err.metadata = response.trailers;
            callback(err, null);
          } else {
            callback(null, response.message);
          }
        }
      }
    });
    return {
      cancel: function cancel() {
        callback = null;
        client.close();
      }
    };
  };

  AergoRPCServiceClient.prototype.commitTX = function commitTX(requestMessage, metadata, callback) {
    if (arguments.length === 2) {
      callback = arguments[1];
    }

    var client = grpc.unary(AergoRPCService.CommitTX, {
      request: requestMessage,
      host: this.serviceHost,
      metadata: metadata,
      transport: this.options.transport,
      debug: this.options.debug,
      onEnd: function onEnd(response) {
        if (callback) {
          if (response.status !== grpc.Code.OK) {
            var err = new Error(response.statusMessage);
            err.code = response.status;
            err.metadata = response.trailers;
            callback(err, null);
          } else {
            callback(null, response.message);
          }
        }
      }
    });
    return {
      cancel: function cancel() {
        callback = null;
        client.close();
      }
    };
  };

  AergoRPCServiceClient.prototype.getState = function getState(requestMessage, metadata, callback) {
    if (arguments.length === 2) {
      callback = arguments[1];
    }

    var client = grpc.unary(AergoRPCService.GetState, {
      request: requestMessage,
      host: this.serviceHost,
      metadata: metadata,
      transport: this.options.transport,
      debug: this.options.debug,
      onEnd: function onEnd(response) {
        if (callback) {
          if (response.status !== grpc.Code.OK) {
            var err = new Error(response.statusMessage);
            err.code = response.status;
            err.metadata = response.trailers;
            callback(err, null);
          } else {
            callback(null, response.message);
          }
        }
      }
    });
    return {
      cancel: function cancel() {
        callback = null;
        client.close();
      }
    };
  };

  AergoRPCServiceClient.prototype.getStateAndProof = function getStateAndProof(requestMessage, metadata, callback) {
    if (arguments.length === 2) {
      callback = arguments[1];
    }

    var client = grpc.unary(AergoRPCService.GetStateAndProof, {
      request: requestMessage,
      host: this.serviceHost,
      metadata: metadata,
      transport: this.options.transport,
      debug: this.options.debug,
      onEnd: function onEnd(response) {
        if (callback) {
          if (response.status !== grpc.Code.OK) {
            var err = new Error(response.statusMessage);
            err.code = response.status;
            err.metadata = response.trailers;
            callback(err, null);
          } else {
            callback(null, response.message);
          }
        }
      }
    });
    return {
      cancel: function cancel() {
        callback = null;
        client.close();
      }
    };
  };

  AergoRPCServiceClient.prototype.createAccount = function createAccount(requestMessage, metadata, callback) {
    if (arguments.length === 2) {
      callback = arguments[1];
    }

    var client = grpc.unary(AergoRPCService.CreateAccount, {
      request: requestMessage,
      host: this.serviceHost,
      metadata: metadata,
      transport: this.options.transport,
      debug: this.options.debug,
      onEnd: function onEnd(response) {
        if (callback) {
          if (response.status !== grpc.Code.OK) {
            var err = new Error(response.statusMessage);
            err.code = response.status;
            err.metadata = response.trailers;
            callback(err, null);
          } else {
            callback(null, response.message);
          }
        }
      }
    });
    return {
      cancel: function cancel() {
        callback = null;
        client.close();
      }
    };
  };

  AergoRPCServiceClient.prototype.getAccounts = function getAccounts(requestMessage, metadata, callback) {
    if (arguments.length === 2) {
      callback = arguments[1];
    }

    var client = grpc.unary(AergoRPCService.GetAccounts, {
      request: requestMessage,
      host: this.serviceHost,
      metadata: metadata,
      transport: this.options.transport,
      debug: this.options.debug,
      onEnd: function onEnd(response) {
        if (callback) {
          if (response.status !== grpc.Code.OK) {
            var err = new Error(response.statusMessage);
            err.code = response.status;
            err.metadata = response.trailers;
            callback(err, null);
          } else {
            callback(null, response.message);
          }
        }
      }
    });
    return {
      cancel: function cancel() {
        callback = null;
        client.close();
      }
    };
  };

  AergoRPCServiceClient.prototype.lockAccount = function lockAccount(requestMessage, metadata, callback) {
    if (arguments.length === 2) {
      callback = arguments[1];
    }

    var client = grpc.unary(AergoRPCService.LockAccount, {
      request: requestMessage,
      host: this.serviceHost,
      metadata: metadata,
      transport: this.options.transport,
      debug: this.options.debug,
      onEnd: function onEnd(response) {
        if (callback) {
          if (response.status !== grpc.Code.OK) {
            var err = new Error(response.statusMessage);
            err.code = response.status;
            err.metadata = response.trailers;
            callback(err, null);
          } else {
            callback(null, response.message);
          }
        }
      }
    });
    return {
      cancel: function cancel() {
        callback = null;
        client.close();
      }
    };
  };

  AergoRPCServiceClient.prototype.unlockAccount = function unlockAccount(requestMessage, metadata, callback) {
    if (arguments.length === 2) {
      callback = arguments[1];
    }

    var client = grpc.unary(AergoRPCService.UnlockAccount, {
      request: requestMessage,
      host: this.serviceHost,
      metadata: metadata,
      transport: this.options.transport,
      debug: this.options.debug,
      onEnd: function onEnd(response) {
        if (callback) {
          if (response.status !== grpc.Code.OK) {
            var err = new Error(response.statusMessage);
            err.code = response.status;
            err.metadata = response.trailers;
            callback(err, null);
          } else {
            callback(null, response.message);
          }
        }
      }
    });
    return {
      cancel: function cancel() {
        callback = null;
        client.close();
      }
    };
  };

  AergoRPCServiceClient.prototype.importAccount = function importAccount(requestMessage, metadata, callback) {
    if (arguments.length === 2) {
      callback = arguments[1];
    }

    var client = grpc.unary(AergoRPCService.ImportAccount, {
      request: requestMessage,
      host: this.serviceHost,
      metadata: metadata,
      transport: this.options.transport,
      debug: this.options.debug,
      onEnd: function onEnd(response) {
        if (callback) {
          if (response.status !== grpc.Code.OK) {
            var err = new Error(response.statusMessage);
            err.code = response.status;
            err.metadata = response.trailers;
            callback(err, null);
          } else {
            callback(null, response.message);
          }
        }
      }
    });
    return {
      cancel: function cancel() {
        callback = null;
        client.close();
      }
    };
  };

  AergoRPCServiceClient.prototype.exportAccount = function exportAccount(requestMessage, metadata, callback) {
    if (arguments.length === 2) {
      callback = arguments[1];
    }

    var client = grpc.unary(AergoRPCService.ExportAccount, {
      request: requestMessage,
      host: this.serviceHost,
      metadata: metadata,
      transport: this.options.transport,
      debug: this.options.debug,
      onEnd: function onEnd(response) {
        if (callback) {
          if (response.status !== grpc.Code.OK) {
            var err = new Error(response.statusMessage);
            err.code = response.status;
            err.metadata = response.trailers;
            callback(err, null);
          } else {
            callback(null, response.message);
          }
        }
      }
    });
    return {
      cancel: function cancel() {
        callback = null;
        client.close();
      }
    };
  };

  AergoRPCServiceClient.prototype.queryContract = function queryContract(requestMessage, metadata, callback) {
    if (arguments.length === 2) {
      callback = arguments[1];
    }

    var client = grpc.unary(AergoRPCService.QueryContract, {
      request: requestMessage,
      host: this.serviceHost,
      metadata: metadata,
      transport: this.options.transport,
      debug: this.options.debug,
      onEnd: function onEnd(response) {
        if (callback) {
          if (response.status !== grpc.Code.OK) {
            var err = new Error(response.statusMessage);
            err.code = response.status;
            err.metadata = response.trailers;
            callback(err, null);
          } else {
            callback(null, response.message);
          }
        }
      }
    });
    return {
      cancel: function cancel() {
        callback = null;
        client.close();
      }
    };
  };

  AergoRPCServiceClient.prototype.queryContractState = function queryContractState(requestMessage, metadata, callback) {
    if (arguments.length === 2) {
      callback = arguments[1];
    }

    var client = grpc.unary(AergoRPCService.QueryContractState, {
      request: requestMessage,
      host: this.serviceHost,
      metadata: metadata,
      transport: this.options.transport,
      debug: this.options.debug,
      onEnd: function onEnd(response) {
        if (callback) {
          if (response.status !== grpc.Code.OK) {
            var err = new Error(response.statusMessage);
            err.code = response.status;
            err.metadata = response.trailers;
            callback(err, null);
          } else {
            callback(null, response.message);
          }
        }
      }
    });
    return {
      cancel: function cancel() {
        callback = null;
        client.close();
      }
    };
  };

  AergoRPCServiceClient.prototype.getPeers = function getPeers(requestMessage, metadata, callback) {
    if (arguments.length === 2) {
      callback = arguments[1];
    }

    var client = grpc.unary(AergoRPCService.GetPeers, {
      request: requestMessage,
      host: this.serviceHost,
      metadata: metadata,
      transport: this.options.transport,
      debug: this.options.debug,
      onEnd: function onEnd(response) {
        if (callback) {
          if (response.status !== grpc.Code.OK) {
            var err = new Error(response.statusMessage);
            err.code = response.status;
            err.metadata = response.trailers;
            callback(err, null);
          } else {
            callback(null, response.message);
          }
        }
      }
    });
    return {
      cancel: function cancel() {
        callback = null;
        client.close();
      }
    };
  };

  AergoRPCServiceClient.prototype.getVotes = function getVotes(requestMessage, metadata, callback) {
    if (arguments.length === 2) {
      callback = arguments[1];
    }

    var client = grpc.unary(AergoRPCService.GetVotes, {
      request: requestMessage,
      host: this.serviceHost,
      metadata: metadata,
      transport: this.options.transport,
      debug: this.options.debug,
      onEnd: function onEnd(response) {
        if (callback) {
          if (response.status !== grpc.Code.OK) {
            var err = new Error(response.statusMessage);
            err.code = response.status;
            err.metadata = response.trailers;
            callback(err, null);
          } else {
            callback(null, response.message);
          }
        }
      }
    });
    return {
      cancel: function cancel() {
        callback = null;
        client.close();
      }
    };
  };

  AergoRPCServiceClient.prototype.getAccountVotes = function getAccountVotes(requestMessage, metadata, callback) {
    if (arguments.length === 2) {
      callback = arguments[1];
    }

    var client = grpc.unary(AergoRPCService.GetAccountVotes, {
      request: requestMessage,
      host: this.serviceHost,
      metadata: metadata,
      transport: this.options.transport,
      debug: this.options.debug,
      onEnd: function onEnd(response) {
        if (callback) {
          if (response.status !== grpc.Code.OK) {
            var err = new Error(response.statusMessage);
            err.code = response.status;
            err.metadata = response.trailers;
            callback(err, null);
          } else {
            callback(null, response.message);
          }
        }
      }
    });
    return {
      cancel: function cancel() {
        callback = null;
        client.close();
      }
    };
  };

  AergoRPCServiceClient.prototype.getStaking = function getStaking(requestMessage, metadata, callback) {
    if (arguments.length === 2) {
      callback = arguments[1];
    }

    var client = grpc.unary(AergoRPCService.GetStaking, {
      request: requestMessage,
      host: this.serviceHost,
      metadata: metadata,
      transport: this.options.transport,
      debug: this.options.debug,
      onEnd: function onEnd(response) {
        if (callback) {
          if (response.status !== grpc.Code.OK) {
            var err = new Error(response.statusMessage);
            err.code = response.status;
            err.metadata = response.trailers;
            callback(err, null);
          } else {
            callback(null, response.message);
          }
        }
      }
    });
    return {
      cancel: function cancel() {
        callback = null;
        client.close();
      }
    };
  };

  AergoRPCServiceClient.prototype.getNameInfo = function getNameInfo(requestMessage, metadata, callback) {
    if (arguments.length === 2) {
      callback = arguments[1];
    }

    var client = grpc.unary(AergoRPCService.GetNameInfo, {
      request: requestMessage,
      host: this.serviceHost,
      metadata: metadata,
      transport: this.options.transport,
      debug: this.options.debug,
      onEnd: function onEnd(response) {
        if (callback) {
          if (response.status !== grpc.Code.OK) {
            var err = new Error(response.statusMessage);
            err.code = response.status;
            err.metadata = response.trailers;
            callback(err, null);
          } else {
            callback(null, response.message);
          }
        }
      }
    });
    return {
      cancel: function cancel() {
        callback = null;
        client.close();
      }
    };
  };

  AergoRPCServiceClient.prototype.listEventStream = function listEventStream(requestMessage, metadata) {
    var listeners = {
      data: [],
      end: [],
      status: []
    };
    var client = grpc.invoke(AergoRPCService.ListEventStream, {
      request: requestMessage,
      host: this.serviceHost,
      metadata: metadata,
      transport: this.options.transport,
      debug: this.options.debug,
      onMessage: function onMessage(responseMessage) {
        listeners.data.forEach(function (handler) {
          handler(responseMessage);
        });
      },
      onEnd: function onEnd(status, statusMessage, trailers) {
        listeners.status.forEach(function (handler) {
          handler({
            code: status,
            details: statusMessage,
            metadata: trailers
          });
        });
        listeners.end.forEach(function (handler) {
          handler({
            code: status,
            details: statusMessage,
            metadata: trailers
          });
        });
        listeners = null;
      }
    });
    return {
      on: function on(type, handler) {
        listeners[type].push(handler);
        return this;
      },
      cancel: function cancel() {
        listeners = null;
        client.close();
      }
    };
  };

  AergoRPCServiceClient.prototype.listEvents = function listEvents(requestMessage, metadata, callback) {
    if (arguments.length === 2) {
      callback = arguments[1];
    }

    var client = grpc.unary(AergoRPCService.ListEvents, {
      request: requestMessage,
      host: this.serviceHost,
      metadata: metadata,
      transport: this.options.transport,
      debug: this.options.debug,
      onEnd: function onEnd(response) {
        if (callback) {
          if (response.status !== grpc.Code.OK) {
            var err = new Error(response.statusMessage);
            err.code = response.status;
            err.metadata = response.trailers;
            callback(err, null);
          } else {
            callback(null, response.message);
          }
        }
      }
    });
    return {
      cancel: function cancel() {
        callback = null;
        client.close();
      }
    };
  };

  AergoRPCServiceClient.prototype.getServerInfo = function getServerInfo(requestMessage, metadata, callback) {
    if (arguments.length === 2) {
      callback = arguments[1];
    }

    var client = grpc.unary(AergoRPCService.GetServerInfo, {
      request: requestMessage,
      host: this.serviceHost,
      metadata: metadata,
      transport: this.options.transport,
      debug: this.options.debug,
      onEnd: function onEnd(response) {
        if (callback) {
          if (response.status !== grpc.Code.OK) {
            var err = new Error(response.statusMessage);
            err.code = response.status;
            err.metadata = response.trailers;
            callback(err, null);
          } else {
            callback(null, response.message);
          }
        }
      }
    });
    return {
      cancel: function cancel() {
        callback = null;
        client.close();
      }
    };
  };

  AergoRPCServiceClient.prototype.getConsensusInfo = function getConsensusInfo(requestMessage, metadata, callback) {
    if (arguments.length === 2) {
      callback = arguments[1];
    }

    var client = grpc.unary(AergoRPCService.GetConsensusInfo, {
      request: requestMessage,
      host: this.serviceHost,
      metadata: metadata,
      transport: this.options.transport,
      debug: this.options.debug,
      onEnd: function onEnd(response) {
        if (callback) {
          if (response.status !== grpc.Code.OK) {
            var err = new Error(response.statusMessage);
            err.code = response.status;
            err.metadata = response.trailers;
            callback(err, null);
          } else {
            callback(null, response.message);
          }
        }
      }
    });
    return {
      cancel: function cancel() {
        callback = null;
        client.close();
      }
    };
  };

  AergoRPCServiceClient.prototype.changeMembership = function changeMembership(requestMessage, metadata, callback) {
    if (arguments.length === 2) {
      callback = arguments[1];
    }

    var client = grpc.unary(AergoRPCService.ChangeMembership, {
      request: requestMessage,
      host: this.serviceHost,
      metadata: metadata,
      transport: this.options.transport,
      debug: this.options.debug,
      onEnd: function onEnd(response) {
        if (callback) {
          if (response.status !== grpc.Code.OK) {
            var err = new Error(response.statusMessage);
            err.code = response.status;
            err.metadata = response.trailers;
            callback(err, null);
          } else {
            callback(null, response.message);
          }
        }
      }
    });
    return {
      cancel: function cancel() {
        callback = null;
        client.close();
      }
    };
  };

  AergoRPCServiceClient.prototype.getEnterpriseConfig = function getEnterpriseConfig(requestMessage, metadata, callback) {
    if (arguments.length === 2) {
      callback = arguments[1];
    }

    var client = grpc.unary(AergoRPCService.GetEnterpriseConfig, {
      request: requestMessage,
      host: this.serviceHost,
      metadata: metadata,
      transport: this.options.transport,
      debug: this.options.debug,
      onEnd: function onEnd(response) {
        if (callback) {
          if (response.status !== grpc.Code.OK) {
            var err = new Error(response.statusMessage);
            err.code = response.status;
            err.metadata = response.trailers;
            callback(err, null);
          } else {
            callback(null, response.message);
          }
        }
      }
    });
    return {
      cancel: function cancel() {
        callback = null;
        client.close();
      }
    };
  };

  AergoRPCServiceClient.prototype.getConfChangeProgress = function getConfChangeProgress(requestMessage, metadata, callback) {
    if (arguments.length === 2) {
      callback = arguments[1];
    }

    var client = grpc.unary(AergoRPCService.GetConfChangeProgress, {
      request: requestMessage,
      host: this.serviceHost,
      metadata: metadata,
      transport: this.options.transport,
      debug: this.options.debug,
      onEnd: function onEnd(response) {
        if (callback) {
          if (response.status !== grpc.Code.OK) {
            var err = new Error(response.statusMessage);
            err.code = response.status;
            err.metadata = response.trailers;
            callback(err, null);
          } else {
            callback(null, response.message);
          }
        }
      }
    });
    return {
      cancel: function cancel() {
        callback = null;
        client.close();
      }
    };
  };

  var AergoRPCServiceClient_1 = AergoRPCServiceClient;

  /**
   * Provider for GRPC-WEB connections over HTTP.
   * This is compatible with Web browsers.
   * Note that the transport is considerably slower than over standard GRPC.
   */
  var GrpcWebProvider =
  /*#__PURE__*/
  function () {
    /**
     * .. code-block:: javascript
     * 
     *     import { GrpcWebProvider } from '@herajs/client';
     *     const provider = new GrpcWebProvider({url: 'http://localhost:7845'});
     * 
     * @param {GrpcWebProviderConfig} config
     */
    function GrpcWebProvider() {
      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      _classCallCheck(this, GrpcWebProvider);

      _defineProperty(this, "client", void 0);

      _defineProperty(this, "config", void 0);

      this.config = _objectSpread2({}, this.defaultConfig, {}, config);
      var options = {
        transport: grpcWebClient_umd_1.WebsocketTransport()
      };
      this.client = new AergoRPCServiceClient_1(this.config.url, options);
    }

    _createClass(GrpcWebProvider, [{
      key: "defaultConfig",
      get: function get() {
        return {
          url: 'http://localhost:7845'
        };
      }
    }]);

    return GrpcWebProvider;
  }();

  AergoClient.platform = 'web';
  AergoClient.defaultProviderClass = GrpcWebProvider;

  exports.Address = Address;
  exports.AergoClient = AergoClient;
  exports.Amount = Amount;
  exports.Contract = Contract;
  exports.GrpcWebProvider = GrpcWebProvider;
  exports.Tx = Tx;
  exports.constants = constants;
  exports.default = AergoClient;

  Object.defineProperty(exports, '__esModule', { value: true });

})));

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer)
},{"buffer":4}],3:[function(require,module,exports){
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(
      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)
    ))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}

},{}],4:[function(require,module,exports){
(function (Buffer){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

var K_MAX_LENGTH = 0x7fffffff
exports.kMaxLength = K_MAX_LENGTH

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */
Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()

if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
    typeof console.error === 'function') {
  console.error(
    'This browser lacks typed array (Uint8Array) support which is required by ' +
    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
  )
}

function typedArraySupport () {
  // Can typed array instances can be augmented?
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = { __proto__: Uint8Array.prototype, foo: function () { return 42 } }
    return arr.foo() === 42
  } catch (e) {
    return false
  }
}

Object.defineProperty(Buffer.prototype, 'parent', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.buffer
  }
})

Object.defineProperty(Buffer.prototype, 'offset', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.byteOffset
  }
})

function createBuffer (length) {
  if (length > K_MAX_LENGTH) {
    throw new RangeError('The value "' + length + '" is invalid for option "size"')
  }
  // Return an augmented `Uint8Array` instance
  var buf = new Uint8Array(length)
  buf.__proto__ = Buffer.prototype
  return buf
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new TypeError(
        'The "string" argument must be of type string. Received type number'
      )
    }
    return allocUnsafe(arg)
  }
  return from(arg, encodingOrOffset, length)
}

// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
if (typeof Symbol !== 'undefined' && Symbol.species != null &&
    Buffer[Symbol.species] === Buffer) {
  Object.defineProperty(Buffer, Symbol.species, {
    value: null,
    configurable: true,
    enumerable: false,
    writable: false
  })
}

Buffer.poolSize = 8192 // not used by this implementation

function from (value, encodingOrOffset, length) {
  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset)
  }

  if (ArrayBuffer.isView(value)) {
    return fromArrayLike(value)
  }

  if (value == null) {
    throw TypeError(
      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
      'or Array-like Object. Received type ' + (typeof value)
    )
  }

  if (isInstance(value, ArrayBuffer) ||
      (value && isInstance(value.buffer, ArrayBuffer))) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof value === 'number') {
    throw new TypeError(
      'The "value" argument must not be of type number. Received type number'
    )
  }

  var valueOf = value.valueOf && value.valueOf()
  if (valueOf != null && valueOf !== value) {
    return Buffer.from(valueOf, encodingOrOffset, length)
  }

  var b = fromObject(value)
  if (b) return b

  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&
      typeof value[Symbol.toPrimitive] === 'function') {
    return Buffer.from(
      value[Symbol.toPrimitive]('string'), encodingOrOffset, length
    )
  }

  throw new TypeError(
    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
    'or Array-like Object. Received type ' + (typeof value)
  )
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(value, encodingOrOffset, length)
}

// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Buffer.prototype.__proto__ = Uint8Array.prototype
Buffer.__proto__ = Uint8Array

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be of type number')
  } else if (size < 0) {
    throw new RangeError('The value "' + size + '" is invalid for option "size"')
  }
}

function alloc (size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(size).fill(fill, encoding)
      : createBuffer(size).fill(fill)
  }
  return createBuffer(size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(size, fill, encoding)
}

function allocUnsafe (size) {
  assertSize(size)
  return createBuffer(size < 0 ? 0 : checked(size) | 0)
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(size)
}

function fromString (string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('Unknown encoding: ' + encoding)
  }

  var length = byteLength(string, encoding) | 0
  var buf = createBuffer(length)

  var actual = buf.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual)
  }

  return buf
}

function fromArrayLike (array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  var buf = createBuffer(length)
  for (var i = 0; i < length; i += 1) {
    buf[i] = array[i] & 255
  }
  return buf
}

function fromArrayBuffer (array, byteOffset, length) {
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('"offset" is outside of buffer bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('"length" is outside of buffer bounds')
  }

  var buf
  if (byteOffset === undefined && length === undefined) {
    buf = new Uint8Array(array)
  } else if (length === undefined) {
    buf = new Uint8Array(array, byteOffset)
  } else {
    buf = new Uint8Array(array, byteOffset, length)
  }

  // Return an augmented `Uint8Array` instance
  buf.__proto__ = Buffer.prototype
  return buf
}

function fromObject (obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    var buf = createBuffer(len)

    if (buf.length === 0) {
      return buf
    }

    obj.copy(buf, 0, 0, len)
    return buf
  }

  if (obj.length !== undefined) {
    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
      return createBuffer(0)
    }
    return fromArrayLike(obj)
  }

  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
    return fromArrayLike(obj.data)
  }
}

function checked (length) {
  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= K_MAX_LENGTH) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return b != null && b._isBuffer === true &&
    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
}

Buffer.compare = function compare (a, b) {
  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)
  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError(
      'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
    )
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!Array.isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (isInstance(buf, Uint8Array)) {
      buf = Buffer.from(buf)
    }
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    throw new TypeError(
      'The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' +
      'Received type ' + typeof string
    )
  }

  var len = string.length
  var mustMatch = (arguments.length > 2 && arguments[2] === true)
  if (!mustMatch && len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) {
          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
        }
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.toLocaleString = Buffer.prototype.toString

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()
  if (this.length > max) str += ' ... '
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (isInstance(target, Uint8Array)) {
    target = Buffer.from(target, target.offset, target.byteLength)
  }
  if (!Buffer.isBuffer(target)) {
    throw new TypeError(
      'The "target" argument must be one of type Buffer or Uint8Array. ' +
      'Received type ' + (typeof target)
    )
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset // Coerce to Number.
  if (numberIsNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  var strLen = string.length

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (numberIsNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset >>> 0
    if (isFinite(length)) {
      length = length >>> 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
        : (firstByte > 0xBF) ? 2
          : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf = this.subarray(start, end)
  // Return an augmented `Uint8Array` instance
  newBuf.__proto__ = Buffer.prototype
  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset + 3] = (value >>> 24)
  this[offset + 2] = (value >>> 16)
  this[offset + 1] = (value >>> 8)
  this[offset] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  this[offset + 2] = (value >>> 16)
  this[offset + 3] = (value >>> 24)
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start

  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
    // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end)
  } else if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (var i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, end),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if ((encoding === 'utf8' && code < 128) ||
          encoding === 'latin1') {
        // Fast path: If `val` fits into a single byte, use that numeric value.
        val = code
      }
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : Buffer.from(val, encoding)
    var len = bytes.length
    if (len === 0) {
      throw new TypeError('The value "' + val +
        '" is invalid for argument "value"')
    }
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node takes equal signs as end of the Base64 encoding
  str = str.split('=')[0]
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = str.trim().replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function isInstance (obj, type) {
  return obj instanceof type ||
    (obj != null && obj.constructor != null && obj.constructor.name != null &&
      obj.constructor.name === type.name)
}
function numberIsNaN (obj) {
  // For IE11 support
  return obj !== obj // eslint-disable-line no-self-compare
}

}).call(this,require("buffer").Buffer)
},{"base64-js":3,"buffer":4,"ieee754":5}],5:[function(require,module,exports){
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],6:[function(require,module,exports){
/*!
 * jQuery JavaScript Library v3.5.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2020-05-04T22:49Z
 */
( function( global, factory ) {

	"use strict";

	if ( typeof module === "object" && typeof module.exports === "object" ) {

		// For CommonJS and CommonJS-like environments where a proper `window`
		// is present, execute the factory and get jQuery.
		// For environments that do not have a `window` with a `document`
		// (such as Node.js), expose a factory as module.exports.
		// This accentuates the need for the creation of a real `window`.
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info.
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
} )( typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
// enough that all such attempts are guarded in a try block.
"use strict";

var arr = [];

var getProto = Object.getPrototypeOf;

var slice = arr.slice;

var flat = arr.flat ? function( array ) {
	return arr.flat.call( array );
} : function( array ) {
	return arr.concat.apply( [], array );
};


var push = arr.push;

var indexOf = arr.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var fnToString = hasOwn.toString;

var ObjectFunctionString = fnToString.call( Object );

var support = {};

var isFunction = function isFunction( obj ) {

      // Support: Chrome <=57, Firefox <=52
      // In some browsers, typeof returns "function" for HTML <object> elements
      // (i.e., `typeof document.createElement( "object" ) === "function"`).
      // We don't want to classify *any* DOM node as a function.
      return typeof obj === "function" && typeof obj.nodeType !== "number";
  };


var isWindow = function isWindow( obj ) {
		return obj != null && obj === obj.window;
	};


var document = window.document;



	var preservedScriptAttributes = {
		type: true,
		src: true,
		nonce: true,
		noModule: true
	};

	function DOMEval( code, node, doc ) {
		doc = doc || document;

		var i, val,
			script = doc.createElement( "script" );

		script.text = code;
		if ( node ) {
			for ( i in preservedScriptAttributes ) {

				// Support: Firefox 64+, Edge 18+
				// Some browsers don't support the "nonce" property on scripts.
				// On the other hand, just using `getAttribute` is not enough as
				// the `nonce` attribute is reset to an empty string whenever it
				// becomes browsing-context connected.
				// See https://github.com/whatwg/html/issues/2369
				// See https://html.spec.whatwg.org/#nonce-attributes
				// The `node.getAttribute` check was added for the sake of
				// `jQuery.globalEval` so that it can fake a nonce-containing node
				// via an object.
				val = node[ i ] || node.getAttribute && node.getAttribute( i );
				if ( val ) {
					script.setAttribute( i, val );
				}
			}
		}
		doc.head.appendChild( script ).parentNode.removeChild( script );
	}


function toType( obj ) {
	if ( obj == null ) {
		return obj + "";
	}

	// Support: Android <=2.3 only (functionish RegExp)
	return typeof obj === "object" || typeof obj === "function" ?
		class2type[ toString.call( obj ) ] || "object" :
		typeof obj;
}
/* global Symbol */
// Defining this global in .eslintrc.json would create a danger of using the global
// unguarded in another place, it seems safer to define global only for this module



var
	version = "3.5.1",

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {

		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init( selector, context );
	};

jQuery.fn = jQuery.prototype = {

	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {

		// Return all the elements in a clean array
		if ( num == null ) {
			return slice.call( this );
		}

		// Return just the one element from the set
		return num < 0 ? this[ num + this.length ] : this[ num ];
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	each: function( callback ) {
		return jQuery.each( this, callback );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map( this, function( elem, i ) {
			return callback.call( elem, i, elem );
		} ) );
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	even: function() {
		return this.pushStack( jQuery.grep( this, function( _elem, i ) {
			return ( i + 1 ) % 2;
		} ) );
	},

	odd: function() {
		return this.pushStack( jQuery.grep( this, function( _elem, i ) {
			return i % 2;
		} ) );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
	},

	end: function() {
		return this.prevObject || this.constructor();
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: arr.sort,
	splice: arr.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[ 0 ] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// Skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !isFunction( target ) ) {
		target = {};
	}

	// Extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {

		// Only deal with non-null/undefined values
		if ( ( options = arguments[ i ] ) != null ) {

			// Extend the base object
			for ( name in options ) {
				copy = options[ name ];

				// Prevent Object.prototype pollution
				// Prevent never-ending loop
				if ( name === "__proto__" || target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
					( copyIsArray = Array.isArray( copy ) ) ) ) {
					src = target[ name ];

					// Ensure proper type for the source value
					if ( copyIsArray && !Array.isArray( src ) ) {
						clone = [];
					} else if ( !copyIsArray && !jQuery.isPlainObject( src ) ) {
						clone = {};
					} else {
						clone = src;
					}
					copyIsArray = false;

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend( {

	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	isPlainObject: function( obj ) {
		var proto, Ctor;

		// Detect obvious negatives
		// Use toString instead of jQuery.type to catch host objects
		if ( !obj || toString.call( obj ) !== "[object Object]" ) {
			return false;
		}

		proto = getProto( obj );

		// Objects with no prototype (e.g., `Object.create( null )`) are plain
		if ( !proto ) {
			return true;
		}

		// Objects with prototype are plain iff they were constructed by a global Object function
		Ctor = hasOwn.call( proto, "constructor" ) && proto.constructor;
		return typeof Ctor === "function" && fnToString.call( Ctor ) === ObjectFunctionString;
	},

	isEmptyObject: function( obj ) {
		var name;

		for ( name in obj ) {
			return false;
		}
		return true;
	},

	// Evaluates a script in a provided context; falls back to the global one
	// if not specified.
	globalEval: function( code, options, doc ) {
		DOMEval( code, { nonce: options && options.nonce }, doc );
	},

	each: function( obj, callback ) {
		var length, i = 0;

		if ( isArrayLike( obj ) ) {
			length = obj.length;
			for ( ; i < length; i++ ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		} else {
			for ( i in obj ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		}

		return obj;
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArrayLike( Object( arr ) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		return arr == null ? -1 : indexOf.call( arr, elem, i );
	},

	// Support: Android <=4.0 only, PhantomJS 1 only
	// push.apply(_, arraylike) throws on ancient WebKit
	merge: function( first, second ) {
		var len = +second.length,
			j = 0,
			i = first.length;

		for ( ; j < len; j++ ) {
			first[ i++ ] = second[ j ];
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems.length,
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches.push( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var length, value,
			i = 0,
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArrayLike( elems ) ) {
			length = elems.length;
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}
		}

		// Flatten any nested arrays
		return flat( ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
} );

if ( typeof Symbol === "function" ) {
	jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
}

// Populate the class2type map
jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
function( _i, name ) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
} );

function isArrayLike( obj ) {

	// Support: real iOS 8.2 only (not reproducible in simulator)
	// `in` check used to prevent JIT error (gh-2145)
	// hasOwn isn't used here due to false negatives
	// regarding Nodelist length in IE
	var length = !!obj && "length" in obj && obj.length,
		type = toType( obj );

	if ( isFunction( obj ) || isWindow( obj ) ) {
		return false;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}
var Sizzle =
/*!
 * Sizzle CSS Selector Engine v2.3.5
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://js.foundation/
 *
 * Date: 2020-03-14
 */
( function( window ) {
var i,
	support,
	Expr,
	getText,
	isXML,
	tokenize,
	compile,
	select,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + 1 * new Date(),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	nonnativeSelectorCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	// Instance methods
	hasOwn = ( {} ).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	pushNative = arr.push,
	push = arr.push,
	slice = arr.slice,

	// Use a stripped-down indexOf as it's faster than native
	// https://jsperf.com/thor-indexof-vs-for/5
	indexOf = function( list, elem ) {
		var i = 0,
			len = list.length;
		for ( ; i < len; i++ ) {
			if ( list[ i ] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|" +
		"ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",

	// https://www.w3.org/TR/css-syntax-3/#ident-token-diagram
	identifier = "(?:\\\\[\\da-fA-F]{1,6}" + whitespace +
		"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",

	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +

		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +

		// "Attribute values must be CSS identifiers [capture 5]
		// or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" +
		whitespace + "*\\]",

	pseudos = ":(" + identifier + ")(?:\\((" +

		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +

		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +

		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rwhitespace = new RegExp( whitespace + "+", "g" ),
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" +
		whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace +
		"*" ),
	rdescend = new RegExp( whitespace + "|>" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + identifier + ")" ),
		"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
		"TAG": new RegExp( "^(" + identifier + "|[*])" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" +
			whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" +
			whitespace + "*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),

		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace +
			"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace +
			"*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rhtml = /HTML$/i,
	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,

	// CSS escapes
	// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\[\\da-fA-F]{1,6}" + whitespace + "?|\\\\([^\\r\\n\\f])", "g" ),
	funescape = function( escape, nonHex ) {
		var high = "0x" + escape.slice( 1 ) - 0x10000;

		return nonHex ?

			// Strip the backslash prefix from a non-hex escape sequence
			nonHex :

			// Replace a hexadecimal escape sequence with the encoded Unicode code point
			// Support: IE <=11+
			// For values outside the Basic Multilingual Plane (BMP), manually construct a
			// surrogate pair
			high < 0 ?
				String.fromCharCode( high + 0x10000 ) :
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	},

	// CSS string/identifier serialization
	// https://drafts.csswg.org/cssom/#common-serializing-idioms
	rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
	fcssescape = function( ch, asCodePoint ) {
		if ( asCodePoint ) {

			// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
			if ( ch === "\0" ) {
				return "\uFFFD";
			}

			// Control characters and (dependent upon position) numbers get escaped as code points
			return ch.slice( 0, -1 ) + "\\" +
				ch.charCodeAt( ch.length - 1 ).toString( 16 ) + " ";
		}

		// Other potentially-special ASCII characters get backslash-escaped
		return "\\" + ch;
	},

	// Used for iframes
	// See setDocument()
	// Removing the function wrapper causes a "Permission Denied"
	// error in IE
	unloadHandler = function() {
		setDocument();
	},

	inDisabledFieldset = addCombinator(
		function( elem ) {
			return elem.disabled === true && elem.nodeName.toLowerCase() === "fieldset";
		},
		{ dir: "parentNode", next: "legend" }
	);

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		( arr = slice.call( preferredDoc.childNodes ) ),
		preferredDoc.childNodes
	);

	// Support: Android<4.0
	// Detect silently failing push.apply
	// eslint-disable-next-line no-unused-expressions
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			pushNative.apply( target, slice.call( els ) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;

			// Can't trust NodeList.length
			while ( ( target[ j++ ] = els[ i++ ] ) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var m, i, elem, nid, match, groups, newSelector,
		newContext = context && context.ownerDocument,

		// nodeType defaults to 9, since context defaults to document
		nodeType = context ? context.nodeType : 9;

	results = results || [];

	// Return early from calls with invalid selector or context
	if ( typeof selector !== "string" || !selector ||
		nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

		return results;
	}

	// Try to shortcut find operations (as opposed to filters) in HTML documents
	if ( !seed ) {
		setDocument( context );
		context = context || document;

		if ( documentIsHTML ) {

			// If the selector is sufficiently simple, try using a "get*By*" DOM method
			// (excepting DocumentFragment context, where the methods don't exist)
			if ( nodeType !== 11 && ( match = rquickExpr.exec( selector ) ) ) {

				// ID selector
				if ( ( m = match[ 1 ] ) ) {

					// Document context
					if ( nodeType === 9 ) {
						if ( ( elem = context.getElementById( m ) ) ) {

							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( elem.id === m ) {
								results.push( elem );
								return results;
							}
						} else {
							return results;
						}

					// Element context
					} else {

						// Support: IE, Opera, Webkit
						// TODO: identify versions
						// getElementById can match elements by name instead of ID
						if ( newContext && ( elem = newContext.getElementById( m ) ) &&
							contains( context, elem ) &&
							elem.id === m ) {

							results.push( elem );
							return results;
						}
					}

				// Type selector
				} else if ( match[ 2 ] ) {
					push.apply( results, context.getElementsByTagName( selector ) );
					return results;

				// Class selector
				} else if ( ( m = match[ 3 ] ) && support.getElementsByClassName &&
					context.getElementsByClassName ) {

					push.apply( results, context.getElementsByClassName( m ) );
					return results;
				}
			}

			// Take advantage of querySelectorAll
			if ( support.qsa &&
				!nonnativeSelectorCache[ selector + " " ] &&
				( !rbuggyQSA || !rbuggyQSA.test( selector ) ) &&

				// Support: IE 8 only
				// Exclude object elements
				( nodeType !== 1 || context.nodeName.toLowerCase() !== "object" ) ) {

				newSelector = selector;
				newContext = context;

				// qSA considers elements outside a scoping root when evaluating child or
				// descendant combinators, which is not what we want.
				// In such cases, we work around the behavior by prefixing every selector in the
				// list with an ID selector referencing the scope context.
				// The technique has to be used as well when a leading combinator is used
				// as such selectors are not recognized by querySelectorAll.
				// Thanks to Andrew Dupont for this technique.
				if ( nodeType === 1 &&
					( rdescend.test( selector ) || rcombinators.test( selector ) ) ) {

					// Expand context for sibling selectors
					newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
						context;

					// We can use :scope instead of the ID hack if the browser
					// supports it & if we're not changing the context.
					if ( newContext !== context || !support.scope ) {

						// Capture the context ID, setting it first if necessary
						if ( ( nid = context.getAttribute( "id" ) ) ) {
							nid = nid.replace( rcssescape, fcssescape );
						} else {
							context.setAttribute( "id", ( nid = expando ) );
						}
					}

					// Prefix every selector in the list
					groups = tokenize( selector );
					i = groups.length;
					while ( i-- ) {
						groups[ i ] = ( nid ? "#" + nid : ":scope" ) + " " +
							toSelector( groups[ i ] );
					}
					newSelector = groups.join( "," );
				}

				try {
					push.apply( results,
						newContext.querySelectorAll( newSelector )
					);
					return results;
				} catch ( qsaError ) {
					nonnativeSelectorCache( selector, true );
				} finally {
					if ( nid === expando ) {
						context.removeAttribute( "id" );
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {function(string, object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {

		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {

			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return ( cache[ key + " " ] = value );
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created element and returns a boolean result
 */
function assert( fn ) {
	var el = document.createElement( "fieldset" );

	try {
		return !!fn( el );
	} catch ( e ) {
		return false;
	} finally {

		// Remove from its parent by default
		if ( el.parentNode ) {
			el.parentNode.removeChild( el );
		}

		// release memory in IE
		el = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split( "|" ),
		i = arr.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[ i ] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			a.sourceIndex - b.sourceIndex;

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( ( cur = cur.nextSibling ) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return ( name === "input" || name === "button" ) && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for :enabled/:disabled
 * @param {Boolean} disabled true for :disabled; false for :enabled
 */
function createDisabledPseudo( disabled ) {

	// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
	return function( elem ) {

		// Only certain elements can match :enabled or :disabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
		if ( "form" in elem ) {

			// Check for inherited disabledness on relevant non-disabled elements:
			// * listed form-associated elements in a disabled fieldset
			//   https://html.spec.whatwg.org/multipage/forms.html#category-listed
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
			// * option elements in a disabled optgroup
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
			// All such elements have a "form" property.
			if ( elem.parentNode && elem.disabled === false ) {

				// Option elements defer to a parent optgroup if present
				if ( "label" in elem ) {
					if ( "label" in elem.parentNode ) {
						return elem.parentNode.disabled === disabled;
					} else {
						return elem.disabled === disabled;
					}
				}

				// Support: IE 6 - 11
				// Use the isDisabled shortcut property to check for disabled fieldset ancestors
				return elem.isDisabled === disabled ||

					// Where there is no isDisabled, check manually
					/* jshint -W018 */
					elem.isDisabled !== !disabled &&
					inDisabledFieldset( elem ) === disabled;
			}

			return elem.disabled === disabled;

		// Try to winnow out elements that can't be disabled before trusting the disabled property.
		// Some victims get caught in our net (label, legend, menu, track), but it shouldn't
		// even exist on them, let alone have a boolean value.
		} else if ( "label" in elem ) {
			return elem.disabled === disabled;
		}

		// Remaining elements are neither :enabled nor :disabled
		return false;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction( function( argument ) {
		argument = +argument;
		return markFunction( function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ ( j = matchIndexes[ i ] ) ] ) {
					seed[ j ] = !( matches[ j ] = seed[ j ] );
				}
			}
		} );
	} );
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== "undefined" && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
	var namespace = elem.namespaceURI,
		docElem = ( elem.ownerDocument || elem ).documentElement;

	// Support: IE <=8
	// Assume HTML when documentElement doesn't yet exist, such as inside loading iframes
	// https://bugs.jquery.com/ticket/4833
	return !rhtml.test( namespace || docElem && docElem.nodeName || "HTML" );
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var hasCompare, subWindow,
		doc = node ? node.ownerDocument || node : preferredDoc;

	// Return early if doc is invalid or already selected
	// Support: IE 11+, Edge 17 - 18+
	// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
	// two documents; shallow comparisons work.
	// eslint-disable-next-line eqeqeq
	if ( doc == document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Update global variables
	document = doc;
	docElem = document.documentElement;
	documentIsHTML = !isXML( document );

	// Support: IE 9 - 11+, Edge 12 - 18+
	// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
	// Support: IE 11+, Edge 17 - 18+
	// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
	// two documents; shallow comparisons work.
	// eslint-disable-next-line eqeqeq
	if ( preferredDoc != document &&
		( subWindow = document.defaultView ) && subWindow.top !== subWindow ) {

		// Support: IE 11, Edge
		if ( subWindow.addEventListener ) {
			subWindow.addEventListener( "unload", unloadHandler, false );

		// Support: IE 9 - 10 only
		} else if ( subWindow.attachEvent ) {
			subWindow.attachEvent( "onunload", unloadHandler );
		}
	}

	// Support: IE 8 - 11+, Edge 12 - 18+, Chrome <=16 - 25 only, Firefox <=3.6 - 31 only,
	// Safari 4 - 5 only, Opera <=11.6 - 12.x only
	// IE/Edge & older browsers don't support the :scope pseudo-class.
	// Support: Safari 6.0 only
	// Safari 6.0 supports :scope but it's an alias of :root there.
	support.scope = assert( function( el ) {
		docElem.appendChild( el ).appendChild( document.createElement( "div" ) );
		return typeof el.querySelectorAll !== "undefined" &&
			!el.querySelectorAll( ":scope fieldset div" ).length;
	} );

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties
	// (excepting IE8 booleans)
	support.attributes = assert( function( el ) {
		el.className = "i";
		return !el.getAttribute( "className" );
	} );

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert( function( el ) {
		el.appendChild( document.createComment( "" ) );
		return !el.getElementsByTagName( "*" ).length;
	} );

	// Support: IE<9
	support.getElementsByClassName = rnative.test( document.getElementsByClassName );

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programmatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert( function( el ) {
		docElem.appendChild( el ).id = expando;
		return !document.getElementsByName || !document.getElementsByName( expando ).length;
	} );

	// ID filter and find
	if ( support.getById ) {
		Expr.filter[ "ID" ] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute( "id" ) === attrId;
			};
		};
		Expr.find[ "ID" ] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var elem = context.getElementById( id );
				return elem ? [ elem ] : [];
			}
		};
	} else {
		Expr.filter[ "ID" ] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== "undefined" &&
					elem.getAttributeNode( "id" );
				return node && node.value === attrId;
			};
		};

		// Support: IE 6 - 7 only
		// getElementById is not reliable as a find shortcut
		Expr.find[ "ID" ] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var node, i, elems,
					elem = context.getElementById( id );

				if ( elem ) {

					// Verify the id attribute
					node = elem.getAttributeNode( "id" );
					if ( node && node.value === id ) {
						return [ elem ];
					}

					// Fall back on getElementsByName
					elems = context.getElementsByName( id );
					i = 0;
					while ( ( elem = elems[ i++ ] ) ) {
						node = elem.getAttributeNode( "id" );
						if ( node && node.value === id ) {
							return [ elem ];
						}
					}
				}

				return [];
			}
		};
	}

	// Tag
	Expr.find[ "TAG" ] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== "undefined" ) {
				return context.getElementsByTagName( tag );

			// DocumentFragment nodes don't have gEBTN
			} else if ( support.qsa ) {
				return context.querySelectorAll( tag );
			}
		} :

		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,

				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( ( elem = results[ i++ ] ) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find[ "CLASS" ] = support.getElementsByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See https://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( ( support.qsa = rnative.test( document.querySelectorAll ) ) ) {

		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert( function( el ) {

			var input;

			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// https://bugs.jquery.com/ticket/12359
			docElem.appendChild( el ).innerHTML = "<a id='" + expando + "'></a>" +
				"<select id='" + expando + "-\r\\' msallowcapture=''>" +
				"<option selected=''></option></select>";

			// Support: IE8, Opera 11-12.16
			// Nothing should be selected when empty strings follow ^= or $= or *=
			// The test attribute must be unknown in Opera but "safe" for WinRT
			// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
			if ( el.querySelectorAll( "[msallowcapture^='']" ).length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !el.querySelectorAll( "[selected]" ).length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
			if ( !el.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
				rbuggyQSA.push( "~=" );
			}

			// Support: IE 11+, Edge 15 - 18+
			// IE 11/Edge don't find elements on a `[name='']` query in some cases.
			// Adding a temporary attribute to the document before the selection works
			// around the issue.
			// Interestingly, IE 10 & older don't seem to have the issue.
			input = document.createElement( "input" );
			input.setAttribute( "name", "" );
			el.appendChild( input );
			if ( !el.querySelectorAll( "[name='']" ).length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*name" + whitespace + "*=" +
					whitespace + "*(?:''|\"\")" );
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !el.querySelectorAll( ":checked" ).length ) {
				rbuggyQSA.push( ":checked" );
			}

			// Support: Safari 8+, iOS 8+
			// https://bugs.webkit.org/show_bug.cgi?id=136851
			// In-page `selector#id sibling-combinator selector` fails
			if ( !el.querySelectorAll( "a#" + expando + "+*" ).length ) {
				rbuggyQSA.push( ".#.+[+~]" );
			}

			// Support: Firefox <=3.6 - 5 only
			// Old Firefox doesn't throw on a badly-escaped identifier.
			el.querySelectorAll( "\\\f" );
			rbuggyQSA.push( "[\\r\\n\\f]" );
		} );

		assert( function( el ) {
			el.innerHTML = "<a href='' disabled='disabled'></a>" +
				"<select disabled='disabled'><option/></select>";

			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
			var input = document.createElement( "input" );
			input.setAttribute( "type", "hidden" );
			el.appendChild( input ).setAttribute( "name", "D" );

			// Support: IE8
			// Enforce case-sensitivity of name attribute
			if ( el.querySelectorAll( "[name=d]" ).length ) {
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( el.querySelectorAll( ":enabled" ).length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Support: IE9-11+
			// IE's :disabled selector does not pick up the children of disabled fieldsets
			docElem.appendChild( el ).disabled = true;
			if ( el.querySelectorAll( ":disabled" ).length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Support: Opera 10 - 11 only
			// Opera 10-11 does not throw on post-comma invalid pseudos
			el.querySelectorAll( "*,:x" );
			rbuggyQSA.push( ",.*:" );
		} );
	}

	if ( ( support.matchesSelector = rnative.test( ( matches = docElem.matches ||
		docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector ) ) ) ) {

		assert( function( el ) {

			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( el, "*" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( el, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		} );
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join( "|" ) );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join( "|" ) );

	/* Contains
	---------------------------------------------------------------------- */
	hasCompare = rnative.test( docElem.compareDocumentPosition );

	// Element contains another
	// Purposefully self-exclusive
	// As in, an element does not contain itself
	contains = hasCompare || rnative.test( docElem.contains ) ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			) );
		} :
		function( a, b ) {
			if ( b ) {
				while ( ( b = b.parentNode ) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = hasCompare ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		// Support: IE 11+, Edge 17 - 18+
		// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
		// two documents; shallow comparisons work.
		// eslint-disable-next-line eqeqeq
		compare = ( a.ownerDocument || a ) == ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			( !support.sortDetached && b.compareDocumentPosition( a ) === compare ) ) {

			// Choose the first element that is related to our preferred document
			// Support: IE 11+, Edge 17 - 18+
			// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
			// two documents; shallow comparisons work.
			// eslint-disable-next-line eqeqeq
			if ( a == document || a.ownerDocument == preferredDoc &&
				contains( preferredDoc, a ) ) {
				return -1;
			}

			// Support: IE 11+, Edge 17 - 18+
			// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
			// two documents; shallow comparisons work.
			// eslint-disable-next-line eqeqeq
			if ( b == document || b.ownerDocument == preferredDoc &&
				contains( preferredDoc, b ) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	} :
	function( a, b ) {

		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Parentless nodes are either documents or disconnected
		if ( !aup || !bup ) {

			// Support: IE 11+, Edge 17 - 18+
			// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
			// two documents; shallow comparisons work.
			/* eslint-disable eqeqeq */
			return a == document ? -1 :
				b == document ? 1 :
				/* eslint-enable eqeqeq */
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( ( cur = cur.parentNode ) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( ( cur = cur.parentNode ) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[ i ] === bp[ i ] ) {
			i++;
		}

		return i ?

			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[ i ], bp[ i ] ) :

			// Otherwise nodes in our document sort first
			// Support: IE 11+, Edge 17 - 18+
			// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
			// two documents; shallow comparisons work.
			/* eslint-disable eqeqeq */
			ap[ i ] == preferredDoc ? -1 :
			bp[ i ] == preferredDoc ? 1 :
			/* eslint-enable eqeqeq */
			0;
	};

	return document;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	setDocument( elem );

	if ( support.matchesSelector && documentIsHTML &&
		!nonnativeSelectorCache[ expr + " " ] &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||

				// As well, disconnected nodes are said to be in a document
				// fragment in IE 9
				elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch ( e ) {
			nonnativeSelectorCache( expr, true );
		}
	}

	return Sizzle( expr, document, null, [ elem ] ).length > 0;
};

Sizzle.contains = function( context, elem ) {

	// Set document vars if needed
	// Support: IE 11+, Edge 17 - 18+
	// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
	// two documents; shallow comparisons work.
	// eslint-disable-next-line eqeqeq
	if ( ( context.ownerDocument || context ) != document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {

	// Set document vars if needed
	// Support: IE 11+, Edge 17 - 18+
	// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
	// two documents; shallow comparisons work.
	// eslint-disable-next-line eqeqeq
	if ( ( elem.ownerDocument || elem ) != document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],

		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val !== undefined ?
		val :
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			( val = elem.getAttributeNode( name ) ) && val.specified ?
				val.value :
				null;
};

Sizzle.escape = function( sel ) {
	return ( sel + "" ).replace( rcssescape, fcssescape );
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( ( elem = results[ i++ ] ) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {

		// If no nodeType, this is expected to be an array
		while ( ( node = elem[ i++ ] ) ) {

			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {

		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {

			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}

	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[ 1 ] = match[ 1 ].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[ 3 ] = ( match[ 3 ] || match[ 4 ] ||
				match[ 5 ] || "" ).replace( runescape, funescape );

			if ( match[ 2 ] === "~=" ) {
				match[ 3 ] = " " + match[ 3 ] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {

			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[ 1 ] = match[ 1 ].toLowerCase();

			if ( match[ 1 ].slice( 0, 3 ) === "nth" ) {

				// nth-* requires argument
				if ( !match[ 3 ] ) {
					Sizzle.error( match[ 0 ] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[ 4 ] = +( match[ 4 ] ?
					match[ 5 ] + ( match[ 6 ] || 1 ) :
					2 * ( match[ 3 ] === "even" || match[ 3 ] === "odd" ) );
				match[ 5 ] = +( ( match[ 7 ] + match[ 8 ] ) || match[ 3 ] === "odd" );

				// other types prohibit arguments
			} else if ( match[ 3 ] ) {
				Sizzle.error( match[ 0 ] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[ 6 ] && match[ 2 ];

			if ( matchExpr[ "CHILD" ].test( match[ 0 ] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[ 3 ] ) {
				match[ 2 ] = match[ 4 ] || match[ 5 ] || "";

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&

				// Get excess from tokenize (recursively)
				( excess = tokenize( unquoted, true ) ) &&

				// advance to the next closing parenthesis
				( excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length ) ) {

				// excess is a negative index
				match[ 0 ] = match[ 0 ].slice( 0, excess );
				match[ 2 ] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() {
					return true;
				} :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				( pattern = new RegExp( "(^|" + whitespace +
					")" + className + "(" + whitespace + "|$)" ) ) && classCache(
						className, function( elem ) {
							return pattern.test(
								typeof elem.className === "string" && elem.className ||
								typeof elem.getAttribute !== "undefined" &&
									elem.getAttribute( "class" ) ||
								""
							);
				} );
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				/* eslint-disable max-len */

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
				/* eslint-enable max-len */

			};
		},

		"CHILD": function( type, what, _argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, _context, xml ) {
					var cache, uniqueCache, outerCache, node, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType,
						diff = false;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( ( node = node[ dir ] ) ) {
									if ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) {

										return false;
									}
								}

								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {

							// Seek `elem` from a previously-cached index

							// ...in a gzip-friendly way
							node = parent;
							outerCache = node[ expando ] || ( node[ expando ] = {} );

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ node.uniqueID ] ||
								( outerCache[ node.uniqueID ] = {} );

							cache = uniqueCache[ type ] || [];
							nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
							diff = nodeIndex && cache[ 2 ];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( ( node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								( diff = nodeIndex = 0 ) || start.pop() ) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						} else {

							// Use previously-cached element index if available
							if ( useCache ) {

								// ...in a gzip-friendly way
								node = elem;
								outerCache = node[ expando ] || ( node[ expando ] = {} );

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									( outerCache[ node.uniqueID ] = {} );

								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex;
							}

							// xml :nth-child(...)
							// or :nth-last-child(...) or :nth(-last)?-of-type(...)
							if ( diff === false ) {

								// Use the same loop as above to seek `elem` from the start
								while ( ( node = ++nodeIndex && node && node[ dir ] ||
									( diff = nodeIndex = 0 ) || start.pop() ) ) {

									if ( ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) &&
										++diff ) {

										// Cache the index of each encountered element
										if ( useCache ) {
											outerCache = node[ expando ] ||
												( node[ expando ] = {} );

											// Support: IE <9 only
											// Defend against cloned attroperties (jQuery gh-1709)
											uniqueCache = outerCache[ node.uniqueID ] ||
												( outerCache[ node.uniqueID ] = {} );

											uniqueCache[ type ] = [ dirruns, diff ];
										}

										if ( node === elem ) {
											break;
										}
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {

			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction( function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf( seed, matched[ i ] );
							seed[ idx ] = !( matches[ idx ] = matched[ i ] );
						}
					} ) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {

		// Potentially complex pseudos
		"not": markFunction( function( selector ) {

			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction( function( seed, matches, _context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( ( elem = unmatched[ i ] ) ) {
							seed[ i ] = !( matches[ i ] = elem );
						}
					}
				} ) :
				function( elem, _context, xml ) {
					input[ 0 ] = elem;
					matcher( input, null, xml, results );

					// Don't keep the element (issue #299)
					input[ 0 ] = null;
					return !results.pop();
				};
		} ),

		"has": markFunction( function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		} ),

		"contains": markFunction( function( text ) {
			text = text.replace( runescape, funescape );
			return function( elem ) {
				return ( elem.textContent || getText( elem ) ).indexOf( text ) > -1;
			};
		} ),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {

			// lang value must be a valid identifier
			if ( !ridentifier.test( lang || "" ) ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( ( elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute( "xml:lang" ) || elem.getAttribute( "lang" ) ) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( ( elem = elem.parentNode ) && elem.nodeType === 1 );
				return false;
			};
		} ),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement &&
				( !document.hasFocus || document.hasFocus() ) &&
				!!( elem.type || elem.href || ~elem.tabIndex );
		},

		// Boolean properties
		"enabled": createDisabledPseudo( false ),
		"disabled": createDisabledPseudo( true ),

		"checked": function( elem ) {

			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return ( nodeName === "input" && !!elem.checked ) ||
				( nodeName === "option" && !!elem.selected );
		},

		"selected": function( elem ) {

			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				// eslint-disable-next-line no-unused-expressions
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {

			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos[ "empty" ]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&

				// Support: IE<8
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( ( attr = elem.getAttribute( "type" ) ) == null ||
					attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		"first": createPositionalPseudo( function() {
			return [ 0 ];
		} ),

		"last": createPositionalPseudo( function( _matchIndexes, length ) {
			return [ length - 1 ];
		} ),

		"eq": createPositionalPseudo( function( _matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		} ),

		"even": createPositionalPseudo( function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		} ),

		"odd": createPositionalPseudo( function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		} ),

		"lt": createPositionalPseudo( function( matchIndexes, length, argument ) {
			var i = argument < 0 ?
				argument + length :
				argument > length ?
					length :
					argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		} ),

		"gt": createPositionalPseudo( function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		} )
	}
};

Expr.pseudos[ "nth" ] = Expr.pseudos[ "eq" ];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || ( match = rcomma.exec( soFar ) ) ) {
			if ( match ) {

				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[ 0 ].length ) || soFar;
			}
			groups.push( ( tokens = [] ) );
		}

		matched = false;

		// Combinators
		if ( ( match = rcombinators.exec( soFar ) ) ) {
			matched = match.shift();
			tokens.push( {
				value: matched,

				// Cast descendant combinators to space
				type: match[ 0 ].replace( rtrim, " " )
			} );
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( ( match = matchExpr[ type ].exec( soFar ) ) && ( !preFilters[ type ] ||
				( match = preFilters[ type ]( match ) ) ) ) {
				matched = match.shift();
				tokens.push( {
					value: matched,
					type: type,
					matches: match
				} );
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :

			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
};

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[ i ].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		skip = combinator.next,
		key = skip || dir,
		checkNonElements = base && key === "parentNode",
		doneName = done++;

	return combinator.first ?

		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( ( elem = elem[ dir ] ) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
			return false;
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, uniqueCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
			if ( xml ) {
				while ( ( elem = elem[ dir ] ) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( ( elem = elem[ dir ] ) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || ( elem[ expando ] = {} );

						// Support: IE <9 only
						// Defend against cloned attroperties (jQuery gh-1709)
						uniqueCache = outerCache[ elem.uniqueID ] ||
							( outerCache[ elem.uniqueID ] = {} );

						if ( skip && skip === elem.nodeName.toLowerCase() ) {
							elem = elem[ dir ] || elem;
						} else if ( ( oldCache = uniqueCache[ key ] ) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return ( newCache[ 2 ] = oldCache[ 2 ] );
						} else {

							// Reuse newcache so results back-propagate to previous elements
							uniqueCache[ key ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( ( newCache[ 2 ] = matcher( elem, context, xml ) ) ) {
								return true;
							}
						}
					}
				}
			}
			return false;
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[ i ]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[ 0 ];
}

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[ i ], results );
	}
	return results;
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( ( elem = unmatched[ i ] ) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction( function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts(
				selector || "*",
				context.nodeType ? [ context ] : context,
				[]
			),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?

				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( ( elem = temp[ i ] ) ) {
					matcherOut[ postMap[ i ] ] = !( matcherIn[ postMap[ i ] ] = elem );
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {

					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( ( elem = matcherOut[ i ] ) ) {

							// Restore matcherIn since elem is not yet a final match
							temp.push( ( matcherIn[ i ] = elem ) );
						}
					}
					postFinder( null, ( matcherOut = [] ), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( ( elem = matcherOut[ i ] ) &&
						( temp = postFinder ? indexOf( seed, elem ) : preMap[ i ] ) > -1 ) {

						seed[ temp ] = !( results[ temp ] = elem );
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	} );
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[ 0 ].type ],
		implicitRelative = leadingRelative || Expr.relative[ " " ],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				( checkContext = context ).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );

			// Avoid hanging onto element (issue #299)
			checkContext = null;
			return ret;
		} ];

	for ( ; i < len; i++ ) {
		if ( ( matcher = Expr.relative[ tokens[ i ].type ] ) ) {
			matchers = [ addCombinator( elementMatcher( matchers ), matcher ) ];
		} else {
			matcher = Expr.filter[ tokens[ i ].type ].apply( null, tokens[ i ].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {

				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[ j ].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(

					// If the preceding token was a descendant combinator, insert an implicit any-element `*`
					tokens
						.slice( 0, i - 1 )
						.concat( { value: tokens[ i - 2 ].type === " " ? "*" : "" } )
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( ( tokens = tokens.slice( j ) ) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,

				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find[ "TAG" ]( "*", outermost ),

				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = ( dirruns += contextBackup == null ? 1 : Math.random() || 0.1 ),
				len = elems.length;

			if ( outermost ) {

				// Support: IE 11+, Edge 17 - 18+
				// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
				// two documents; shallow comparisons work.
				// eslint-disable-next-line eqeqeq
				outermostContext = context == document || context || outermost;
			}

			// Add elements passing elementMatchers directly to results
			// Support: IE<9, Safari
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
			for ( ; i !== len && ( elem = elems[ i ] ) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;

					// Support: IE 11+, Edge 17 - 18+
					// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
					// two documents; shallow comparisons work.
					// eslint-disable-next-line eqeqeq
					if ( !context && elem.ownerDocument != document ) {
						setDocument( elem );
						xml = !documentIsHTML;
					}
					while ( ( matcher = elementMatchers[ j++ ] ) ) {
						if ( matcher( elem, context || document, xml ) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {

					// They will have gone through all possible matchers
					if ( ( elem = !matcher && elem ) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// `i` is now the count of elements visited above, and adding it to `matchedCount`
			// makes the latter nonnegative.
			matchedCount += i;

			// Apply set filters to unmatched elements
			// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
			// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
			// no element matchers and no seed.
			// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
			// case, which will result in a "00" `matchedCount` that differs from `i` but is also
			// numerically zero.
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( ( matcher = setMatchers[ j++ ] ) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {

					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !( unmatched[ i ] || setMatched[ i ] ) ) {
								setMatched[ i ] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {

		// Generate a function of recursive functions that can be used to check each element
		if ( !match ) {
			match = tokenize( selector );
		}
		i = match.length;
		while ( i-- ) {
			cached = matcherFromTokens( match[ i ] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache(
			selector,
			matcherFromGroupMatchers( elementMatchers, setMatchers )
		);

		// Save selector and tokenization
		cached.selector = selector;
	}
	return cached;
};

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
select = Sizzle.select = function( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		compiled = typeof selector === "function" && selector,
		match = !seed && tokenize( ( selector = compiled.selector || selector ) );

	results = results || [];

	// Try to minimize operations if there is only one selector in the list and no seed
	// (the latter of which guarantees us context)
	if ( match.length === 1 ) {

		// Reduce context if the leading compound selector is an ID
		tokens = match[ 0 ] = match[ 0 ].slice( 0 );
		if ( tokens.length > 2 && ( token = tokens[ 0 ] ).type === "ID" &&
			context.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[ 1 ].type ] ) {

			context = ( Expr.find[ "ID" ]( token.matches[ 0 ]
				.replace( runescape, funescape ), context ) || [] )[ 0 ];
			if ( !context ) {
				return results;

			// Precompiled matchers will still verify ancestry, so step up a level
			} else if ( compiled ) {
				context = context.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Fetch a seed set for right-to-left matching
		i = matchExpr[ "needsContext" ].test( selector ) ? 0 : tokens.length;
		while ( i-- ) {
			token = tokens[ i ];

			// Abort if we hit a combinator
			if ( Expr.relative[ ( type = token.type ) ] ) {
				break;
			}
			if ( ( find = Expr.find[ type ] ) ) {

				// Search, expanding context for leading sibling combinators
				if ( ( seed = find(
					token.matches[ 0 ].replace( runescape, funescape ),
					rsibling.test( tokens[ 0 ].type ) && testContext( context.parentNode ) ||
						context
				) ) ) {

					// If seed is empty or no tokens remain, we can return early
					tokens.splice( i, 1 );
					selector = seed.length && toSelector( tokens );
					if ( !selector ) {
						push.apply( results, seed );
						return results;
					}

					break;
				}
			}
		}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	( compiled || compile( selector, match ) )(
		seed,
		context,
		!documentIsHTML,
		results,
		!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
};

// One-time assignments

// Sort stability
support.sortStable = expando.split( "" ).sort( sortOrder ).join( "" ) === expando;

// Support: Chrome 14-35+
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert( function( el ) {

	// Should return 1, but returns 4 (following)
	return el.compareDocumentPosition( document.createElement( "fieldset" ) ) & 1;
} );

// Support: IE<8
// Prevent attribute/property "interpolation"
// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert( function( el ) {
	el.innerHTML = "<a href='#'></a>";
	return el.firstChild.getAttribute( "href" ) === "#";
} ) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	} );
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert( function( el ) {
	el.innerHTML = "<input/>";
	el.firstChild.setAttribute( "value", "" );
	return el.firstChild.getAttribute( "value" ) === "";
} ) ) {
	addHandle( "value", function( elem, _name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	} );
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert( function( el ) {
	return el.getAttribute( "disabled" ) == null;
} ) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return elem[ name ] === true ? name.toLowerCase() :
				( val = elem.getAttributeNode( name ) ) && val.specified ?
					val.value :
					null;
		}
	} );
}

return Sizzle;

} )( window );



jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;

// Deprecated
jQuery.expr[ ":" ] = jQuery.expr.pseudos;
jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;
jQuery.escapeSelector = Sizzle.escape;




var dir = function( elem, dir, until ) {
	var matched = [],
		truncate = until !== undefined;

	while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
		if ( elem.nodeType === 1 ) {
			if ( truncate && jQuery( elem ).is( until ) ) {
				break;
			}
			matched.push( elem );
		}
	}
	return matched;
};


var siblings = function( n, elem ) {
	var matched = [];

	for ( ; n; n = n.nextSibling ) {
		if ( n.nodeType === 1 && n !== elem ) {
			matched.push( n );
		}
	}

	return matched;
};


var rneedsContext = jQuery.expr.match.needsContext;



function nodeName( elem, name ) {

  return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();

};
var rsingleTag = ( /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i );



// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			return !!qualifier.call( elem, i, elem ) !== not;
		} );
	}

	// Single element
	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		} );
	}

	// Arraylike of elements (jQuery, arguments, Array)
	if ( typeof qualifier !== "string" ) {
		return jQuery.grep( elements, function( elem ) {
			return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
		} );
	}

	// Filtered directly for both simple and complex selectors
	return jQuery.filter( qualifier, elements, not );
}

jQuery.filter = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	if ( elems.length === 1 && elem.nodeType === 1 ) {
		return jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];
	}

	return jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
		return elem.nodeType === 1;
	} ) );
};

jQuery.fn.extend( {
	find: function( selector ) {
		var i, ret,
			len = this.length,
			self = this;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter( function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			} ) );
		}

		ret = this.pushStack( [] );

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		return len > 1 ? jQuery.uniqueSort( ret ) : ret;
	},
	filter: function( selector ) {
		return this.pushStack( winnow( this, selector || [], false ) );
	},
	not: function( selector ) {
		return this.pushStack( winnow( this, selector || [], true ) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	}
} );


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	// Shortcut simple #id case for speed
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,

	init = jQuery.fn.init = function( selector, context, root ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Method init() accepts an alternate rootjQuery
		// so migrate can support jQuery.sub (gh-2101)
		root = root || rootjQuery;

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector[ 0 ] === "<" &&
				selector[ selector.length - 1 ] === ">" &&
				selector.length >= 3 ) {

				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && ( match[ 1 ] || !context ) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[ 1 ] ) {
					context = context instanceof jQuery ? context[ 0 ] : context;

					// Option to run scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge( this, jQuery.parseHTML(
						match[ 1 ],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {

							// Properties of context are called as methods if possible
							if ( isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[ 2 ] );

					if ( elem ) {

						// Inject the element directly into the jQuery object
						this[ 0 ] = elem;
						this.length = 1;
					}
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || root ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this[ 0 ] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( isFunction( selector ) ) {
			return root.ready !== undefined ?
				root.ready( selector ) :

				// Execute immediately if ready is not present
				selector( jQuery );
		}

		return jQuery.makeArray( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,

	// Methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend( {
	has: function( target ) {
		var targets = jQuery( target, this ),
			l = targets.length;

		return this.filter( function() {
			var i = 0;
			for ( ; i < l; i++ ) {
				if ( jQuery.contains( this, targets[ i ] ) ) {
					return true;
				}
			}
		} );
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			targets = typeof selectors !== "string" && jQuery( selectors );

		// Positional selectors never match, since there's no _selection_ context
		if ( !rneedsContext.test( selectors ) ) {
			for ( ; i < l; i++ ) {
				for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

					// Always skip document fragments
					if ( cur.nodeType < 11 && ( targets ?
						targets.index( cur ) > -1 :

						// Don't pass non-elements to Sizzle
						cur.nodeType === 1 &&
							jQuery.find.matchesSelector( cur, selectors ) ) ) {

						matched.push( cur );
						break;
					}
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
	},

	// Determine the position of an element within the set
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
		}

		// Index in selector
		if ( typeof elem === "string" ) {
			return indexOf.call( jQuery( elem ), this[ 0 ] );
		}

		// Locate the position of the desired element
		return indexOf.call( this,

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[ 0 ] : elem
		);
	},

	add: function( selector, context ) {
		return this.pushStack(
			jQuery.uniqueSort(
				jQuery.merge( this.get(), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter( selector )
		);
	}
} );

function sibling( cur, dir ) {
	while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
	return cur;
}

jQuery.each( {
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, _i, until ) {
		return dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, _i, until ) {
		return dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, _i, until ) {
		return dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return siblings( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return siblings( elem.firstChild );
	},
	contents: function( elem ) {
		if ( elem.contentDocument != null &&

			// Support: IE 11+
			// <object> elements with no `data` attribute has an object
			// `contentDocument` with a `null` prototype.
			getProto( elem.contentDocument ) ) {

			return elem.contentDocument;
		}

		// Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
		// Treat the template element as a regular one in browsers that
		// don't support it.
		if ( nodeName( elem, "template" ) ) {
			elem = elem.content || elem;
		}

		return jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var matched = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			matched = jQuery.filter( selector, matched );
		}

		if ( this.length > 1 ) {

			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				jQuery.uniqueSort( matched );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				matched.reverse();
			}
		}

		return this.pushStack( matched );
	};
} );
var rnothtmlwhite = ( /[^\x20\t\r\n\f]+/g );



// Convert String-formatted options into Object-formatted ones
function createOptions( options ) {
	var object = {};
	jQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	} );
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		createOptions( options ) :
		jQuery.extend( {}, options );

	var // Flag to know if list is currently firing
		firing,

		// Last fire value for non-forgettable lists
		memory,

		// Flag to know if list was already fired
		fired,

		// Flag to prevent firing
		locked,

		// Actual callback list
		list = [],

		// Queue of execution data for repeatable lists
		queue = [],

		// Index of currently firing callback (modified by add/remove as needed)
		firingIndex = -1,

		// Fire callbacks
		fire = function() {

			// Enforce single-firing
			locked = locked || options.once;

			// Execute callbacks for all pending executions,
			// respecting firingIndex overrides and runtime changes
			fired = firing = true;
			for ( ; queue.length; firingIndex = -1 ) {
				memory = queue.shift();
				while ( ++firingIndex < list.length ) {

					// Run callback and check for early termination
					if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
						options.stopOnFalse ) {

						// Jump to end and forget the data so .add doesn't re-fire
						firingIndex = list.length;
						memory = false;
					}
				}
			}

			// Forget the data if we're done with it
			if ( !options.memory ) {
				memory = false;
			}

			firing = false;

			// Clean up if we're done firing for good
			if ( locked ) {

				// Keep an empty list if we have data for future add calls
				if ( memory ) {
					list = [];

				// Otherwise, this object is spent
				} else {
					list = "";
				}
			}
		},

		// Actual Callbacks object
		self = {

			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {

					// If we have memory from a past run, we should fire after adding
					if ( memory && !firing ) {
						firingIndex = list.length - 1;
						queue.push( memory );
					}

					( function add( args ) {
						jQuery.each( args, function( _, arg ) {
							if ( isFunction( arg ) ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && toType( arg ) !== "string" ) {

								// Inspect recursively
								add( arg );
							}
						} );
					} )( arguments );

					if ( memory && !firing ) {
						fire();
					}
				}
				return this;
			},

			// Remove a callback from the list
			remove: function() {
				jQuery.each( arguments, function( _, arg ) {
					var index;
					while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
						list.splice( index, 1 );

						// Handle firing indexes
						if ( index <= firingIndex ) {
							firingIndex--;
						}
					}
				} );
				return this;
			},

			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ?
					jQuery.inArray( fn, list ) > -1 :
					list.length > 0;
			},

			// Remove all callbacks from the list
			empty: function() {
				if ( list ) {
					list = [];
				}
				return this;
			},

			// Disable .fire and .add
			// Abort any current/pending executions
			// Clear all callbacks and values
			disable: function() {
				locked = queue = [];
				list = memory = "";
				return this;
			},
			disabled: function() {
				return !list;
			},

			// Disable .fire
			// Also disable .add unless we have memory (since it would have no effect)
			// Abort any pending executions
			lock: function() {
				locked = queue = [];
				if ( !memory && !firing ) {
					list = memory = "";
				}
				return this;
			},
			locked: function() {
				return !!locked;
			},

			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( !locked ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					queue.push( args );
					if ( !firing ) {
						fire();
					}
				}
				return this;
			},

			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},

			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};


function Identity( v ) {
	return v;
}
function Thrower( ex ) {
	throw ex;
}

function adoptValue( value, resolve, reject, noValue ) {
	var method;

	try {

		// Check for promise aspect first to privilege synchronous behavior
		if ( value && isFunction( ( method = value.promise ) ) ) {
			method.call( value ).done( resolve ).fail( reject );

		// Other thenables
		} else if ( value && isFunction( ( method = value.then ) ) ) {
			method.call( value, resolve, reject );

		// Other non-thenables
		} else {

			// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
			// * false: [ value ].slice( 0 ) => resolve( value )
			// * true: [ value ].slice( 1 ) => resolve()
			resolve.apply( undefined, [ value ].slice( noValue ) );
		}

	// For Promises/A+, convert exceptions into rejections
	// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
	// Deferred#then to conditionally suppress rejection.
	} catch ( value ) {

		// Support: Android 4.0 only
		// Strict mode functions invoked without .call/.apply get global-object context
		reject.apply( undefined, [ value ] );
	}
}

jQuery.extend( {

	Deferred: function( func ) {
		var tuples = [

				// action, add listener, callbacks,
				// ... .then handlers, argument index, [final state]
				[ "notify", "progress", jQuery.Callbacks( "memory" ),
					jQuery.Callbacks( "memory" ), 2 ],
				[ "resolve", "done", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 0, "resolved" ],
				[ "reject", "fail", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 1, "rejected" ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				"catch": function( fn ) {
					return promise.then( null, fn );
				},

				// Keep pipe for back-compat
				pipe: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;

					return jQuery.Deferred( function( newDefer ) {
						jQuery.each( tuples, function( _i, tuple ) {

							// Map tuples (progress, done, fail) to arguments (done, fail, progress)
							var fn = isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];

							// deferred.progress(function() { bind to newDefer or newDefer.notify })
							// deferred.done(function() { bind to newDefer or newDefer.resolve })
							// deferred.fail(function() { bind to newDefer or newDefer.reject })
							deferred[ tuple[ 1 ] ]( function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && isFunction( returned.promise ) ) {
									returned.promise()
										.progress( newDefer.notify )
										.done( newDefer.resolve )
										.fail( newDefer.reject );
								} else {
									newDefer[ tuple[ 0 ] + "With" ](
										this,
										fn ? [ returned ] : arguments
									);
								}
							} );
						} );
						fns = null;
					} ).promise();
				},
				then: function( onFulfilled, onRejected, onProgress ) {
					var maxDepth = 0;
					function resolve( depth, deferred, handler, special ) {
						return function() {
							var that = this,
								args = arguments,
								mightThrow = function() {
									var returned, then;

									// Support: Promises/A+ section 2.3.3.3.3
									// https://promisesaplus.com/#point-59
									// Ignore double-resolution attempts
									if ( depth < maxDepth ) {
										return;
									}

									returned = handler.apply( that, args );

									// Support: Promises/A+ section 2.3.1
									// https://promisesaplus.com/#point-48
									if ( returned === deferred.promise() ) {
										throw new TypeError( "Thenable self-resolution" );
									}

									// Support: Promises/A+ sections 2.3.3.1, 3.5
									// https://promisesaplus.com/#point-54
									// https://promisesaplus.com/#point-75
									// Retrieve `then` only once
									then = returned &&

										// Support: Promises/A+ section 2.3.4
										// https://promisesaplus.com/#point-64
										// Only check objects and functions for thenability
										( typeof returned === "object" ||
											typeof returned === "function" ) &&
										returned.then;

									// Handle a returned thenable
									if ( isFunction( then ) ) {

										// Special processors (notify) just wait for resolution
										if ( special ) {
											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special )
											);

										// Normal processors (resolve) also hook into progress
										} else {

											// ...and disregard older resolution values
											maxDepth++;

											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special ),
												resolve( maxDepth, deferred, Identity,
													deferred.notifyWith )
											);
										}

									// Handle all other returned values
									} else {

										// Only substitute handlers pass on context
										// and multiple values (non-spec behavior)
										if ( handler !== Identity ) {
											that = undefined;
											args = [ returned ];
										}

										// Process the value(s)
										// Default process is resolve
										( special || deferred.resolveWith )( that, args );
									}
								},

								// Only normal processors (resolve) catch and reject exceptions
								process = special ?
									mightThrow :
									function() {
										try {
											mightThrow();
										} catch ( e ) {

											if ( jQuery.Deferred.exceptionHook ) {
												jQuery.Deferred.exceptionHook( e,
													process.stackTrace );
											}

											// Support: Promises/A+ section 2.3.3.3.4.1
											// https://promisesaplus.com/#point-61
											// Ignore post-resolution exceptions
											if ( depth + 1 >= maxDepth ) {

												// Only substitute handlers pass on context
												// and multiple values (non-spec behavior)
												if ( handler !== Thrower ) {
													that = undefined;
													args = [ e ];
												}

												deferred.rejectWith( that, args );
											}
										}
									};

							// Support: Promises/A+ section 2.3.3.3.1
							// https://promisesaplus.com/#point-57
							// Re-resolve promises immediately to dodge false rejection from
							// subsequent errors
							if ( depth ) {
								process();
							} else {

								// Call an optional hook to record the stack, in case of exception
								// since it's otherwise lost when execution goes async
								if ( jQuery.Deferred.getStackHook ) {
									process.stackTrace = jQuery.Deferred.getStackHook();
								}
								window.setTimeout( process );
							}
						};
					}

					return jQuery.Deferred( function( newDefer ) {

						// progress_handlers.add( ... )
						tuples[ 0 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onProgress ) ?
									onProgress :
									Identity,
								newDefer.notifyWith
							)
						);

						// fulfilled_handlers.add( ... )
						tuples[ 1 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onFulfilled ) ?
									onFulfilled :
									Identity
							)
						);

						// rejected_handlers.add( ... )
						tuples[ 2 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onRejected ) ?
									onRejected :
									Thrower
							)
						);
					} ).promise();
				},

				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 5 ];

			// promise.progress = list.add
			// promise.done = list.add
			// promise.fail = list.add
			promise[ tuple[ 1 ] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(
					function() {

						// state = "resolved" (i.e., fulfilled)
						// state = "rejected"
						state = stateString;
					},

					// rejected_callbacks.disable
					// fulfilled_callbacks.disable
					tuples[ 3 - i ][ 2 ].disable,

					// rejected_handlers.disable
					// fulfilled_handlers.disable
					tuples[ 3 - i ][ 3 ].disable,

					// progress_callbacks.lock
					tuples[ 0 ][ 2 ].lock,

					// progress_handlers.lock
					tuples[ 0 ][ 3 ].lock
				);
			}

			// progress_handlers.fire
			// fulfilled_handlers.fire
			// rejected_handlers.fire
			list.add( tuple[ 3 ].fire );

			// deferred.notify = function() { deferred.notifyWith(...) }
			// deferred.resolve = function() { deferred.resolveWith(...) }
			// deferred.reject = function() { deferred.rejectWith(...) }
			deferred[ tuple[ 0 ] ] = function() {
				deferred[ tuple[ 0 ] + "With" ]( this === deferred ? undefined : this, arguments );
				return this;
			};

			// deferred.notifyWith = list.fireWith
			// deferred.resolveWith = list.fireWith
			// deferred.rejectWith = list.fireWith
			deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
		} );

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( singleValue ) {
		var

			// count of uncompleted subordinates
			remaining = arguments.length,

			// count of unprocessed arguments
			i = remaining,

			// subordinate fulfillment data
			resolveContexts = Array( i ),
			resolveValues = slice.call( arguments ),

			// the master Deferred
			master = jQuery.Deferred(),

			// subordinate callback factory
			updateFunc = function( i ) {
				return function( value ) {
					resolveContexts[ i ] = this;
					resolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
					if ( !( --remaining ) ) {
						master.resolveWith( resolveContexts, resolveValues );
					}
				};
			};

		// Single- and empty arguments are adopted like Promise.resolve
		if ( remaining <= 1 ) {
			adoptValue( singleValue, master.done( updateFunc( i ) ).resolve, master.reject,
				!remaining );

			// Use .then() to unwrap secondary thenables (cf. gh-3000)
			if ( master.state() === "pending" ||
				isFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {

				return master.then();
			}
		}

		// Multiple arguments are aggregated like Promise.all array elements
		while ( i-- ) {
			adoptValue( resolveValues[ i ], updateFunc( i ), master.reject );
		}

		return master.promise();
	}
} );


// These usually indicate a programmer mistake during development,
// warn about them ASAP rather than swallowing them by default.
var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

jQuery.Deferred.exceptionHook = function( error, stack ) {

	// Support: IE 8 - 9 only
	// Console exists when dev tools are open, which can happen at any time
	if ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {
		window.console.warn( "jQuery.Deferred exception: " + error.message, error.stack, stack );
	}
};




jQuery.readyException = function( error ) {
	window.setTimeout( function() {
		throw error;
	} );
};




// The deferred used on DOM ready
var readyList = jQuery.Deferred();

jQuery.fn.ready = function( fn ) {

	readyList
		.then( fn )

		// Wrap jQuery.readyException in a function so that the lookup
		// happens at the time of error handling instead of callback
		// registration.
		.catch( function( error ) {
			jQuery.readyException( error );
		} );

	return this;
};

jQuery.extend( {

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );
	}
} );

jQuery.ready.then = readyList.then;

// The ready event handler and self cleanup method
function completed() {
	document.removeEventListener( "DOMContentLoaded", completed );
	window.removeEventListener( "load", completed );
	jQuery.ready();
}

// Catch cases where $(document).ready() is called
// after the browser event has already occurred.
// Support: IE <=9 - 10 only
// Older IE sometimes signals "interactive" too soon
if ( document.readyState === "complete" ||
	( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

	// Handle it asynchronously to allow scripts the opportunity to delay ready
	window.setTimeout( jQuery.ready );

} else {

	// Use the handy event callback
	document.addEventListener( "DOMContentLoaded", completed );

	// A fallback to window.onload, that will always work
	window.addEventListener( "load", completed );
}




// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		len = elems.length,
		bulk = key == null;

	// Sets many values
	if ( toType( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			access( elems, fn, i, key[ i ], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !isFunction( value ) ) {
			raw = true;
		}

		if ( bulk ) {

			// Bulk operations run against the entire set
			if ( raw ) {
				fn.call( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, _key, value ) {
					return bulk.call( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < len; i++ ) {
				fn(
					elems[ i ], key, raw ?
					value :
					value.call( elems[ i ], i, fn( elems[ i ], key ) )
				);
			}
		}
	}

	if ( chainable ) {
		return elems;
	}

	// Gets
	if ( bulk ) {
		return fn.call( elems );
	}

	return len ? fn( elems[ 0 ], key ) : emptyGet;
};


// Matches dashed string for camelizing
var rmsPrefix = /^-ms-/,
	rdashAlpha = /-([a-z])/g;

// Used by camelCase as callback to replace()
function fcamelCase( _all, letter ) {
	return letter.toUpperCase();
}

// Convert dashed to camelCase; used by the css and data modules
// Support: IE <=9 - 11, Edge 12 - 15
// Microsoft forgot to hump their vendor prefix (#9572)
function camelCase( string ) {
	return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
}
var acceptData = function( owner ) {

	// Accepts only:
	//  - Node
	//    - Node.ELEMENT_NODE
	//    - Node.DOCUMENT_NODE
	//  - Object
	//    - Any
	return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
};




function Data() {
	this.expando = jQuery.expando + Data.uid++;
}

Data.uid = 1;

Data.prototype = {

	cache: function( owner ) {

		// Check if the owner object already has a cache
		var value = owner[ this.expando ];

		// If not, create one
		if ( !value ) {
			value = {};

			// We can accept data for non-element nodes in modern browsers,
			// but we should not, see #8335.
			// Always return an empty object.
			if ( acceptData( owner ) ) {

				// If it is a node unlikely to be stringify-ed or looped over
				// use plain assignment
				if ( owner.nodeType ) {
					owner[ this.expando ] = value;

				// Otherwise secure it in a non-enumerable property
				// configurable must be true to allow the property to be
				// deleted when data is removed
				} else {
					Object.defineProperty( owner, this.expando, {
						value: value,
						configurable: true
					} );
				}
			}
		}

		return value;
	},
	set: function( owner, data, value ) {
		var prop,
			cache = this.cache( owner );

		// Handle: [ owner, key, value ] args
		// Always use camelCase key (gh-2257)
		if ( typeof data === "string" ) {
			cache[ camelCase( data ) ] = value;

		// Handle: [ owner, { properties } ] args
		} else {

			// Copy the properties one-by-one to the cache object
			for ( prop in data ) {
				cache[ camelCase( prop ) ] = data[ prop ];
			}
		}
		return cache;
	},
	get: function( owner, key ) {
		return key === undefined ?
			this.cache( owner ) :

			// Always use camelCase key (gh-2257)
			owner[ this.expando ] && owner[ this.expando ][ camelCase( key ) ];
	},
	access: function( owner, key, value ) {

		// In cases where either:
		//
		//   1. No key was specified
		//   2. A string key was specified, but no value provided
		//
		// Take the "read" path and allow the get method to determine
		// which value to return, respectively either:
		//
		//   1. The entire cache object
		//   2. The data stored at the key
		//
		if ( key === undefined ||
				( ( key && typeof key === "string" ) && value === undefined ) ) {

			return this.get( owner, key );
		}

		// When the key is not a string, or both a key and value
		// are specified, set or extend (existing objects) with either:
		//
		//   1. An object of properties
		//   2. A key and value
		//
		this.set( owner, key, value );

		// Since the "set" path can have two possible entry points
		// return the expected data based on which path was taken[*]
		return value !== undefined ? value : key;
	},
	remove: function( owner, key ) {
		var i,
			cache = owner[ this.expando ];

		if ( cache === undefined ) {
			return;
		}

		if ( key !== undefined ) {

			// Support array or space separated string of keys
			if ( Array.isArray( key ) ) {

				// If key is an array of keys...
				// We always set camelCase keys, so remove that.
				key = key.map( camelCase );
			} else {
				key = camelCase( key );

				// If a key with the spaces exists, use it.
				// Otherwise, create an array by matching non-whitespace
				key = key in cache ?
					[ key ] :
					( key.match( rnothtmlwhite ) || [] );
			}

			i = key.length;

			while ( i-- ) {
				delete cache[ key[ i ] ];
			}
		}

		// Remove the expando if there's no more data
		if ( key === undefined || jQuery.isEmptyObject( cache ) ) {

			// Support: Chrome <=35 - 45
			// Webkit & Blink performance suffers when deleting properties
			// from DOM nodes, so set to undefined instead
			// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
			if ( owner.nodeType ) {
				owner[ this.expando ] = undefined;
			} else {
				delete owner[ this.expando ];
			}
		}
	},
	hasData: function( owner ) {
		var cache = owner[ this.expando ];
		return cache !== undefined && !jQuery.isEmptyObject( cache );
	}
};
var dataPriv = new Data();

var dataUser = new Data();



//	Implementation Summary
//
//	1. Enforce API surface and semantic compatibility with 1.9.x branch
//	2. Improve the module's maintainability by reducing the storage
//		paths to a single mechanism.
//	3. Use the same single mechanism to support "private" and "user" data.
//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
//	5. Avoid exposing implementation details on user objects (eg. expando properties)
//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /[A-Z]/g;

function getData( data ) {
	if ( data === "true" ) {
		return true;
	}

	if ( data === "false" ) {
		return false;
	}

	if ( data === "null" ) {
		return null;
	}

	// Only convert to a number if it doesn't change the string
	if ( data === +data + "" ) {
		return +data;
	}

	if ( rbrace.test( data ) ) {
		return JSON.parse( data );
	}

	return data;
}

function dataAttr( elem, key, data ) {
	var name;

	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {
		name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = getData( data );
			} catch ( e ) {}

			// Make sure we set the data so it isn't changed later
			dataUser.set( elem, key, data );
		} else {
			data = undefined;
		}
	}
	return data;
}

jQuery.extend( {
	hasData: function( elem ) {
		return dataUser.hasData( elem ) || dataPriv.hasData( elem );
	},

	data: function( elem, name, data ) {
		return dataUser.access( elem, name, data );
	},

	removeData: function( elem, name ) {
		dataUser.remove( elem, name );
	},

	// TODO: Now that all calls to _data and _removeData have been replaced
	// with direct calls to dataPriv methods, these can be deprecated.
	_data: function( elem, name, data ) {
		return dataPriv.access( elem, name, data );
	},

	_removeData: function( elem, name ) {
		dataPriv.remove( elem, name );
	}
} );

jQuery.fn.extend( {
	data: function( key, value ) {
		var i, name, data,
			elem = this[ 0 ],
			attrs = elem && elem.attributes;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = dataUser.get( elem );

				if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
					i = attrs.length;
					while ( i-- ) {

						// Support: IE 11 only
						// The attrs elements can be null (#14894)
						if ( attrs[ i ] ) {
							name = attrs[ i ].name;
							if ( name.indexOf( "data-" ) === 0 ) {
								name = camelCase( name.slice( 5 ) );
								dataAttr( elem, name, data[ name ] );
							}
						}
					}
					dataPriv.set( elem, "hasDataAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each( function() {
				dataUser.set( this, key );
			} );
		}

		return access( this, function( value ) {
			var data;

			// The calling jQuery object (element matches) is not empty
			// (and therefore has an element appears at this[ 0 ]) and the
			// `value` parameter was not undefined. An empty jQuery object
			// will result in `undefined` for elem = this[ 0 ] which will
			// throw an exception if an attempt to read a data cache is made.
			if ( elem && value === undefined ) {

				// Attempt to get data from the cache
				// The key will always be camelCased in Data
				data = dataUser.get( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to "discover" the data in
				// HTML5 custom data-* attrs
				data = dataAttr( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// We tried really hard, but the data doesn't exist.
				return;
			}

			// Set the data...
			this.each( function() {

				// We always store the camelCased key
				dataUser.set( this, key, value );
			} );
		}, null, value, arguments.length > 1, null, true );
	},

	removeData: function( key ) {
		return this.each( function() {
			dataUser.remove( this, key );
		} );
	}
} );


jQuery.extend( {
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = dataPriv.get( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || Array.isArray( data ) ) {
					queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// Clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// Not public - generate a queueHooks object, or return the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
			empty: jQuery.Callbacks( "once memory" ).add( function() {
				dataPriv.remove( elem, [ type + "queue", key ] );
			} )
		} );
	}
} );

jQuery.fn.extend( {
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[ 0 ], type );
		}

		return data === undefined ?
			this :
			this.each( function() {
				var queue = jQuery.queue( this, type, data );

				// Ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			} );
	},
	dequeue: function( type ) {
		return this.each( function() {
			jQuery.dequeue( this, type );
		} );
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},

	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while ( i-- ) {
			tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
} );
var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var documentElement = document.documentElement;



	var isAttached = function( elem ) {
			return jQuery.contains( elem.ownerDocument, elem );
		},
		composed = { composed: true };

	// Support: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 only
	// Check attachment across shadow DOM boundaries when possible (gh-3504)
	// Support: iOS 10.0-10.2 only
	// Early iOS 10 versions support `attachShadow` but not `getRootNode`,
	// leading to errors. We need to check for `getRootNode`.
	if ( documentElement.getRootNode ) {
		isAttached = function( elem ) {
			return jQuery.contains( elem.ownerDocument, elem ) ||
				elem.getRootNode( composed ) === elem.ownerDocument;
		};
	}
var isHiddenWithinTree = function( elem, el ) {

		// isHiddenWithinTree might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;

		// Inline style trumps all
		return elem.style.display === "none" ||
			elem.style.display === "" &&

			// Otherwise, check computed style
			// Support: Firefox <=43 - 45
			// Disconnected elements can have computed display: none, so first confirm that elem is
			// in the document.
			isAttached( elem ) &&

			jQuery.css( elem, "display" ) === "none";
	};



function adjustCSS( elem, prop, valueParts, tween ) {
	var adjusted, scale,
		maxIterations = 20,
		currentValue = tween ?
			function() {
				return tween.cur();
			} :
			function() {
				return jQuery.css( elem, prop, "" );
			},
		initial = currentValue(),
		unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

		// Starting value computation is required for potential unit mismatches
		initialInUnit = elem.nodeType &&
			( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
			rcssNum.exec( jQuery.css( elem, prop ) );

	if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

		// Support: Firefox <=54
		// Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)
		initial = initial / 2;

		// Trust units reported by jQuery.css
		unit = unit || initialInUnit[ 3 ];

		// Iteratively approximate from a nonzero starting point
		initialInUnit = +initial || 1;

		while ( maxIterations-- ) {

			// Evaluate and update our best guess (doubling guesses that zero out).
			// Finish if the scale equals or crosses 1 (making the old*new product non-positive).
			jQuery.style( elem, prop, initialInUnit + unit );
			if ( ( 1 - scale ) * ( 1 - ( scale = currentValue() / initial || 0.5 ) ) <= 0 ) {
				maxIterations = 0;
			}
			initialInUnit = initialInUnit / scale;

		}

		initialInUnit = initialInUnit * 2;
		jQuery.style( elem, prop, initialInUnit + unit );

		// Make sure we update the tween properties later on
		valueParts = valueParts || [];
	}

	if ( valueParts ) {
		initialInUnit = +initialInUnit || +initial || 0;

		// Apply relative offset (+=/-=) if specified
		adjusted = valueParts[ 1 ] ?
			initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
			+valueParts[ 2 ];
		if ( tween ) {
			tween.unit = unit;
			tween.start = initialInUnit;
			tween.end = adjusted;
		}
	}
	return adjusted;
}


var defaultDisplayMap = {};

function getDefaultDisplay( elem ) {
	var temp,
		doc = elem.ownerDocument,
		nodeName = elem.nodeName,
		display = defaultDisplayMap[ nodeName ];

	if ( display ) {
		return display;
	}

	temp = doc.body.appendChild( doc.createElement( nodeName ) );
	display = jQuery.css( temp, "display" );

	temp.parentNode.removeChild( temp );

	if ( display === "none" ) {
		display = "block";
	}
	defaultDisplayMap[ nodeName ] = display;

	return display;
}

function showHide( elements, show ) {
	var display, elem,
		values = [],
		index = 0,
		length = elements.length;

	// Determine new display value for elements that need to change
	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		display = elem.style.display;
		if ( show ) {

			// Since we force visibility upon cascade-hidden elements, an immediate (and slow)
			// check is required in this first loop unless we have a nonempty display value (either
			// inline or about-to-be-restored)
			if ( display === "none" ) {
				values[ index ] = dataPriv.get( elem, "display" ) || null;
				if ( !values[ index ] ) {
					elem.style.display = "";
				}
			}
			if ( elem.style.display === "" && isHiddenWithinTree( elem ) ) {
				values[ index ] = getDefaultDisplay( elem );
			}
		} else {
			if ( display !== "none" ) {
				values[ index ] = "none";

				// Remember what we're overwriting
				dataPriv.set( elem, "display", display );
			}
		}
	}

	// Set the display of the elements in a second loop to avoid constant reflow
	for ( index = 0; index < length; index++ ) {
		if ( values[ index ] != null ) {
			elements[ index ].style.display = values[ index ];
		}
	}

	return elements;
}

jQuery.fn.extend( {
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each( function() {
			if ( isHiddenWithinTree( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		} );
	}
} );
var rcheckableType = ( /^(?:checkbox|radio)$/i );

var rtagName = ( /<([a-z][^\/\0>\x20\t\r\n\f]*)/i );

var rscriptType = ( /^$|^module$|\/(?:java|ecma)script/i );



( function() {
	var fragment = document.createDocumentFragment(),
		div = fragment.appendChild( document.createElement( "div" ) ),
		input = document.createElement( "input" );

	// Support: Android 4.0 - 4.3 only
	// Check state lost if the name is set (#11217)
	// Support: Windows Web Apps (WWA)
	// `name` and `type` must use .setAttribute for WWA (#14901)
	input.setAttribute( "type", "radio" );
	input.setAttribute( "checked", "checked" );
	input.setAttribute( "name", "t" );

	div.appendChild( input );

	// Support: Android <=4.1 only
	// Older WebKit doesn't clone checked state correctly in fragments
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE <=11 only
	// Make sure textarea (and checkbox) defaultValue is properly cloned
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;

	// Support: IE <=9 only
	// IE <=9 replaces <option> tags with their contents when inserted outside of
	// the select element.
	div.innerHTML = "<option></option>";
	support.option = !!div.lastChild;
} )();


// We have to close these tags to support XHTML (#13200)
var wrapMap = {

	// XHTML parsers do not magically insert elements in the
	// same way that tag soup parsers do. So we cannot shorten
	// this by omitting <tbody> or other required elements.
	thead: [ 1, "<table>", "</table>" ],
	col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
	tr: [ 2, "<table><tbody>", "</tbody></table>" ],
	td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

	_default: [ 0, "", "" ]
};

wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;

// Support: IE <=9 only
if ( !support.option ) {
	wrapMap.optgroup = wrapMap.option = [ 1, "<select multiple='multiple'>", "</select>" ];
}


function getAll( context, tag ) {

	// Support: IE <=9 - 11 only
	// Use typeof to avoid zero-argument method invocation on host objects (#15151)
	var ret;

	if ( typeof context.getElementsByTagName !== "undefined" ) {
		ret = context.getElementsByTagName( tag || "*" );

	} else if ( typeof context.querySelectorAll !== "undefined" ) {
		ret = context.querySelectorAll( tag || "*" );

	} else {
		ret = [];
	}

	if ( tag === undefined || tag && nodeName( context, tag ) ) {
		return jQuery.merge( [ context ], ret );
	}

	return ret;
}


// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		dataPriv.set(
			elems[ i ],
			"globalEval",
			!refElements || dataPriv.get( refElements[ i ], "globalEval" )
		);
	}
}


var rhtml = /<|&#?\w+;/;

function buildFragment( elems, context, scripts, selection, ignored ) {
	var elem, tmp, tag, wrap, attached, j,
		fragment = context.createDocumentFragment(),
		nodes = [],
		i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		elem = elems[ i ];

		if ( elem || elem === 0 ) {

			// Add nodes directly
			if ( toType( elem ) === "object" ) {

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

			// Convert non-html into a text node
			} else if ( !rhtml.test( elem ) ) {
				nodes.push( context.createTextNode( elem ) );

			// Convert html into DOM nodes
			} else {
				tmp = tmp || fragment.appendChild( context.createElement( "div" ) );

				// Deserialize a standard representation
				tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
				wrap = wrapMap[ tag ] || wrapMap._default;
				tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

				// Descend through wrappers to the right content
				j = wrap[ 0 ];
				while ( j-- ) {
					tmp = tmp.lastChild;
				}

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, tmp.childNodes );

				// Remember the top-level container
				tmp = fragment.firstChild;

				// Ensure the created nodes are orphaned (#12392)
				tmp.textContent = "";
			}
		}
	}

	// Remove wrapper from fragment
	fragment.textContent = "";

	i = 0;
	while ( ( elem = nodes[ i++ ] ) ) {

		// Skip elements already in the context collection (trac-4087)
		if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
			if ( ignored ) {
				ignored.push( elem );
			}
			continue;
		}

		attached = isAttached( elem );

		// Append to fragment
		tmp = getAll( fragment.appendChild( elem ), "script" );

		// Preserve script evaluation history
		if ( attached ) {
			setGlobalEval( tmp );
		}

		// Capture executables
		if ( scripts ) {
			j = 0;
			while ( ( elem = tmp[ j++ ] ) ) {
				if ( rscriptType.test( elem.type || "" ) ) {
					scripts.push( elem );
				}
			}
		}
	}

	return fragment;
}


var
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

// Support: IE <=9 - 11+
// focus() and blur() are asynchronous, except when they are no-op.
// So expect focus to be synchronous when the element is already active,
// and blur to be synchronous when the element is not already active.
// (focus and blur are always synchronous in other supported browsers,
// this just defines when we can count on it).
function expectSync( elem, type ) {
	return ( elem === safeActiveElement() ) === ( type === "focus" );
}

// Support: IE <=9 only
// Accessing document.activeElement can throw unexpectedly
// https://bugs.jquery.com/ticket/13393
function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

function on( elem, types, selector, data, fn, one ) {
	var origFn, type;

	// Types can be a map of types/handlers
	if ( typeof types === "object" ) {

		// ( types-Object, selector, data )
		if ( typeof selector !== "string" ) {

			// ( types-Object, data )
			data = data || selector;
			selector = undefined;
		}
		for ( type in types ) {
			on( elem, type, selector, data, types[ type ], one );
		}
		return elem;
	}

	if ( data == null && fn == null ) {

		// ( types, fn )
		fn = selector;
		data = selector = undefined;
	} else if ( fn == null ) {
		if ( typeof selector === "string" ) {

			// ( types, selector, fn )
			fn = data;
			data = undefined;
		} else {

			// ( types, data, fn )
			fn = data;
			data = selector;
			selector = undefined;
		}
	}
	if ( fn === false ) {
		fn = returnFalse;
	} else if ( !fn ) {
		return elem;
	}

	if ( one === 1 ) {
		origFn = fn;
		fn = function( event ) {

			// Can use an empty set, since event contains the info
			jQuery().off( event );
			return origFn.apply( this, arguments );
		};

		// Use same guid so caller can remove using origFn
		fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
	}
	return elem.each( function() {
		jQuery.event.add( this, types, fn, data, selector );
	} );
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {

		var handleObjIn, eventHandle, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.get( elem );

		// Only attach events to objects that accept data
		if ( !acceptData( elem ) ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Ensure that invalid selectors throw exceptions at attach time
		// Evaluate against documentElement in case elem is a non-element node (e.g., document)
		if ( selector ) {
			jQuery.find.matchesSelector( documentElement, selector );
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !( events = elemData.events ) ) {
			events = elemData.events = Object.create( null );
		}
		if ( !( eventHandle = elemData.handle ) ) {
			eventHandle = elemData.handle = function( e ) {

				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
					jQuery.event.dispatch.apply( elem, arguments ) : undefined;
			};
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend( {
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join( "." )
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !( handlers = events[ type ] ) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener if the special events handler returns false
				if ( !special.setup ||
					special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {

		var j, origCount, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );

		if ( !elemData || !( events = elemData.events ) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[ 2 ] &&
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector ||
						selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown ||
					special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove data and the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			dataPriv.remove( elem, "handle events" );
		}
	},

	dispatch: function( nativeEvent ) {

		var i, j, ret, matched, handleObj, handlerQueue,
			args = new Array( arguments.length ),

			// Make a writable jQuery.Event from the native event object
			event = jQuery.event.fix( nativeEvent ),

			handlers = (
					dataPriv.get( this, "events" ) || Object.create( null )
				)[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[ 0 ] = event;

		for ( i = 1; i < arguments.length; i++ ) {
			args[ i ] = arguments[ i ];
		}

		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( ( handleObj = matched.handlers[ j++ ] ) &&
				!event.isImmediatePropagationStopped() ) {

				// If the event is namespaced, then each handler is only invoked if it is
				// specially universal or its namespaces are a superset of the event's.
				if ( !event.rnamespace || handleObj.namespace === false ||
					event.rnamespace.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
						handleObj.handler ).apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( ( event.result = ret ) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var i, handleObj, sel, matchedHandlers, matchedSelectors,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		if ( delegateCount &&

			// Support: IE <=9
			// Black-hole SVG <use> instance trees (trac-13180)
			cur.nodeType &&

			// Support: Firefox <=42
			// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
			// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
			// Support: IE 11 only
			// ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
			!( event.type === "click" && event.button >= 1 ) ) {

			for ( ; cur !== this; cur = cur.parentNode || this ) {

				// Don't check non-elements (#13208)
				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.nodeType === 1 && !( event.type === "click" && cur.disabled === true ) ) {
					matchedHandlers = [];
					matchedSelectors = {};
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matchedSelectors[ sel ] === undefined ) {
							matchedSelectors[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) > -1 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matchedSelectors[ sel ] ) {
							matchedHandlers.push( handleObj );
						}
					}
					if ( matchedHandlers.length ) {
						handlerQueue.push( { elem: cur, handlers: matchedHandlers } );
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		cur = this;
		if ( delegateCount < handlers.length ) {
			handlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );
		}

		return handlerQueue;
	},

	addProp: function( name, hook ) {
		Object.defineProperty( jQuery.Event.prototype, name, {
			enumerable: true,
			configurable: true,

			get: isFunction( hook ) ?
				function() {
					if ( this.originalEvent ) {
							return hook( this.originalEvent );
					}
				} :
				function() {
					if ( this.originalEvent ) {
							return this.originalEvent[ name ];
					}
				},

			set: function( value ) {
				Object.defineProperty( this, name, {
					enumerable: true,
					configurable: true,
					writable: true,
					value: value
				} );
			}
		} );
	},

	fix: function( originalEvent ) {
		return originalEvent[ jQuery.expando ] ?
			originalEvent :
			new jQuery.Event( originalEvent );
	},

	special: {
		load: {

			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		click: {

			// Utilize native event to ensure correct state for checkable inputs
			setup: function( data ) {

				// For mutual compressibility with _default, replace `this` access with a local var.
				// `|| data` is dead code meant only to preserve the variable through minification.
				var el = this || data;

				// Claim the first handler
				if ( rcheckableType.test( el.type ) &&
					el.click && nodeName( el, "input" ) ) {

					// dataPriv.set( el, "click", ... )
					leverageNative( el, "click", returnTrue );
				}

				// Return false to allow normal processing in the caller
				return false;
			},
			trigger: function( data ) {

				// For mutual compressibility with _default, replace `this` access with a local var.
				// `|| data` is dead code meant only to preserve the variable through minification.
				var el = this || data;

				// Force setup before triggering a click
				if ( rcheckableType.test( el.type ) &&
					el.click && nodeName( el, "input" ) ) {

					leverageNative( el, "click" );
				}

				// Return non-false to allow normal event-path propagation
				return true;
			},

			// For cross-browser consistency, suppress native .click() on links
			// Also prevent it if we're currently inside a leveraged native-event stack
			_default: function( event ) {
				var target = event.target;
				return rcheckableType.test( target.type ) &&
					target.click && nodeName( target, "input" ) &&
					dataPriv.get( target, "click" ) ||
					nodeName( target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined && event.originalEvent ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	}
};

// Ensure the presence of an event listener that handles manually-triggered
// synthetic events by interrupting progress until reinvoked in response to
// *native* events that it fires directly, ensuring that state changes have
// already occurred before other listeners are invoked.
function leverageNative( el, type, expectSync ) {

	// Missing expectSync indicates a trigger call, which must force setup through jQuery.event.add
	if ( !expectSync ) {
		if ( dataPriv.get( el, type ) === undefined ) {
			jQuery.event.add( el, type, returnTrue );
		}
		return;
	}

	// Register the controller as a special universal handler for all event namespaces
	dataPriv.set( el, type, false );
	jQuery.event.add( el, type, {
		namespace: false,
		handler: function( event ) {
			var notAsync, result,
				saved = dataPriv.get( this, type );

			if ( ( event.isTrigger & 1 ) && this[ type ] ) {

				// Interrupt processing of the outer synthetic .trigger()ed event
				// Saved data should be false in such cases, but might be a leftover capture object
				// from an async native handler (gh-4350)
				if ( !saved.length ) {

					// Store arguments for use when handling the inner native event
					// There will always be at least one argument (an event object), so this array
					// will not be confused with a leftover capture object.
					saved = slice.call( arguments );
					dataPriv.set( this, type, saved );

					// Trigger the native event and capture its result
					// Support: IE <=9 - 11+
					// focus() and blur() are asynchronous
					notAsync = expectSync( this, type );
					this[ type ]();
					result = dataPriv.get( this, type );
					if ( saved !== result || notAsync ) {
						dataPriv.set( this, type, false );
					} else {
						result = {};
					}
					if ( saved !== result ) {

						// Cancel the outer synthetic event
						event.stopImmediatePropagation();
						event.preventDefault();
						return result.value;
					}

				// If this is an inner synthetic event for an event with a bubbling surrogate
				// (focus or blur), assume that the surrogate already propagated from triggering the
				// native event and prevent that from happening again here.
				// This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the
				// bubbling surrogate propagates *after* the non-bubbling base), but that seems
				// less bad than duplication.
				} else if ( ( jQuery.event.special[ type ] || {} ).delegateType ) {
					event.stopPropagation();
				}

			// If this is a native event triggered above, everything is now in order
			// Fire an inner synthetic event with the original arguments
			} else if ( saved.length ) {

				// ...and capture the result
				dataPriv.set( this, type, {
					value: jQuery.event.trigger(

						// Support: IE <=9 - 11+
						// Extend with the prototype to reset the above stopImmediatePropagation()
						jQuery.extend( saved[ 0 ], jQuery.Event.prototype ),
						saved.slice( 1 ),
						this
					)
				} );

				// Abort handling of the native event
				event.stopImmediatePropagation();
			}
		}
	} );
}

jQuery.removeEvent = function( elem, type, handle ) {

	// This "if" is needed for plain objects
	if ( elem.removeEventListener ) {
		elem.removeEventListener( type, handle );
	}
};

jQuery.Event = function( src, props ) {

	// Allow instantiation without the 'new' keyword
	if ( !( this instanceof jQuery.Event ) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined &&

				// Support: Android <=2.3 only
				src.returnValue === false ?
			returnTrue :
			returnFalse;

		// Create target properties
		// Support: Safari <=6 - 7 only
		// Target should not be a text node (#504, #13143)
		this.target = ( src.target && src.target.nodeType === 3 ) ?
			src.target.parentNode :
			src.target;

		this.currentTarget = src.currentTarget;
		this.relatedTarget = src.relatedTarget;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || Date.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	constructor: jQuery.Event,
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,
	isSimulated: false,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;

		if ( e && !this.isSimulated ) {
			e.preventDefault();
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopPropagation();
		}
	},
	stopImmediatePropagation: function() {
		var e = this.originalEvent;

		this.isImmediatePropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopImmediatePropagation();
		}

		this.stopPropagation();
	}
};

// Includes all common event props including KeyEvent and MouseEvent specific props
jQuery.each( {
	altKey: true,
	bubbles: true,
	cancelable: true,
	changedTouches: true,
	ctrlKey: true,
	detail: true,
	eventPhase: true,
	metaKey: true,
	pageX: true,
	pageY: true,
	shiftKey: true,
	view: true,
	"char": true,
	code: true,
	charCode: true,
	key: true,
	keyCode: true,
	button: true,
	buttons: true,
	clientX: true,
	clientY: true,
	offsetX: true,
	offsetY: true,
	pointerId: true,
	pointerType: true,
	screenX: true,
	screenY: true,
	targetTouches: true,
	toElement: true,
	touches: true,

	which: function( event ) {
		var button = event.button;

		// Add which for key events
		if ( event.which == null && rkeyEvent.test( event.type ) ) {
			return event.charCode != null ? event.charCode : event.keyCode;
		}

		// Add which for click: 1 === left; 2 === middle; 3 === right
		if ( !event.which && button !== undefined && rmouseEvent.test( event.type ) ) {
			if ( button & 1 ) {
				return 1;
			}

			if ( button & 2 ) {
				return 3;
			}

			if ( button & 4 ) {
				return 2;
			}

			return 0;
		}

		return event.which;
	}
}, jQuery.event.addProp );

jQuery.each( { focus: "focusin", blur: "focusout" }, function( type, delegateType ) {
	jQuery.event.special[ type ] = {

		// Utilize native event if possible so blur/focus sequence is correct
		setup: function() {

			// Claim the first handler
			// dataPriv.set( this, "focus", ... )
			// dataPriv.set( this, "blur", ... )
			leverageNative( this, type, expectSync );

			// Return false to allow normal processing in the caller
			return false;
		},
		trigger: function() {

			// Force setup before trigger
			leverageNative( this, type );

			// Return non-false to allow normal event-path propagation
			return true;
		},

		delegateType: delegateType
	};
} );

// Create mouseenter/leave events using mouseover/out and event-time checks
// so that event delegation works in jQuery.
// Do the same for pointerenter/pointerleave and pointerover/pointerout
//
// Support: Safari 7 only
// Safari sends mouseenter too often; see:
// https://bugs.chromium.org/p/chromium/issues/detail?id=470258
// for the description of the bug (it existed in older Chrome versions as well).
jQuery.each( {
	mouseenter: "mouseover",
	mouseleave: "mouseout",
	pointerenter: "pointerover",
	pointerleave: "pointerout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mouseenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
} );

jQuery.fn.extend( {

	on: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn );
	},
	one: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {

			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ?
					handleObj.origType + "." + handleObj.namespace :
					handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {

			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {

			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each( function() {
			jQuery.event.remove( this, types, fn, selector );
		} );
	}
} );


var

	// Support: IE <=10 - 11, Edge 12 - 13 only
	// In IE/Edge using regex groups here causes severe slowdowns.
	// See https://connect.microsoft.com/IE/feedback/details/1736512/
	rnoInnerhtml = /<script|<style|<link/i,

	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

// Prefer a tbody over its parent table for containing new rows
function manipulationTarget( elem, content ) {
	if ( nodeName( elem, "table" ) &&
		nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ) {

		return jQuery( elem ).children( "tbody" )[ 0 ] || elem;
	}

	return elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	if ( ( elem.type || "" ).slice( 0, 5 ) === "true/" ) {
		elem.type = elem.type.slice( 5 );
	} else {
		elem.removeAttribute( "type" );
	}

	return elem;
}

function cloneCopyEvent( src, dest ) {
	var i, l, type, pdataOld, udataOld, udataCur, events;

	if ( dest.nodeType !== 1 ) {
		return;
	}

	// 1. Copy private data: events, handlers, etc.
	if ( dataPriv.hasData( src ) ) {
		pdataOld = dataPriv.get( src );
		events = pdataOld.events;

		if ( events ) {
			dataPriv.remove( dest, "handle events" );

			for ( type in events ) {
				for ( i = 0, l = events[ type ].length; i < l; i++ ) {
					jQuery.event.add( dest, type, events[ type ][ i ] );
				}
			}
		}
	}

	// 2. Copy user data
	if ( dataUser.hasData( src ) ) {
		udataOld = dataUser.access( src );
		udataCur = jQuery.extend( {}, udataOld );

		dataUser.set( dest, udataCur );
	}
}

// Fix IE bugs, see support tests
function fixInput( src, dest ) {
	var nodeName = dest.nodeName.toLowerCase();

	// Fails to persist the checked state of a cloned checkbox or radio button.
	if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
		dest.checked = src.checked;

	// Fails to return the selected option to the default selected state when cloning options
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

function domManip( collection, args, callback, ignored ) {

	// Flatten any nested arrays
	args = flat( args );

	var fragment, first, scripts, hasScripts, node, doc,
		i = 0,
		l = collection.length,
		iNoClone = l - 1,
		value = args[ 0 ],
		valueIsFunction = isFunction( value );

	// We can't cloneNode fragments that contain checked, in WebKit
	if ( valueIsFunction ||
			( l > 1 && typeof value === "string" &&
				!support.checkClone && rchecked.test( value ) ) ) {
		return collection.each( function( index ) {
			var self = collection.eq( index );
			if ( valueIsFunction ) {
				args[ 0 ] = value.call( this, index, self.html() );
			}
			domManip( self, args, callback, ignored );
		} );
	}

	if ( l ) {
		fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
		first = fragment.firstChild;

		if ( fragment.childNodes.length === 1 ) {
			fragment = first;
		}

		// Require either new content or an interest in ignored elements to invoke the callback
		if ( first || ignored ) {
			scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
			hasScripts = scripts.length;

			// Use the original fragment for the last item
			// instead of the first because it can end up
			// being emptied incorrectly in certain situations (#8070).
			for ( ; i < l; i++ ) {
				node = fragment;

				if ( i !== iNoClone ) {
					node = jQuery.clone( node, true, true );

					// Keep references to cloned scripts for later restoration
					if ( hasScripts ) {

						// Support: Android <=4.0 only, PhantomJS 1 only
						// push.apply(_, arraylike) throws on ancient WebKit
						jQuery.merge( scripts, getAll( node, "script" ) );
					}
				}

				callback.call( collection[ i ], node, i );
			}

			if ( hasScripts ) {
				doc = scripts[ scripts.length - 1 ].ownerDocument;

				// Reenable scripts
				jQuery.map( scripts, restoreScript );

				// Evaluate executable scripts on first document insertion
				for ( i = 0; i < hasScripts; i++ ) {
					node = scripts[ i ];
					if ( rscriptType.test( node.type || "" ) &&
						!dataPriv.access( node, "globalEval" ) &&
						jQuery.contains( doc, node ) ) {

						if ( node.src && ( node.type || "" ).toLowerCase()  !== "module" ) {

							// Optional AJAX dependency, but won't run scripts if not present
							if ( jQuery._evalUrl && !node.noModule ) {
								jQuery._evalUrl( node.src, {
									nonce: node.nonce || node.getAttribute( "nonce" )
								}, doc );
							}
						} else {
							DOMEval( node.textContent.replace( rcleanScript, "" ), node, doc );
						}
					}
				}
			}
		}
	}

	return collection;
}

function remove( elem, selector, keepData ) {
	var node,
		nodes = selector ? jQuery.filter( selector, elem ) : elem,
		i = 0;

	for ( ; ( node = nodes[ i ] ) != null; i++ ) {
		if ( !keepData && node.nodeType === 1 ) {
			jQuery.cleanData( getAll( node ) );
		}

		if ( node.parentNode ) {
			if ( keepData && isAttached( node ) ) {
				setGlobalEval( getAll( node, "script" ) );
			}
			node.parentNode.removeChild( node );
		}
	}

	return elem;
}

jQuery.extend( {
	htmlPrefilter: function( html ) {
		return html;
	},

	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var i, l, srcElements, destElements,
			clone = elem.cloneNode( true ),
			inPage = isAttached( elem );

		// Fix IE cloning issues
		if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
				!jQuery.isXMLDoc( elem ) ) {

			// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			for ( i = 0, l = srcElements.length; i < l; i++ ) {
				fixInput( srcElements[ i ], destElements[ i ] );
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					cloneCopyEvent( srcElements[ i ], destElements[ i ] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		// Return the cloned set
		return clone;
	},

	cleanData: function( elems ) {
		var data, elem, type,
			special = jQuery.event.special,
			i = 0;

		for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
			if ( acceptData( elem ) ) {
				if ( ( data = elem[ dataPriv.expando ] ) ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataPriv.expando ] = undefined;
				}
				if ( elem[ dataUser.expando ] ) {

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataUser.expando ] = undefined;
				}
			}
		}
	}
} );

jQuery.fn.extend( {
	detach: function( selector ) {
		return remove( this, selector, true );
	},

	remove: function( selector ) {
		return remove( this, selector );
	},

	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().each( function() {
					if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
						this.textContent = value;
					}
				} );
		}, null, value, arguments.length );
	},

	append: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		} );
	},

	prepend: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		} );
	},

	before: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		} );
	},

	after: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		} );
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; ( elem = this[ i ] ) != null; i++ ) {
			if ( elem.nodeType === 1 ) {

				// Prevent memory leaks
				jQuery.cleanData( getAll( elem, false ) );

				// Remove any remaining nodes
				elem.textContent = "";
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		} );
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined && elem.nodeType === 1 ) {
				return elem.innerHTML;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

				value = jQuery.htmlPrefilter( value );

				try {
					for ( ; i < l; i++ ) {
						elem = this[ i ] || {};

						// Remove element nodes and prevent memory leaks
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch ( e ) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var ignored = [];

		// Make the changes, replacing each non-ignored context element with the new content
		return domManip( this, arguments, function( elem ) {
			var parent = this.parentNode;

			if ( jQuery.inArray( this, ignored ) < 0 ) {
				jQuery.cleanData( getAll( this ) );
				if ( parent ) {
					parent.replaceChild( elem, this );
				}
			}

		// Force callback invocation
		}, ignored );
	}
} );

jQuery.each( {
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1,
			i = 0;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone( true );
			jQuery( insert[ i ] )[ original ]( elems );

			// Support: Android <=4.0 only, PhantomJS 1 only
			// .get() because push.apply(_, arraylike) throws on ancient WebKit
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
} );
var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

var getStyles = function( elem ) {

		// Support: IE <=11 only, Firefox <=30 (#15098, #14150)
		// IE throws on elements created in popups
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
		var view = elem.ownerDocument.defaultView;

		if ( !view || !view.opener ) {
			view = window;
		}

		return view.getComputedStyle( elem );
	};

var swap = function( elem, options, callback ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.call( elem );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};


var rboxStyle = new RegExp( cssExpand.join( "|" ), "i" );



( function() {

	// Executing both pixelPosition & boxSizingReliable tests require only one layout
	// so they're executed at the same time to save the second computation.
	function computeStyleTests() {

		// This is a singleton, we need to execute it only once
		if ( !div ) {
			return;
		}

		container.style.cssText = "position:absolute;left:-11111px;width:60px;" +
			"margin-top:1px;padding:0;border:0";
		div.style.cssText =
			"position:relative;display:block;box-sizing:border-box;overflow:scroll;" +
			"margin:auto;border:1px;padding:1px;" +
			"width:60%;top:1%";
		documentElement.appendChild( container ).appendChild( div );

		var divStyle = window.getComputedStyle( div );
		pixelPositionVal = divStyle.top !== "1%";

		// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
		reliableMarginLeftVal = roundPixelMeasures( divStyle.marginLeft ) === 12;

		// Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3
		// Some styles come back with percentage values, even though they shouldn't
		div.style.right = "60%";
		pixelBoxStylesVal = roundPixelMeasures( divStyle.right ) === 36;

		// Support: IE 9 - 11 only
		// Detect misreporting of content dimensions for box-sizing:border-box elements
		boxSizingReliableVal = roundPixelMeasures( divStyle.width ) === 36;

		// Support: IE 9 only
		// Detect overflow:scroll screwiness (gh-3699)
		// Support: Chrome <=64
		// Don't get tricked when zoom affects offsetWidth (gh-4029)
		div.style.position = "absolute";
		scrollboxSizeVal = roundPixelMeasures( div.offsetWidth / 3 ) === 12;

		documentElement.removeChild( container );

		// Nullify the div so it wouldn't be stored in the memory and
		// it will also be a sign that checks already performed
		div = null;
	}

	function roundPixelMeasures( measure ) {
		return Math.round( parseFloat( measure ) );
	}

	var pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal,
		reliableTrDimensionsVal, reliableMarginLeftVal,
		container = document.createElement( "div" ),
		div = document.createElement( "div" );

	// Finish early in limited (non-browser) environments
	if ( !div.style ) {
		return;
	}

	// Support: IE <=9 - 11 only
	// Style of cloned element affects source element cloned (#8908)
	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	jQuery.extend( support, {
		boxSizingReliable: function() {
			computeStyleTests();
			return boxSizingReliableVal;
		},
		pixelBoxStyles: function() {
			computeStyleTests();
			return pixelBoxStylesVal;
		},
		pixelPosition: function() {
			computeStyleTests();
			return pixelPositionVal;
		},
		reliableMarginLeft: function() {
			computeStyleTests();
			return reliableMarginLeftVal;
		},
		scrollboxSize: function() {
			computeStyleTests();
			return scrollboxSizeVal;
		},

		// Support: IE 9 - 11+, Edge 15 - 18+
		// IE/Edge misreport `getComputedStyle` of table rows with width/height
		// set in CSS while `offset*` properties report correct values.
		// Behavior in IE 9 is more subtle than in newer versions & it passes
		// some versions of this test; make sure not to make it pass there!
		reliableTrDimensions: function() {
			var table, tr, trChild, trStyle;
			if ( reliableTrDimensionsVal == null ) {
				table = document.createElement( "table" );
				tr = document.createElement( "tr" );
				trChild = document.createElement( "div" );

				table.style.cssText = "position:absolute;left:-11111px";
				tr.style.height = "1px";
				trChild.style.height = "9px";

				documentElement
					.appendChild( table )
					.appendChild( tr )
					.appendChild( trChild );

				trStyle = window.getComputedStyle( tr );
				reliableTrDimensionsVal = parseInt( trStyle.height ) > 3;

				documentElement.removeChild( table );
			}
			return reliableTrDimensionsVal;
		}
	} );
} )();


function curCSS( elem, name, computed ) {
	var width, minWidth, maxWidth, ret,

		// Support: Firefox 51+
		// Retrieving style before computed somehow
		// fixes an issue with getting wrong values
		// on detached elements
		style = elem.style;

	computed = computed || getStyles( elem );

	// getPropertyValue is needed for:
	//   .css('filter') (IE 9 only, #12537)
	//   .css('--customProperty) (#3144)
	if ( computed ) {
		ret = computed.getPropertyValue( name ) || computed[ name ];

		if ( ret === "" && !isAttached( elem ) ) {
			ret = jQuery.style( elem, name );
		}

		// A tribute to the "awesome hack by Dean Edwards"
		// Android Browser returns percentage for some values,
		// but width seems to be reliably pixels.
		// This is against the CSSOM draft spec:
		// https://drafts.csswg.org/cssom/#resolved-values
		if ( !support.pixelBoxStyles() && rnumnonpx.test( ret ) && rboxStyle.test( name ) ) {

			// Remember the original values
			width = style.width;
			minWidth = style.minWidth;
			maxWidth = style.maxWidth;

			// Put in the new values to get a computed value out
			style.minWidth = style.maxWidth = style.width = ret;
			ret = computed.width;

			// Revert the changed values
			style.width = width;
			style.minWidth = minWidth;
			style.maxWidth = maxWidth;
		}
	}

	return ret !== undefined ?

		// Support: IE <=9 - 11 only
		// IE returns zIndex value as an integer.
		ret + "" :
		ret;
}


function addGetHookIf( conditionFn, hookFn ) {

	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			if ( conditionFn() ) {

				// Hook not needed (or it's not possible to use it due
				// to missing dependency), remove it.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.
			return ( this.get = hookFn ).apply( this, arguments );
		}
	};
}


var cssPrefixes = [ "Webkit", "Moz", "ms" ],
	emptyStyle = document.createElement( "div" ).style,
	vendorProps = {};

// Return a vendor-prefixed property or undefined
function vendorPropName( name ) {

	// Check for vendor prefixed names
	var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in emptyStyle ) {
			return name;
		}
	}
}

// Return a potentially-mapped jQuery.cssProps or vendor prefixed property
function finalPropName( name ) {
	var final = jQuery.cssProps[ name ] || vendorProps[ name ];

	if ( final ) {
		return final;
	}
	if ( name in emptyStyle ) {
		return name;
	}
	return vendorProps[ name ] = vendorPropName( name ) || name;
}


var

	// Swappable if display is none or starts with table
	// except "table", "table-cell", or "table-caption"
	// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rcustomProp = /^--/,
	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	};

function setPositiveNumber( _elem, value, subtract ) {

	// Any relative (+/-) values have already been
	// normalized at this point
	var matches = rcssNum.exec( value );
	return matches ?

		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
		value;
}

function boxModelAdjustment( elem, dimension, box, isBorderBox, styles, computedVal ) {
	var i = dimension === "width" ? 1 : 0,
		extra = 0,
		delta = 0;

	// Adjustment may not be necessary
	if ( box === ( isBorderBox ? "border" : "content" ) ) {
		return 0;
	}

	for ( ; i < 4; i += 2 ) {

		// Both box models exclude margin
		if ( box === "margin" ) {
			delta += jQuery.css( elem, box + cssExpand[ i ], true, styles );
		}

		// If we get here with a content-box, we're seeking "padding" or "border" or "margin"
		if ( !isBorderBox ) {

			// Add padding
			delta += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// For "border" or "margin", add border
			if ( box !== "padding" ) {
				delta += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );

			// But still keep track of it otherwise
			} else {
				extra += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}

		// If we get here with a border-box (content + padding + border), we're seeking "content" or
		// "padding" or "margin"
		} else {

			// For "content", subtract padding
			if ( box === "content" ) {
				delta -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// For "content" or "padding", subtract border
			if ( box !== "margin" ) {
				delta -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	// Account for positive content-box scroll gutter when requested by providing computedVal
	if ( !isBorderBox && computedVal >= 0 ) {

		// offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border
		// Assuming integer scroll gutter, subtract the rest and round down
		delta += Math.max( 0, Math.ceil(
			elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
			computedVal -
			delta -
			extra -
			0.5

		// If offsetWidth/offsetHeight is unknown, then we can't determine content-box scroll gutter
		// Use an explicit zero to avoid NaN (gh-3964)
		) ) || 0;
	}

	return delta;
}

function getWidthOrHeight( elem, dimension, extra ) {

	// Start with computed style
	var styles = getStyles( elem ),

		// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-4322).
		// Fake content-box until we know it's needed to know the true value.
		boxSizingNeeded = !support.boxSizingReliable() || extra,
		isBorderBox = boxSizingNeeded &&
			jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
		valueIsBorderBox = isBorderBox,

		val = curCSS( elem, dimension, styles ),
		offsetProp = "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 );

	// Support: Firefox <=54
	// Return a confounding non-pixel value or feign ignorance, as appropriate.
	if ( rnumnonpx.test( val ) ) {
		if ( !extra ) {
			return val;
		}
		val = "auto";
	}


	// Support: IE 9 - 11 only
	// Use offsetWidth/offsetHeight for when box sizing is unreliable.
	// In those cases, the computed value can be trusted to be border-box.
	if ( ( !support.boxSizingReliable() && isBorderBox ||

		// Support: IE 10 - 11+, Edge 15 - 18+
		// IE/Edge misreport `getComputedStyle` of table rows with width/height
		// set in CSS while `offset*` properties report correct values.
		// Interestingly, in some cases IE 9 doesn't suffer from this issue.
		!support.reliableTrDimensions() && nodeName( elem, "tr" ) ||

		// Fall back to offsetWidth/offsetHeight when value is "auto"
		// This happens for inline elements with no explicit setting (gh-3571)
		val === "auto" ||

		// Support: Android <=4.1 - 4.3 only
		// Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)
		!parseFloat( val ) && jQuery.css( elem, "display", false, styles ) === "inline" ) &&

		// Make sure the element is visible & connected
		elem.getClientRects().length ) {

		isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

		// Where available, offsetWidth/offsetHeight approximate border box dimensions.
		// Where not available (e.g., SVG), assume unreliable box-sizing and interpret the
		// retrieved value as a content box dimension.
		valueIsBorderBox = offsetProp in elem;
		if ( valueIsBorderBox ) {
			val = elem[ offsetProp ];
		}
	}

	// Normalize "" and auto
	val = parseFloat( val ) || 0;

	// Adjust for the element's box model
	return ( val +
		boxModelAdjustment(
			elem,
			dimension,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles,

			// Provide the current computed size to request scroll gutter calculation (gh-3589)
			val
		)
	) + "px";
}

jQuery.extend( {

	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {

					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"animationIterationCount": true,
		"columnCount": true,
		"fillOpacity": true,
		"flexGrow": true,
		"flexShrink": true,
		"fontWeight": true,
		"gridArea": true,
		"gridColumn": true,
		"gridColumnEnd": true,
		"gridColumnStart": true,
		"gridRow": true,
		"gridRowEnd": true,
		"gridRowStart": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {

		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = camelCase( name ),
			isCustomProp = rcustomProp.test( name ),
			style = elem.style;

		// Make sure that we're working with the right name. We don't
		// want to query the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Gets hook for the prefixed version, then unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// Convert "+=" or "-=" to relative numbers (#7345)
			if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
				value = adjustCSS( elem, name, ret );

				// Fixes bug #9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set (#7116)
			if ( value == null || value !== value ) {
				return;
			}

			// If a number was passed in, add the unit (except for certain CSS properties)
			// The isCustomProp check can be removed in jQuery 4.0 when we only auto-append
			// "px" to a few hardcoded values.
			if ( type === "number" && !isCustomProp ) {
				value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
			}

			// background-* props affect original clone's values
			if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !( "set" in hooks ) ||
				( value = hooks.set( elem, value, extra ) ) !== undefined ) {

				if ( isCustomProp ) {
					style.setProperty( name, value );
				} else {
					style[ name ] = value;
				}
			}

		} else {

			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks &&
				( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var val, num, hooks,
			origName = camelCase( name ),
			isCustomProp = rcustomProp.test( name );

		// Make sure that we're working with the right name. We don't
		// want to modify the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Try prefixed name followed by the unprefixed name
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		// Convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Make numeric if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || isFinite( num ) ? num || 0 : val;
		}

		return val;
	}
} );

jQuery.each( [ "height", "width" ], function( _i, dimension ) {
	jQuery.cssHooks[ dimension ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {

				// Certain elements can have dimension info if we invisibly show them
				// but it must have a current display style that would benefit
				return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&

					// Support: Safari 8+
					// Table columns in Safari have non-zero offsetWidth & zero
					// getBoundingClientRect().width unless display is changed.
					// Support: IE <=11 only
					// Running getBoundingClientRect on a disconnected node
					// in IE throws an error.
					( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?
						swap( elem, cssShow, function() {
							return getWidthOrHeight( elem, dimension, extra );
						} ) :
						getWidthOrHeight( elem, dimension, extra );
			}
		},

		set: function( elem, value, extra ) {
			var matches,
				styles = getStyles( elem ),

				// Only read styles.position if the test has a chance to fail
				// to avoid forcing a reflow.
				scrollboxSizeBuggy = !support.scrollboxSize() &&
					styles.position === "absolute",

				// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-3991)
				boxSizingNeeded = scrollboxSizeBuggy || extra,
				isBorderBox = boxSizingNeeded &&
					jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
				subtract = extra ?
					boxModelAdjustment(
						elem,
						dimension,
						extra,
						isBorderBox,
						styles
					) :
					0;

			// Account for unreliable border-box dimensions by comparing offset* to computed and
			// faking a content-box to get border and padding (gh-3699)
			if ( isBorderBox && scrollboxSizeBuggy ) {
				subtract -= Math.ceil(
					elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
					parseFloat( styles[ dimension ] ) -
					boxModelAdjustment( elem, dimension, "border", false, styles ) -
					0.5
				);
			}

			// Convert to pixels if value adjustment is needed
			if ( subtract && ( matches = rcssNum.exec( value ) ) &&
				( matches[ 3 ] || "px" ) !== "px" ) {

				elem.style[ dimension ] = value;
				value = jQuery.css( elem, dimension );
			}

			return setPositiveNumber( elem, value, subtract );
		}
	};
} );

jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
	function( elem, computed ) {
		if ( computed ) {
			return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
				elem.getBoundingClientRect().left -
					swap( elem, { marginLeft: 0 }, function() {
						return elem.getBoundingClientRect().left;
					} )
				) + "px";
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each( {
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// Assumes a single number if not a string
				parts = typeof value === "string" ? value.split( " " ) : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( prefix !== "margin" ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
} );

jQuery.fn.extend( {
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( Array.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	}
} );


function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || jQuery.easing._default;
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			// Use a property on the element directly when it is not a DOM element,
			// or when there is no matching style property that exists.
			if ( tween.elem.nodeType !== 1 ||
				tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
				return tween.elem[ tween.prop ];
			}

			// Passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails.
			// Simple values such as "10px" are parsed to Float;
			// complex values such as "rotate(1rad)" are returned as-is.
			result = jQuery.css( tween.elem, tween.prop, "" );

			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {

			// Use step hook for back compat.
			// Use cssHook if its there.
			// Use .style if available and use plain properties where available.
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.nodeType === 1 && (
					jQuery.cssHooks[ tween.prop ] ||
					tween.elem.style[ finalPropName( tween.prop ) ] != null ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE <=9 only
// Panic based approach to setting things on disconnected nodes
Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p * Math.PI ) / 2;
	},
	_default: "swing"
};

jQuery.fx = Tween.prototype.init;

// Back compat <1.8 extension point
jQuery.fx.step = {};




var
	fxNow, inProgress,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rrun = /queueHooks$/;

function schedule() {
	if ( inProgress ) {
		if ( document.hidden === false && window.requestAnimationFrame ) {
			window.requestAnimationFrame( schedule );
		} else {
			window.setTimeout( schedule, jQuery.fx.interval );
		}

		jQuery.fx.tick();
	}
}

// Animations created synchronously will run synchronously
function createFxNow() {
	window.setTimeout( function() {
		fxNow = undefined;
	} );
	return ( fxNow = Date.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		i = 0,
		attrs = { height: type };

	// If we include width, step value is 1 to do all cssExpand values,
	// otherwise step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

			// We're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,
		isBox = "width" in props || "height" in props,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHiddenWithinTree( elem ),
		dataShow = dataPriv.get( elem, "fxshow" );

	// Queue-skipping animations hijack the fx hooks
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always( function() {

			// Ensure the complete handler is called before this completes
			anim.always( function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			} );
		} );
	}

	// Detect show/hide animations
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.test( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// Pretend to be hidden if this is a "show" and
				// there is still data from a stopped show/hide
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;

				// Ignore all other no-op show/hide data
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
		}
	}

	// Bail out if this is a no-op like .hide().hide()
	propTween = !jQuery.isEmptyObject( props );
	if ( !propTween && jQuery.isEmptyObject( orig ) ) {
		return;
	}

	// Restrict "overflow" and "display" styles during box animations
	if ( isBox && elem.nodeType === 1 ) {

		// Support: IE <=9 - 11, Edge 12 - 15
		// Record all 3 overflow attributes because IE does not infer the shorthand
		// from identically-valued overflowX and overflowY and Edge just mirrors
		// the overflowX value there.
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Identify a display type, preferring old show/hide data over the CSS cascade
		restoreDisplay = dataShow && dataShow.display;
		if ( restoreDisplay == null ) {
			restoreDisplay = dataPriv.get( elem, "display" );
		}
		display = jQuery.css( elem, "display" );
		if ( display === "none" ) {
			if ( restoreDisplay ) {
				display = restoreDisplay;
			} else {

				// Get nonempty value(s) by temporarily forcing visibility
				showHide( [ elem ], true );
				restoreDisplay = elem.style.display || restoreDisplay;
				display = jQuery.css( elem, "display" );
				showHide( [ elem ] );
			}
		}

		// Animate inline elements as inline-block
		if ( display === "inline" || display === "inline-block" && restoreDisplay != null ) {
			if ( jQuery.css( elem, "float" ) === "none" ) {

				// Restore the original display value at the end of pure show/hide animations
				if ( !propTween ) {
					anim.done( function() {
						style.display = restoreDisplay;
					} );
					if ( restoreDisplay == null ) {
						display = style.display;
						restoreDisplay = display === "none" ? "" : display;
					}
				}
				style.display = "inline-block";
			}
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		anim.always( function() {
			style.overflow = opts.overflow[ 0 ];
			style.overflowX = opts.overflow[ 1 ];
			style.overflowY = opts.overflow[ 2 ];
		} );
	}

	// Implement show/hide animations
	propTween = false;
	for ( prop in orig ) {

		// General show/hide setup for this element animation
		if ( !propTween ) {
			if ( dataShow ) {
				if ( "hidden" in dataShow ) {
					hidden = dataShow.hidden;
				}
			} else {
				dataShow = dataPriv.access( elem, "fxshow", { display: restoreDisplay } );
			}

			// Store hidden/visible for toggle so `.stop().toggle()` "reverses"
			if ( toggle ) {
				dataShow.hidden = !hidden;
			}

			// Show elements before animating them
			if ( hidden ) {
				showHide( [ elem ], true );
			}

			/* eslint-disable no-loop-func */

			anim.done( function() {

			/* eslint-enable no-loop-func */

				// The final step of a "hide" animation is actually hiding the element
				if ( !hidden ) {
					showHide( [ elem ] );
				}
				dataPriv.remove( elem, "fxshow" );
				for ( prop in orig ) {
					jQuery.style( elem, prop, orig[ prop ] );
				}
			} );
		}

		// Per-property setup
		propTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );
		if ( !( prop in dataShow ) ) {
			dataShow[ prop ] = propTween.start;
			if ( hidden ) {
				propTween.end = propTween.start;
				propTween.start = 0;
			}
		}
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( Array.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// Not quite $.extend, this won't overwrite existing keys.
			// Reusing 'index' because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = Animation.prefilters.length,
		deferred = jQuery.Deferred().always( function() {

			// Don't match elem in the :animated selector
			delete tick.elem;
		} ),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

				// Support: Android 2.3 only
				// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ] );

			// If there's more to do, yield
			if ( percent < 1 && length ) {
				return remaining;
			}

			// If this was an empty animation, synthesize a final progress notification
			if ( !length ) {
				deferred.notifyWith( elem, [ animation, 1, 0 ] );
			}

			// Resolve the animation and report its conclusion
			deferred.resolveWith( elem, [ animation ] );
			return false;
		},
		animation = deferred.promise( {
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, {
				specialEasing: {},
				easing: jQuery.easing._default
			}, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,

					// If we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// Resolve when we played the last frame; otherwise, reject
				if ( gotoEnd ) {
					deferred.notifyWith( elem, [ animation, 1, 0 ] );
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		} ),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length; index++ ) {
		result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			if ( isFunction( result.stop ) ) {
				jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
					result.stop.bind( result );
			}
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	// Attach callbacks from options
	animation
		.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		} )
	);

	return animation;
}

jQuery.Animation = jQuery.extend( Animation, {

	tweeners: {
		"*": [ function( prop, value ) {
			var tween = this.createTween( prop, value );
			adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
			return tween;
		} ]
	},

	tweener: function( props, callback ) {
		if ( isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.match( rnothtmlwhite );
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length; index++ ) {
			prop = props[ index ];
			Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
			Animation.tweeners[ prop ].unshift( callback );
		}
	},

	prefilters: [ defaultPrefilter ],

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			Animation.prefilters.unshift( callback );
		} else {
			Animation.prefilters.push( callback );
		}
	}
} );

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !isFunction( easing ) && easing
	};

	// Go to the end state if fx are off
	if ( jQuery.fx.off ) {
		opt.duration = 0;

	} else {
		if ( typeof opt.duration !== "number" ) {
			if ( opt.duration in jQuery.fx.speeds ) {
				opt.duration = jQuery.fx.speeds[ opt.duration ];

			} else {
				opt.duration = jQuery.fx.speeds._default;
			}
		}
	}

	// Normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.fn.extend( {
	fadeTo: function( speed, to, easing, callback ) {

		// Show any hidden elements after setting opacity to 0
		return this.filter( isHiddenWithinTree ).css( "opacity", 0 ).show()

			// Animate to the value specified
			.end().animate( { opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {

				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || dataPriv.get( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue ) {
			this.queue( type || "fx", [] );
		}

		return this.each( function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = dataPriv.get( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this &&
					( type == null || timers[ index ].queue === type ) ) {

					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// Start the next in the queue if the last step wasn't forced.
			// Timers currently will call their complete callbacks, which
			// will dequeue but only if they were gotoEnd.
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		} );
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each( function() {
			var index,
				data = dataPriv.get( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// Enable finishing flag on private data
			data.finish = true;

			// Empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// Look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// Look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// Turn off finishing flag
			delete data.finish;
		} );
	}
} );

jQuery.each( [ "toggle", "show", "hide" ], function( _i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
} );

// Generate shortcuts for custom animations
jQuery.each( {
	slideDown: genFx( "show" ),
	slideUp: genFx( "hide" ),
	slideToggle: genFx( "toggle" ),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
} );

jQuery.timers = [];
jQuery.fx.tick = function() {
	var timer,
		i = 0,
		timers = jQuery.timers;

	fxNow = Date.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];

		// Run the timer and safely remove it when done (allowing for external removal)
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	jQuery.timers.push( timer );
	jQuery.fx.start();
};

jQuery.fx.interval = 13;
jQuery.fx.start = function() {
	if ( inProgress ) {
		return;
	}

	inProgress = true;
	schedule();
};

jQuery.fx.stop = function() {
	inProgress = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,

	// Default speed
	_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
jQuery.fn.delay = function( time, type ) {
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	type = type || "fx";

	return this.queue( type, function( next, hooks ) {
		var timeout = window.setTimeout( next, time );
		hooks.stop = function() {
			window.clearTimeout( timeout );
		};
	} );
};


( function() {
	var input = document.createElement( "input" ),
		select = document.createElement( "select" ),
		opt = select.appendChild( document.createElement( "option" ) );

	input.type = "checkbox";

	// Support: Android <=4.3 only
	// Default value for a checkbox should be "on"
	support.checkOn = input.value !== "";

	// Support: IE <=11 only
	// Must access selectedIndex to make default options select
	support.optSelected = opt.selected;

	// Support: IE <=11 only
	// An input loses its value after becoming a radio
	input = document.createElement( "input" );
	input.value = "t";
	input.type = "radio";
	support.radioValue = input.value === "t";
} )();


var boolHook,
	attrHandle = jQuery.expr.attrHandle;

jQuery.fn.extend( {
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each( function() {
			jQuery.removeAttr( this, name );
		} );
	}
} );

jQuery.extend( {
	attr: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set attributes on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === "undefined" ) {
			return jQuery.prop( elem, name, value );
		}

		// Attribute hooks are determined by the lowercase version
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			hooks = jQuery.attrHooks[ name.toLowerCase() ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
		}

		if ( value !== undefined ) {
			if ( value === null ) {
				jQuery.removeAttr( elem, name );
				return;
			}

			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			elem.setAttribute( name, value + "" );
			return value;
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		ret = jQuery.find.attr( elem, name );

		// Non-existent attributes return null, we normalize to undefined
		return ret == null ? undefined : ret;
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" &&
					nodeName( elem, "input" ) ) {
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	},

	removeAttr: function( elem, value ) {
		var name,
			i = 0,

			// Attribute names can contain non-HTML whitespace characters
			// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
			attrNames = value && value.match( rnothtmlwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( ( name = attrNames[ i++ ] ) ) {
				elem.removeAttribute( name );
			}
		}
	}
} );

// Hooks for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {

			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else {
			elem.setAttribute( name, name );
		}
		return name;
	}
};

jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( _i, name ) {
	var getter = attrHandle[ name ] || jQuery.find.attr;

	attrHandle[ name ] = function( elem, name, isXML ) {
		var ret, handle,
			lowercaseName = name.toLowerCase();

		if ( !isXML ) {

			// Avoid an infinite loop by temporarily removing this function from the getter
			handle = attrHandle[ lowercaseName ];
			attrHandle[ lowercaseName ] = ret;
			ret = getter( elem, name, isXML ) != null ?
				lowercaseName :
				null;
			attrHandle[ lowercaseName ] = handle;
		}
		return ret;
	};
} );




var rfocusable = /^(?:input|select|textarea|button)$/i,
	rclickable = /^(?:a|area)$/i;

jQuery.fn.extend( {
	prop: function( name, value ) {
		return access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		return this.each( function() {
			delete this[ jQuery.propFix[ name ] || name ];
		} );
	}
} );

jQuery.extend( {
	prop: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set properties on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			return ( elem[ name ] = value );
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		return elem[ name ];
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {

				// Support: IE <=9 - 11 only
				// elem.tabIndex doesn't always return the
				// correct value when it hasn't been explicitly set
				// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				// Use proper attribute retrieval(#12072)
				var tabindex = jQuery.find.attr( elem, "tabindex" );

				if ( tabindex ) {
					return parseInt( tabindex, 10 );
				}

				if (
					rfocusable.test( elem.nodeName ) ||
					rclickable.test( elem.nodeName ) &&
					elem.href
				) {
					return 0;
				}

				return -1;
			}
		}
	},

	propFix: {
		"for": "htmlFor",
		"class": "className"
	}
} );

// Support: IE <=11 only
// Accessing the selectedIndex property
// forces the browser to respect setting selected
// on the option
// The getter ensures a default option is selected
// when in an optgroup
// eslint rule "no-unused-expressions" is disabled for this code
// since it considers such accessions noop
if ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent && parent.parentNode ) {
				parent.parentNode.selectedIndex;
			}
			return null;
		},
		set: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent ) {
				parent.selectedIndex;

				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
		}
	};
}

jQuery.each( [
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
} );




	// Strip and collapse whitespace according to HTML spec
	// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace
	function stripAndCollapse( value ) {
		var tokens = value.match( rnothtmlwhite ) || [];
		return tokens.join( " " );
	}


function getClass( elem ) {
	return elem.getAttribute && elem.getAttribute( "class" ) || "";
}

function classesToArray( value ) {
	if ( Array.isArray( value ) ) {
		return value;
	}
	if ( typeof value === "string" ) {
		return value.match( rnothtmlwhite ) || [];
	}
	return [];
}

jQuery.fn.extend( {
	addClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		classes = classesToArray( value );

		if ( classes.length ) {
			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( !arguments.length ) {
			return this.attr( "class", "" );
		}

		classes = classesToArray( value );

		if ( classes.length ) {
			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );

				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {

						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value,
			isValidValue = type === "string" || Array.isArray( value );

		if ( typeof stateVal === "boolean" && isValidValue ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		if ( isFunction( value ) ) {
			return this.each( function( i ) {
				jQuery( this ).toggleClass(
					value.call( this, i, getClass( this ), stateVal ),
					stateVal
				);
			} );
		}

		return this.each( function() {
			var className, i, self, classNames;

			if ( isValidValue ) {

				// Toggle individual class names
				i = 0;
				self = jQuery( this );
				classNames = classesToArray( value );

				while ( ( className = classNames[ i++ ] ) ) {

					// Check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( value === undefined || type === "boolean" ) {
				className = getClass( this );
				if ( className ) {

					// Store className if set
					dataPriv.set( this, "__className__", className );
				}

				// If the element has a class name or if we're passed `false`,
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				if ( this.setAttribute ) {
					this.setAttribute( "class",
						className || value === false ?
						"" :
						dataPriv.get( this, "__className__" ) || ""
					);
				}
			}
		} );
	},

	hasClass: function( selector ) {
		var className, elem,
			i = 0;

		className = " " + selector + " ";
		while ( ( elem = this[ i++ ] ) ) {
			if ( elem.nodeType === 1 &&
				( " " + stripAndCollapse( getClass( elem ) ) + " " ).indexOf( className ) > -1 ) {
					return true;
			}
		}

		return false;
	}
} );




var rreturn = /\r/g;

jQuery.fn.extend( {
	val: function( value ) {
		var hooks, ret, valueIsFunction,
			elem = this[ 0 ];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] ||
					jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks &&
					"get" in hooks &&
					( ret = hooks.get( elem, "value" ) ) !== undefined
				) {
					return ret;
				}

				ret = elem.value;

				// Handle most common string cases
				if ( typeof ret === "string" ) {
					return ret.replace( rreturn, "" );
				}

				// Handle cases where value is null/undef or number
				return ret == null ? "" : ret;
			}

			return;
		}

		valueIsFunction = isFunction( value );

		return this.each( function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( valueIsFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";

			} else if ( typeof val === "number" ) {
				val += "";

			} else if ( Array.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				} );
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		} );
	}
} );

jQuery.extend( {
	valHooks: {
		option: {
			get: function( elem ) {

				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :

					// Support: IE <=10 - 11 only
					// option.text throws exceptions (#14686, #14858)
					// Strip and collapse whitespace
					// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
					stripAndCollapse( jQuery.text( elem ) );
			}
		},
		select: {
			get: function( elem ) {
				var value, option, i,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one",
					values = one ? null : [],
					max = one ? index + 1 : options.length;

				if ( index < 0 ) {
					i = max;

				} else {
					i = one ? index : 0;
				}

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// Support: IE <=9 only
					// IE8-9 doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&

							// Don't return options that are disabled or in a disabled optgroup
							!option.disabled &&
							( !option.parentNode.disabled ||
								!nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];

					/* eslint-disable no-cond-assign */

					if ( option.selected =
						jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
					) {
						optionSet = true;
					}

					/* eslint-enable no-cond-assign */
				}

				// Force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	}
} );

// Radios and checkboxes getter/setter
jQuery.each( [ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( Array.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			return elem.getAttribute( "value" ) === null ? "on" : elem.value;
		};
	}
} );




// Return jQuery for attributes-only inclusion


support.focusin = "onfocusin" in window;


var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	stopPropagationCallback = function( e ) {
		e.stopPropagation();
	};

jQuery.extend( jQuery.event, {

	trigger: function( event, data, elem, onlyHandlers ) {

		var i, cur, tmp, bubbleType, ontype, handle, special, lastElement,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

		cur = lastElement = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf( "." ) > -1 ) {

			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split( "." );
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf( ":" ) < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join( "." );
		event.rnamespace = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === ( elem.ownerDocument || document ) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {
			lastElement = cur;
			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = (
					dataPriv.get( cur, "events" ) || Object.create( null )
				)[ event.type ] &&
				dataPriv.get( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( ( !special._default ||
				special._default.apply( eventPath.pop(), data ) === false ) &&
				acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name as the event.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && isFunction( elem[ type ] ) && !isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;

					if ( event.isPropagationStopped() ) {
						lastElement.addEventListener( type, stopPropagationCallback );
					}

					elem[ type ]();

					if ( event.isPropagationStopped() ) {
						lastElement.removeEventListener( type, stopPropagationCallback );
					}

					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	// Piggyback on a donor event to simulate a different one
	// Used only for `focus(in | out)` events
	simulate: function( type, elem, event ) {
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true
			}
		);

		jQuery.event.trigger( e, null, elem );
	}

} );

jQuery.fn.extend( {

	trigger: function( type, data ) {
		return this.each( function() {
			jQuery.event.trigger( type, data, this );
		} );
	},
	triggerHandler: function( type, data ) {
		var elem = this[ 0 ];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
} );


// Support: Firefox <=44
// Firefox doesn't have focus(in | out) events
// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
//
// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
// focus(in | out) events fire after focus & blur events,
// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
if ( !support.focusin ) {
	jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler on the document while someone wants focusin/focusout
		var handler = function( event ) {
			jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
		};

		jQuery.event.special[ fix ] = {
			setup: function() {

				// Handle: regular nodes (via `this.ownerDocument`), window
				// (via `this.document`) & document (via `this`).
				var doc = this.ownerDocument || this.document || this,
					attaches = dataPriv.access( doc, fix );

				if ( !attaches ) {
					doc.addEventListener( orig, handler, true );
				}
				dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
			},
			teardown: function() {
				var doc = this.ownerDocument || this.document || this,
					attaches = dataPriv.access( doc, fix ) - 1;

				if ( !attaches ) {
					doc.removeEventListener( orig, handler, true );
					dataPriv.remove( doc, fix );

				} else {
					dataPriv.access( doc, fix, attaches );
				}
			}
		};
	} );
}
var location = window.location;

var nonce = { guid: Date.now() };

var rquery = ( /\?/ );



// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml;
	if ( !data || typeof data !== "string" ) {
		return null;
	}

	// Support: IE 9 - 11 only
	// IE throws on parseFromString with invalid input.
	try {
		xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
	} catch ( e ) {
		xml = undefined;
	}

	if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
		jQuery.error( "Invalid XML: " + data );
	}
	return xml;
};


var
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( Array.isArray( obj ) ) {

		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {

				// Treat each array item as a scalar.
				add( prefix, v );

			} else {

				// Item is non-scalar (array or object), encode its numeric index.
				buildParams(
					prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
					v,
					traditional,
					add
				);
			}
		} );

	} else if ( !traditional && toType( obj ) === "object" ) {

		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {

		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, valueOrFunction ) {

			// If value is a function, invoke it and use its return value
			var value = isFunction( valueOrFunction ) ?
				valueOrFunction() :
				valueOrFunction;

			s[ s.length ] = encodeURIComponent( key ) + "=" +
				encodeURIComponent( value == null ? "" : value );
		};

	if ( a == null ) {
		return "";
	}

	// If an array was passed in, assume that it is an array of form elements.
	if ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		} );

	} else {

		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" );
};

jQuery.fn.extend( {
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map( function() {

			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		} )
		.filter( function() {
			var type = this.type;

			// Use .is( ":disabled" ) so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		} )
		.map( function( _i, elem ) {
			var val = jQuery( this ).val();

			if ( val == null ) {
				return null;
			}

			if ( Array.isArray( val ) ) {
				return jQuery.map( val, function( val ) {
					return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
				} );
			}

			return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		} ).get();
	}
} );


var
	r20 = /%20/g,
	rhash = /#.*$/,
	rantiCache = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat( "*" ),

	// Anchor tag for parsing the document origin
	originAnchor = document.createElement( "a" );
	originAnchor.href = location.href;

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];

		if ( isFunction( func ) ) {

			// For each dataType in the dataTypeExpression
			while ( ( dataType = dataTypes[ i++ ] ) ) {

				// Prepend if requested
				if ( dataType[ 0 ] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

				// Otherwise append
				} else {
					( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" &&
				!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		} );
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var key, deep,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

	var ct, type, finalDataType, firstDataType,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {

		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}

		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},

		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

			// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {

								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s.throws ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return {
								state: "parsererror",
								error: conv ? e : "No conversion from " + prev + " to " + current
							};
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend( {

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: location.href,
		type: "GET",
		isLocal: rlocalProtocol.test( location.protocol ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",

		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /\bxml\b/,
			html: /\bhtml/,
			json: /\bjson\b/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": JSON.parse,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var transport,

			// URL without anti-cache param
			cacheURL,

			// Response headers
			responseHeadersString,
			responseHeaders,

			// timeout handle
			timeoutTimer,

			// Url cleanup var
			urlAnchor,

			// Request state (becomes false upon send and true upon completion)
			completed,

			// To know if global events are to be dispatched
			fireGlobals,

			// Loop variable
			i,

			// uncached part of the url
			uncached,

			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),

			// Callbacks context
			callbackContext = s.context || s,

			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context &&
				( callbackContext.nodeType || callbackContext.jquery ) ?
					jQuery( callbackContext ) :
					jQuery.event,

			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks( "once memory" ),

			// Status-dependent callbacks
			statusCode = s.statusCode || {},

			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},

			// Default abort message
			strAbort = "canceled",

			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( completed ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
								responseHeaders[ match[ 1 ].toLowerCase() + " " ] =
									( responseHeaders[ match[ 1 ].toLowerCase() + " " ] || [] )
										.concat( match[ 2 ] );
							}
						}
						match = responseHeaders[ key.toLowerCase() + " " ];
					}
					return match == null ? null : match.join( ", " );
				},

				// Raw string
				getAllResponseHeaders: function() {
					return completed ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					if ( completed == null ) {
						name = requestHeadersNames[ name.toLowerCase() ] =
							requestHeadersNames[ name.toLowerCase() ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( completed == null ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( completed ) {

							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						} else {

							// Lazy-add the new callbacks in a way that preserves old ones
							for ( code in map ) {
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR );

		// Add protocol if not provided (prefilters might expect it)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || location.href ) + "" )
			.replace( rprotocol, location.protocol + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = ( s.dataType || "*" ).toLowerCase().match( rnothtmlwhite ) || [ "" ];

		// A cross-domain request is in order when the origin doesn't match the current origin.
		if ( s.crossDomain == null ) {
			urlAnchor = document.createElement( "a" );

			// Support: IE <=8 - 11, Edge 12 - 15
			// IE throws exception on accessing the href property if url is malformed,
			// e.g. http://example.com:80x/
			try {
				urlAnchor.href = s.url;

				// Support: IE <=8 - 11 only
				// Anchor's host property isn't correctly set when s.url is relative
				urlAnchor.href = urlAnchor.href;
				s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
					urlAnchor.protocol + "//" + urlAnchor.host;
			} catch ( e ) {

				// If there is an error parsing the URL, assume it is crossDomain,
				// it can be rejected by the transport if it is invalid
				s.crossDomain = true;
			}
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( completed ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
		fireGlobals = jQuery.event && s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger( "ajaxStart" );
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		// Remove hash to simplify url manipulation
		cacheURL = s.url.replace( rhash, "" );

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// Remember the hash so we can put it back
			uncached = s.url.slice( cacheURL.length );

			// If data is available and should be processed, append data to url
			if ( s.data && ( s.processData || typeof s.data === "string" ) ) {
				cacheURL += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data;

				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add or update anti-cache param if needed
			if ( s.cache === false ) {
				cacheURL = cacheURL.replace( rantiCache, "$1" );
				uncached = ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ( nonce.guid++ ) +
					uncached;
			}

			// Put hash and anti-cache on the URL that will be requested (gh-1732)
			s.url = cacheURL + uncached;

		// Change '%20' to '+' if this is encoded form body content (gh-2658)
		} else if ( s.data && s.processData &&
			( s.contentType || "" ).indexOf( "application/x-www-form-urlencoded" ) === 0 ) {
			s.data = s.data.replace( r20, "+" );
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
				s.accepts[ s.dataTypes[ 0 ] ] +
					( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend &&
			( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {

			// Abort if not done already and return
			return jqXHR.abort();
		}

		// Aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		completeDeferred.add( s.complete );
		jqXHR.done( s.success );
		jqXHR.fail( s.error );

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}

			// If request was aborted inside ajaxSend, stop there
			if ( completed ) {
				return jqXHR;
			}

			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = window.setTimeout( function() {
					jqXHR.abort( "timeout" );
				}, s.timeout );
			}

			try {
				completed = false;
				transport.send( requestHeaders, done );
			} catch ( e ) {

				// Rethrow post-completion exceptions
				if ( completed ) {
					throw e;
				}

				// Propagate others as results
				done( -1, e );
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Ignore repeat invocations
			if ( completed ) {
				return;
			}

			completed = true;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				window.clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Use a noop converter for missing script
			if ( !isSuccess && jQuery.inArray( "script", s.dataTypes ) > -1 ) {
				s.converters[ "text script" ] = function() {};
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader( "Last-Modified" );
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader( "etag" );
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {

				// Extract error from statusText and normalize for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger( "ajaxStop" );
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
} );

jQuery.each( [ "get", "post" ], function( _i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {

		// Shift arguments if data argument was omitted
		if ( isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		// The url can be an options object (which then must have .url)
		return jQuery.ajax( jQuery.extend( {
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		}, jQuery.isPlainObject( url ) && url ) );
	};
} );

jQuery.ajaxPrefilter( function( s ) {
	var i;
	for ( i in s.headers ) {
		if ( i.toLowerCase() === "content-type" ) {
			s.contentType = s.headers[ i ] || "";
		}
	}
} );


jQuery._evalUrl = function( url, options, doc ) {
	return jQuery.ajax( {
		url: url,

		// Make this explicit, since user can override this through ajaxSetup (#11264)
		type: "GET",
		dataType: "script",
		cache: true,
		async: false,
		global: false,

		// Only evaluate the response if it is successful (gh-4126)
		// dataFilter is not invoked for failure responses, so using it instead
		// of the default converter is kludgy but it works.
		converters: {
			"text script": function() {}
		},
		dataFilter: function( response ) {
			jQuery.globalEval( response, options, doc );
		}
	} );
};


jQuery.fn.extend( {
	wrapAll: function( html ) {
		var wrap;

		if ( this[ 0 ] ) {
			if ( isFunction( html ) ) {
				html = html.call( this[ 0 ] );
			}

			// The elements to wrap the target around
			wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

			if ( this[ 0 ].parentNode ) {
				wrap.insertBefore( this[ 0 ] );
			}

			wrap.map( function() {
				var elem = this;

				while ( elem.firstElementChild ) {
					elem = elem.firstElementChild;
				}

				return elem;
			} ).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( isFunction( html ) ) {
			return this.each( function( i ) {
				jQuery( this ).wrapInner( html.call( this, i ) );
			} );
		}

		return this.each( function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		} );
	},

	wrap: function( html ) {
		var htmlIsFunction = isFunction( html );

		return this.each( function( i ) {
			jQuery( this ).wrapAll( htmlIsFunction ? html.call( this, i ) : html );
		} );
	},

	unwrap: function( selector ) {
		this.parent( selector ).not( "body" ).each( function() {
			jQuery( this ).replaceWith( this.childNodes );
		} );
		return this;
	}
} );


jQuery.expr.pseudos.hidden = function( elem ) {
	return !jQuery.expr.pseudos.visible( elem );
};
jQuery.expr.pseudos.visible = function( elem ) {
	return !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );
};




jQuery.ajaxSettings.xhr = function() {
	try {
		return new window.XMLHttpRequest();
	} catch ( e ) {}
};

var xhrSuccessStatus = {

		// File protocol always yields status code 0, assume 200
		0: 200,

		// Support: IE <=9 only
		// #1450: sometimes IE returns 1223 when it should be 204
		1223: 204
	},
	xhrSupported = jQuery.ajaxSettings.xhr();

support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
support.ajax = xhrSupported = !!xhrSupported;

jQuery.ajaxTransport( function( options ) {
	var callback, errorCallback;

	// Cross domain only allowed if supported through XMLHttpRequest
	if ( support.cors || xhrSupported && !options.crossDomain ) {
		return {
			send: function( headers, complete ) {
				var i,
					xhr = options.xhr();

				xhr.open(
					options.type,
					options.url,
					options.async,
					options.username,
					options.password
				);

				// Apply custom fields if provided
				if ( options.xhrFields ) {
					for ( i in options.xhrFields ) {
						xhr[ i ] = options.xhrFields[ i ];
					}
				}

				// Override mime type if needed
				if ( options.mimeType && xhr.overrideMimeType ) {
					xhr.overrideMimeType( options.mimeType );
				}

				// X-Requested-With header
				// For cross-domain requests, seeing as conditions for a preflight are
				// akin to a jigsaw puzzle, we simply never set it to be sure.
				// (it can always be set on a per-request basis or even using ajaxSetup)
				// For same-domain requests, won't change header if already provided.
				if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
					headers[ "X-Requested-With" ] = "XMLHttpRequest";
				}

				// Set headers
				for ( i in headers ) {
					xhr.setRequestHeader( i, headers[ i ] );
				}

				// Callback
				callback = function( type ) {
					return function() {
						if ( callback ) {
							callback = errorCallback = xhr.onload =
								xhr.onerror = xhr.onabort = xhr.ontimeout =
									xhr.onreadystatechange = null;

							if ( type === "abort" ) {
								xhr.abort();
							} else if ( type === "error" ) {

								// Support: IE <=9 only
								// On a manual native abort, IE9 throws
								// errors on any property access that is not readyState
								if ( typeof xhr.status !== "number" ) {
									complete( 0, "error" );
								} else {
									complete(

										// File: protocol always yields status 0; see #8605, #14207
										xhr.status,
										xhr.statusText
									);
								}
							} else {
								complete(
									xhrSuccessStatus[ xhr.status ] || xhr.status,
									xhr.statusText,

									// Support: IE <=9 only
									// IE9 has no XHR2 but throws on binary (trac-11426)
									// For XHR2 non-text, let the caller handle it (gh-2498)
									( xhr.responseType || "text" ) !== "text"  ||
									typeof xhr.responseText !== "string" ?
										{ binary: xhr.response } :
										{ text: xhr.responseText },
									xhr.getAllResponseHeaders()
								);
							}
						}
					};
				};

				// Listen to events
				xhr.onload = callback();
				errorCallback = xhr.onerror = xhr.ontimeout = callback( "error" );

				// Support: IE 9 only
				// Use onreadystatechange to replace onabort
				// to handle uncaught aborts
				if ( xhr.onabort !== undefined ) {
					xhr.onabort = errorCallback;
				} else {
					xhr.onreadystatechange = function() {

						// Check readyState before timeout as it changes
						if ( xhr.readyState === 4 ) {

							// Allow onerror to be called first,
							// but that will not handle a native abort
							// Also, save errorCallback to a variable
							// as xhr.onerror cannot be accessed
							window.setTimeout( function() {
								if ( callback ) {
									errorCallback();
								}
							} );
						}
					};
				}

				// Create the abort callback
				callback = callback( "abort" );

				try {

					// Do send the request (this may raise an exception)
					xhr.send( options.hasContent && options.data || null );
				} catch ( e ) {

					// #14683: Only rethrow if this hasn't been notified as an error yet
					if ( callback ) {
						throw e;
					}
				}
			},

			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
jQuery.ajaxPrefilter( function( s ) {
	if ( s.crossDomain ) {
		s.contents.script = false;
	}
} );

// Install script dataType
jQuery.ajaxSetup( {
	accepts: {
		script: "text/javascript, application/javascript, " +
			"application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /\b(?:java|ecma)script\b/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
} );

// Handle cache's special case and crossDomain
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
	}
} );

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function( s ) {

	// This transport only deals with cross domain or forced-by-attrs requests
	if ( s.crossDomain || s.scriptAttrs ) {
		var script, callback;
		return {
			send: function( _, complete ) {
				script = jQuery( "<script>" )
					.attr( s.scriptAttrs || {} )
					.prop( { charset: s.scriptCharset, src: s.url } )
					.on( "load error", callback = function( evt ) {
						script.remove();
						callback = null;
						if ( evt ) {
							complete( evt.type === "error" ? 404 : 200, evt.type );
						}
					} );

				// Use native DOM manipulation to avoid our domManip AJAX trickery
				document.head.appendChild( script[ 0 ] );
			},
			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup( {
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce.guid++ ) );
		this[ callback ] = true;
		return callback;
	}
} );

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" &&
				( s.contentType || "" )
					.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
				rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters[ "script json" ] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// Force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always( function() {

			// If previous value didn't exist - remove it
			if ( overwritten === undefined ) {
				jQuery( window ).removeProp( callbackName );

			// Otherwise restore preexisting value
			} else {
				window[ callbackName ] = overwritten;
			}

			// Save back as free
			if ( s[ callbackName ] ) {

				// Make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// Save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		} );

		// Delegate to script
		return "script";
	}
} );




// Support: Safari 8 only
// In Safari 8 documents created via document.implementation.createHTMLDocument
// collapse sibling forms: the second one becomes a child of the first one.
// Because of that, this security measure has to be disabled in Safari 8.
// https://bugs.webkit.org/show_bug.cgi?id=137337
support.createHTMLDocument = ( function() {
	var body = document.implementation.createHTMLDocument( "" ).body;
	body.innerHTML = "<form></form><form></form>";
	return body.childNodes.length === 2;
} )();


// Argument "data" should be string of html
// context (optional): If specified, the fragment will be created in this context,
// defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( typeof data !== "string" ) {
		return [];
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}

	var base, parsed, scripts;

	if ( !context ) {

		// Stop scripts or inline event handlers from being executed immediately
		// by using document.implementation
		if ( support.createHTMLDocument ) {
			context = document.implementation.createHTMLDocument( "" );

			// Set the base href for the created document
			// so any parsed elements with URLs
			// are based on the document's URL (gh-2965)
			base = context.createElement( "base" );
			base.href = document.location.href;
			context.head.appendChild( base );
		} else {
			context = document;
		}
	}

	parsed = rsingleTag.exec( data );
	scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[ 1 ] ) ];
	}

	parsed = buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	var selector, type, response,
		self = this,
		off = url.indexOf( " " );

	if ( off > -1 ) {
		selector = stripAndCollapse( url.slice( off ) );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax( {
			url: url,

			// If "type" variable is undefined, then "GET" method will be used.
			// Make value of this field explicit since
			// user can override it through ajaxSetup method
			type: type || "GET",
			dataType: "html",
			data: params
		} ).done( function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		// If the request succeeds, this function gets "data", "status", "jqXHR"
		// but they are ignored because response was set above.
		// If it fails, this function gets "jqXHR", "status", "error"
		} ).always( callback && function( jqXHR, status ) {
			self.each( function() {
				callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
			} );
		} );
	}

	return this;
};




jQuery.expr.pseudos.animated = function( elem ) {
	return jQuery.grep( jQuery.timers, function( fn ) {
		return elem === fn.elem;
	} ).length;
};




jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// Set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;

		// Need to be able to calculate position if either
		// top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;

		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( isFunction( options ) ) {

			// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
			options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );

		} else {
			if ( typeof props.top === "number" ) {
				props.top += "px";
			}
			if ( typeof props.left === "number" ) {
				props.left += "px";
			}
			curElem.css( props );
		}
	}
};

jQuery.fn.extend( {

	// offset() relates an element's border box to the document origin
	offset: function( options ) {

		// Preserve chaining for setter
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each( function( i ) {
					jQuery.offset.setOffset( this, options, i );
				} );
		}

		var rect, win,
			elem = this[ 0 ];

		if ( !elem ) {
			return;
		}

		// Return zeros for disconnected and hidden (display: none) elements (gh-2310)
		// Support: IE <=11 only
		// Running getBoundingClientRect on a
		// disconnected node in IE throws an error
		if ( !elem.getClientRects().length ) {
			return { top: 0, left: 0 };
		}

		// Get document-relative position by adding viewport scroll to viewport-relative gBCR
		rect = elem.getBoundingClientRect();
		win = elem.ownerDocument.defaultView;
		return {
			top: rect.top + win.pageYOffset,
			left: rect.left + win.pageXOffset
		};
	},

	// position() relates an element's margin box to its offset parent's padding box
	// This corresponds to the behavior of CSS absolute positioning
	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset, doc,
			elem = this[ 0 ],
			parentOffset = { top: 0, left: 0 };

		// position:fixed elements are offset from the viewport, which itself always has zero offset
		if ( jQuery.css( elem, "position" ) === "fixed" ) {

			// Assume position:fixed implies availability of getBoundingClientRect
			offset = elem.getBoundingClientRect();

		} else {
			offset = this.offset();

			// Account for the *real* offset parent, which can be the document or its root element
			// when a statically positioned element is identified
			doc = elem.ownerDocument;
			offsetParent = elem.offsetParent || doc.documentElement;
			while ( offsetParent &&
				( offsetParent === doc.body || offsetParent === doc.documentElement ) &&
				jQuery.css( offsetParent, "position" ) === "static" ) {

				offsetParent = offsetParent.parentNode;
			}
			if ( offsetParent && offsetParent !== elem && offsetParent.nodeType === 1 ) {

				// Incorporate borders into its offset, since they are outside its content origin
				parentOffset = jQuery( offsetParent ).offset();
				parentOffset.top += jQuery.css( offsetParent, "borderTopWidth", true );
				parentOffset.left += jQuery.css( offsetParent, "borderLeftWidth", true );
			}
		}

		// Subtract parent offsets and element margins
		return {
			top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
		};
	},

	// This method will return documentElement in the following cases:
	// 1) For the element inside the iframe without offsetParent, this method will return
	//    documentElement of the parent window
	// 2) For the hidden or detached element
	// 3) For body or html element, i.e. in case of the html node - it will return itself
	//
	// but those exceptions were never presented as a real life use-cases
	// and might be considered as more preferable results.
	//
	// This logic, however, is not guaranteed and can change at any point in the future
	offsetParent: function() {
		return this.map( function() {
			var offsetParent = this.offsetParent;

			while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
				offsetParent = offsetParent.offsetParent;
			}

			return offsetParent || documentElement;
		} );
	}
} );

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = "pageYOffset" === prop;

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {

			// Coalesce documents and windows
			var win;
			if ( isWindow( elem ) ) {
				win = elem;
			} else if ( elem.nodeType === 9 ) {
				win = elem.defaultView;
			}

			if ( val === undefined ) {
				return win ? win[ prop ] : elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : win.pageXOffset,
					top ? val : win.pageYOffset
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length );
	};
} );

// Support: Safari <=7 - 9.1, Chrome <=37 - 49
// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
// getComputedStyle returns percent when specified for top/left/bottom/right;
// rather than make the css module depend on the offset module, just check for it here
jQuery.each( [ "top", "left" ], function( _i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );

				// If curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
} );


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },
		function( defaultExtra, funcName ) {

		// Margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( isWindow( elem ) ) {

					// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
					return funcName.indexOf( "outer" ) === 0 ?
						elem[ "inner" + name ] :
						elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
					// whichever is greatest
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?

					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable );
		};
	} );
} );


jQuery.each( [
	"ajaxStart",
	"ajaxStop",
	"ajaxComplete",
	"ajaxError",
	"ajaxSuccess",
	"ajaxSend"
], function( _i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
} );




jQuery.fn.extend( {

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {

		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ?
			this.off( selector, "**" ) :
			this.off( types, selector || "**", fn );
	},

	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	}
} );

jQuery.each( ( "blur focus focusin focusout resize scroll click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup contextmenu" ).split( " " ),
	function( _i, name ) {

		// Handle event binding
		jQuery.fn[ name ] = function( data, fn ) {
			return arguments.length > 0 ?
				this.on( name, null, data, fn ) :
				this.trigger( name );
		};
	} );




// Support: Android <=4.0 only
// Make sure we trim BOM and NBSP
var rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;

// Bind a function to a context, optionally partially applying any
// arguments.
// jQuery.proxy is deprecated to promote standards (specifically Function#bind)
// However, it is not slated for removal any time soon
jQuery.proxy = function( fn, context ) {
	var tmp, args, proxy;

	if ( typeof context === "string" ) {
		tmp = fn[ context ];
		context = fn;
		fn = tmp;
	}

	// Quick check to determine if target is callable, in the spec
	// this throws a TypeError, but we will just return undefined.
	if ( !isFunction( fn ) ) {
		return undefined;
	}

	// Simulated bind
	args = slice.call( arguments, 2 );
	proxy = function() {
		return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
	};

	// Set the guid of unique handler to the same of original handler, so it can be removed
	proxy.guid = fn.guid = fn.guid || jQuery.guid++;

	return proxy;
};

jQuery.holdReady = function( hold ) {
	if ( hold ) {
		jQuery.readyWait++;
	} else {
		jQuery.ready( true );
	}
};
jQuery.isArray = Array.isArray;
jQuery.parseJSON = JSON.parse;
jQuery.nodeName = nodeName;
jQuery.isFunction = isFunction;
jQuery.isWindow = isWindow;
jQuery.camelCase = camelCase;
jQuery.type = toType;

jQuery.now = Date.now;

jQuery.isNumeric = function( obj ) {

	// As of jQuery 3.0, isNumeric is limited to
	// strings and numbers (primitives or objects)
	// that can be coerced to finite numbers (gh-2662)
	var type = jQuery.type( obj );
	return ( type === "number" || type === "string" ) &&

		// parseFloat NaNs numeric-cast false positives ("")
		// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
		// subtraction forces infinities to NaN
		!isNaN( obj - parseFloat( obj ) );
};

jQuery.trim = function( text ) {
	return text == null ?
		"" :
		( text + "" ).replace( rtrim, "" );
};



// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( typeof define === "function" && define.amd ) {
	define( "jquery", [], function() {
		return jQuery;
	} );
}




var

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in AMD
// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if ( typeof noGlobal === "undefined" ) {
	window.jQuery = window.$ = jQuery;
}




return jQuery;
} );

},{}],7:[function(require,module,exports){
/*!
* sweetalert2 v10.3.3
* Released under the MIT License.
*/
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
  typeof define === 'function' && define.amd ? define(factory) :
  (global = global || self, global.Sweetalert2 = factory());
}(this, function () { 'use strict';

  function _typeof(obj) {
    "@babel/helpers - typeof";

    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function (obj) {
        return typeof obj;
      };
    } else {
      _typeof = function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  function _extends() {
    _extends = Object.assign || function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];

        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }

      return target;
    };

    return _extends.apply(this, arguments);
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
  }

  function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
      return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
  }

  function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    };

    return _setPrototypeOf(o, p);
  }

  function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;

    try {
      Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
      return true;
    } catch (e) {
      return false;
    }
  }

  function _construct(Parent, args, Class) {
    if (_isNativeReflectConstruct()) {
      _construct = Reflect.construct;
    } else {
      _construct = function _construct(Parent, args, Class) {
        var a = [null];
        a.push.apply(a, args);
        var Constructor = Function.bind.apply(Parent, a);
        var instance = new Constructor();
        if (Class) _setPrototypeOf(instance, Class.prototype);
        return instance;
      };
    }

    return _construct.apply(null, arguments);
  }

  function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return self;
  }

  function _possibleConstructorReturn(self, call) {
    if (call && (typeof call === "object" || typeof call === "function")) {
      return call;
    }

    return _assertThisInitialized(self);
  }

  function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();

    return function _createSuperInternal() {
      var Super = _getPrototypeOf(Derived),
          result;

      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf(this).constructor;

        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }

      return _possibleConstructorReturn(this, result);
    };
  }

  function _superPropBase(object, property) {
    while (!Object.prototype.hasOwnProperty.call(object, property)) {
      object = _getPrototypeOf(object);
      if (object === null) break;
    }

    return object;
  }

  function _get(target, property, receiver) {
    if (typeof Reflect !== "undefined" && Reflect.get) {
      _get = Reflect.get;
    } else {
      _get = function _get(target, property, receiver) {
        var base = _superPropBase(target, property);

        if (!base) return;
        var desc = Object.getOwnPropertyDescriptor(base, property);

        if (desc.get) {
          return desc.get.call(receiver);
        }

        return desc.value;
      };
    }

    return _get(target, property, receiver || target);
  }

  var consolePrefix = 'SweetAlert2:';
  /**
   * Filter the unique values into a new array
   * @param arr
   */

  var uniqueArray = function uniqueArray(arr) {
    var result = [];

    for (var i = 0; i < arr.length; i++) {
      if (result.indexOf(arr[i]) === -1) {
        result.push(arr[i]);
      }
    }

    return result;
  };
  /**
   * Capitalize the first letter of a string
   * @param str
   */

  var capitalizeFirstLetter = function capitalizeFirstLetter(str) {
    return str.charAt(0).toUpperCase() + str.slice(1);
  };
  /**
   * Returns the array of object values (Object.values isn't supported in IE11)
   * @param obj
   */

  var objectValues = function objectValues(obj) {
    return Object.keys(obj).map(function (key) {
      return obj[key];
    });
  };
  /**
   * Convert NodeList to Array
   * @param nodeList
   */

  var toArray = function toArray(nodeList) {
    return Array.prototype.slice.call(nodeList);
  };
  /**
   * Standardise console warnings
   * @param message
   */

  var warn = function warn(message) {
    console.warn("".concat(consolePrefix, " ").concat(message));
  };
  /**
   * Standardise console errors
   * @param message
   */

  var error = function error(message) {
    console.error("".concat(consolePrefix, " ").concat(message));
  };
  /**
   * Private global state for `warnOnce`
   * @type {Array}
   * @private
   */

  var previousWarnOnceMessages = [];
  /**
   * Show a console warning, but only if it hasn't already been shown
   * @param message
   */

  var warnOnce = function warnOnce(message) {
    if (!(previousWarnOnceMessages.indexOf(message) !== -1)) {
      previousWarnOnceMessages.push(message);
      warn(message);
    }
  };
  /**
   * Show a one-time console warning about deprecated params/methods
   */

  var warnAboutDeprecation = function warnAboutDeprecation(deprecatedParam, useInstead) {
    warnOnce("\"".concat(deprecatedParam, "\" is deprecated and will be removed in the next major release. Please use \"").concat(useInstead, "\" instead."));
  };
  /**
   * If `arg` is a function, call it (with no arguments or context) and return the result.
   * Otherwise, just pass the value through
   * @param arg
   */

  var callIfFunction = function callIfFunction(arg) {
    return typeof arg === 'function' ? arg() : arg;
  };
  var hasToPromiseFn = function hasToPromiseFn(arg) {
    return arg && typeof arg.toPromise === 'function';
  };
  var asPromise = function asPromise(arg) {
    return hasToPromiseFn(arg) ? arg.toPromise() : Promise.resolve(arg);
  };
  var isPromise = function isPromise(arg) {
    return arg && Promise.resolve(arg) === arg;
  };

  var DismissReason = Object.freeze({
    cancel: 'cancel',
    backdrop: 'backdrop',
    close: 'close',
    esc: 'esc',
    timer: 'timer'
  });

  var isJqueryElement = function isJqueryElement(elem) {
    return _typeof(elem) === 'object' && elem.jquery;
  };

  var isElement = function isElement(elem) {
    return elem instanceof Element || isJqueryElement(elem);
  };

  var argsToParams = function argsToParams(args) {
    var params = {};

    if (_typeof(args[0]) === 'object' && !isElement(args[0])) {
      _extends(params, args[0]);
    } else {
      ['title', 'html', 'icon'].forEach(function (name, index) {
        var arg = args[index];

        if (typeof arg === 'string' || isElement(arg)) {
          params[name] = arg;
        } else if (arg !== undefined) {
          error("Unexpected type of ".concat(name, "! Expected \"string\" or \"Element\", got ").concat(_typeof(arg)));
        }
      });
    }

    return params;
  };

  var swalPrefix = 'swal2-';
  var prefix = function prefix(items) {
    var result = {};

    for (var i in items) {
      result[items[i]] = swalPrefix + items[i];
    }

    return result;
  };
  var swalClasses = prefix(['container', 'shown', 'height-auto', 'iosfix', 'popup', 'modal', 'no-backdrop', 'no-transition', 'toast', 'toast-shown', 'toast-column', 'show', 'hide', 'close', 'title', 'header', 'content', 'html-container', 'actions', 'confirm', 'deny', 'cancel', 'footer', 'icon', 'icon-content', 'image', 'input', 'file', 'range', 'select', 'radio', 'checkbox', 'label', 'textarea', 'inputerror', 'validation-message', 'progress-steps', 'active-progress-step', 'progress-step', 'progress-step-line', 'loader', 'loading', 'styled', 'top', 'top-start', 'top-end', 'top-left', 'top-right', 'center', 'center-start', 'center-end', 'center-left', 'center-right', 'bottom', 'bottom-start', 'bottom-end', 'bottom-left', 'bottom-right', 'grow-row', 'grow-column', 'grow-fullscreen', 'rtl', 'timer-progress-bar', 'timer-progress-bar-container', 'scrollbar-measure', 'icon-success', 'icon-warning', 'icon-info', 'icon-question', 'icon-error']);
  var iconTypes = prefix(['success', 'warning', 'info', 'question', 'error']);

  var getContainer = function getContainer() {
    return document.body.querySelector(".".concat(swalClasses.container));
  };
  var elementBySelector = function elementBySelector(selectorString) {
    var container = getContainer();
    return container ? container.querySelector(selectorString) : null;
  };

  var elementByClass = function elementByClass(className) {
    return elementBySelector(".".concat(className));
  };

  var getPopup = function getPopup() {
    return elementByClass(swalClasses.popup);
  };
  var getIcons = function getIcons() {
    var popup = getPopup();
    return toArray(popup.querySelectorAll(".".concat(swalClasses.icon)));
  };
  var getIcon = function getIcon() {
    var visibleIcon = getIcons().filter(function (icon) {
      return isVisible(icon);
    });
    return visibleIcon.length ? visibleIcon[0] : null;
  };
  var getTitle = function getTitle() {
    return elementByClass(swalClasses.title);
  };
  var getContent = function getContent() {
    return elementByClass(swalClasses.content);
  };
  var getHtmlContainer = function getHtmlContainer() {
    return elementByClass(swalClasses['html-container']);
  };
  var getImage = function getImage() {
    return elementByClass(swalClasses.image);
  };
  var getProgressSteps = function getProgressSteps() {
    return elementByClass(swalClasses['progress-steps']);
  };
  var getValidationMessage = function getValidationMessage() {
    return elementByClass(swalClasses['validation-message']);
  };
  var getConfirmButton = function getConfirmButton() {
    return elementBySelector(".".concat(swalClasses.actions, " .").concat(swalClasses.confirm));
  };
  var getDenyButton = function getDenyButton() {
    return elementBySelector(".".concat(swalClasses.actions, " .").concat(swalClasses.deny));
  };
  var getLoader = function getLoader() {
    return elementBySelector(".".concat(swalClasses.loader));
  };
  var getCancelButton = function getCancelButton() {
    return elementBySelector(".".concat(swalClasses.actions, " .").concat(swalClasses.cancel));
  };
  var getActions = function getActions() {
    return elementByClass(swalClasses.actions);
  };
  var getHeader = function getHeader() {
    return elementByClass(swalClasses.header);
  };
  var getFooter = function getFooter() {
    return elementByClass(swalClasses.footer);
  };
  var getTimerProgressBar = function getTimerProgressBar() {
    return elementByClass(swalClasses['timer-progress-bar']);
  };
  var getCloseButton = function getCloseButton() {
    return elementByClass(swalClasses.close);
  }; // https://github.com/jkup/focusable/blob/master/index.js

  var focusable = "\n  a[href],\n  area[href],\n  input:not([disabled]),\n  select:not([disabled]),\n  textarea:not([disabled]),\n  button:not([disabled]),\n  iframe,\n  object,\n  embed,\n  [tabindex=\"0\"],\n  [contenteditable],\n  audio[controls],\n  video[controls],\n  summary\n";
  var getFocusableElements = function getFocusableElements() {
    var focusableElementsWithTabindex = toArray(getPopup().querySelectorAll('[tabindex]:not([tabindex="-1"]):not([tabindex="0"])')) // sort according to tabindex
    .sort(function (a, b) {
      a = parseInt(a.getAttribute('tabindex'));
      b = parseInt(b.getAttribute('tabindex'));

      if (a > b) {
        return 1;
      } else if (a < b) {
        return -1;
      }

      return 0;
    });
    var otherFocusableElements = toArray(getPopup().querySelectorAll(focusable)).filter(function (el) {
      return el.getAttribute('tabindex') !== '-1';
    });
    return uniqueArray(focusableElementsWithTabindex.concat(otherFocusableElements)).filter(function (el) {
      return isVisible(el);
    });
  };
  var isModal = function isModal() {
    return !isToast() && !document.body.classList.contains(swalClasses['no-backdrop']);
  };
  var isToast = function isToast() {
    return document.body.classList.contains(swalClasses['toast-shown']);
  };
  var isLoading = function isLoading() {
    return getPopup().hasAttribute('data-loading');
  };

  var states = {
    previousBodyPadding: null
  };
  var setInnerHtml = function setInnerHtml(elem, html) {
    // #1926
    elem.textContent = '';

    if (html) {
      var parser = new DOMParser();
      var parsed = parser.parseFromString(html, "text/html");
      toArray(parsed.querySelector('head').childNodes).forEach(function (child) {
        elem.appendChild(child);
      });
      toArray(parsed.querySelector('body').childNodes).forEach(function (child) {
        elem.appendChild(child);
      });
    }
  };
  var hasClass = function hasClass(elem, className) {
    if (!className) {
      return false;
    }

    var classList = className.split(/\s+/);

    for (var i = 0; i < classList.length; i++) {
      if (!elem.classList.contains(classList[i])) {
        return false;
      }
    }

    return true;
  };

  var removeCustomClasses = function removeCustomClasses(elem, params) {
    toArray(elem.classList).forEach(function (className) {
      if (!(objectValues(swalClasses).indexOf(className) !== -1) && !(objectValues(iconTypes).indexOf(className) !== -1) && !(objectValues(params.showClass).indexOf(className) !== -1)) {
        elem.classList.remove(className);
      }
    });
  };

  var applyCustomClass = function applyCustomClass(elem, params, className) {
    removeCustomClasses(elem, params);

    if (params.customClass && params.customClass[className]) {
      if (typeof params.customClass[className] !== 'string' && !params.customClass[className].forEach) {
        return warn("Invalid type of customClass.".concat(className, "! Expected string or iterable object, got \"").concat(_typeof(params.customClass[className]), "\""));
      }

      addClass(elem, params.customClass[className]);
    }
  };
  function getInput(content, inputType) {
    if (!inputType) {
      return null;
    }

    switch (inputType) {
      case 'select':
      case 'textarea':
      case 'file':
        return getChildByClass(content, swalClasses[inputType]);

      case 'checkbox':
        return content.querySelector(".".concat(swalClasses.checkbox, " input"));

      case 'radio':
        return content.querySelector(".".concat(swalClasses.radio, " input:checked")) || content.querySelector(".".concat(swalClasses.radio, " input:first-child"));

      case 'range':
        return content.querySelector(".".concat(swalClasses.range, " input"));

      default:
        return getChildByClass(content, swalClasses.input);
    }
  }
  var focusInput = function focusInput(input) {
    input.focus(); // place cursor at end of text in text input

    if (input.type !== 'file') {
      // http://stackoverflow.com/a/2345915
      var val = input.value;
      input.value = '';
      input.value = val;
    }
  };
  var toggleClass = function toggleClass(target, classList, condition) {
    if (!target || !classList) {
      return;
    }

    if (typeof classList === 'string') {
      classList = classList.split(/\s+/).filter(Boolean);
    }

    classList.forEach(function (className) {
      if (target.forEach) {
        target.forEach(function (elem) {
          condition ? elem.classList.add(className) : elem.classList.remove(className);
        });
      } else {
        condition ? target.classList.add(className) : target.classList.remove(className);
      }
    });
  };
  var addClass = function addClass(target, classList) {
    toggleClass(target, classList, true);
  };
  var removeClass = function removeClass(target, classList) {
    toggleClass(target, classList, false);
  };
  var getChildByClass = function getChildByClass(elem, className) {
    for (var i = 0; i < elem.childNodes.length; i++) {
      if (hasClass(elem.childNodes[i], className)) {
        return elem.childNodes[i];
      }
    }
  };
  var applyNumericalStyle = function applyNumericalStyle(elem, property, value) {
    if (value || parseInt(value) === 0) {
      elem.style[property] = typeof value === 'number' ? "".concat(value, "px") : value;
    } else {
      elem.style.removeProperty(property);
    }
  };
  var show = function show(elem) {
    var display = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'flex';
    elem.style.display = display;
  };
  var hide = function hide(elem) {
    elem.style.display = 'none';
  };
  var setStyle = function setStyle(parent, selector, property, value) {
    var el = parent.querySelector(selector);

    if (el) {
      el.style[property] = value;
    }
  };
  var toggle = function toggle(elem, condition, display) {
    condition ? show(elem, display) : hide(elem);
  }; // borrowed from jquery $(elem).is(':visible') implementation

  var isVisible = function isVisible(elem) {
    return !!(elem && (elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length));
  };
  /* istanbul ignore next */

  var isScrollable = function isScrollable(elem) {
    return !!(elem.scrollHeight > elem.clientHeight);
  }; // borrowed from https://stackoverflow.com/a/46352119

  var hasCssAnimation = function hasCssAnimation(elem) {
    var style = window.getComputedStyle(elem);
    var animDuration = parseFloat(style.getPropertyValue('animation-duration') || '0');
    var transDuration = parseFloat(style.getPropertyValue('transition-duration') || '0');
    return animDuration > 0 || transDuration > 0;
  };
  var contains = function contains(haystack, needle) {
    if (typeof haystack.contains === 'function') {
      return haystack.contains(needle);
    }
  };
  var animateTimerProgressBar = function animateTimerProgressBar(timer) {
    var reset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    var timerProgressBar = getTimerProgressBar();

    if (isVisible(timerProgressBar)) {
      if (reset) {
        timerProgressBar.style.transition = 'none';
        timerProgressBar.style.width = '100%';
      }

      setTimeout(function () {
        timerProgressBar.style.transition = "width ".concat(timer / 1000, "s linear");
        timerProgressBar.style.width = '0%';
      }, 10);
    }
  };
  var stopTimerProgressBar = function stopTimerProgressBar() {
    var timerProgressBar = getTimerProgressBar();
    var timerProgressBarWidth = parseInt(window.getComputedStyle(timerProgressBar).width);
    timerProgressBar.style.removeProperty('transition');
    timerProgressBar.style.width = '100%';
    var timerProgressBarFullWidth = parseInt(window.getComputedStyle(timerProgressBar).width);
    var timerProgressBarPercent = parseInt(timerProgressBarWidth / timerProgressBarFullWidth * 100);
    timerProgressBar.style.removeProperty('transition');
    timerProgressBar.style.width = "".concat(timerProgressBarPercent, "%");
  };

  // Detect Node env
  var isNodeEnv = function isNodeEnv() {
    return typeof window === 'undefined' || typeof document === 'undefined';
  };

  var sweetHTML = "\n <div aria-labelledby=\"".concat(swalClasses.title, "\" aria-describedby=\"").concat(swalClasses.content, "\" class=\"").concat(swalClasses.popup, "\" tabindex=\"-1\">\n   <div class=\"").concat(swalClasses.header, "\">\n     <ul class=\"").concat(swalClasses['progress-steps'], "\"></ul>\n     <div class=\"").concat(swalClasses.icon, " ").concat(iconTypes.error, "\"></div>\n     <div class=\"").concat(swalClasses.icon, " ").concat(iconTypes.question, "\"></div>\n     <div class=\"").concat(swalClasses.icon, " ").concat(iconTypes.warning, "\"></div>\n     <div class=\"").concat(swalClasses.icon, " ").concat(iconTypes.info, "\"></div>\n     <div class=\"").concat(swalClasses.icon, " ").concat(iconTypes.success, "\"></div>\n     <img class=\"").concat(swalClasses.image, "\" />\n     <h2 class=\"").concat(swalClasses.title, "\" id=\"").concat(swalClasses.title, "\"></h2>\n     <button type=\"button\" class=\"").concat(swalClasses.close, "\"></button>\n   </div>\n   <div class=\"").concat(swalClasses.content, "\">\n     <div id=\"").concat(swalClasses.content, "\" class=\"").concat(swalClasses['html-container'], "\"></div>\n     <input class=\"").concat(swalClasses.input, "\" />\n     <input type=\"file\" class=\"").concat(swalClasses.file, "\" />\n     <div class=\"").concat(swalClasses.range, "\">\n       <input type=\"range\" />\n       <output></output>\n     </div>\n     <select class=\"").concat(swalClasses.select, "\"></select>\n     <div class=\"").concat(swalClasses.radio, "\"></div>\n     <label for=\"").concat(swalClasses.checkbox, "\" class=\"").concat(swalClasses.checkbox, "\">\n       <input type=\"checkbox\" />\n       <span class=\"").concat(swalClasses.label, "\"></span>\n     </label>\n     <textarea class=\"").concat(swalClasses.textarea, "\"></textarea>\n     <div class=\"").concat(swalClasses['validation-message'], "\" id=\"").concat(swalClasses['validation-message'], "\"></div>\n   </div>\n   <div class=\"").concat(swalClasses.actions, "\">\n     <div class=\"").concat(swalClasses.loader, "\"></div>\n     <button type=\"button\" class=\"").concat(swalClasses.confirm, "\"></button>\n     <button type=\"button\" class=\"").concat(swalClasses.deny, "\"></button>\n     <button type=\"button\" class=\"").concat(swalClasses.cancel, "\"></button>\n   </div>\n   <div class=\"").concat(swalClasses.footer, "\"></div>\n   <div class=\"").concat(swalClasses['timer-progress-bar-container'], "\">\n     <div class=\"").concat(swalClasses['timer-progress-bar'], "\"></div>\n   </div>\n </div>\n").replace(/(^|\n)\s*/g, '');

  var resetOldContainer = function resetOldContainer() {
    var oldContainer = getContainer();

    if (!oldContainer) {
      return false;
    }

    oldContainer.parentNode.removeChild(oldContainer);
    removeClass([document.documentElement, document.body], [swalClasses['no-backdrop'], swalClasses['toast-shown'], swalClasses['has-column']]);
    return true;
  };

  var oldInputVal; // IE11 workaround, see #1109 for details

  var resetValidationMessage = function resetValidationMessage(e) {
    if (Swal.isVisible() && oldInputVal !== e.target.value) {
      Swal.resetValidationMessage();
    }

    oldInputVal = e.target.value;
  };

  var addInputChangeListeners = function addInputChangeListeners() {
    var content = getContent();
    var input = getChildByClass(content, swalClasses.input);
    var file = getChildByClass(content, swalClasses.file);
    var range = content.querySelector(".".concat(swalClasses.range, " input"));
    var rangeOutput = content.querySelector(".".concat(swalClasses.range, " output"));
    var select = getChildByClass(content, swalClasses.select);
    var checkbox = content.querySelector(".".concat(swalClasses.checkbox, " input"));
    var textarea = getChildByClass(content, swalClasses.textarea);
    input.oninput = resetValidationMessage;
    file.onchange = resetValidationMessage;
    select.onchange = resetValidationMessage;
    checkbox.onchange = resetValidationMessage;
    textarea.oninput = resetValidationMessage;

    range.oninput = function (e) {
      resetValidationMessage(e);
      rangeOutput.value = range.value;
    };

    range.onchange = function (e) {
      resetValidationMessage(e);
      range.nextSibling.value = range.value;
    };
  };

  var getTarget = function getTarget(target) {
    return typeof target === 'string' ? document.querySelector(target) : target;
  };

  var setupAccessibility = function setupAccessibility(params) {
    var popup = getPopup();
    popup.setAttribute('role', params.toast ? 'alert' : 'dialog');
    popup.setAttribute('aria-live', params.toast ? 'polite' : 'assertive');

    if (!params.toast) {
      popup.setAttribute('aria-modal', 'true');
    }
  };

  var setupRTL = function setupRTL(targetElement) {
    if (window.getComputedStyle(targetElement).direction === 'rtl') {
      addClass(getContainer(), swalClasses.rtl);
    }
  };
  /*
   * Add modal + backdrop to DOM
   */


  var init = function init(params) {
    // Clean up the old popup container if it exists
    var oldContainerExisted = resetOldContainer();
    /* istanbul ignore if */

    if (isNodeEnv()) {
      error('SweetAlert2 requires document to initialize');
      return;
    }

    var container = document.createElement('div');
    container.className = swalClasses.container;

    if (oldContainerExisted) {
      addClass(container, swalClasses['no-transition']);
    }

    setInnerHtml(container, sweetHTML);
    var targetElement = getTarget(params.target);
    targetElement.appendChild(container);
    setupAccessibility(params);
    setupRTL(targetElement);
    addInputChangeListeners();
  };

  var parseHtmlToContainer = function parseHtmlToContainer(param, target) {
    // DOM element
    if (param instanceof HTMLElement) {
      target.appendChild(param); // Object
    } else if (_typeof(param) === 'object') {
      handleObject(param, target); // Plain string
    } else if (param) {
      setInnerHtml(target, param);
    }
  };

  var handleObject = function handleObject(param, target) {
    // JQuery element(s)
    if (param.jquery) {
      handleJqueryElem(target, param); // For other objects use their string representation
    } else {
      setInnerHtml(target, param.toString());
    }
  };

  var handleJqueryElem = function handleJqueryElem(target, elem) {
    target.textContent = '';

    if (0 in elem) {
      for (var i = 0; (i in elem); i++) {
        target.appendChild(elem[i].cloneNode(true));
      }
    } else {
      target.appendChild(elem.cloneNode(true));
    }
  };

  var animationEndEvent = function () {
    // Prevent run in Node env

    /* istanbul ignore if */
    if (isNodeEnv()) {
      return false;
    }

    var testEl = document.createElement('div');
    var transEndEventNames = {
      WebkitAnimation: 'webkitAnimationEnd',
      OAnimation: 'oAnimationEnd oanimationend',
      animation: 'animationend'
    };

    for (var i in transEndEventNames) {
      if (Object.prototype.hasOwnProperty.call(transEndEventNames, i) && typeof testEl.style[i] !== 'undefined') {
        return transEndEventNames[i];
      }
    }

    return false;
  }();

  // https://github.com/twbs/bootstrap/blob/master/js/src/modal.js

  var measureScrollbar = function measureScrollbar() {
    var scrollDiv = document.createElement('div');
    scrollDiv.className = swalClasses['scrollbar-measure'];
    document.body.appendChild(scrollDiv);
    var scrollbarWidth = scrollDiv.getBoundingClientRect().width - scrollDiv.clientWidth;
    document.body.removeChild(scrollDiv);
    return scrollbarWidth;
  };

  var renderActions = function renderActions(instance, params) {
    var actions = getActions();
    var loader = getLoader();
    var confirmButton = getConfirmButton();
    var denyButton = getDenyButton();
    var cancelButton = getCancelButton(); // Actions (buttons) wrapper

    if (!params.showConfirmButton && !params.showDenyButton && !params.showCancelButton) {
      hide(actions);
    } // Custom class


    applyCustomClass(actions, params, 'actions'); // Render buttons

    renderButton(confirmButton, 'confirm', params);
    renderButton(denyButton, 'deny', params);
    renderButton(cancelButton, 'cancel', params); // Loader

    loader.innerHTML = params.loaderHtml;

    if (params.buttonsStyling) {
      handleButtonsStyling(confirmButton, denyButton, cancelButton, params);
    } else {
      removeClass([confirmButton, denyButton, cancelButton], swalClasses.styled);
    }

    if (params.reverseButtons) {
      actions.insertBefore(cancelButton, loader);
      actions.insertBefore(denyButton, loader);
      actions.insertBefore(confirmButton, loader);
    }
  };

  function handleButtonsStyling(confirmButton, denyButton, cancelButton, params) {
    addClass([confirmButton, denyButton, cancelButton], swalClasses.styled); // Buttons background colors

    if (params.confirmButtonColor) {
      confirmButton.style.backgroundColor = params.confirmButtonColor;
    }

    if (params.denyButtonColor) {
      denyButton.style.backgroundColor = params.denyButtonColor;
    }

    if (params.cancelButtonColor) {
      cancelButton.style.backgroundColor = params.cancelButtonColor;
    } // Loading state


    if (!isLoading()) {
      var confirmButtonBackgroundColor = window.getComputedStyle(confirmButton).getPropertyValue('background-color');
      confirmButton.style.borderLeftColor = confirmButtonBackgroundColor;
      confirmButton.style.borderRightColor = confirmButtonBackgroundColor;
    }
  }

  function renderButton(button, buttonType, params) {
    toggle(button, params["show".concat(capitalizeFirstLetter(buttonType), "Button")], 'inline-block');
    setInnerHtml(button, params["".concat(buttonType, "ButtonText")]); // Set caption text

    button.setAttribute('aria-label', params["".concat(buttonType, "ButtonAriaLabel")]); // ARIA label
    // Add buttons custom classes

    button.className = swalClasses[buttonType];
    applyCustomClass(button, params, "".concat(buttonType, "Button"));
    addClass(button, params["".concat(buttonType, "ButtonClass")]);
  }

  function handleBackdropParam(container, backdrop) {
    if (typeof backdrop === 'string') {
      container.style.background = backdrop;
    } else if (!backdrop) {
      addClass([document.documentElement, document.body], swalClasses['no-backdrop']);
    }
  }

  function handlePositionParam(container, position) {
    if (position in swalClasses) {
      addClass(container, swalClasses[position]);
    } else {
      warn('The "position" parameter is not valid, defaulting to "center"');
      addClass(container, swalClasses.center);
    }
  }

  function handleGrowParam(container, grow) {
    if (grow && typeof grow === 'string') {
      var growClass = "grow-".concat(grow);

      if (growClass in swalClasses) {
        addClass(container, swalClasses[growClass]);
      }
    }
  }

  var renderContainer = function renderContainer(instance, params) {
    var container = getContainer();

    if (!container) {
      return;
    }

    handleBackdropParam(container, params.backdrop);

    if (!params.backdrop && params.allowOutsideClick) {
      warn('"allowOutsideClick" parameter requires `backdrop` parameter to be set to `true`');
    }

    handlePositionParam(container, params.position);
    handleGrowParam(container, params.grow); // Custom class

    applyCustomClass(container, params, 'container'); // Set queue step attribute for getQueueStep() method

    var queueStep = document.body.getAttribute('data-swal2-queue-step');

    if (queueStep) {
      container.setAttribute('data-queue-step', queueStep);
      document.body.removeAttribute('data-swal2-queue-step');
    }
  };

  /**
   * This module containts `WeakMap`s for each effectively-"private  property" that a `Swal` has.
   * For example, to set the private property "foo" of `this` to "bar", you can `privateProps.foo.set(this, 'bar')`
   * This is the approach that Babel will probably take to implement private methods/fields
   *   https://github.com/tc39/proposal-private-methods
   *   https://github.com/babel/babel/pull/7555
   * Once we have the changes from that PR in Babel, and our core class fits reasonable in *one module*
   *   then we can use that language feature.
   */
  var privateProps = {
    promise: new WeakMap(),
    innerParams: new WeakMap(),
    domCache: new WeakMap()
  };

  var inputTypes = ['input', 'file', 'range', 'select', 'radio', 'checkbox', 'textarea'];
  var renderInput = function renderInput(instance, params) {
    var content = getContent();
    var innerParams = privateProps.innerParams.get(instance);
    var rerender = !innerParams || params.input !== innerParams.input;
    inputTypes.forEach(function (inputType) {
      var inputClass = swalClasses[inputType];
      var inputContainer = getChildByClass(content, inputClass); // set attributes

      setAttributes(inputType, params.inputAttributes); // set class

      inputContainer.className = inputClass;

      if (rerender) {
        hide(inputContainer);
      }
    });

    if (params.input) {
      if (rerender) {
        showInput(params);
      } // set custom class


      setCustomClass(params);
    }
  };

  var showInput = function showInput(params) {
    if (!renderInputType[params.input]) {
      return error("Unexpected type of input! Expected \"text\", \"email\", \"password\", \"number\", \"tel\", \"select\", \"radio\", \"checkbox\", \"textarea\", \"file\" or \"url\", got \"".concat(params.input, "\""));
    }

    var inputContainer = getInputContainer(params.input);
    var input = renderInputType[params.input](inputContainer, params);
    show(input); // input autofocus

    setTimeout(function () {
      focusInput(input);
    });
  };

  var removeAttributes = function removeAttributes(input) {
    for (var i = 0; i < input.attributes.length; i++) {
      var attrName = input.attributes[i].name;

      if (!(['type', 'value', 'style'].indexOf(attrName) !== -1)) {
        input.removeAttribute(attrName);
      }
    }
  };

  var setAttributes = function setAttributes(inputType, inputAttributes) {
    var input = getInput(getContent(), inputType);

    if (!input) {
      return;
    }

    removeAttributes(input);

    for (var attr in inputAttributes) {
      // Do not set a placeholder for <input type="range">
      // it'll crash Edge, #1298
      if (inputType === 'range' && attr === 'placeholder') {
        continue;
      }

      input.setAttribute(attr, inputAttributes[attr]);
    }
  };

  var setCustomClass = function setCustomClass(params) {
    var inputContainer = getInputContainer(params.input);

    if (params.customClass) {
      addClass(inputContainer, params.customClass.input);
    }
  };

  var setInputPlaceholder = function setInputPlaceholder(input, params) {
    if (!input.placeholder || params.inputPlaceholder) {
      input.placeholder = params.inputPlaceholder;
    }
  };

  var getInputContainer = function getInputContainer(inputType) {
    var inputClass = swalClasses[inputType] ? swalClasses[inputType] : swalClasses.input;
    return getChildByClass(getContent(), inputClass);
  };

  var renderInputType = {};

  renderInputType.text = renderInputType.email = renderInputType.password = renderInputType.number = renderInputType.tel = renderInputType.url = function (input, params) {
    if (typeof params.inputValue === 'string' || typeof params.inputValue === 'number') {
      input.value = params.inputValue;
    } else if (!isPromise(params.inputValue)) {
      warn("Unexpected type of inputValue! Expected \"string\", \"number\" or \"Promise\", got \"".concat(_typeof(params.inputValue), "\""));
    }

    setInputPlaceholder(input, params);
    input.type = params.input;
    return input;
  };

  renderInputType.file = function (input, params) {
    setInputPlaceholder(input, params);
    return input;
  };

  renderInputType.range = function (range, params) {
    var rangeInput = range.querySelector('input');
    var rangeOutput = range.querySelector('output');
    rangeInput.value = params.inputValue;
    rangeInput.type = params.input;
    rangeOutput.value = params.inputValue;
    return range;
  };

  renderInputType.select = function (select, params) {
    select.textContent = '';

    if (params.inputPlaceholder) {
      var placeholder = document.createElement('option');
      setInnerHtml(placeholder, params.inputPlaceholder);
      placeholder.value = '';
      placeholder.disabled = true;
      placeholder.selected = true;
      select.appendChild(placeholder);
    }

    return select;
  };

  renderInputType.radio = function (radio) {
    radio.textContent = '';
    return radio;
  };

  renderInputType.checkbox = function (checkboxContainer, params) {
    var checkbox = getInput(getContent(), 'checkbox');
    checkbox.value = 1;
    checkbox.id = swalClasses.checkbox;
    checkbox.checked = Boolean(params.inputValue);
    var label = checkboxContainer.querySelector('span');
    setInnerHtml(label, params.inputPlaceholder);
    return checkboxContainer;
  };

  renderInputType.textarea = function (textarea, params) {
    textarea.value = params.inputValue;
    setInputPlaceholder(textarea, params);

    if ('MutationObserver' in window) {
      // #1699
      var initialPopupWidth = parseInt(window.getComputedStyle(getPopup()).width);
      var popupPadding = parseInt(window.getComputedStyle(getPopup()).paddingLeft) + parseInt(window.getComputedStyle(getPopup()).paddingRight);

      var outputsize = function outputsize() {
        var contentWidth = textarea.offsetWidth + popupPadding;

        if (contentWidth > initialPopupWidth) {
          getPopup().style.width = "".concat(contentWidth, "px");
        } else {
          getPopup().style.width = null;
        }
      };

      new MutationObserver(outputsize).observe(textarea, {
        attributes: true,
        attributeFilter: ['style']
      });
    }

    return textarea;
  };

  var renderContent = function renderContent(instance, params) {
    var content = getContent().querySelector("#".concat(swalClasses.content)); // Content as HTML

    if (params.html) {
      parseHtmlToContainer(params.html, content);
      show(content, 'block'); // Content as plain text
    } else if (params.text) {
      content.textContent = params.text;
      show(content, 'block'); // No content
    } else {
      hide(content);
    }

    renderInput(instance, params); // Custom class

    applyCustomClass(getContent(), params, 'content');
  };

  var renderFooter = function renderFooter(instance, params) {
    var footer = getFooter();
    toggle(footer, params.footer);

    if (params.footer) {
      parseHtmlToContainer(params.footer, footer);
    } // Custom class


    applyCustomClass(footer, params, 'footer');
  };

  var renderCloseButton = function renderCloseButton(instance, params) {
    var closeButton = getCloseButton();
    setInnerHtml(closeButton, params.closeButtonHtml); // Custom class

    applyCustomClass(closeButton, params, 'closeButton');
    toggle(closeButton, params.showCloseButton);
    closeButton.setAttribute('aria-label', params.closeButtonAriaLabel);
  };

  var renderIcon = function renderIcon(instance, params) {
    var innerParams = privateProps.innerParams.get(instance); // if the given icon already rendered, apply the styling without re-rendering the icon

    if (innerParams && params.icon === innerParams.icon && getIcon()) {
      applyStyles(getIcon(), params);
      return;
    }

    hideAllIcons();

    if (!params.icon) {
      return;
    }

    if (Object.keys(iconTypes).indexOf(params.icon) !== -1) {
      var icon = elementBySelector(".".concat(swalClasses.icon, ".").concat(iconTypes[params.icon]));
      show(icon); // Custom or default content

      setContent(icon, params);
      applyStyles(icon, params); // Animate icon

      addClass(icon, params.showClass.icon);
    } else {
      error("Unknown icon! Expected \"success\", \"error\", \"warning\", \"info\" or \"question\", got \"".concat(params.icon, "\""));
    }
  };

  var hideAllIcons = function hideAllIcons() {
    var icons = getIcons();

    for (var i = 0; i < icons.length; i++) {
      hide(icons[i]);
    }
  };

  var applyStyles = function applyStyles(icon, params) {
    // Icon color
    setColor(icon, params); // Success icon background color

    adjustSuccessIconBackgoundColor(); // Custom class

    applyCustomClass(icon, params, 'icon');
  }; // Adjust success icon background color to match the popup background color


  var adjustSuccessIconBackgoundColor = function adjustSuccessIconBackgoundColor() {
    var popup = getPopup();
    var popupBackgroundColor = window.getComputedStyle(popup).getPropertyValue('background-color');
    var successIconParts = popup.querySelectorAll('[class^=swal2-success-circular-line], .swal2-success-fix');

    for (var i = 0; i < successIconParts.length; i++) {
      successIconParts[i].style.backgroundColor = popupBackgroundColor;
    }
  };

  var setContent = function setContent(icon, params) {
    icon.textContent = '';

    if (params.iconHtml) {
      setInnerHtml(icon, iconContent(params.iconHtml));
    } else if (params.icon === 'success') {
      setInnerHtml(icon, "\n      <div class=\"swal2-success-circular-line-left\"></div>\n      <span class=\"swal2-success-line-tip\"></span> <span class=\"swal2-success-line-long\"></span>\n      <div class=\"swal2-success-ring\"></div> <div class=\"swal2-success-fix\"></div>\n      <div class=\"swal2-success-circular-line-right\"></div>\n    ");
    } else if (params.icon === 'error') {
      setInnerHtml(icon, "\n      <span class=\"swal2-x-mark\">\n        <span class=\"swal2-x-mark-line-left\"></span>\n        <span class=\"swal2-x-mark-line-right\"></span>\n      </span>\n    ");
    } else {
      var defaultIconHtml = {
        question: '?',
        warning: '!',
        info: 'i'
      };
      setInnerHtml(icon, iconContent(defaultIconHtml[params.icon]));
    }
  };

  var setColor = function setColor(icon, params) {
    if (!params.iconColor) {
      return;
    }

    icon.style.color = params.iconColor;
    icon.style.borderColor = params.iconColor;

    for (var _i = 0, _arr = ['.swal2-success-line-tip', '.swal2-success-line-long', '.swal2-x-mark-line-left', '.swal2-x-mark-line-right']; _i < _arr.length; _i++) {
      var sel = _arr[_i];
      setStyle(icon, sel, 'backgroundColor', params.iconColor);
    }

    setStyle(icon, '.swal2-success-ring', 'borderColor', params.iconColor);
  };

  var iconContent = function iconContent(content) {
    return "<div class=\"".concat(swalClasses['icon-content'], "\">").concat(content, "</div>");
  };

  var renderImage = function renderImage(instance, params) {
    var image = getImage();

    if (!params.imageUrl) {
      return hide(image);
    }

    show(image, ''); // Src, alt

    image.setAttribute('src', params.imageUrl);
    image.setAttribute('alt', params.imageAlt); // Width, height

    applyNumericalStyle(image, 'width', params.imageWidth);
    applyNumericalStyle(image, 'height', params.imageHeight); // Class

    image.className = swalClasses.image;
    applyCustomClass(image, params, 'image');
  };

  var currentSteps = [];
  /*
   * Global function for chaining sweetAlert popups
   */

  var queue = function queue(steps) {
    var Swal = this;
    currentSteps = steps;

    var resetAndResolve = function resetAndResolve(resolve, value) {
      currentSteps = [];
      resolve(value);
    };

    var queueResult = [];
    return new Promise(function (resolve) {
      (function step(i, callback) {
        if (i < currentSteps.length) {
          document.body.setAttribute('data-swal2-queue-step', i);
          Swal.fire(currentSteps[i]).then(function (result) {
            if (typeof result.value !== 'undefined') {
              queueResult.push(result.value);
              step(i + 1, callback);
            } else {
              resetAndResolve(resolve, {
                dismiss: result.dismiss
              });
            }
          });
        } else {
          resetAndResolve(resolve, {
            value: queueResult
          });
        }
      })(0);
    });
  };
  /*
   * Global function for getting the index of current popup in queue
   */

  var getQueueStep = function getQueueStep() {
    return getContainer() && getContainer().getAttribute('data-queue-step');
  };
  /*
   * Global function for inserting a popup to the queue
   */

  var insertQueueStep = function insertQueueStep(step, index) {
    if (index && index < currentSteps.length) {
      return currentSteps.splice(index, 0, step);
    }

    return currentSteps.push(step);
  };
  /*
   * Global function for deleting a popup from the queue
   */

  var deleteQueueStep = function deleteQueueStep(index) {
    if (typeof currentSteps[index] !== 'undefined') {
      currentSteps.splice(index, 1);
    }
  };

  var createStepElement = function createStepElement(step) {
    var stepEl = document.createElement('li');
    addClass(stepEl, swalClasses['progress-step']);
    setInnerHtml(stepEl, step);
    return stepEl;
  };

  var createLineElement = function createLineElement(params) {
    var lineEl = document.createElement('li');
    addClass(lineEl, swalClasses['progress-step-line']);

    if (params.progressStepsDistance) {
      lineEl.style.width = params.progressStepsDistance;
    }

    return lineEl;
  };

  var renderProgressSteps = function renderProgressSteps(instance, params) {
    var progressStepsContainer = getProgressSteps();

    if (!params.progressSteps || params.progressSteps.length === 0) {
      return hide(progressStepsContainer);
    }

    show(progressStepsContainer);
    progressStepsContainer.textContent = '';
    var currentProgressStep = parseInt(params.currentProgressStep === undefined ? getQueueStep() : params.currentProgressStep);

    if (currentProgressStep >= params.progressSteps.length) {
      warn('Invalid currentProgressStep parameter, it should be less than progressSteps.length ' + '(currentProgressStep like JS arrays starts from 0)');
    }

    params.progressSteps.forEach(function (step, index) {
      var stepEl = createStepElement(step);
      progressStepsContainer.appendChild(stepEl);

      if (index === currentProgressStep) {
        addClass(stepEl, swalClasses['active-progress-step']);
      }

      if (index !== params.progressSteps.length - 1) {
        var lineEl = createLineElement(params);
        progressStepsContainer.appendChild(lineEl);
      }
    });
  };

  var renderTitle = function renderTitle(instance, params) {
    var title = getTitle();
    toggle(title, params.title || params.titleText);

    if (params.title) {
      parseHtmlToContainer(params.title, title);
    }

    if (params.titleText) {
      title.innerText = params.titleText;
    } // Custom class


    applyCustomClass(title, params, 'title');
  };

  var renderHeader = function renderHeader(instance, params) {
    var header = getHeader(); // Custom class

    applyCustomClass(header, params, 'header'); // Progress steps

    renderProgressSteps(instance, params); // Icon

    renderIcon(instance, params); // Image

    renderImage(instance, params); // Title

    renderTitle(instance, params); // Close button

    renderCloseButton(instance, params);
  };

  var renderPopup = function renderPopup(instance, params) {
    var popup = getPopup(); // Width

    applyNumericalStyle(popup, 'width', params.width); // Padding

    applyNumericalStyle(popup, 'padding', params.padding); // Background

    if (params.background) {
      popup.style.background = params.background;
    } // Classes


    addClasses(popup, params);
  };

  var addClasses = function addClasses(popup, params) {
    // Default Class + showClass when updating Swal.update({})
    popup.className = "".concat(swalClasses.popup, " ").concat(isVisible(popup) ? params.showClass.popup : '');

    if (params.toast) {
      addClass([document.documentElement, document.body], swalClasses['toast-shown']);
      addClass(popup, swalClasses.toast);
    } else {
      addClass(popup, swalClasses.modal);
    } // Custom class


    applyCustomClass(popup, params, 'popup');

    if (typeof params.customClass === 'string') {
      addClass(popup, params.customClass);
    } // Icon class (#1842)


    if (params.icon) {
      addClass(popup, swalClasses["icon-".concat(params.icon)]);
    }
  };

  var render = function render(instance, params) {
    renderPopup(instance, params);
    renderContainer(instance, params);
    renderHeader(instance, params);
    renderContent(instance, params);
    renderActions(instance, params);
    renderFooter(instance, params);

    if (typeof params.didRender === 'function') {
      params.didRender(getPopup());
    } else if (typeof params.onRender === 'function') {
      params.onRender(getPopup()); // @deprecated
    }
  };

  /*
   * Global function to determine if SweetAlert2 popup is shown
   */

  var isVisible$1 = function isVisible$$1() {
    return isVisible(getPopup());
  };
  /*
   * Global function to click 'Confirm' button
   */

  var clickConfirm = function clickConfirm() {
    return getConfirmButton() && getConfirmButton().click();
  };
  /*
   * Global function to click 'Deny' button
   */

  var clickDeny = function clickDeny() {
    return getDenyButton() && getDenyButton().click();
  };
  /*
   * Global function to click 'Cancel' button
   */

  var clickCancel = function clickCancel() {
    return getCancelButton() && getCancelButton().click();
  };

  function fire() {
    var Swal = this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _construct(Swal, args);
  }

  /**
   * Returns an extended version of `Swal` containing `params` as defaults.
   * Useful for reusing Swal configuration.
   *
   * For example:
   *
   * Before:
   * const textPromptOptions = { input: 'text', showCancelButton: true }
   * const {value: firstName} = await Swal.fire({ ...textPromptOptions, title: 'What is your first name?' })
   * const {value: lastName} = await Swal.fire({ ...textPromptOptions, title: 'What is your last name?' })
   *
   * After:
   * const TextPrompt = Swal.mixin({ input: 'text', showCancelButton: true })
   * const {value: firstName} = await TextPrompt('What is your first name?')
   * const {value: lastName} = await TextPrompt('What is your last name?')
   *
   * @param mixinParams
   */
  function mixin(mixinParams) {
    var MixinSwal = /*#__PURE__*/function (_this) {
      _inherits(MixinSwal, _this);

      var _super = _createSuper(MixinSwal);

      function MixinSwal() {
        _classCallCheck(this, MixinSwal);

        return _super.apply(this, arguments);
      }

      _createClass(MixinSwal, [{
        key: "_main",
        value: function _main(params) {
          return _get(_getPrototypeOf(MixinSwal.prototype), "_main", this).call(this, _extends({}, mixinParams, params));
        }
      }]);

      return MixinSwal;
    }(this);

    return MixinSwal;
  }

  /**
   * Show spinner instead of Confirm button
   */

  var showLoading = function showLoading() {
    var popup = getPopup();

    if (!popup) {
      Swal.fire();
    }

    popup = getPopup();
    var actions = getActions();
    var confirmButton = getConfirmButton();
    var loader = getLoader();
    show(actions);
    hide(confirmButton);
    addClass([popup, actions], swalClasses.loading);
    show(loader);
    popup.setAttribute('data-loading', true);
    popup.setAttribute('aria-busy', true);
    popup.focus();
  };

  var RESTORE_FOCUS_TIMEOUT = 100;

  var globalState = {};

  var focusPreviousActiveElement = function focusPreviousActiveElement() {
    if (globalState.previousActiveElement && globalState.previousActiveElement.focus) {
      globalState.previousActiveElement.focus();
      globalState.previousActiveElement = null;
    } else if (document.body) {
      document.body.focus();
    }
  }; // Restore previous active (focused) element


  var restoreActiveElement = function restoreActiveElement() {
    return new Promise(function (resolve) {
      var x = window.scrollX;
      var y = window.scrollY;
      globalState.restoreFocusTimeout = setTimeout(function () {
        focusPreviousActiveElement();
        resolve();
      }, RESTORE_FOCUS_TIMEOUT); // issues/900

      /* istanbul ignore if */

      if (typeof x !== 'undefined' && typeof y !== 'undefined') {
        // IE doesn't have scrollX/scrollY support
        window.scrollTo(x, y);
      }
    });
  };

  /**
   * If `timer` parameter is set, returns number of milliseconds of timer remained.
   * Otherwise, returns undefined.
   */

  var getTimerLeft = function getTimerLeft() {
    return globalState.timeout && globalState.timeout.getTimerLeft();
  };
  /**
   * Stop timer. Returns number of milliseconds of timer remained.
   * If `timer` parameter isn't set, returns undefined.
   */

  var stopTimer = function stopTimer() {
    if (globalState.timeout) {
      stopTimerProgressBar();
      return globalState.timeout.stop();
    }
  };
  /**
   * Resume timer. Returns number of milliseconds of timer remained.
   * If `timer` parameter isn't set, returns undefined.
   */

  var resumeTimer = function resumeTimer() {
    if (globalState.timeout) {
      var remaining = globalState.timeout.start();
      animateTimerProgressBar(remaining);
      return remaining;
    }
  };
  /**
   * Resume timer. Returns number of milliseconds of timer remained.
   * If `timer` parameter isn't set, returns undefined.
   */

  var toggleTimer = function toggleTimer() {
    var timer = globalState.timeout;
    return timer && (timer.running ? stopTimer() : resumeTimer());
  };
  /**
   * Increase timer. Returns number of milliseconds of an updated timer.
   * If `timer` parameter isn't set, returns undefined.
   */

  var increaseTimer = function increaseTimer(n) {
    if (globalState.timeout) {
      var remaining = globalState.timeout.increase(n);
      animateTimerProgressBar(remaining, true);
      return remaining;
    }
  };
  /**
   * Check if timer is running. Returns true if timer is running
   * or false if timer is paused or stopped.
   * If `timer` parameter isn't set, returns undefined
   */

  var isTimerRunning = function isTimerRunning() {
    return globalState.timeout && globalState.timeout.isRunning();
  };

  var defaultParams = {
    title: '',
    titleText: '',
    text: '',
    html: '',
    footer: '',
    icon: undefined,
    iconColor: undefined,
    iconHtml: undefined,
    toast: false,
    animation: true,
    showClass: {
      popup: 'swal2-show',
      backdrop: 'swal2-backdrop-show',
      icon: 'swal2-icon-show'
    },
    hideClass: {
      popup: 'swal2-hide',
      backdrop: 'swal2-backdrop-hide',
      icon: 'swal2-icon-hide'
    },
    customClass: undefined,
    target: 'body',
    backdrop: true,
    heightAuto: true,
    allowOutsideClick: true,
    allowEscapeKey: true,
    allowEnterKey: true,
    stopKeydownPropagation: true,
    keydownListenerCapture: false,
    showConfirmButton: true,
    showDenyButton: false,
    showCancelButton: false,
    preConfirm: undefined,
    confirmButtonText: 'OK',
    confirmButtonAriaLabel: '',
    confirmButtonColor: undefined,
    denyButtonText: 'No',
    denyButtonAriaLabel: '',
    denyButtonColor: undefined,
    cancelButtonText: 'Cancel',
    cancelButtonAriaLabel: '',
    cancelButtonColor: undefined,
    buttonsStyling: true,
    reverseButtons: false,
    focusConfirm: true,
    focusDeny: false,
    focusCancel: false,
    showCloseButton: false,
    closeButtonHtml: '&times;',
    closeButtonAriaLabel: 'Close this dialog',
    loaderHtml: '',
    showLoaderOnConfirm: false,
    imageUrl: undefined,
    imageWidth: undefined,
    imageHeight: undefined,
    imageAlt: '',
    timer: undefined,
    timerProgressBar: false,
    width: undefined,
    padding: undefined,
    background: undefined,
    input: undefined,
    inputPlaceholder: '',
    inputValue: '',
    inputOptions: {},
    inputAutoTrim: true,
    inputAttributes: {},
    inputValidator: undefined,
    validationMessage: undefined,
    grow: false,
    position: 'center',
    progressSteps: [],
    currentProgressStep: undefined,
    progressStepsDistance: undefined,
    onBeforeOpen: undefined,
    onOpen: undefined,
    willOpen: undefined,
    didOpen: undefined,
    onRender: undefined,
    didRender: undefined,
    onClose: undefined,
    onAfterClose: undefined,
    willClose: undefined,
    didClose: undefined,
    onDestroy: undefined,
    didDestroy: undefined,
    scrollbarPadding: true
  };
  var updatableParams = ['allowEscapeKey', 'allowOutsideClick', 'background', 'buttonsStyling', 'cancelButtonAriaLabel', 'cancelButtonColor', 'cancelButtonText', 'closeButtonAriaLabel', 'closeButtonHtml', 'confirmButtonAriaLabel', 'confirmButtonColor', 'confirmButtonText', 'currentProgressStep', 'customClass', 'denyButtonAriaLabel', 'denyButtonColor', 'denyButtonText', 'didClose', 'didDestroy', 'footer', 'hideClass', 'html', 'icon', 'iconColor', 'imageAlt', 'imageHeight', 'imageUrl', 'imageWidth', 'onAfterClose', 'onClose', 'onDestroy', 'progressSteps', 'reverseButtons', 'showCancelButton', 'showCloseButton', 'showConfirmButton', 'showDenyButton', 'text', 'title', 'titleText', 'willClose'];
  var deprecatedParams = {
    animation: 'showClass" and "hideClass',
    onBeforeOpen: 'willOpen',
    onOpen: 'didOpen',
    onRender: 'didRender',
    onClose: 'willClose',
    onAfterClose: 'didClose',
    onDestroy: 'didDestroy'
  };
  var toastIncompatibleParams = ['allowOutsideClick', 'allowEnterKey', 'backdrop', 'focusConfirm', 'focusDeny', 'focusCancel', 'heightAuto', 'keydownListenerCapture'];
  /**
   * Is valid parameter
   * @param {String} paramName
   */

  var isValidParameter = function isValidParameter(paramName) {
    return Object.prototype.hasOwnProperty.call(defaultParams, paramName);
  };
  /**
   * Is valid parameter for Swal.update() method
   * @param {String} paramName
   */

  var isUpdatableParameter = function isUpdatableParameter(paramName) {
    return updatableParams.indexOf(paramName) !== -1;
  };
  /**
   * Is deprecated parameter
   * @param {String} paramName
   */

  var isDeprecatedParameter = function isDeprecatedParameter(paramName) {
    return deprecatedParams[paramName];
  };

  var checkIfParamIsValid = function checkIfParamIsValid(param) {
    if (!isValidParameter(param)) {
      warn("Unknown parameter \"".concat(param, "\""));
    }
  };

  var checkIfToastParamIsValid = function checkIfToastParamIsValid(param) {
    if (toastIncompatibleParams.indexOf(param) !== -1) {
      warn("The parameter \"".concat(param, "\" is incompatible with toasts"));
    }
  };

  var checkIfParamIsDeprecated = function checkIfParamIsDeprecated(param) {
    if (isDeprecatedParameter(param)) {
      warnAboutDeprecation(param, isDeprecatedParameter(param));
    }
  };
  /**
   * Show relevant warnings for given params
   *
   * @param params
   */


  var showWarningsForParams = function showWarningsForParams(params) {
    for (var param in params) {
      checkIfParamIsValid(param);

      if (params.toast) {
        checkIfToastParamIsValid(param);
      }

      checkIfParamIsDeprecated(param);
    }
  };



  var staticMethods = /*#__PURE__*/Object.freeze({
    isValidParameter: isValidParameter,
    isUpdatableParameter: isUpdatableParameter,
    isDeprecatedParameter: isDeprecatedParameter,
    argsToParams: argsToParams,
    isVisible: isVisible$1,
    clickConfirm: clickConfirm,
    clickDeny: clickDeny,
    clickCancel: clickCancel,
    getContainer: getContainer,
    getPopup: getPopup,
    getTitle: getTitle,
    getContent: getContent,
    getHtmlContainer: getHtmlContainer,
    getImage: getImage,
    getIcon: getIcon,
    getIcons: getIcons,
    getCloseButton: getCloseButton,
    getActions: getActions,
    getConfirmButton: getConfirmButton,
    getDenyButton: getDenyButton,
    getCancelButton: getCancelButton,
    getHeader: getHeader,
    getFooter: getFooter,
    getTimerProgressBar: getTimerProgressBar,
    getFocusableElements: getFocusableElements,
    getValidationMessage: getValidationMessage,
    isLoading: isLoading,
    fire: fire,
    mixin: mixin,
    queue: queue,
    getQueueStep: getQueueStep,
    insertQueueStep: insertQueueStep,
    deleteQueueStep: deleteQueueStep,
    showLoading: showLoading,
    enableLoading: showLoading,
    getTimerLeft: getTimerLeft,
    stopTimer: stopTimer,
    resumeTimer: resumeTimer,
    toggleTimer: toggleTimer,
    increaseTimer: increaseTimer,
    isTimerRunning: isTimerRunning
  });

  /**
   * Enables buttons and hide loader.
   */

  function hideLoading() {
    // do nothing if popup is closed
    var innerParams = privateProps.innerParams.get(this);

    if (!innerParams) {
      return;
    }

    var domCache = privateProps.domCache.get(this);
    hide(domCache.loader);

    if (innerParams.showConfirmButton) {
      show(domCache.confirmButton);
    } else if (!innerParams.showConfirmButton && !innerParams.showCancelButton) {
      hide(domCache.actions);
    }

    removeClass([domCache.popup, domCache.actions], swalClasses.loading);
    domCache.popup.removeAttribute('aria-busy');
    domCache.popup.removeAttribute('data-loading');
    domCache.confirmButton.disabled = false;
    domCache.denyButton.disabled = false;
    domCache.cancelButton.disabled = false;
  }

  function getInput$1(instance) {
    var innerParams = privateProps.innerParams.get(instance || this);
    var domCache = privateProps.domCache.get(instance || this);

    if (!domCache) {
      return null;
    }

    return getInput(domCache.content, innerParams.input);
  }

  var fixScrollbar = function fixScrollbar() {
    // for queues, do not do this more than once
    if (states.previousBodyPadding !== null) {
      return;
    } // if the body has overflow


    if (document.body.scrollHeight > window.innerHeight) {
      // add padding so the content doesn't shift after removal of scrollbar
      states.previousBodyPadding = parseInt(window.getComputedStyle(document.body).getPropertyValue('padding-right'));
      document.body.style.paddingRight = "".concat(states.previousBodyPadding + measureScrollbar(), "px");
    }
  };
  var undoScrollbar = function undoScrollbar() {
    if (states.previousBodyPadding !== null) {
      document.body.style.paddingRight = "".concat(states.previousBodyPadding, "px");
      states.previousBodyPadding = null;
    }
  };

  /* istanbul ignore file */

  var iOSfix = function iOSfix() {
    var iOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream || navigator.platform === 'MacIntel' && navigator.maxTouchPoints > 1;

    if (iOS && !hasClass(document.body, swalClasses.iosfix)) {
      var offset = document.body.scrollTop;
      document.body.style.top = "".concat(offset * -1, "px");
      addClass(document.body, swalClasses.iosfix);
      lockBodyScroll();
      addBottomPaddingForTallPopups(); // #1948
    }
  };

  var addBottomPaddingForTallPopups = function addBottomPaddingForTallPopups() {
    var safari = !navigator.userAgent.match(/(CriOS|FxiOS|EdgiOS|YaBrowser|UCBrowser)/i);

    if (safari) {
      var bottomPanelHeight = 44;

      if (getPopup().scrollHeight > window.innerHeight - bottomPanelHeight) {
        getContainer().style.paddingBottom = "".concat(bottomPanelHeight, "px");
      }
    }
  };

  var lockBodyScroll = function lockBodyScroll() {
    // #1246
    var container = getContainer();
    var preventTouchMove;

    container.ontouchstart = function (e) {
      preventTouchMove = shouldPreventTouchMove(e.target);
    };

    container.ontouchmove = function (e) {
      if (preventTouchMove) {
        e.preventDefault();
        e.stopPropagation();
      }
    };
  };

  var shouldPreventTouchMove = function shouldPreventTouchMove(target) {
    var container = getContainer();

    if (target === container) {
      return true;
    }

    if (!isScrollable(container) && target.tagName !== 'INPUT' && // #1603
    !(isScrollable(getContent()) && // #1944
    getContent().contains(target))) {
      return true;
    }

    return false;
  };

  var undoIOSfix = function undoIOSfix() {
    if (hasClass(document.body, swalClasses.iosfix)) {
      var offset = parseInt(document.body.style.top, 10);
      removeClass(document.body, swalClasses.iosfix);
      document.body.style.top = '';
      document.body.scrollTop = offset * -1;
    }
  };

  /* istanbul ignore file */

  var isIE11 = function isIE11() {
    return !!window.MSInputMethodContext && !!document.documentMode;
  }; // Fix IE11 centering sweetalert2/issues/933


  var fixVerticalPositionIE = function fixVerticalPositionIE() {
    var container = getContainer();
    var popup = getPopup();
    container.style.removeProperty('align-items');

    if (popup.offsetTop < 0) {
      container.style.alignItems = 'flex-start';
    }
  };

  var IEfix = function IEfix() {
    if (typeof window !== 'undefined' && isIE11()) {
      fixVerticalPositionIE();
      window.addEventListener('resize', fixVerticalPositionIE);
    }
  };
  var undoIEfix = function undoIEfix() {
    if (typeof window !== 'undefined' && isIE11()) {
      window.removeEventListener('resize', fixVerticalPositionIE);
    }
  };

  // Adding aria-hidden="true" to elements outside of the active modal dialog ensures that
  // elements not within the active modal dialog will not be surfaced if a user opens a screen
  // reader’s list of elements (headings, form controls, landmarks, etc.) in the document.

  var setAriaHidden = function setAriaHidden() {
    var bodyChildren = toArray(document.body.children);
    bodyChildren.forEach(function (el) {
      if (el === getContainer() || contains(el, getContainer())) {
        return;
      }

      if (el.hasAttribute('aria-hidden')) {
        el.setAttribute('data-previous-aria-hidden', el.getAttribute('aria-hidden'));
      }

      el.setAttribute('aria-hidden', 'true');
    });
  };
  var unsetAriaHidden = function unsetAriaHidden() {
    var bodyChildren = toArray(document.body.children);
    bodyChildren.forEach(function (el) {
      if (el.hasAttribute('data-previous-aria-hidden')) {
        el.setAttribute('aria-hidden', el.getAttribute('data-previous-aria-hidden'));
        el.removeAttribute('data-previous-aria-hidden');
      } else {
        el.removeAttribute('aria-hidden');
      }
    });
  };

  /**
   * This module containts `WeakMap`s for each effectively-"private  property" that a `Swal` has.
   * For example, to set the private property "foo" of `this` to "bar", you can `privateProps.foo.set(this, 'bar')`
   * This is the approach that Babel will probably take to implement private methods/fields
   *   https://github.com/tc39/proposal-private-methods
   *   https://github.com/babel/babel/pull/7555
   * Once we have the changes from that PR in Babel, and our core class fits reasonable in *one module*
   *   then we can use that language feature.
   */
  var privateMethods = {
    swalPromiseResolve: new WeakMap()
  };

  /*
   * Instance method to close sweetAlert
   */

  function removePopupAndResetState(instance, container, isToast$$1, didClose) {
    if (isToast$$1) {
      triggerDidCloseAndDispose(instance, didClose);
    } else {
      restoreActiveElement().then(function () {
        return triggerDidCloseAndDispose(instance, didClose);
      });
      globalState.keydownTarget.removeEventListener('keydown', globalState.keydownHandler, {
        capture: globalState.keydownListenerCapture
      });
      globalState.keydownHandlerAdded = false;
    }

    if (container.parentNode && !document.body.getAttribute('data-swal2-queue-step')) {
      container.parentNode.removeChild(container);
    }

    if (isModal()) {
      undoScrollbar();
      undoIOSfix();
      undoIEfix();
      unsetAriaHidden();
    }

    removeBodyClasses();
  }

  function removeBodyClasses() {
    removeClass([document.documentElement, document.body], [swalClasses.shown, swalClasses['height-auto'], swalClasses['no-backdrop'], swalClasses['toast-shown'], swalClasses['toast-column']]);
  }

  function close(resolveValue) {
    var popup = getPopup();

    if (!popup) {
      return;
    }

    resolveValue = prepareResolveValue(resolveValue);
    var innerParams = privateProps.innerParams.get(this);

    if (!innerParams || hasClass(popup, innerParams.hideClass.popup)) {
      return;
    }

    var swalPromiseResolve = privateMethods.swalPromiseResolve.get(this);
    removeClass(popup, innerParams.showClass.popup);
    addClass(popup, innerParams.hideClass.popup);
    var backdrop = getContainer();
    removeClass(backdrop, innerParams.showClass.backdrop);
    addClass(backdrop, innerParams.hideClass.backdrop);
    handlePopupAnimation(this, popup, innerParams); // Resolve Swal promise

    swalPromiseResolve(resolveValue);
  }

  var prepareResolveValue = function prepareResolveValue(resolveValue) {
    // When user calls Swal.close()
    if (typeof resolveValue === 'undefined') {
      return {
        isConfirmed: false,
        isDenied: false,
        isDismissed: true
      };
    }

    return _extends({
      isConfirmed: false,
      isDenied: false,
      isDismissed: false
    }, resolveValue);
  };

  var handlePopupAnimation = function handlePopupAnimation(instance, popup, innerParams) {
    var container = getContainer(); // If animation is supported, animate

    var animationIsSupported = animationEndEvent && hasCssAnimation(popup);
    var onClose = innerParams.onClose,
        onAfterClose = innerParams.onAfterClose,
        willClose = innerParams.willClose,
        didClose = innerParams.didClose;
    runDidClose(popup, willClose, onClose);

    if (animationIsSupported) {
      animatePopup(instance, popup, container, didClose !== null && didClose !== void 0 ? didClose : onAfterClose);
    } else {
      // Otherwise, remove immediately
      removePopupAndResetState(instance, container, isToast(), didClose !== null && didClose !== void 0 ? didClose : onAfterClose);
    }
  };

  var runDidClose = function runDidClose(popup, willClose, onClose) {
    if (willClose !== null && typeof willClose === 'function') {
      willClose(popup);
    } else if (onClose !== null && typeof onClose === 'function') {
      onClose(popup); // @deprecated
    }
  };

  var animatePopup = function animatePopup(instance, popup, container, didClose) {
    globalState.swalCloseEventFinishedCallback = removePopupAndResetState.bind(null, instance, container, isToast(), didClose);
    popup.addEventListener(animationEndEvent, function (e) {
      if (e.target === popup) {
        globalState.swalCloseEventFinishedCallback();
        delete globalState.swalCloseEventFinishedCallback;
      }
    });
  };

  var triggerDidCloseAndDispose = function triggerDidCloseAndDispose(instance, didClose) {
    setTimeout(function () {
      if (typeof didClose === 'function') {
        didClose();
      }

      instance._destroy();
    });
  };

  function setButtonsDisabled(instance, buttons, disabled) {
    var domCache = privateProps.domCache.get(instance);
    buttons.forEach(function (button) {
      domCache[button].disabled = disabled;
    });
  }

  function setInputDisabled(input, disabled) {
    if (!input) {
      return false;
    }

    if (input.type === 'radio') {
      var radiosContainer = input.parentNode.parentNode;
      var radios = radiosContainer.querySelectorAll('input');

      for (var i = 0; i < radios.length; i++) {
        radios[i].disabled = disabled;
      }
    } else {
      input.disabled = disabled;
    }
  }

  function enableButtons() {
    setButtonsDisabled(this, ['confirmButton', 'denyButton', 'cancelButton'], false);
  }
  function disableButtons() {
    setButtonsDisabled(this, ['confirmButton', 'denyButton', 'cancelButton'], true);
  }
  function enableInput() {
    return setInputDisabled(this.getInput(), false);
  }
  function disableInput() {
    return setInputDisabled(this.getInput(), true);
  }

  function showValidationMessage(error) {
    var domCache = privateProps.domCache.get(this);
    setInnerHtml(domCache.validationMessage, error);
    var popupComputedStyle = window.getComputedStyle(domCache.popup);
    domCache.validationMessage.style.marginLeft = "-".concat(popupComputedStyle.getPropertyValue('padding-left'));
    domCache.validationMessage.style.marginRight = "-".concat(popupComputedStyle.getPropertyValue('padding-right'));
    show(domCache.validationMessage);
    var input = this.getInput();

    if (input) {
      input.setAttribute('aria-invalid', true);
      input.setAttribute('aria-describedBy', swalClasses['validation-message']);
      focusInput(input);
      addClass(input, swalClasses.inputerror);
    }
  } // Hide block with validation message

  function resetValidationMessage$1() {
    var domCache = privateProps.domCache.get(this);

    if (domCache.validationMessage) {
      hide(domCache.validationMessage);
    }

    var input = this.getInput();

    if (input) {
      input.removeAttribute('aria-invalid');
      input.removeAttribute('aria-describedBy');
      removeClass(input, swalClasses.inputerror);
    }
  }

  function getProgressSteps$1() {
    var domCache = privateProps.domCache.get(this);
    return domCache.progressSteps;
  }

  var Timer = /*#__PURE__*/function () {
    function Timer(callback, delay) {
      _classCallCheck(this, Timer);

      this.callback = callback;
      this.remaining = delay;
      this.running = false;
      this.start();
    }

    _createClass(Timer, [{
      key: "start",
      value: function start() {
        if (!this.running) {
          this.running = true;
          this.started = new Date();
          this.id = setTimeout(this.callback, this.remaining);
        }

        return this.remaining;
      }
    }, {
      key: "stop",
      value: function stop() {
        if (this.running) {
          this.running = false;
          clearTimeout(this.id);
          this.remaining -= new Date() - this.started;
        }

        return this.remaining;
      }
    }, {
      key: "increase",
      value: function increase(n) {
        var running = this.running;

        if (running) {
          this.stop();
        }

        this.remaining += n;

        if (running) {
          this.start();
        }

        return this.remaining;
      }
    }, {
      key: "getTimerLeft",
      value: function getTimerLeft() {
        if (this.running) {
          this.stop();
          this.start();
        }

        return this.remaining;
      }
    }, {
      key: "isRunning",
      value: function isRunning() {
        return this.running;
      }
    }]);

    return Timer;
  }();

  var defaultInputValidators = {
    email: function email(string, validationMessage) {
      return /^[a-zA-Z0-9.+_-]+@[a-zA-Z0-9.-]+\.[a-zA-Z0-9-]{2,24}$/.test(string) ? Promise.resolve() : Promise.resolve(validationMessage || 'Invalid email address');
    },
    url: function url(string, validationMessage) {
      // taken from https://stackoverflow.com/a/3809435 with a small change from #1306 and #2013
      return /^https?:\/\/(www\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\.[a-z]{2,63}\b([-a-zA-Z0-9@:%_+.~#?&/=]*)$/.test(string) ? Promise.resolve() : Promise.resolve(validationMessage || 'Invalid URL');
    }
  };

  function setDefaultInputValidators(params) {
    // Use default `inputValidator` for supported input types if not provided
    if (!params.inputValidator) {
      Object.keys(defaultInputValidators).forEach(function (key) {
        if (params.input === key) {
          params.inputValidator = defaultInputValidators[key];
        }
      });
    }
  }

  function validateCustomTargetElement(params) {
    // Determine if the custom target element is valid
    if (!params.target || typeof params.target === 'string' && !document.querySelector(params.target) || typeof params.target !== 'string' && !params.target.appendChild) {
      warn('Target parameter is not valid, defaulting to "body"');
      params.target = 'body';
    }
  }
  /**
   * Set type, text and actions on popup
   *
   * @param params
   * @returns {boolean}
   */


  function setParameters(params) {
    setDefaultInputValidators(params); // showLoaderOnConfirm && preConfirm

    if (params.showLoaderOnConfirm && !params.preConfirm) {
      warn('showLoaderOnConfirm is set to true, but preConfirm is not defined.\n' + 'showLoaderOnConfirm should be used together with preConfirm, see usage example:\n' + 'https://sweetalert2.github.io/#ajax-request');
    } // params.animation will be actually used in renderPopup.js
    // but in case when params.animation is a function, we need to call that function
    // before popup (re)initialization, so it'll be possible to check Swal.isVisible()
    // inside the params.animation function


    params.animation = callIfFunction(params.animation);
    validateCustomTargetElement(params); // Replace newlines with <br> in title

    if (typeof params.title === 'string') {
      params.title = params.title.split('\n').join('<br />');
    }

    init(params);
  }

  var SHOW_CLASS_TIMEOUT = 10;
  /**
   * Open popup, add necessary classes and styles, fix scrollbar
   *
   * @param params
   */

  var openPopup = function openPopup(params) {
    var container = getContainer();
    var popup = getPopup();

    if (typeof params.willOpen === 'function') {
      params.willOpen(popup);
    } else if (typeof params.onBeforeOpen === 'function') {
      params.onBeforeOpen(popup); // @deprecated
    }

    var bodyStyles = window.getComputedStyle(document.body);
    var initialBodyOverflow = bodyStyles.overflowY;
    addClasses$1(container, popup, params); // scrolling is 'hidden' until animation is done, after that 'auto'

    setTimeout(function () {
      setScrollingVisibility(container, popup);
    }, SHOW_CLASS_TIMEOUT);

    if (isModal()) {
      fixScrollContainer(container, params.scrollbarPadding, initialBodyOverflow);
      setAriaHidden();
    }

    if (!isToast() && !globalState.previousActiveElement) {
      globalState.previousActiveElement = document.activeElement;
    }

    runDidOpen(popup, params);
    removeClass(container, swalClasses['no-transition']);
  };

  var runDidOpen = function runDidOpen(popup, params) {
    if (typeof params.didOpen === 'function') {
      setTimeout(function () {
        return params.didOpen(popup);
      });
    } else if (typeof params.onOpen === 'function') {
      setTimeout(function () {
        return params.onOpen(popup);
      }); // @deprecated
    }
  };

  var swalOpenAnimationFinished = function swalOpenAnimationFinished(event) {
    var popup = getPopup();

    if (event.target !== popup) {
      return;
    }

    var container = getContainer();
    popup.removeEventListener(animationEndEvent, swalOpenAnimationFinished);
    container.style.overflowY = 'auto';
  };

  var setScrollingVisibility = function setScrollingVisibility(container, popup) {
    if (animationEndEvent && hasCssAnimation(popup)) {
      container.style.overflowY = 'hidden';
      popup.addEventListener(animationEndEvent, swalOpenAnimationFinished);
    } else {
      container.style.overflowY = 'auto';
    }
  };

  var fixScrollContainer = function fixScrollContainer(container, scrollbarPadding, initialBodyOverflow) {
    iOSfix();
    IEfix();

    if (scrollbarPadding && initialBodyOverflow !== 'hidden') {
      fixScrollbar();
    } // sweetalert2/issues/1247


    setTimeout(function () {
      container.scrollTop = 0;
    });
  };

  var addClasses$1 = function addClasses(container, popup, params) {
    addClass(container, params.showClass.backdrop); // the workaround with setting/unsetting opacity is needed for #2019 and 2059

    popup.style.setProperty('opacity', '0', 'important');
    show(popup);
    setTimeout(function () {
      // Animate popup right after showing it
      addClass(popup, params.showClass.popup); // and remove the opacity workaround

      popup.style.removeProperty('opacity');
    }, SHOW_CLASS_TIMEOUT); // 10ms in order to fix #2062

    addClass([document.documentElement, document.body], swalClasses.shown);

    if (params.heightAuto && params.backdrop && !params.toast) {
      addClass([document.documentElement, document.body], swalClasses['height-auto']);
    }
  };

  var handleInputOptionsAndValue = function handleInputOptionsAndValue(instance, params) {
    if (params.input === 'select' || params.input === 'radio') {
      handleInputOptions(instance, params);
    } else if (['text', 'email', 'number', 'tel', 'textarea'].indexOf(params.input) !== -1 && (hasToPromiseFn(params.inputValue) || isPromise(params.inputValue))) {
      handleInputValue(instance, params);
    }
  };
  var getInputValue = function getInputValue(instance, innerParams) {
    var input = instance.getInput();

    if (!input) {
      return null;
    }

    switch (innerParams.input) {
      case 'checkbox':
        return getCheckboxValue(input);

      case 'radio':
        return getRadioValue(input);

      case 'file':
        return getFileValue(input);

      default:
        return innerParams.inputAutoTrim ? input.value.trim() : input.value;
    }
  };

  var getCheckboxValue = function getCheckboxValue(input) {
    return input.checked ? 1 : 0;
  };

  var getRadioValue = function getRadioValue(input) {
    return input.checked ? input.value : null;
  };

  var getFileValue = function getFileValue(input) {
    return input.files.length ? input.getAttribute('multiple') !== null ? input.files : input.files[0] : null;
  };

  var handleInputOptions = function handleInputOptions(instance, params) {
    var content = getContent();

    var processInputOptions = function processInputOptions(inputOptions) {
      return populateInputOptions[params.input](content, formatInputOptions(inputOptions), params);
    };

    if (hasToPromiseFn(params.inputOptions) || isPromise(params.inputOptions)) {
      showLoading();
      asPromise(params.inputOptions).then(function (inputOptions) {
        instance.hideLoading();
        processInputOptions(inputOptions);
      });
    } else if (_typeof(params.inputOptions) === 'object') {
      processInputOptions(params.inputOptions);
    } else {
      error("Unexpected type of inputOptions! Expected object, Map or Promise, got ".concat(_typeof(params.inputOptions)));
    }
  };

  var handleInputValue = function handleInputValue(instance, params) {
    var input = instance.getInput();
    hide(input);
    asPromise(params.inputValue).then(function (inputValue) {
      input.value = params.input === 'number' ? parseFloat(inputValue) || 0 : "".concat(inputValue);
      show(input);
      input.focus();
      instance.hideLoading();
    })["catch"](function (err) {
      error("Error in inputValue promise: ".concat(err));
      input.value = '';
      show(input);
      input.focus();
      instance.hideLoading();
    });
  };

  var populateInputOptions = {
    select: function select(content, inputOptions, params) {
      var select = getChildByClass(content, swalClasses.select);

      var renderOption = function renderOption(parent, optionLabel, optionValue) {
        var option = document.createElement('option');
        option.value = optionValue;
        setInnerHtml(option, optionLabel);

        if (params.inputValue.toString() === optionValue.toString()) {
          option.selected = true;
        }

        parent.appendChild(option);
      };

      inputOptions.forEach(function (inputOption) {
        var optionValue = inputOption[0];
        var optionLabel = inputOption[1]; // <optgroup> spec:
        // https://www.w3.org/TR/html401/interact/forms.html#h-17.6
        // "...all OPTGROUP elements must be specified directly within a SELECT element (i.e., groups may not be nested)..."
        // check whether this is a <optgroup>

        if (Array.isArray(optionLabel)) {
          // if it is an array, then it is an <optgroup>
          var optgroup = document.createElement('optgroup');
          optgroup.label = optionValue;
          optgroup.disabled = false; // not configurable for now

          select.appendChild(optgroup);
          optionLabel.forEach(function (o) {
            return renderOption(optgroup, o[1], o[0]);
          });
        } else {
          // case of <option>
          renderOption(select, optionLabel, optionValue);
        }
      });
      select.focus();
    },
    radio: function radio(content, inputOptions, params) {
      var radio = getChildByClass(content, swalClasses.radio);
      inputOptions.forEach(function (inputOption) {
        var radioValue = inputOption[0];
        var radioLabel = inputOption[1];
        var radioInput = document.createElement('input');
        var radioLabelElement = document.createElement('label');
        radioInput.type = 'radio';
        radioInput.name = swalClasses.radio;
        radioInput.value = radioValue;

        if (params.inputValue.toString() === radioValue.toString()) {
          radioInput.checked = true;
        }

        var label = document.createElement('span');
        setInnerHtml(label, radioLabel);
        label.className = swalClasses.label;
        radioLabelElement.appendChild(radioInput);
        radioLabelElement.appendChild(label);
        radio.appendChild(radioLabelElement);
      });
      var radios = radio.querySelectorAll('input');

      if (radios.length) {
        radios[0].focus();
      }
    }
  };
  /**
   * Converts `inputOptions` into an array of `[value, label]`s
   * @param inputOptions
   */

  var formatInputOptions = function formatInputOptions(inputOptions) {
    var result = [];

    if (typeof Map !== 'undefined' && inputOptions instanceof Map) {
      inputOptions.forEach(function (value, key) {
        var valueFormatted = value;

        if (_typeof(valueFormatted) === 'object') {
          // case of <optgroup>
          valueFormatted = formatInputOptions(valueFormatted);
        }

        result.push([key, valueFormatted]);
      });
    } else {
      Object.keys(inputOptions).forEach(function (key) {
        var valueFormatted = inputOptions[key];

        if (_typeof(valueFormatted) === 'object') {
          // case of <optgroup>
          valueFormatted = formatInputOptions(valueFormatted);
        }

        result.push([key, valueFormatted]);
      });
    }

    return result;
  };

  var handleConfirmButtonClick = function handleConfirmButtonClick(instance, innerParams) {
    instance.disableButtons();

    if (innerParams.input) {
      handleConfirmWithInput(instance, innerParams);
    } else {
      confirm(instance, innerParams, true);
    }
  };
  var handleDenyButtonClick = function handleDenyButtonClick(instance) {
    instance.disableButtons(); // here we could add preDeny in future, if needed

    deny(instance);
  };
  var handleCancelButtonClick = function handleCancelButtonClick(instance, dismissWith) {
    instance.disableButtons();
    dismissWith(DismissReason.cancel);
  };

  var handleConfirmWithInput = function handleConfirmWithInput(instance, innerParams) {
    var inputValue = getInputValue(instance, innerParams);

    if (innerParams.inputValidator) {
      instance.disableInput();
      var validationPromise = Promise.resolve().then(function () {
        return asPromise(innerParams.inputValidator(inputValue, innerParams.validationMessage));
      });
      validationPromise.then(function (validationMessage) {
        instance.enableButtons();
        instance.enableInput();

        if (validationMessage) {
          instance.showValidationMessage(validationMessage);
        } else {
          confirm(instance, innerParams, inputValue);
        }
      });
    } else if (!instance.getInput().checkValidity()) {
      instance.enableButtons();
      instance.showValidationMessage(innerParams.validationMessage);
    } else {
      confirm(instance, innerParams, inputValue);
    }
  };

  var deny = function deny(instance) {
    instance.closePopup({
      isDenied: true,
      value: false
    });
  };

  var succeedWith = function succeedWith(instance, value) {
    instance.closePopup({
      isConfirmed: true,
      value: value
    });
  };

  var confirm = function confirm(instance, innerParams, value) {
    if (innerParams.showLoaderOnConfirm) {
      showLoading(); // TODO: make showLoading an *instance* method
    }

    if (innerParams.preConfirm) {
      instance.resetValidationMessage();
      var preConfirmPromise = Promise.resolve().then(function () {
        return asPromise(innerParams.preConfirm(value, innerParams.validationMessage));
      });
      preConfirmPromise.then(function (preConfirmValue) {
        if (isVisible(getValidationMessage()) || preConfirmValue === false) {
          instance.hideLoading();
        } else {
          succeedWith(instance, typeof preConfirmValue === 'undefined' ? value : preConfirmValue);
        }
      });
    } else {
      succeedWith(instance, value);
    }
  };

  var addKeydownHandler = function addKeydownHandler(instance, globalState, innerParams, dismissWith) {
    if (globalState.keydownTarget && globalState.keydownHandlerAdded) {
      globalState.keydownTarget.removeEventListener('keydown', globalState.keydownHandler, {
        capture: globalState.keydownListenerCapture
      });
      globalState.keydownHandlerAdded = false;
    }

    if (!innerParams.toast) {
      globalState.keydownHandler = function (e) {
        return keydownHandler(instance, e, dismissWith);
      };

      globalState.keydownTarget = innerParams.keydownListenerCapture ? window : getPopup();
      globalState.keydownListenerCapture = innerParams.keydownListenerCapture;
      globalState.keydownTarget.addEventListener('keydown', globalState.keydownHandler, {
        capture: globalState.keydownListenerCapture
      });
      globalState.keydownHandlerAdded = true;
    }
  }; // Focus handling

  var setFocus = function setFocus(innerParams, index, increment) {
    var focusableElements = getFocusableElements(); // search for visible elements and select the next possible match

    for (var i = 0; i < focusableElements.length; i++) {
      index = index + increment; // rollover to first item

      if (index === focusableElements.length) {
        index = 0; // go to last item
      } else if (index === -1) {
        index = focusableElements.length - 1;
      }

      return focusableElements[index].focus();
    } // no visible focusable elements, focus the popup


    getPopup().focus();
  };
  var arrowKeysNextButton = ['ArrowRight', 'ArrowDown', 'Right', 'Down' // IE11
  ];
  var arrowKeysPreviousButton = ['ArrowLeft', 'ArrowUp', 'Left', 'Up' // IE11
  ];
  var escKeys = ['Escape', 'Esc' // IE11
  ];

  var keydownHandler = function keydownHandler(instance, e, dismissWith) {
    var innerParams = privateProps.innerParams.get(instance);

    if (innerParams.stopKeydownPropagation) {
      e.stopPropagation();
    } // ENTER


    if (e.key === 'Enter') {
      handleEnter(instance, e, innerParams); // TAB
    } else if (e.key === 'Tab') {
      handleTab(e, innerParams); // ARROWS - switch focus between buttons
    } else if ([].concat(arrowKeysNextButton, arrowKeysPreviousButton).indexOf(e.key) !== -1) {
      handleArrows(e.key); // ESC
    } else if (escKeys.indexOf(e.key) !== -1) {
      handleEsc(e, innerParams, dismissWith);
    }
  };

  var handleEnter = function handleEnter(instance, e, innerParams) {
    // #720 #721
    if (e.isComposing) {
      return;
    }

    if (e.target && instance.getInput() && e.target.outerHTML === instance.getInput().outerHTML) {
      if (['textarea', 'file'].indexOf(innerParams.input) !== -1) {
        return; // do not submit
      }

      clickConfirm();
      e.preventDefault();
    }
  };

  var handleTab = function handleTab(e, innerParams) {
    var targetElement = e.target;
    var focusableElements = getFocusableElements();
    var btnIndex = -1;

    for (var i = 0; i < focusableElements.length; i++) {
      if (targetElement === focusableElements[i]) {
        btnIndex = i;
        break;
      }
    }

    if (!e.shiftKey) {
      // Cycle to the next button
      setFocus(innerParams, btnIndex, 1);
    } else {
      // Cycle to the prev button
      setFocus(innerParams, btnIndex, -1);
    }

    e.stopPropagation();
    e.preventDefault();
  };

  var handleArrows = function handleArrows(key) {
    var confirmButton = getConfirmButton();
    var denyButton = getDenyButton();
    var cancelButton = getCancelButton();

    if (!([confirmButton, denyButton, cancelButton].indexOf(document.activeElement) !== -1)) {
      return;
    }

    var sibling = arrowKeysNextButton.indexOf(key) !== -1 ? 'nextElementSibling' : 'previousElementSibling';
    var buttonToFocus = document.activeElement[sibling];

    if (buttonToFocus) {
      buttonToFocus.focus();
    }
  };

  var handleEsc = function handleEsc(e, innerParams, dismissWith) {
    if (callIfFunction(innerParams.allowEscapeKey)) {
      e.preventDefault();
      dismissWith(DismissReason.esc);
    }
  };

  var handlePopupClick = function handlePopupClick(instance, domCache, dismissWith) {
    var innerParams = privateProps.innerParams.get(instance);

    if (innerParams.toast) {
      handleToastClick(instance, domCache, dismissWith);
    } else {
      // Ignore click events that had mousedown on the popup but mouseup on the container
      // This can happen when the user drags a slider
      handleModalMousedown(domCache); // Ignore click events that had mousedown on the container but mouseup on the popup

      handleContainerMousedown(domCache);
      handleModalClick(instance, domCache, dismissWith);
    }
  };

  var handleToastClick = function handleToastClick(instance, domCache, dismissWith) {
    // Closing toast by internal click
    domCache.popup.onclick = function () {
      var innerParams = privateProps.innerParams.get(instance);

      if (innerParams.showConfirmButton || innerParams.showDenyButton || innerParams.showCancelButton || innerParams.showCloseButton || innerParams.input) {
        return;
      }

      dismissWith(DismissReason.close);
    };
  };

  var ignoreOutsideClick = false;

  var handleModalMousedown = function handleModalMousedown(domCache) {
    domCache.popup.onmousedown = function () {
      domCache.container.onmouseup = function (e) {
        domCache.container.onmouseup = undefined; // We only check if the mouseup target is the container because usually it doesn't
        // have any other direct children aside of the popup

        if (e.target === domCache.container) {
          ignoreOutsideClick = true;
        }
      };
    };
  };

  var handleContainerMousedown = function handleContainerMousedown(domCache) {
    domCache.container.onmousedown = function () {
      domCache.popup.onmouseup = function (e) {
        domCache.popup.onmouseup = undefined; // We also need to check if the mouseup target is a child of the popup

        if (e.target === domCache.popup || domCache.popup.contains(e.target)) {
          ignoreOutsideClick = true;
        }
      };
    };
  };

  var handleModalClick = function handleModalClick(instance, domCache, dismissWith) {
    domCache.container.onclick = function (e) {
      var innerParams = privateProps.innerParams.get(instance);

      if (ignoreOutsideClick) {
        ignoreOutsideClick = false;
        return;
      }

      if (e.target === domCache.container && callIfFunction(innerParams.allowOutsideClick)) {
        dismissWith(DismissReason.backdrop);
      }
    };
  };

  function _main(userParams) {
    showWarningsForParams(userParams);

    if (globalState.currentInstance) {
      globalState.currentInstance._destroy();
    }

    globalState.currentInstance = this;
    var innerParams = prepareParams(userParams);
    setParameters(innerParams);
    Object.freeze(innerParams); // clear the previous timer

    if (globalState.timeout) {
      globalState.timeout.stop();
      delete globalState.timeout;
    } // clear the restore focus timeout


    clearTimeout(globalState.restoreFocusTimeout);
    var domCache = populateDomCache(this);
    render(this, innerParams);
    privateProps.innerParams.set(this, innerParams);
    return swalPromise(this, domCache, innerParams);
  }

  var prepareParams = function prepareParams(userParams) {
    var showClass = _extends({}, defaultParams.showClass, userParams.showClass);

    var hideClass = _extends({}, defaultParams.hideClass, userParams.hideClass);

    var params = _extends({}, defaultParams, userParams);

    params.showClass = showClass;
    params.hideClass = hideClass; // @deprecated

    if (userParams.animation === false) {
      params.showClass = {
        popup: 'swal2-noanimation',
        backdrop: 'swal2-noanimation'
      };
      params.hideClass = {};
    }

    return params;
  };

  var swalPromise = function swalPromise(instance, domCache, innerParams) {
    return new Promise(function (resolve) {
      // functions to handle all closings/dismissals
      var dismissWith = function dismissWith(dismiss) {
        instance.closePopup({
          isDismissed: true,
          dismiss: dismiss
        });
      };

      privateMethods.swalPromiseResolve.set(instance, resolve);

      domCache.confirmButton.onclick = function () {
        return handleConfirmButtonClick(instance, innerParams);
      };

      domCache.denyButton.onclick = function () {
        return handleDenyButtonClick(instance);
      };

      domCache.cancelButton.onclick = function () {
        return handleCancelButtonClick(instance, dismissWith);
      };

      domCache.closeButton.onclick = function () {
        return dismissWith(DismissReason.close);
      };

      handlePopupClick(instance, domCache, dismissWith);
      addKeydownHandler(instance, globalState, innerParams, dismissWith);

      if (innerParams.toast && (innerParams.input || innerParams.footer || innerParams.showCloseButton)) {
        addClass(document.body, swalClasses['toast-column']);
      } else {
        removeClass(document.body, swalClasses['toast-column']);
      }

      handleInputOptionsAndValue(instance, innerParams);
      openPopup(innerParams);
      setupTimer(globalState, innerParams, dismissWith);
      initFocus(domCache, innerParams); // Scroll container to top on open (#1247, #1946)

      setTimeout(function () {
        domCache.container.scrollTop = 0;
      });
    });
  };

  var populateDomCache = function populateDomCache(instance) {
    var domCache = {
      popup: getPopup(),
      container: getContainer(),
      content: getContent(),
      actions: getActions(),
      confirmButton: getConfirmButton(),
      denyButton: getDenyButton(),
      cancelButton: getCancelButton(),
      loader: getLoader(),
      closeButton: getCloseButton(),
      validationMessage: getValidationMessage(),
      progressSteps: getProgressSteps()
    };
    privateProps.domCache.set(instance, domCache);
    return domCache;
  };

  var setupTimer = function setupTimer(globalState$$1, innerParams, dismissWith) {
    var timerProgressBar = getTimerProgressBar();
    hide(timerProgressBar);

    if (innerParams.timer) {
      globalState$$1.timeout = new Timer(function () {
        dismissWith('timer');
        delete globalState$$1.timeout;
      }, innerParams.timer);

      if (innerParams.timerProgressBar) {
        show(timerProgressBar);
        setTimeout(function () {
          if (globalState$$1.timeout.running) {
            // timer can be already stopped at this point
            animateTimerProgressBar(innerParams.timer);
          }
        });
      }
    }
  };

  var initFocus = function initFocus(domCache, innerParams) {
    if (innerParams.toast) {
      return;
    }

    if (!callIfFunction(innerParams.allowEnterKey)) {
      return blurActiveElement();
    }

    if (!focusButton(domCache, innerParams)) {
      setFocus(innerParams, -1, 1);
    }
  };

  var focusButton = function focusButton(domCache, innerParams) {
    if (innerParams.focusDeny && isVisible(domCache.denyButton)) {
      domCache.denyButton.focus();
      return true;
    }

    if (innerParams.focusCancel && isVisible(domCache.cancelButton)) {
      domCache.cancelButton.focus();
      return true;
    }

    if (innerParams.focusConfirm && isVisible(domCache.confirmButton)) {
      domCache.confirmButton.focus();
      return true;
    }

    return false;
  };

  var blurActiveElement = function blurActiveElement() {
    if (document.activeElement && typeof document.activeElement.blur === 'function') {
      document.activeElement.blur();
    }
  };

  /**
   * Updates popup parameters.
   */

  function update(params) {
    var popup = getPopup();
    var innerParams = privateProps.innerParams.get(this);

    if (!popup || hasClass(popup, innerParams.hideClass.popup)) {
      return warn("You're trying to update the closed or closing popup, that won't work. Use the update() method in preConfirm parameter or show a new popup.");
    }

    var validUpdatableParams = {}; // assign valid params from `params` to `defaults`

    Object.keys(params).forEach(function (param) {
      if (Swal.isUpdatableParameter(param)) {
        validUpdatableParams[param] = params[param];
      } else {
        warn("Invalid parameter to update: \"".concat(param, "\". Updatable params are listed here: https://github.com/sweetalert2/sweetalert2/blob/master/src/utils/params.js\n\nIf you think this parameter should be updatable, request it here: https://github.com/sweetalert2/sweetalert2/issues/new?template=02_feature_request.md"));
      }
    });

    var updatedParams = _extends({}, innerParams, validUpdatableParams);

    render(this, updatedParams);
    privateProps.innerParams.set(this, updatedParams);
    Object.defineProperties(this, {
      params: {
        value: _extends({}, this.params, params),
        writable: false,
        enumerable: true
      }
    });
  }

  function _destroy() {
    var domCache = privateProps.domCache.get(this);
    var innerParams = privateProps.innerParams.get(this);

    if (!innerParams) {
      return; // This instance has already been destroyed
    } // Check if there is another Swal closing


    if (domCache.popup && globalState.swalCloseEventFinishedCallback) {
      globalState.swalCloseEventFinishedCallback();
      delete globalState.swalCloseEventFinishedCallback;
    } // Check if there is a swal disposal defer timer


    if (globalState.deferDisposalTimer) {
      clearTimeout(globalState.deferDisposalTimer);
      delete globalState.deferDisposalTimer;
    }

    runDidDestroy(innerParams);
    disposeSwal(this);
  }

  var runDidDestroy = function runDidDestroy(innerParams) {
    if (typeof innerParams.didDestroy === 'function') {
      innerParams.didDestroy();
    } else if (typeof innerParams.onDestroy === 'function') {
      innerParams.onDestroy(); // @deprecated
    }
  };

  var disposeSwal = function disposeSwal(instance) {
    // Unset this.params so GC will dispose it (#1569)
    delete instance.params; // Unset globalState props so GC will dispose globalState (#1569)

    delete globalState.keydownHandler;
    delete globalState.keydownTarget; // Unset WeakMaps so GC will be able to dispose them (#1569)

    unsetWeakMaps(privateProps);
    unsetWeakMaps(privateMethods);
  };

  var unsetWeakMaps = function unsetWeakMaps(obj) {
    for (var i in obj) {
      obj[i] = new WeakMap();
    }
  };



  var instanceMethods = /*#__PURE__*/Object.freeze({
    hideLoading: hideLoading,
    disableLoading: hideLoading,
    getInput: getInput$1,
    close: close,
    closePopup: close,
    closeModal: close,
    closeToast: close,
    enableButtons: enableButtons,
    disableButtons: disableButtons,
    enableInput: enableInput,
    disableInput: disableInput,
    showValidationMessage: showValidationMessage,
    resetValidationMessage: resetValidationMessage$1,
    getProgressSteps: getProgressSteps$1,
    _main: _main,
    update: update,
    _destroy: _destroy
  });

  var currentInstance;

  var SweetAlert = /*#__PURE__*/function () {
    function SweetAlert() {
      _classCallCheck(this, SweetAlert);

      // Prevent run in Node env
      if (typeof window === 'undefined') {
        return;
      } // Check for the existence of Promise


      if (typeof Promise === 'undefined') {
        error('This package requires a Promise library, please include a shim to enable it in this browser (See: https://github.com/sweetalert2/sweetalert2/wiki/Migration-from-SweetAlert-to-SweetAlert2#1-ie-support)');
      }

      currentInstance = this;

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      var outerParams = Object.freeze(this.constructor.argsToParams(args));
      Object.defineProperties(this, {
        params: {
          value: outerParams,
          writable: false,
          enumerable: true,
          configurable: true
        }
      });

      var promise = this._main(this.params);

      privateProps.promise.set(this, promise);
    } // `catch` cannot be the name of a module export, so we define our thenable methods here instead


    _createClass(SweetAlert, [{
      key: "then",
      value: function then(onFulfilled) {
        var promise = privateProps.promise.get(this);
        return promise.then(onFulfilled);
      }
    }, {
      key: "finally",
      value: function _finally(onFinally) {
        var promise = privateProps.promise.get(this);
        return promise["finally"](onFinally);
      }
    }]);

    return SweetAlert;
  }(); // Assign instance methods from src/instanceMethods/*.js to prototype


  _extends(SweetAlert.prototype, instanceMethods); // Assign static methods from src/staticMethods/*.js to constructor


  _extends(SweetAlert, staticMethods); // Proxy to instance methods to constructor, for now, for backwards compatibility


  Object.keys(instanceMethods).forEach(function (key) {
    SweetAlert[key] = function () {
      if (currentInstance) {
        var _currentInstance;

        return (_currentInstance = currentInstance)[key].apply(_currentInstance, arguments);
      }
    };
  });
  SweetAlert.DismissReason = DismissReason;
  SweetAlert.version = '10.3.3';

  var Swal = SweetAlert;
  Swal["default"] = Swal;

  return Swal;

}));
if (typeof this !== 'undefined' && this.Sweetalert2){  this.swal = this.sweetAlert = this.Swal = this.SweetAlert = this.Sweetalert2}

"undefined"!=typeof document&&function(e,t){var n=e.createElement("style");if(e.getElementsByTagName("head")[0].appendChild(n),n.styleSheet)n.styleSheet.disabled||(n.styleSheet.cssText=t);else try{n.innerHTML=t}catch(e){n.innerText=t}}(document,".swal2-popup.swal2-toast{flex-direction:row;align-items:center;width:auto;padding:.625em;overflow-y:hidden;background:#fff;box-shadow:0 0 .625em #d9d9d9}.swal2-popup.swal2-toast .swal2-header{flex-direction:row;padding:0}.swal2-popup.swal2-toast .swal2-title{flex-grow:1;justify-content:flex-start;margin:0 .6em;font-size:1em}.swal2-popup.swal2-toast .swal2-footer{margin:.5em 0 0;padding:.5em 0 0;font-size:.8em}.swal2-popup.swal2-toast .swal2-close{position:static;width:.8em;height:.8em;line-height:.8}.swal2-popup.swal2-toast .swal2-content{justify-content:flex-start;padding:0;font-size:1em}.swal2-popup.swal2-toast .swal2-icon{width:2em;min-width:2em;height:2em;margin:0}.swal2-popup.swal2-toast .swal2-icon .swal2-icon-content{display:flex;align-items:center;font-size:1.8em;font-weight:700}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){.swal2-popup.swal2-toast .swal2-icon .swal2-icon-content{font-size:.25em}}.swal2-popup.swal2-toast .swal2-icon.swal2-success .swal2-success-ring{width:2em;height:2em}.swal2-popup.swal2-toast .swal2-icon.swal2-error [class^=swal2-x-mark-line]{top:.875em;width:1.375em}.swal2-popup.swal2-toast .swal2-icon.swal2-error [class^=swal2-x-mark-line][class$=left]{left:.3125em}.swal2-popup.swal2-toast .swal2-icon.swal2-error [class^=swal2-x-mark-line][class$=right]{right:.3125em}.swal2-popup.swal2-toast .swal2-actions{flex-basis:auto!important;width:auto;height:auto;margin:0 .3125em;padding:0}.swal2-popup.swal2-toast .swal2-styled{margin:0 .3125em;padding:.3125em .625em;font-size:1em}.swal2-popup.swal2-toast .swal2-styled:focus{box-shadow:0 0 0 1px #fff,0 0 0 3px rgba(50,100,150,.4)}.swal2-popup.swal2-toast .swal2-success{border-color:#a5dc86}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-circular-line]{position:absolute;width:1.6em;height:3em;transform:rotate(45deg);border-radius:50%}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-circular-line][class$=left]{top:-.8em;left:-.5em;transform:rotate(-45deg);transform-origin:2em 2em;border-radius:4em 0 0 4em}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-circular-line][class$=right]{top:-.25em;left:.9375em;transform-origin:0 1.5em;border-radius:0 4em 4em 0}.swal2-popup.swal2-toast .swal2-success .swal2-success-ring{width:2em;height:2em}.swal2-popup.swal2-toast .swal2-success .swal2-success-fix{top:0;left:.4375em;width:.4375em;height:2.6875em}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-line]{height:.3125em}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-line][class$=tip]{top:1.125em;left:.1875em;width:.75em}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-line][class$=long]{top:.9375em;right:.1875em;width:1.375em}.swal2-popup.swal2-toast .swal2-success.swal2-icon-show .swal2-success-line-tip{-webkit-animation:swal2-toast-animate-success-line-tip .75s;animation:swal2-toast-animate-success-line-tip .75s}.swal2-popup.swal2-toast .swal2-success.swal2-icon-show .swal2-success-line-long{-webkit-animation:swal2-toast-animate-success-line-long .75s;animation:swal2-toast-animate-success-line-long .75s}.swal2-popup.swal2-toast.swal2-show{-webkit-animation:swal2-toast-show .5s;animation:swal2-toast-show .5s}.swal2-popup.swal2-toast.swal2-hide{-webkit-animation:swal2-toast-hide .1s forwards;animation:swal2-toast-hide .1s forwards}.swal2-container{display:flex;position:fixed;z-index:1060;top:0;right:0;bottom:0;left:0;flex-direction:row;align-items:center;justify-content:center;padding:.625em;overflow-x:hidden;transition:background-color .1s;-webkit-overflow-scrolling:touch}.swal2-container.swal2-backdrop-show,.swal2-container.swal2-noanimation{background:rgba(0,0,0,.4)}.swal2-container.swal2-backdrop-hide{background:0 0!important}.swal2-container.swal2-top{align-items:flex-start}.swal2-container.swal2-top-left,.swal2-container.swal2-top-start{align-items:flex-start;justify-content:flex-start}.swal2-container.swal2-top-end,.swal2-container.swal2-top-right{align-items:flex-start;justify-content:flex-end}.swal2-container.swal2-center{align-items:center}.swal2-container.swal2-center-left,.swal2-container.swal2-center-start{align-items:center;justify-content:flex-start}.swal2-container.swal2-center-end,.swal2-container.swal2-center-right{align-items:center;justify-content:flex-end}.swal2-container.swal2-bottom{align-items:flex-end}.swal2-container.swal2-bottom-left,.swal2-container.swal2-bottom-start{align-items:flex-end;justify-content:flex-start}.swal2-container.swal2-bottom-end,.swal2-container.swal2-bottom-right{align-items:flex-end;justify-content:flex-end}.swal2-container.swal2-bottom-end>:first-child,.swal2-container.swal2-bottom-left>:first-child,.swal2-container.swal2-bottom-right>:first-child,.swal2-container.swal2-bottom-start>:first-child,.swal2-container.swal2-bottom>:first-child{margin-top:auto}.swal2-container.swal2-grow-fullscreen>.swal2-modal{display:flex!important;flex:1;align-self:stretch;justify-content:center}.swal2-container.swal2-grow-row>.swal2-modal{display:flex!important;flex:1;align-content:center;justify-content:center}.swal2-container.swal2-grow-column{flex:1;flex-direction:column}.swal2-container.swal2-grow-column.swal2-bottom,.swal2-container.swal2-grow-column.swal2-center,.swal2-container.swal2-grow-column.swal2-top{align-items:center}.swal2-container.swal2-grow-column.swal2-bottom-left,.swal2-container.swal2-grow-column.swal2-bottom-start,.swal2-container.swal2-grow-column.swal2-center-left,.swal2-container.swal2-grow-column.swal2-center-start,.swal2-container.swal2-grow-column.swal2-top-left,.swal2-container.swal2-grow-column.swal2-top-start{align-items:flex-start}.swal2-container.swal2-grow-column.swal2-bottom-end,.swal2-container.swal2-grow-column.swal2-bottom-right,.swal2-container.swal2-grow-column.swal2-center-end,.swal2-container.swal2-grow-column.swal2-center-right,.swal2-container.swal2-grow-column.swal2-top-end,.swal2-container.swal2-grow-column.swal2-top-right{align-items:flex-end}.swal2-container.swal2-grow-column>.swal2-modal{display:flex!important;flex:1;align-content:center;justify-content:center}.swal2-container.swal2-no-transition{transition:none!important}.swal2-container:not(.swal2-top):not(.swal2-top-start):not(.swal2-top-end):not(.swal2-top-left):not(.swal2-top-right):not(.swal2-center-start):not(.swal2-center-end):not(.swal2-center-left):not(.swal2-center-right):not(.swal2-bottom):not(.swal2-bottom-start):not(.swal2-bottom-end):not(.swal2-bottom-left):not(.swal2-bottom-right):not(.swal2-grow-fullscreen)>.swal2-modal{margin:auto}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){.swal2-container .swal2-modal{margin:0!important}}.swal2-popup{display:none;position:relative;box-sizing:border-box;flex-direction:column;justify-content:center;width:32em;max-width:100%;padding:1.25em;border:none;border-radius:.3125em;background:#fff;font-family:inherit;font-size:1rem}.swal2-popup:focus{outline:0}.swal2-popup.swal2-loading{overflow-y:hidden}.swal2-header{display:flex;flex-direction:column;align-items:center;padding:0 1.8em}.swal2-title{position:relative;max-width:100%;margin:0 0 .4em;padding:0;color:#595959;font-size:1.875em;font-weight:600;text-align:center;text-transform:none;word-wrap:break-word}.swal2-actions{display:flex;z-index:1;box-sizing:border-box;flex-wrap:wrap;align-items:center;justify-content:center;width:100%;margin:1.25em auto 0;padding:0 1.6em}.swal2-actions:not(.swal2-loading) .swal2-styled[disabled]{opacity:.4}.swal2-actions:not(.swal2-loading) .swal2-styled:hover{background-image:linear-gradient(rgba(0,0,0,.1),rgba(0,0,0,.1))}.swal2-actions:not(.swal2-loading) .swal2-styled:active{background-image:linear-gradient(rgba(0,0,0,.2),rgba(0,0,0,.2))}.swal2-loader{display:none;align-items:center;justify-content:center;width:2.2em;height:2.2em;margin:0 1.875em;-webkit-animation:swal2-rotate-loading 1.5s linear 0s infinite normal;animation:swal2-rotate-loading 1.5s linear 0s infinite normal;border-width:.25em;border-style:solid;border-radius:100%;border-color:#3085d6 transparent #3085d6 transparent}.swal2-styled{margin:.3125em;padding:.625em 2em;box-shadow:none;font-weight:500}.swal2-styled:not([disabled]){cursor:pointer}.swal2-styled.swal2-confirm{border:0;border-radius:.25em;background:initial;background-color:#3085d6;color:#fff;font-size:1.0625em}.swal2-styled.swal2-deny{border:0;border-radius:.25em;background:initial;background-color:#dd6b55;color:#fff;font-size:1.0625em}.swal2-styled.swal2-cancel{border:0;border-radius:.25em;background:initial;background-color:#aaa;color:#fff;font-size:1.0625em}.swal2-styled:focus{outline:0;box-shadow:0 0 0 1px #fff,0 0 0 3px rgba(50,100,150,.4)}.swal2-styled::-moz-focus-inner{border:0}.swal2-footer{justify-content:center;margin:1.25em 0 0;padding:1em 0 0;border-top:1px solid #eee;color:#545454;font-size:1em}.swal2-timer-progress-bar-container{position:absolute;right:0;bottom:0;left:0;height:.25em;overflow:hidden;border-bottom-right-radius:.3125em;border-bottom-left-radius:.3125em}.swal2-timer-progress-bar{width:100%;height:.25em;background:rgba(0,0,0,.2)}.swal2-image{max-width:100%;margin:1.25em auto}.swal2-close{position:absolute;z-index:2;top:0;right:0;align-items:center;justify-content:center;width:1.2em;height:1.2em;padding:0;overflow:hidden;transition:color .1s ease-out;border:none;border-radius:0;background:0 0;color:#ccc;font-family:serif;font-size:2.5em;line-height:1.2;cursor:pointer}.swal2-close:hover{transform:none;background:0 0;color:#f27474}.swal2-close::-moz-focus-inner{border:0}.swal2-content{z-index:1;justify-content:center;margin:0;padding:0 1.6em;color:#545454;font-size:1.125em;font-weight:400;line-height:normal;text-align:center;word-wrap:break-word}.swal2-checkbox,.swal2-file,.swal2-input,.swal2-radio,.swal2-select,.swal2-textarea{margin:1em auto}.swal2-file,.swal2-input,.swal2-textarea{box-sizing:border-box;width:100%;transition:border-color .3s,box-shadow .3s;border:1px solid #d9d9d9;border-radius:.1875em;background:inherit;box-shadow:inset 0 1px 1px rgba(0,0,0,.06);color:inherit;font-size:1.125em}.swal2-file.swal2-inputerror,.swal2-input.swal2-inputerror,.swal2-textarea.swal2-inputerror{border-color:#f27474!important;box-shadow:0 0 2px #f27474!important}.swal2-file:focus,.swal2-input:focus,.swal2-textarea:focus{border:1px solid #b4dbed;outline:0;box-shadow:0 0 3px #c4e6f5}.swal2-file::-moz-placeholder,.swal2-input::-moz-placeholder,.swal2-textarea::-moz-placeholder{color:#ccc}.swal2-file:-ms-input-placeholder,.swal2-input:-ms-input-placeholder,.swal2-textarea:-ms-input-placeholder{color:#ccc}.swal2-file::-ms-input-placeholder,.swal2-input::-ms-input-placeholder,.swal2-textarea::-ms-input-placeholder{color:#ccc}.swal2-file::placeholder,.swal2-input::placeholder,.swal2-textarea::placeholder{color:#ccc}.swal2-range{margin:1em auto;background:#fff}.swal2-range input{width:80%}.swal2-range output{width:20%;color:inherit;font-weight:600;text-align:center}.swal2-range input,.swal2-range output{height:2.625em;padding:0;font-size:1.125em;line-height:2.625em}.swal2-input{height:2.625em;padding:0 .75em}.swal2-input[type=number]{max-width:10em}.swal2-file{background:inherit;font-size:1.125em}.swal2-textarea{height:6.75em;padding:.75em}.swal2-select{min-width:50%;max-width:100%;padding:.375em .625em;background:inherit;color:inherit;font-size:1.125em}.swal2-checkbox,.swal2-radio{align-items:center;justify-content:center;background:#fff;color:inherit}.swal2-checkbox label,.swal2-radio label{margin:0 .6em;font-size:1.125em}.swal2-checkbox input,.swal2-radio input{margin:0 .4em}.swal2-validation-message{display:none;align-items:center;justify-content:center;padding:.625em;overflow:hidden;background:#f0f0f0;color:#666;font-size:1em;font-weight:300}.swal2-validation-message::before{content:\"!\";display:inline-block;width:1.5em;min-width:1.5em;height:1.5em;margin:0 .625em;border-radius:50%;background-color:#f27474;color:#fff;font-weight:600;line-height:1.5em;text-align:center}.swal2-icon{position:relative;box-sizing:content-box;justify-content:center;width:5em;height:5em;margin:1.25em auto 1.875em;border:.25em solid transparent;border-radius:50%;font-family:inherit;line-height:5em;cursor:default;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.swal2-icon .swal2-icon-content{display:flex;align-items:center;font-size:3.75em}.swal2-icon.swal2-error{border-color:#f27474;color:#f27474}.swal2-icon.swal2-error .swal2-x-mark{position:relative;flex-grow:1}.swal2-icon.swal2-error [class^=swal2-x-mark-line]{display:block;position:absolute;top:2.3125em;width:2.9375em;height:.3125em;border-radius:.125em;background-color:#f27474}.swal2-icon.swal2-error [class^=swal2-x-mark-line][class$=left]{left:1.0625em;transform:rotate(45deg)}.swal2-icon.swal2-error [class^=swal2-x-mark-line][class$=right]{right:1em;transform:rotate(-45deg)}.swal2-icon.swal2-error.swal2-icon-show{-webkit-animation:swal2-animate-error-icon .5s;animation:swal2-animate-error-icon .5s}.swal2-icon.swal2-error.swal2-icon-show .swal2-x-mark{-webkit-animation:swal2-animate-error-x-mark .5s;animation:swal2-animate-error-x-mark .5s}.swal2-icon.swal2-warning{border-color:#facea8;color:#f8bb86}.swal2-icon.swal2-info{border-color:#9de0f6;color:#3fc3ee}.swal2-icon.swal2-question{border-color:#c9dae1;color:#87adbd}.swal2-icon.swal2-success{border-color:#a5dc86;color:#a5dc86}.swal2-icon.swal2-success [class^=swal2-success-circular-line]{position:absolute;width:3.75em;height:7.5em;transform:rotate(45deg);border-radius:50%}.swal2-icon.swal2-success [class^=swal2-success-circular-line][class$=left]{top:-.4375em;left:-2.0635em;transform:rotate(-45deg);transform-origin:3.75em 3.75em;border-radius:7.5em 0 0 7.5em}.swal2-icon.swal2-success [class^=swal2-success-circular-line][class$=right]{top:-.6875em;left:1.875em;transform:rotate(-45deg);transform-origin:0 3.75em;border-radius:0 7.5em 7.5em 0}.swal2-icon.swal2-success .swal2-success-ring{position:absolute;z-index:2;top:-.25em;left:-.25em;box-sizing:content-box;width:100%;height:100%;border:.25em solid rgba(165,220,134,.3);border-radius:50%}.swal2-icon.swal2-success .swal2-success-fix{position:absolute;z-index:1;top:.5em;left:1.625em;width:.4375em;height:5.625em;transform:rotate(-45deg)}.swal2-icon.swal2-success [class^=swal2-success-line]{display:block;position:absolute;z-index:2;height:.3125em;border-radius:.125em;background-color:#a5dc86}.swal2-icon.swal2-success [class^=swal2-success-line][class$=tip]{top:2.875em;left:.8125em;width:1.5625em;transform:rotate(45deg)}.swal2-icon.swal2-success [class^=swal2-success-line][class$=long]{top:2.375em;right:.5em;width:2.9375em;transform:rotate(-45deg)}.swal2-icon.swal2-success.swal2-icon-show .swal2-success-line-tip{-webkit-animation:swal2-animate-success-line-tip .75s;animation:swal2-animate-success-line-tip .75s}.swal2-icon.swal2-success.swal2-icon-show .swal2-success-line-long{-webkit-animation:swal2-animate-success-line-long .75s;animation:swal2-animate-success-line-long .75s}.swal2-icon.swal2-success.swal2-icon-show .swal2-success-circular-line-right{-webkit-animation:swal2-rotate-success-circular-line 4.25s ease-in;animation:swal2-rotate-success-circular-line 4.25s ease-in}.swal2-progress-steps{align-items:center;margin:0 0 1.25em;padding:0;background:inherit;font-weight:600}.swal2-progress-steps li{display:inline-block;position:relative}.swal2-progress-steps .swal2-progress-step{z-index:20;width:2em;height:2em;border-radius:2em;background:#3085d6;color:#fff;line-height:2em;text-align:center}.swal2-progress-steps .swal2-progress-step.swal2-active-progress-step{background:#3085d6}.swal2-progress-steps .swal2-progress-step.swal2-active-progress-step~.swal2-progress-step{background:#add8e6;color:#fff}.swal2-progress-steps .swal2-progress-step.swal2-active-progress-step~.swal2-progress-step-line{background:#add8e6}.swal2-progress-steps .swal2-progress-step-line{z-index:10;width:2.5em;height:.4em;margin:0 -1px;background:#3085d6}[class^=swal2]{-webkit-tap-highlight-color:transparent}.swal2-show{-webkit-animation:swal2-show .3s;animation:swal2-show .3s}.swal2-hide{-webkit-animation:swal2-hide .15s forwards;animation:swal2-hide .15s forwards}.swal2-noanimation{transition:none}.swal2-scrollbar-measure{position:absolute;top:-9999px;width:50px;height:50px;overflow:scroll}.swal2-rtl .swal2-close{right:auto;left:0}.swal2-rtl .swal2-timer-progress-bar{right:0;left:auto}@supports (-ms-accelerator:true){.swal2-range input{width:100%!important}.swal2-range output{display:none}}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){.swal2-range input{width:100%!important}.swal2-range output{display:none}}@-moz-document url-prefix(){.swal2-close:focus{outline:2px solid rgba(50,100,150,.4)}}@-webkit-keyframes swal2-toast-show{0%{transform:translateY(-.625em) rotateZ(2deg)}33%{transform:translateY(0) rotateZ(-2deg)}66%{transform:translateY(.3125em) rotateZ(2deg)}100%{transform:translateY(0) rotateZ(0)}}@keyframes swal2-toast-show{0%{transform:translateY(-.625em) rotateZ(2deg)}33%{transform:translateY(0) rotateZ(-2deg)}66%{transform:translateY(.3125em) rotateZ(2deg)}100%{transform:translateY(0) rotateZ(0)}}@-webkit-keyframes swal2-toast-hide{100%{transform:rotateZ(1deg);opacity:0}}@keyframes swal2-toast-hide{100%{transform:rotateZ(1deg);opacity:0}}@-webkit-keyframes swal2-toast-animate-success-line-tip{0%{top:.5625em;left:.0625em;width:0}54%{top:.125em;left:.125em;width:0}70%{top:.625em;left:-.25em;width:1.625em}84%{top:1.0625em;left:.75em;width:.5em}100%{top:1.125em;left:.1875em;width:.75em}}@keyframes swal2-toast-animate-success-line-tip{0%{top:.5625em;left:.0625em;width:0}54%{top:.125em;left:.125em;width:0}70%{top:.625em;left:-.25em;width:1.625em}84%{top:1.0625em;left:.75em;width:.5em}100%{top:1.125em;left:.1875em;width:.75em}}@-webkit-keyframes swal2-toast-animate-success-line-long{0%{top:1.625em;right:1.375em;width:0}65%{top:1.25em;right:.9375em;width:0}84%{top:.9375em;right:0;width:1.125em}100%{top:.9375em;right:.1875em;width:1.375em}}@keyframes swal2-toast-animate-success-line-long{0%{top:1.625em;right:1.375em;width:0}65%{top:1.25em;right:.9375em;width:0}84%{top:.9375em;right:0;width:1.125em}100%{top:.9375em;right:.1875em;width:1.375em}}@-webkit-keyframes swal2-show{0%{transform:scale(.7)}45%{transform:scale(1.05)}80%{transform:scale(.95)}100%{transform:scale(1)}}@keyframes swal2-show{0%{transform:scale(.7)}45%{transform:scale(1.05)}80%{transform:scale(.95)}100%{transform:scale(1)}}@-webkit-keyframes swal2-hide{0%{transform:scale(1);opacity:1}100%{transform:scale(.5);opacity:0}}@keyframes swal2-hide{0%{transform:scale(1);opacity:1}100%{transform:scale(.5);opacity:0}}@-webkit-keyframes swal2-animate-success-line-tip{0%{top:1.1875em;left:.0625em;width:0}54%{top:1.0625em;left:.125em;width:0}70%{top:2.1875em;left:-.375em;width:3.125em}84%{top:3em;left:1.3125em;width:1.0625em}100%{top:2.8125em;left:.8125em;width:1.5625em}}@keyframes swal2-animate-success-line-tip{0%{top:1.1875em;left:.0625em;width:0}54%{top:1.0625em;left:.125em;width:0}70%{top:2.1875em;left:-.375em;width:3.125em}84%{top:3em;left:1.3125em;width:1.0625em}100%{top:2.8125em;left:.8125em;width:1.5625em}}@-webkit-keyframes swal2-animate-success-line-long{0%{top:3.375em;right:2.875em;width:0}65%{top:3.375em;right:2.875em;width:0}84%{top:2.1875em;right:0;width:3.4375em}100%{top:2.375em;right:.5em;width:2.9375em}}@keyframes swal2-animate-success-line-long{0%{top:3.375em;right:2.875em;width:0}65%{top:3.375em;right:2.875em;width:0}84%{top:2.1875em;right:0;width:3.4375em}100%{top:2.375em;right:.5em;width:2.9375em}}@-webkit-keyframes swal2-rotate-success-circular-line{0%{transform:rotate(-45deg)}5%{transform:rotate(-45deg)}12%{transform:rotate(-405deg)}100%{transform:rotate(-405deg)}}@keyframes swal2-rotate-success-circular-line{0%{transform:rotate(-45deg)}5%{transform:rotate(-45deg)}12%{transform:rotate(-405deg)}100%{transform:rotate(-405deg)}}@-webkit-keyframes swal2-animate-error-x-mark{0%{margin-top:1.625em;transform:scale(.4);opacity:0}50%{margin-top:1.625em;transform:scale(.4);opacity:0}80%{margin-top:-.375em;transform:scale(1.15)}100%{margin-top:0;transform:scale(1);opacity:1}}@keyframes swal2-animate-error-x-mark{0%{margin-top:1.625em;transform:scale(.4);opacity:0}50%{margin-top:1.625em;transform:scale(.4);opacity:0}80%{margin-top:-.375em;transform:scale(1.15)}100%{margin-top:0;transform:scale(1);opacity:1}}@-webkit-keyframes swal2-animate-error-icon{0%{transform:rotateX(100deg);opacity:0}100%{transform:rotateX(0);opacity:1}}@keyframes swal2-animate-error-icon{0%{transform:rotateX(100deg);opacity:0}100%{transform:rotateX(0);opacity:1}}@-webkit-keyframes swal2-rotate-loading{0%{transform:rotate(0)}100%{transform:rotate(360deg)}}@keyframes swal2-rotate-loading{0%{transform:rotate(0)}100%{transform:rotate(360deg)}}body.swal2-shown:not(.swal2-no-backdrop):not(.swal2-toast-shown){overflow:hidden}body.swal2-height-auto{height:auto!important}body.swal2-no-backdrop .swal2-container{top:auto;right:auto;bottom:auto;left:auto;max-width:calc(100% - .625em * 2);background-color:transparent!important}body.swal2-no-backdrop .swal2-container>.swal2-modal{box-shadow:0 0 10px rgba(0,0,0,.4)}body.swal2-no-backdrop .swal2-container.swal2-top{top:0;left:50%;transform:translateX(-50%)}body.swal2-no-backdrop .swal2-container.swal2-top-left,body.swal2-no-backdrop .swal2-container.swal2-top-start{top:0;left:0}body.swal2-no-backdrop .swal2-container.swal2-top-end,body.swal2-no-backdrop .swal2-container.swal2-top-right{top:0;right:0}body.swal2-no-backdrop .swal2-container.swal2-center{top:50%;left:50%;transform:translate(-50%,-50%)}body.swal2-no-backdrop .swal2-container.swal2-center-left,body.swal2-no-backdrop .swal2-container.swal2-center-start{top:50%;left:0;transform:translateY(-50%)}body.swal2-no-backdrop .swal2-container.swal2-center-end,body.swal2-no-backdrop .swal2-container.swal2-center-right{top:50%;right:0;transform:translateY(-50%)}body.swal2-no-backdrop .swal2-container.swal2-bottom{bottom:0;left:50%;transform:translateX(-50%)}body.swal2-no-backdrop .swal2-container.swal2-bottom-left,body.swal2-no-backdrop .swal2-container.swal2-bottom-start{bottom:0;left:0}body.swal2-no-backdrop .swal2-container.swal2-bottom-end,body.swal2-no-backdrop .swal2-container.swal2-bottom-right{right:0;bottom:0}@media print{body.swal2-shown:not(.swal2-no-backdrop):not(.swal2-toast-shown){overflow-y:scroll!important}body.swal2-shown:not(.swal2-no-backdrop):not(.swal2-toast-shown)>[aria-hidden=true]{display:none}body.swal2-shown:not(.swal2-no-backdrop):not(.swal2-toast-shown) .swal2-container{position:static!important}}body.swal2-toast-shown .swal2-container{background-color:transparent}body.swal2-toast-shown .swal2-container.swal2-top{top:0;right:auto;bottom:auto;left:50%;transform:translateX(-50%)}body.swal2-toast-shown .swal2-container.swal2-top-end,body.swal2-toast-shown .swal2-container.swal2-top-right{top:0;right:0;bottom:auto;left:auto}body.swal2-toast-shown .swal2-container.swal2-top-left,body.swal2-toast-shown .swal2-container.swal2-top-start{top:0;right:auto;bottom:auto;left:0}body.swal2-toast-shown .swal2-container.swal2-center-left,body.swal2-toast-shown .swal2-container.swal2-center-start{top:50%;right:auto;bottom:auto;left:0;transform:translateY(-50%)}body.swal2-toast-shown .swal2-container.swal2-center{top:50%;right:auto;bottom:auto;left:50%;transform:translate(-50%,-50%)}body.swal2-toast-shown .swal2-container.swal2-center-end,body.swal2-toast-shown .swal2-container.swal2-center-right{top:50%;right:0;bottom:auto;left:auto;transform:translateY(-50%)}body.swal2-toast-shown .swal2-container.swal2-bottom-left,body.swal2-toast-shown .swal2-container.swal2-bottom-start{top:auto;right:auto;bottom:0;left:0}body.swal2-toast-shown .swal2-container.swal2-bottom{top:auto;right:auto;bottom:0;left:50%;transform:translateX(-50%)}body.swal2-toast-shown .swal2-container.swal2-bottom-end,body.swal2-toast-shown .swal2-container.swal2-bottom-right{top:auto;right:0;bottom:0;left:auto}body.swal2-toast-column .swal2-toast{flex-direction:column;align-items:stretch}body.swal2-toast-column .swal2-toast .swal2-actions{flex:1;align-self:stretch;height:2.2em;margin-top:.3125em}body.swal2-toast-column .swal2-toast .swal2-loading{justify-content:center}body.swal2-toast-column .swal2-toast .swal2-input{height:2em;margin:.3125em auto;font-size:1em}body.swal2-toast-column .swal2-toast .swal2-validation-message{font-size:1em}");
},{}]},{},[1]);
